
UART_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c7e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000c7e  00000cf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000010bc  00000000  00000000  00000cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bf7  00000000  00000000  00001db8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 1a 06 	call	0xc34	; 0xc34 <main>
  7a:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_VoidInit>:

/* HAL */

/* Defination Of Function  */
Void DIO_VoidInit(Void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62

        /* intial direction */

        DDRA__UINT8_REG = CONC(DIO__UINT8_PA7_INITIAL_DIRECTION, DIO__UINT8_PA6_INITIAL_DIRECTION, DIO__UINT8_PA5_INITIAL_DIRECTION, DIO__UINT8_PA4_INITIAL_DIRECTION, DIO__UINT8_PA3_INITIAL_DIRECTION, DIO__UINT8_PA2_INITIAL_DIRECTION, DIO__UINT8_PA1_INITIAL_DIRECTION, DIO__UINT8_PA0_INITIAL_DIRECTION);
  8a:	ea e3       	ldi	r30, 0x3A	; 58
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	80 83       	st	Z, r24
        DDRB__UINT8_REG = CONC(DIO__UINT8_PB7_INITIAL_DIRECTION, DIO__UINT8_PB6_INITIAL_DIRECTION, DIO__UINT8_PB5_INITIAL_DIRECTION, DIO__UINT8_PB4_INITIAL_DIRECTION, DIO__UINT8_PB3_INITIAL_DIRECTION, DIO__UINT8_PB2_INITIAL_DIRECTION, DIO__UINT8_PB1_INITIAL_DIRECTION, DIO__UINT8_PB0_INITIAL_DIRECTION);
  92:	e7 e3       	ldi	r30, 0x37	; 55
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	10 82       	st	Z, r1
        DDRC__UINT8_REG = CONC(DIO__UINT8_PC7_INITIAL_DIRECTION, DIO__UINT8_PC6_INITIAL_DIRECTION, DIO__UINT8_PC5_INITIAL_DIRECTION, DIO__UINT8_PC4_INITIAL_DIRECTION, DIO__UINT8_PC3_INITIAL_DIRECTION, DIO__UINT8_PC2_INITIAL_DIRECTION, DIO__UINT8_PC1_INITIAL_DIRECTION, DIO__UINT8_PC0_INITIAL_DIRECTION);
  98:	e4 e3       	ldi	r30, 0x34	; 52
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	10 82       	st	Z, r1
        DDRD__UINT8_REG = CONC(DIO__UINT8_PD7_INITIAL_DIRECTION, DIO__UINT8_PD6_INITIAL_DIRECTION, DIO__UINT8_PD5_INITIAL_DIRECTION, DIO__UINT8_PD4_INITIAL_DIRECTION, DIO__UINT8_PD3_INITIAL_DIRECTION, DIO__UINT8_PD2_INITIAL_DIRECTION, DIO__UINT8_PD1_INITIAL_DIRECTION, DIO__UINT8_PD0_INITIAL_DIRECTION);
  9e:	e1 e3       	ldi	r30, 0x31	; 49
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	80 83       	st	Z, r24

        /* initial Value */

        PORTA__UINT8_REG = CONC(DIO__UINT8_PA7_INITIAL_VALUE, DIO__UINT8_PA6_INITIAL_VALUE, DIO__UINT8_PA5_INITIAL_VALUE, DIO__UINT8_PA4_INITIAL_VALUE, DIO__UINT8_PA3_INITIAL_VALUE, DIO__UINT8_PA2_INITIAL_VALUE, DIO__UINT8_PA1_INITIAL_VALUE, DIO__UINT8_PA0_INITIAL_VALUE);
  a6:	eb e3       	ldi	r30, 0x3B	; 59
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
        PORTB__UINT8_REG = CONC(DIO__UINT8_PB7_INITIAL_VALUE, DIO__UINT8_PB6_INITIAL_VALUE, DIO__UINT8_PB5_INITIAL_VALUE, DIO__UINT8_PB4_INITIAL_VALUE, DIO__UINT8_PB3_INITIAL_VALUE, DIO__UINT8_PB2_INITIAL_VALUE, DIO__UINT8_PB1_INITIAL_VALUE, DIO__UINT8_PB0_INITIAL_VALUE);
  ac:	e8 e3       	ldi	r30, 0x38	; 56
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1
        PORTC__UINT8_REG = CONC(DIO__UINT8_PC7_INITIAL_VALUE, DIO__UINT8_PC6_INITIAL_VALUE, DIO__UINT8_PC5_INITIAL_VALUE, DIO__UINT8_PC4_INITIAL_VALUE, DIO__UINT8_PC3_INITIAL_VALUE, DIO__UINT8_PC2_INITIAL_VALUE, DIO__UINT8_PC1_INITIAL_VALUE, DIO__UINT8_PC0_INITIAL_VALUE);
  b2:	e5 e3       	ldi	r30, 0x35	; 53
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
        PORTD__UINT8_REG = CONC(DIO__UINT8_PD7_INITIAL_VALUE, DIO__UINT8_PD6_INITIAL_VALUE, DIO__UINT8_PD5_INITIAL_VALUE, DIO__UINT8_PD4_INITIAL_VALUE, DIO__UINT8_PD3_INITIAL_VALUE, DIO__UINT8_PD2_INITIAL_VALUE, DIO__UINT8_PD1_INITIAL_VALUE, DIO__UINT8_PD0_INITIAL_VALUE);
  b8:	e2 e3       	ldi	r30, 0x32	; 50
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	10 82       	st	Z, r1
}
  be:	cf 91       	pop	r28
  c0:	df 91       	pop	r29
  c2:	08 95       	ret

000000c4 <DIO__CheckStatusSetPinDirection>:

CheckStatus DIO__CheckStatusSetPinDirection(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 Copy__uint8PinDirection)
{
  c4:	df 93       	push	r29
  c6:	cf 93       	push	r28
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	2f 97       	sbiw	r28, 0x0f	; 15
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	8a 83       	std	Y+2, r24	; 0x02
  da:	6b 83       	std	Y+3, r22	; 0x03
  dc:	4c 83       	std	Y+4, r20	; 0x04
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
  de:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pin  Direction
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && ((Copy__uint8PinDirection == DIO__UINT8_OUTPUT) || (Copy__uint8PinDirection == DIO__UINT8_INPUT)))
  e0:	8a 81       	ldd	r24, Y+2	; 0x02
  e2:	84 30       	cpi	r24, 0x04	; 4
  e4:	08 f0       	brcs	.+2      	; 0xe8 <DIO__CheckStatusSetPinDirection+0x24>
  e6:	0e c1       	rjmp	.+540    	; 0x304 <DIO__CheckStatusSetPinDirection+0x240>
  e8:	8b 81       	ldd	r24, Y+3	; 0x03
  ea:	88 30       	cpi	r24, 0x08	; 8
  ec:	08 f0       	brcs	.+2      	; 0xf0 <DIO__CheckStatusSetPinDirection+0x2c>
  ee:	0a c1       	rjmp	.+532    	; 0x304 <DIO__CheckStatusSetPinDirection+0x240>
  f0:	8c 81       	ldd	r24, Y+4	; 0x04
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	21 f0       	breq	.+8      	; 0xfe <DIO__CheckStatusSetPinDirection+0x3a>
  f6:	8c 81       	ldd	r24, Y+4	; 0x04
  f8:	88 23       	and	r24, r24
  fa:	09 f0       	breq	.+2      	; 0xfe <DIO__CheckStatusSetPinDirection+0x3a>
  fc:	03 c1       	rjmp	.+518    	; 0x304 <DIO__CheckStatusSetPinDirection+0x240>
        {
                switch (Copy__uint8PortId)
  fe:	8a 81       	ldd	r24, Y+2	; 0x02
 100:	28 2f       	mov	r18, r24
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	3f 87       	std	Y+15, r19	; 0x0f
 106:	2e 87       	std	Y+14, r18	; 0x0e
 108:	8e 85       	ldd	r24, Y+14	; 0x0e
 10a:	9f 85       	ldd	r25, Y+15	; 0x0f
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	91 05       	cpc	r25, r1
 110:	09 f4       	brne	.+2      	; 0x114 <DIO__CheckStatusSetPinDirection+0x50>
 112:	4f c0       	rjmp	.+158    	; 0x1b2 <DIO__CheckStatusSetPinDirection+0xee>
 114:	2e 85       	ldd	r18, Y+14	; 0x0e
 116:	3f 85       	ldd	r19, Y+15	; 0x0f
 118:	22 30       	cpi	r18, 0x02	; 2
 11a:	31 05       	cpc	r19, r1
 11c:	2c f4       	brge	.+10     	; 0x128 <DIO__CheckStatusSetPinDirection+0x64>
 11e:	8e 85       	ldd	r24, Y+14	; 0x0e
 120:	9f 85       	ldd	r25, Y+15	; 0x0f
 122:	00 97       	sbiw	r24, 0x00	; 0
 124:	71 f0       	breq	.+28     	; 0x142 <DIO__CheckStatusSetPinDirection+0x7e>
 126:	eb c0       	rjmp	.+470    	; 0x2fe <DIO__CheckStatusSetPinDirection+0x23a>
 128:	2e 85       	ldd	r18, Y+14	; 0x0e
 12a:	3f 85       	ldd	r19, Y+15	; 0x0f
 12c:	22 30       	cpi	r18, 0x02	; 2
 12e:	31 05       	cpc	r19, r1
 130:	09 f4       	brne	.+2      	; 0x134 <DIO__CheckStatusSetPinDirection+0x70>
 132:	77 c0       	rjmp	.+238    	; 0x222 <DIO__CheckStatusSetPinDirection+0x15e>
 134:	8e 85       	ldd	r24, Y+14	; 0x0e
 136:	9f 85       	ldd	r25, Y+15	; 0x0f
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	91 05       	cpc	r25, r1
 13c:	09 f4       	brne	.+2      	; 0x140 <DIO__CheckStatusSetPinDirection+0x7c>
 13e:	a9 c0       	rjmp	.+338    	; 0x292 <DIO__CheckStatusSetPinDirection+0x1ce>
 140:	de c0       	rjmp	.+444    	; 0x2fe <DIO__CheckStatusSetPinDirection+0x23a>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PinDirection)
 142:	8c 81       	ldd	r24, Y+4	; 0x04
 144:	28 2f       	mov	r18, r24
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	3d 87       	std	Y+13, r19	; 0x0d
 14a:	2c 87       	std	Y+12, r18	; 0x0c
 14c:	8c 85       	ldd	r24, Y+12	; 0x0c
 14e:	9d 85       	ldd	r25, Y+13	; 0x0d
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	d1 f0       	breq	.+52     	; 0x188 <DIO__CheckStatusSetPinDirection+0xc4>
 154:	2c 85       	ldd	r18, Y+12	; 0x0c
 156:	3d 85       	ldd	r19, Y+13	; 0x0d
 158:	21 30       	cpi	r18, 0x01	; 1
 15a:	31 05       	cpc	r19, r1
 15c:	09 f0       	breq	.+2      	; 0x160 <DIO__CheckStatusSetPinDirection+0x9c>
 15e:	cf c0       	rjmp	.+414    	; 0x2fe <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRA__UINT8_REG, Copy__uint8PinId);
 160:	aa e3       	ldi	r26, 0x3A	; 58
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	ea e3       	ldi	r30, 0x3A	; 58
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	48 2f       	mov	r20, r24
 16c:	8b 81       	ldd	r24, Y+3	; 0x03
 16e:	28 2f       	mov	r18, r24
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 2e       	mov	r0, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO__CheckStatusSetPinDirection+0xba>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	0a 94       	dec	r0
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO__CheckStatusSetPinDirection+0xb6>
 182:	84 2b       	or	r24, r20
 184:	8c 93       	st	X, r24
 186:	bb c0       	rjmp	.+374    	; 0x2fe <DIO__CheckStatusSetPinDirection+0x23a>
                                break;

                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRA__UINT8_REG, Copy__uint8PinId);
 188:	aa e3       	ldi	r26, 0x3A	; 58
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	ea e3       	ldi	r30, 0x3A	; 58
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	48 2f       	mov	r20, r24
 194:	8b 81       	ldd	r24, Y+3	; 0x03
 196:	28 2f       	mov	r18, r24
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 2e       	mov	r0, r18
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO__CheckStatusSetPinDirection+0xe2>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO__CheckStatusSetPinDirection+0xde>
 1aa:	80 95       	com	r24
 1ac:	84 23       	and	r24, r20
 1ae:	8c 93       	st	X, r24
 1b0:	a6 c0       	rjmp	.+332    	; 0x2fe <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PinDirection)
 1b2:	8c 81       	ldd	r24, Y+4	; 0x04
 1b4:	28 2f       	mov	r18, r24
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	3b 87       	std	Y+11, r19	; 0x0b
 1ba:	2a 87       	std	Y+10, r18	; 0x0a
 1bc:	8a 85       	ldd	r24, Y+10	; 0x0a
 1be:	9b 85       	ldd	r25, Y+11	; 0x0b
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	d1 f0       	breq	.+52     	; 0x1f8 <DIO__CheckStatusSetPinDirection+0x134>
 1c4:	2a 85       	ldd	r18, Y+10	; 0x0a
 1c6:	3b 85       	ldd	r19, Y+11	; 0x0b
 1c8:	21 30       	cpi	r18, 0x01	; 1
 1ca:	31 05       	cpc	r19, r1
 1cc:	09 f0       	breq	.+2      	; 0x1d0 <DIO__CheckStatusSetPinDirection+0x10c>
 1ce:	97 c0       	rjmp	.+302    	; 0x2fe <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRB__UINT8_REG, Copy__uint8PinId);
 1d0:	a7 e3       	ldi	r26, 0x37	; 55
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	e7 e3       	ldi	r30, 0x37	; 55
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	48 2f       	mov	r20, r24
 1dc:	8b 81       	ldd	r24, Y+3	; 0x03
 1de:	28 2f       	mov	r18, r24
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 2e       	mov	r0, r18
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO__CheckStatusSetPinDirection+0x12a>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO__CheckStatusSetPinDirection+0x126>
 1f2:	84 2b       	or	r24, r20
 1f4:	8c 93       	st	X, r24
 1f6:	83 c0       	rjmp	.+262    	; 0x2fe <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRB__UINT8_REG, Copy__uint8PinId);
 1f8:	a7 e3       	ldi	r26, 0x37	; 55
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	e7 e3       	ldi	r30, 0x37	; 55
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	48 2f       	mov	r20, r24
 204:	8b 81       	ldd	r24, Y+3	; 0x03
 206:	28 2f       	mov	r18, r24
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 2e       	mov	r0, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO__CheckStatusSetPinDirection+0x152>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO__CheckStatusSetPinDirection+0x14e>
 21a:	80 95       	com	r24
 21c:	84 23       	and	r24, r20
 21e:	8c 93       	st	X, r24
 220:	6e c0       	rjmp	.+220    	; 0x2fe <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PinDirection)
 222:	8c 81       	ldd	r24, Y+4	; 0x04
 224:	28 2f       	mov	r18, r24
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	39 87       	std	Y+9, r19	; 0x09
 22a:	28 87       	std	Y+8, r18	; 0x08
 22c:	88 85       	ldd	r24, Y+8	; 0x08
 22e:	99 85       	ldd	r25, Y+9	; 0x09
 230:	00 97       	sbiw	r24, 0x00	; 0
 232:	d1 f0       	breq	.+52     	; 0x268 <DIO__CheckStatusSetPinDirection+0x1a4>
 234:	28 85       	ldd	r18, Y+8	; 0x08
 236:	39 85       	ldd	r19, Y+9	; 0x09
 238:	21 30       	cpi	r18, 0x01	; 1
 23a:	31 05       	cpc	r19, r1
 23c:	09 f0       	breq	.+2      	; 0x240 <DIO__CheckStatusSetPinDirection+0x17c>
 23e:	5f c0       	rjmp	.+190    	; 0x2fe <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRC__UINT8_REG, Copy__uint8PinId);
 240:	a4 e3       	ldi	r26, 0x34	; 52
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	e4 e3       	ldi	r30, 0x34	; 52
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	48 2f       	mov	r20, r24
 24c:	8b 81       	ldd	r24, Y+3	; 0x03
 24e:	28 2f       	mov	r18, r24
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 2e       	mov	r0, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO__CheckStatusSetPinDirection+0x19a>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO__CheckStatusSetPinDirection+0x196>
 262:	84 2b       	or	r24, r20
 264:	8c 93       	st	X, r24
 266:	4b c0       	rjmp	.+150    	; 0x2fe <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRC__UINT8_REG, Copy__uint8PinId);
 268:	a4 e3       	ldi	r26, 0x34	; 52
 26a:	b0 e0       	ldi	r27, 0x00	; 0
 26c:	e4 e3       	ldi	r30, 0x34	; 52
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	48 2f       	mov	r20, r24
 274:	8b 81       	ldd	r24, Y+3	; 0x03
 276:	28 2f       	mov	r18, r24
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 2e       	mov	r0, r18
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO__CheckStatusSetPinDirection+0x1c2>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	0a 94       	dec	r0
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO__CheckStatusSetPinDirection+0x1be>
 28a:	80 95       	com	r24
 28c:	84 23       	and	r24, r20
 28e:	8c 93       	st	X, r24
 290:	36 c0       	rjmp	.+108    	; 0x2fe <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PinDirection)
 292:	8c 81       	ldd	r24, Y+4	; 0x04
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	3f 83       	std	Y+7, r19	; 0x07
 29a:	2e 83       	std	Y+6, r18	; 0x06
 29c:	8e 81       	ldd	r24, Y+6	; 0x06
 29e:	9f 81       	ldd	r25, Y+7	; 0x07
 2a0:	00 97       	sbiw	r24, 0x00	; 0
 2a2:	c9 f0       	breq	.+50     	; 0x2d6 <DIO__CheckStatusSetPinDirection+0x212>
 2a4:	2e 81       	ldd	r18, Y+6	; 0x06
 2a6:	3f 81       	ldd	r19, Y+7	; 0x07
 2a8:	21 30       	cpi	r18, 0x01	; 1
 2aa:	31 05       	cpc	r19, r1
 2ac:	41 f5       	brne	.+80     	; 0x2fe <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRD__UINT8_REG, Copy__uint8PinId);
 2ae:	a1 e3       	ldi	r26, 0x31	; 49
 2b0:	b0 e0       	ldi	r27, 0x00	; 0
 2b2:	e1 e3       	ldi	r30, 0x31	; 49
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	48 2f       	mov	r20, r24
 2ba:	8b 81       	ldd	r24, Y+3	; 0x03
 2bc:	28 2f       	mov	r18, r24
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 2e       	mov	r0, r18
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO__CheckStatusSetPinDirection+0x208>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	0a 94       	dec	r0
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO__CheckStatusSetPinDirection+0x204>
 2d0:	84 2b       	or	r24, r20
 2d2:	8c 93       	st	X, r24
 2d4:	14 c0       	rjmp	.+40     	; 0x2fe <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRD__UINT8_REG, Copy__uint8PinId);
 2d6:	a1 e3       	ldi	r26, 0x31	; 49
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	e1 e3       	ldi	r30, 0x31	; 49
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	48 2f       	mov	r20, r24
 2e2:	8b 81       	ldd	r24, Y+3	; 0x03
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 2e       	mov	r0, r18
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO__CheckStatusSetPinDirection+0x230>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO__CheckStatusSetPinDirection+0x22c>
 2f8:	80 95       	com	r24
 2fa:	84 23       	and	r24, r20
 2fc:	8c 93       	st	X, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
 2fe:	39 81       	ldd	r19, Y+1	; 0x01
 300:	3d 83       	std	Y+5, r19	; 0x05
 302:	04 c0       	rjmp	.+8      	; 0x30c <DIO__CheckStatusSetPinDirection+0x248>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	8d 83       	std	Y+5, r24	; 0x05
 30c:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
 30e:	2f 96       	adiw	r28, 0x0f	; 15
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	f8 94       	cli
 314:	de bf       	out	0x3e, r29	; 62
 316:	0f be       	out	0x3f, r0	; 63
 318:	cd bf       	out	0x3d, r28	; 61
 31a:	cf 91       	pop	r28
 31c:	df 91       	pop	r29
 31e:	08 95       	ret

00000320 <DIO__CheckStatusSetPinValue>:

CheckStatus DIO__CheckStatusSetPinValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 Copy__uint8PinValue)
{
 320:	df 93       	push	r29
 322:	cf 93       	push	r28
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
 328:	2f 97       	sbiw	r28, 0x0f	; 15
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
 334:	8a 83       	std	Y+2, r24	; 0x02
 336:	6b 83       	std	Y+3, r22	; 0x03
 338:	4c 83       	std	Y+4, r20	; 0x04
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
 33a:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pin  Value 
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && ((Copy__uint8PinValue == DIO__UINT8_HIGH) || (Copy__uint8PinValue == DIO__UINT8_LOW)))
 33c:	8a 81       	ldd	r24, Y+2	; 0x02
 33e:	84 30       	cpi	r24, 0x04	; 4
 340:	08 f0       	brcs	.+2      	; 0x344 <DIO__CheckStatusSetPinValue+0x24>
 342:	0e c1       	rjmp	.+540    	; 0x560 <DIO__CheckStatusSetPinValue+0x240>
 344:	8b 81       	ldd	r24, Y+3	; 0x03
 346:	88 30       	cpi	r24, 0x08	; 8
 348:	08 f0       	brcs	.+2      	; 0x34c <DIO__CheckStatusSetPinValue+0x2c>
 34a:	0a c1       	rjmp	.+532    	; 0x560 <DIO__CheckStatusSetPinValue+0x240>
 34c:	8c 81       	ldd	r24, Y+4	; 0x04
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	21 f0       	breq	.+8      	; 0x35a <DIO__CheckStatusSetPinValue+0x3a>
 352:	8c 81       	ldd	r24, Y+4	; 0x04
 354:	88 23       	and	r24, r24
 356:	09 f0       	breq	.+2      	; 0x35a <DIO__CheckStatusSetPinValue+0x3a>
 358:	03 c1       	rjmp	.+518    	; 0x560 <DIO__CheckStatusSetPinValue+0x240>
        {
                switch (Copy__uint8PortId)
 35a:	8a 81       	ldd	r24, Y+2	; 0x02
 35c:	28 2f       	mov	r18, r24
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	3f 87       	std	Y+15, r19	; 0x0f
 362:	2e 87       	std	Y+14, r18	; 0x0e
 364:	8e 85       	ldd	r24, Y+14	; 0x0e
 366:	9f 85       	ldd	r25, Y+15	; 0x0f
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	91 05       	cpc	r25, r1
 36c:	09 f4       	brne	.+2      	; 0x370 <DIO__CheckStatusSetPinValue+0x50>
 36e:	4f c0       	rjmp	.+158    	; 0x40e <DIO__CheckStatusSetPinValue+0xee>
 370:	2e 85       	ldd	r18, Y+14	; 0x0e
 372:	3f 85       	ldd	r19, Y+15	; 0x0f
 374:	22 30       	cpi	r18, 0x02	; 2
 376:	31 05       	cpc	r19, r1
 378:	2c f4       	brge	.+10     	; 0x384 <DIO__CheckStatusSetPinValue+0x64>
 37a:	8e 85       	ldd	r24, Y+14	; 0x0e
 37c:	9f 85       	ldd	r25, Y+15	; 0x0f
 37e:	00 97       	sbiw	r24, 0x00	; 0
 380:	71 f0       	breq	.+28     	; 0x39e <DIO__CheckStatusSetPinValue+0x7e>
 382:	eb c0       	rjmp	.+470    	; 0x55a <DIO__CheckStatusSetPinValue+0x23a>
 384:	2e 85       	ldd	r18, Y+14	; 0x0e
 386:	3f 85       	ldd	r19, Y+15	; 0x0f
 388:	22 30       	cpi	r18, 0x02	; 2
 38a:	31 05       	cpc	r19, r1
 38c:	09 f4       	brne	.+2      	; 0x390 <DIO__CheckStatusSetPinValue+0x70>
 38e:	77 c0       	rjmp	.+238    	; 0x47e <DIO__CheckStatusSetPinValue+0x15e>
 390:	8e 85       	ldd	r24, Y+14	; 0x0e
 392:	9f 85       	ldd	r25, Y+15	; 0x0f
 394:	83 30       	cpi	r24, 0x03	; 3
 396:	91 05       	cpc	r25, r1
 398:	09 f4       	brne	.+2      	; 0x39c <DIO__CheckStatusSetPinValue+0x7c>
 39a:	a9 c0       	rjmp	.+338    	; 0x4ee <DIO__CheckStatusSetPinValue+0x1ce>
 39c:	de c0       	rjmp	.+444    	; 0x55a <DIO__CheckStatusSetPinValue+0x23a>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PinValue)
 39e:	8c 81       	ldd	r24, Y+4	; 0x04
 3a0:	28 2f       	mov	r18, r24
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	3d 87       	std	Y+13, r19	; 0x0d
 3a6:	2c 87       	std	Y+12, r18	; 0x0c
 3a8:	8c 85       	ldd	r24, Y+12	; 0x0c
 3aa:	9d 85       	ldd	r25, Y+13	; 0x0d
 3ac:	00 97       	sbiw	r24, 0x00	; 0
 3ae:	d1 f0       	breq	.+52     	; 0x3e4 <DIO__CheckStatusSetPinValue+0xc4>
 3b0:	2c 85       	ldd	r18, Y+12	; 0x0c
 3b2:	3d 85       	ldd	r19, Y+13	; 0x0d
 3b4:	21 30       	cpi	r18, 0x01	; 1
 3b6:	31 05       	cpc	r19, r1
 3b8:	09 f0       	breq	.+2      	; 0x3bc <DIO__CheckStatusSetPinValue+0x9c>
 3ba:	cf c0       	rjmp	.+414    	; 0x55a <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTA__UINT8_REG, Copy__uint8PinId);
 3bc:	ab e3       	ldi	r26, 0x3B	; 59
 3be:	b0 e0       	ldi	r27, 0x00	; 0
 3c0:	eb e3       	ldi	r30, 0x3B	; 59
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	48 2f       	mov	r20, r24
 3c8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ca:	28 2f       	mov	r18, r24
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	02 2e       	mov	r0, r18
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO__CheckStatusSetPinValue+0xba>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	0a 94       	dec	r0
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO__CheckStatusSetPinValue+0xb6>
 3de:	84 2b       	or	r24, r20
 3e0:	8c 93       	st	X, r24
 3e2:	bb c0       	rjmp	.+374    	; 0x55a <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTA__UINT8_REG, Copy__uint8PinId);
 3e4:	ab e3       	ldi	r26, 0x3B	; 59
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	eb e3       	ldi	r30, 0x3B	; 59
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	48 2f       	mov	r20, r24
 3f0:	8b 81       	ldd	r24, Y+3	; 0x03
 3f2:	28 2f       	mov	r18, r24
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 2e       	mov	r0, r18
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <DIO__CheckStatusSetPinValue+0xe2>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO__CheckStatusSetPinValue+0xde>
 406:	80 95       	com	r24
 408:	84 23       	and	r24, r20
 40a:	8c 93       	st	X, r24
 40c:	a6 c0       	rjmp	.+332    	; 0x55a <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PinValue)
 40e:	8c 81       	ldd	r24, Y+4	; 0x04
 410:	28 2f       	mov	r18, r24
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	3b 87       	std	Y+11, r19	; 0x0b
 416:	2a 87       	std	Y+10, r18	; 0x0a
 418:	8a 85       	ldd	r24, Y+10	; 0x0a
 41a:	9b 85       	ldd	r25, Y+11	; 0x0b
 41c:	00 97       	sbiw	r24, 0x00	; 0
 41e:	d1 f0       	breq	.+52     	; 0x454 <DIO__CheckStatusSetPinValue+0x134>
 420:	2a 85       	ldd	r18, Y+10	; 0x0a
 422:	3b 85       	ldd	r19, Y+11	; 0x0b
 424:	21 30       	cpi	r18, 0x01	; 1
 426:	31 05       	cpc	r19, r1
 428:	09 f0       	breq	.+2      	; 0x42c <DIO__CheckStatusSetPinValue+0x10c>
 42a:	97 c0       	rjmp	.+302    	; 0x55a <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTB__UINT8_REG, Copy__uint8PinId);
 42c:	a8 e3       	ldi	r26, 0x38	; 56
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	e8 e3       	ldi	r30, 0x38	; 56
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	48 2f       	mov	r20, r24
 438:	8b 81       	ldd	r24, Y+3	; 0x03
 43a:	28 2f       	mov	r18, r24
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 2e       	mov	r0, r18
 444:	02 c0       	rjmp	.+4      	; 0x44a <DIO__CheckStatusSetPinValue+0x12a>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	0a 94       	dec	r0
 44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO__CheckStatusSetPinValue+0x126>
 44e:	84 2b       	or	r24, r20
 450:	8c 93       	st	X, r24
 452:	83 c0       	rjmp	.+262    	; 0x55a <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTB__UINT8_REG, Copy__uint8PinId);
 454:	a8 e3       	ldi	r26, 0x38	; 56
 456:	b0 e0       	ldi	r27, 0x00	; 0
 458:	e8 e3       	ldi	r30, 0x38	; 56
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	80 81       	ld	r24, Z
 45e:	48 2f       	mov	r20, r24
 460:	8b 81       	ldd	r24, Y+3	; 0x03
 462:	28 2f       	mov	r18, r24
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	02 2e       	mov	r0, r18
 46c:	02 c0       	rjmp	.+4      	; 0x472 <DIO__CheckStatusSetPinValue+0x152>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	0a 94       	dec	r0
 474:	e2 f7       	brpl	.-8      	; 0x46e <DIO__CheckStatusSetPinValue+0x14e>
 476:	80 95       	com	r24
 478:	84 23       	and	r24, r20
 47a:	8c 93       	st	X, r24
 47c:	6e c0       	rjmp	.+220    	; 0x55a <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PinValue)
 47e:	8c 81       	ldd	r24, Y+4	; 0x04
 480:	28 2f       	mov	r18, r24
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	39 87       	std	Y+9, r19	; 0x09
 486:	28 87       	std	Y+8, r18	; 0x08
 488:	88 85       	ldd	r24, Y+8	; 0x08
 48a:	99 85       	ldd	r25, Y+9	; 0x09
 48c:	00 97       	sbiw	r24, 0x00	; 0
 48e:	d1 f0       	breq	.+52     	; 0x4c4 <DIO__CheckStatusSetPinValue+0x1a4>
 490:	28 85       	ldd	r18, Y+8	; 0x08
 492:	39 85       	ldd	r19, Y+9	; 0x09
 494:	21 30       	cpi	r18, 0x01	; 1
 496:	31 05       	cpc	r19, r1
 498:	09 f0       	breq	.+2      	; 0x49c <DIO__CheckStatusSetPinValue+0x17c>
 49a:	5f c0       	rjmp	.+190    	; 0x55a <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTC__UINT8_REG, Copy__uint8PinId);
 49c:	a5 e3       	ldi	r26, 0x35	; 53
 49e:	b0 e0       	ldi	r27, 0x00	; 0
 4a0:	e5 e3       	ldi	r30, 0x35	; 53
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	80 81       	ld	r24, Z
 4a6:	48 2f       	mov	r20, r24
 4a8:	8b 81       	ldd	r24, Y+3	; 0x03
 4aa:	28 2f       	mov	r18, r24
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 2e       	mov	r0, r18
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <DIO__CheckStatusSetPinValue+0x19a>
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	0a 94       	dec	r0
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <DIO__CheckStatusSetPinValue+0x196>
 4be:	84 2b       	or	r24, r20
 4c0:	8c 93       	st	X, r24
 4c2:	4b c0       	rjmp	.+150    	; 0x55a <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTC__UINT8_REG, Copy__uint8PinId);
 4c4:	a5 e3       	ldi	r26, 0x35	; 53
 4c6:	b0 e0       	ldi	r27, 0x00	; 0
 4c8:	e5 e3       	ldi	r30, 0x35	; 53
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	80 81       	ld	r24, Z
 4ce:	48 2f       	mov	r20, r24
 4d0:	8b 81       	ldd	r24, Y+3	; 0x03
 4d2:	28 2f       	mov	r18, r24
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 2e       	mov	r0, r18
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO__CheckStatusSetPinValue+0x1c2>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	0a 94       	dec	r0
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO__CheckStatusSetPinValue+0x1be>
 4e6:	80 95       	com	r24
 4e8:	84 23       	and	r24, r20
 4ea:	8c 93       	st	X, r24
 4ec:	36 c0       	rjmp	.+108    	; 0x55a <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PinValue)
 4ee:	8c 81       	ldd	r24, Y+4	; 0x04
 4f0:	28 2f       	mov	r18, r24
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	3f 83       	std	Y+7, r19	; 0x07
 4f6:	2e 83       	std	Y+6, r18	; 0x06
 4f8:	8e 81       	ldd	r24, Y+6	; 0x06
 4fa:	9f 81       	ldd	r25, Y+7	; 0x07
 4fc:	00 97       	sbiw	r24, 0x00	; 0
 4fe:	c9 f0       	breq	.+50     	; 0x532 <DIO__CheckStatusSetPinValue+0x212>
 500:	2e 81       	ldd	r18, Y+6	; 0x06
 502:	3f 81       	ldd	r19, Y+7	; 0x07
 504:	21 30       	cpi	r18, 0x01	; 1
 506:	31 05       	cpc	r19, r1
 508:	41 f5       	brne	.+80     	; 0x55a <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTD__UINT8_REG, Copy__uint8PinId);
 50a:	a2 e3       	ldi	r26, 0x32	; 50
 50c:	b0 e0       	ldi	r27, 0x00	; 0
 50e:	e2 e3       	ldi	r30, 0x32	; 50
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	48 2f       	mov	r20, r24
 516:	8b 81       	ldd	r24, Y+3	; 0x03
 518:	28 2f       	mov	r18, r24
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 2e       	mov	r0, r18
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO__CheckStatusSetPinValue+0x208>
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	0a 94       	dec	r0
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO__CheckStatusSetPinValue+0x204>
 52c:	84 2b       	or	r24, r20
 52e:	8c 93       	st	X, r24
 530:	14 c0       	rjmp	.+40     	; 0x55a <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTD__UINT8_REG, Copy__uint8PinId);
 532:	a2 e3       	ldi	r26, 0x32	; 50
 534:	b0 e0       	ldi	r27, 0x00	; 0
 536:	e2 e3       	ldi	r30, 0x32	; 50
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	80 81       	ld	r24, Z
 53c:	48 2f       	mov	r20, r24
 53e:	8b 81       	ldd	r24, Y+3	; 0x03
 540:	28 2f       	mov	r18, r24
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	02 2e       	mov	r0, r18
 54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO__CheckStatusSetPinValue+0x230>
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	0a 94       	dec	r0
 552:	e2 f7       	brpl	.-8      	; 0x54c <DIO__CheckStatusSetPinValue+0x22c>
 554:	80 95       	com	r24
 556:	84 23       	and	r24, r20
 558:	8c 93       	st	X, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
 55a:	39 81       	ldd	r19, Y+1	; 0x01
 55c:	3d 83       	std	Y+5, r19	; 0x05
 55e:	04 c0       	rjmp	.+8      	; 0x568 <DIO__CheckStatusSetPinValue+0x248>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	8d 83       	std	Y+5, r24	; 0x05
 568:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
 56a:	2f 96       	adiw	r28, 0x0f	; 15
 56c:	0f b6       	in	r0, 0x3f	; 63
 56e:	f8 94       	cli
 570:	de bf       	out	0x3e, r29	; 62
 572:	0f be       	out	0x3f, r0	; 63
 574:	cd bf       	out	0x3d, r28	; 61
 576:	cf 91       	pop	r28
 578:	df 91       	pop	r29
 57a:	08 95       	ret

0000057c <DIO__CheckStatusGetPinValue>:

CheckStatus DIO__CheckStatusGetPinValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 *Copy_p_uint8ReturnPinValue)
{
 57c:	df 93       	push	r29
 57e:	cf 93       	push	r28
 580:	cd b7       	in	r28, 0x3d	; 61
 582:	de b7       	in	r29, 0x3e	; 62
 584:	28 97       	sbiw	r28, 0x08	; 8
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	de bf       	out	0x3e, r29	; 62
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	cd bf       	out	0x3d, r28	; 61
 590:	8a 83       	std	Y+2, r24	; 0x02
 592:	6b 83       	std	Y+3, r22	; 0x03
 594:	5d 83       	std	Y+5, r21	; 0x05
 596:	4c 83       	std	Y+4, r20	; 0x04

        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
 598:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pointer != NULL
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && (Copy_p_uint8ReturnPinValue != NULL))
 59a:	8a 81       	ldd	r24, Y+2	; 0x02
 59c:	84 30       	cpi	r24, 0x04	; 4
 59e:	08 f0       	brcs	.+2      	; 0x5a2 <DIO__CheckStatusGetPinValue+0x26>
 5a0:	ec c0       	rjmp	.+472    	; 0x77a <DIO__CheckStatusGetPinValue+0x1fe>
 5a2:	8b 81       	ldd	r24, Y+3	; 0x03
 5a4:	88 30       	cpi	r24, 0x08	; 8
 5a6:	08 f0       	brcs	.+2      	; 0x5aa <DIO__CheckStatusGetPinValue+0x2e>
 5a8:	e8 c0       	rjmp	.+464    	; 0x77a <DIO__CheckStatusGetPinValue+0x1fe>
 5aa:	8c 81       	ldd	r24, Y+4	; 0x04
 5ac:	9d 81       	ldd	r25, Y+5	; 0x05
 5ae:	00 97       	sbiw	r24, 0x00	; 0
 5b0:	09 f4       	brne	.+2      	; 0x5b4 <DIO__CheckStatusGetPinValue+0x38>
 5b2:	e3 c0       	rjmp	.+454    	; 0x77a <DIO__CheckStatusGetPinValue+0x1fe>
        {
                switch (Copy__uint8PortId)
 5b4:	8a 81       	ldd	r24, Y+2	; 0x02
 5b6:	28 2f       	mov	r18, r24
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	38 87       	std	Y+8, r19	; 0x08
 5bc:	2f 83       	std	Y+7, r18	; 0x07
 5be:	4f 81       	ldd	r20, Y+7	; 0x07
 5c0:	58 85       	ldd	r21, Y+8	; 0x08
 5c2:	41 30       	cpi	r20, 0x01	; 1
 5c4:	51 05       	cpc	r21, r1
 5c6:	09 f4       	brne	.+2      	; 0x5ca <DIO__CheckStatusGetPinValue+0x4e>
 5c8:	48 c0       	rjmp	.+144    	; 0x65a <DIO__CheckStatusGetPinValue+0xde>
 5ca:	8f 81       	ldd	r24, Y+7	; 0x07
 5cc:	98 85       	ldd	r25, Y+8	; 0x08
 5ce:	82 30       	cpi	r24, 0x02	; 2
 5d0:	91 05       	cpc	r25, r1
 5d2:	34 f4       	brge	.+12     	; 0x5e0 <DIO__CheckStatusGetPinValue+0x64>
 5d4:	2f 81       	ldd	r18, Y+7	; 0x07
 5d6:	38 85       	ldd	r19, Y+8	; 0x08
 5d8:	21 15       	cp	r18, r1
 5da:	31 05       	cpc	r19, r1
 5dc:	71 f0       	breq	.+28     	; 0x5fa <DIO__CheckStatusGetPinValue+0x7e>
 5de:	ca c0       	rjmp	.+404    	; 0x774 <DIO__CheckStatusGetPinValue+0x1f8>
 5e0:	4f 81       	ldd	r20, Y+7	; 0x07
 5e2:	58 85       	ldd	r21, Y+8	; 0x08
 5e4:	42 30       	cpi	r20, 0x02	; 2
 5e6:	51 05       	cpc	r21, r1
 5e8:	09 f4       	brne	.+2      	; 0x5ec <DIO__CheckStatusGetPinValue+0x70>
 5ea:	67 c0       	rjmp	.+206    	; 0x6ba <DIO__CheckStatusGetPinValue+0x13e>
 5ec:	8f 81       	ldd	r24, Y+7	; 0x07
 5ee:	98 85       	ldd	r25, Y+8	; 0x08
 5f0:	83 30       	cpi	r24, 0x03	; 3
 5f2:	91 05       	cpc	r25, r1
 5f4:	09 f4       	brne	.+2      	; 0x5f8 <DIO__CheckStatusGetPinValue+0x7c>
 5f6:	90 c0       	rjmp	.+288    	; 0x718 <DIO__CheckStatusGetPinValue+0x19c>
 5f8:	bd c0       	rjmp	.+378    	; 0x774 <DIO__CheckStatusGetPinValue+0x1f8>
                {
                case DIO__UINT8_PORTA:
                        if (GET_BIT(PINA__UINT8_REG, Copy__uint8PinId) == 0)
 5fa:	e9 e3       	ldi	r30, 0x39	; 57
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	80 81       	ld	r24, Z
 600:	28 2f       	mov	r18, r24
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	8b 81       	ldd	r24, Y+3	; 0x03
 606:	88 2f       	mov	r24, r24
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	a9 01       	movw	r20, r18
 60c:	02 c0       	rjmp	.+4      	; 0x612 <DIO__CheckStatusGetPinValue+0x96>
 60e:	55 95       	asr	r21
 610:	47 95       	ror	r20
 612:	8a 95       	dec	r24
 614:	e2 f7       	brpl	.-8      	; 0x60e <DIO__CheckStatusGetPinValue+0x92>
 616:	ca 01       	movw	r24, r20
 618:	81 70       	andi	r24, 0x01	; 1
 61a:	90 70       	andi	r25, 0x00	; 0
 61c:	00 97       	sbiw	r24, 0x00	; 0
 61e:	21 f4       	brne	.+8      	; 0x628 <DIO__CheckStatusGetPinValue+0xac>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
 620:	ec 81       	ldd	r30, Y+4	; 0x04
 622:	fd 81       	ldd	r31, Y+5	; 0x05
 624:	10 82       	st	Z, r1
 626:	a6 c0       	rjmp	.+332    	; 0x774 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINA__UINT8_REG, Copy__uint8PinId) != 0)
 628:	e9 e3       	ldi	r30, 0x39	; 57
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	80 81       	ld	r24, Z
 62e:	28 2f       	mov	r18, r24
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	8b 81       	ldd	r24, Y+3	; 0x03
 634:	88 2f       	mov	r24, r24
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	a9 01       	movw	r20, r18
 63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO__CheckStatusGetPinValue+0xc4>
 63c:	55 95       	asr	r21
 63e:	47 95       	ror	r20
 640:	8a 95       	dec	r24
 642:	e2 f7       	brpl	.-8      	; 0x63c <DIO__CheckStatusGetPinValue+0xc0>
 644:	ca 01       	movw	r24, r20
 646:	81 70       	andi	r24, 0x01	; 1
 648:	90 70       	andi	r25, 0x00	; 0
 64a:	88 23       	and	r24, r24
 64c:	09 f4       	brne	.+2      	; 0x650 <DIO__CheckStatusGetPinValue+0xd4>
 64e:	92 c0       	rjmp	.+292    	; 0x774 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
 650:	ec 81       	ldd	r30, Y+4	; 0x04
 652:	fd 81       	ldd	r31, Y+5	; 0x05
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	80 83       	st	Z, r24
 658:	8d c0       	rjmp	.+282    	; 0x774 <DIO__CheckStatusGetPinValue+0x1f8>
                                /* DO NOTHING */
                        }

                        break;
                case DIO__UINT8_PORTB:
                        if (GET_BIT(PINB__UINT8_REG, Copy__uint8PinId) == 0)
 65a:	e6 e3       	ldi	r30, 0x36	; 54
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	80 81       	ld	r24, Z
 660:	28 2f       	mov	r18, r24
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	8b 81       	ldd	r24, Y+3	; 0x03
 666:	88 2f       	mov	r24, r24
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	a9 01       	movw	r20, r18
 66c:	02 c0       	rjmp	.+4      	; 0x672 <DIO__CheckStatusGetPinValue+0xf6>
 66e:	55 95       	asr	r21
 670:	47 95       	ror	r20
 672:	8a 95       	dec	r24
 674:	e2 f7       	brpl	.-8      	; 0x66e <DIO__CheckStatusGetPinValue+0xf2>
 676:	ca 01       	movw	r24, r20
 678:	81 70       	andi	r24, 0x01	; 1
 67a:	90 70       	andi	r25, 0x00	; 0
 67c:	00 97       	sbiw	r24, 0x00	; 0
 67e:	21 f4       	brne	.+8      	; 0x688 <DIO__CheckStatusGetPinValue+0x10c>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
 680:	ec 81       	ldd	r30, Y+4	; 0x04
 682:	fd 81       	ldd	r31, Y+5	; 0x05
 684:	10 82       	st	Z, r1
 686:	76 c0       	rjmp	.+236    	; 0x774 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINB__UINT8_REG, Copy__uint8PinId) != 0)
 688:	e6 e3       	ldi	r30, 0x36	; 54
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	80 81       	ld	r24, Z
 68e:	28 2f       	mov	r18, r24
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	8b 81       	ldd	r24, Y+3	; 0x03
 694:	88 2f       	mov	r24, r24
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	a9 01       	movw	r20, r18
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO__CheckStatusGetPinValue+0x124>
 69c:	55 95       	asr	r21
 69e:	47 95       	ror	r20
 6a0:	8a 95       	dec	r24
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO__CheckStatusGetPinValue+0x120>
 6a4:	ca 01       	movw	r24, r20
 6a6:	81 70       	andi	r24, 0x01	; 1
 6a8:	90 70       	andi	r25, 0x00	; 0
 6aa:	88 23       	and	r24, r24
 6ac:	09 f4       	brne	.+2      	; 0x6b0 <DIO__CheckStatusGetPinValue+0x134>
 6ae:	62 c0       	rjmp	.+196    	; 0x774 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
 6b0:	ec 81       	ldd	r30, Y+4	; 0x04
 6b2:	fd 81       	ldd	r31, Y+5	; 0x05
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	80 83       	st	Z, r24
 6b8:	5d c0       	rjmp	.+186    	; 0x774 <DIO__CheckStatusGetPinValue+0x1f8>

                        break;

                case DIO__UINT8_PORTC:

                        if (GET_BIT(PINC__UINT8_REG, Copy__uint8PinId) == 0)
 6ba:	e3 e3       	ldi	r30, 0x33	; 51
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	28 2f       	mov	r18, r24
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	8b 81       	ldd	r24, Y+3	; 0x03
 6c6:	88 2f       	mov	r24, r24
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	a9 01       	movw	r20, r18
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO__CheckStatusGetPinValue+0x156>
 6ce:	55 95       	asr	r21
 6d0:	47 95       	ror	r20
 6d2:	8a 95       	dec	r24
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO__CheckStatusGetPinValue+0x152>
 6d6:	ca 01       	movw	r24, r20
 6d8:	81 70       	andi	r24, 0x01	; 1
 6da:	90 70       	andi	r25, 0x00	; 0
 6dc:	00 97       	sbiw	r24, 0x00	; 0
 6de:	21 f4       	brne	.+8      	; 0x6e8 <DIO__CheckStatusGetPinValue+0x16c>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
 6e0:	ec 81       	ldd	r30, Y+4	; 0x04
 6e2:	fd 81       	ldd	r31, Y+5	; 0x05
 6e4:	10 82       	st	Z, r1
 6e6:	46 c0       	rjmp	.+140    	; 0x774 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINC__UINT8_REG, Copy__uint8PinId) != 0)
 6e8:	e3 e3       	ldi	r30, 0x33	; 51
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	28 2f       	mov	r18, r24
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	8b 81       	ldd	r24, Y+3	; 0x03
 6f4:	88 2f       	mov	r24, r24
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	a9 01       	movw	r20, r18
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <DIO__CheckStatusGetPinValue+0x184>
 6fc:	55 95       	asr	r21
 6fe:	47 95       	ror	r20
 700:	8a 95       	dec	r24
 702:	e2 f7       	brpl	.-8      	; 0x6fc <DIO__CheckStatusGetPinValue+0x180>
 704:	ca 01       	movw	r24, r20
 706:	81 70       	andi	r24, 0x01	; 1
 708:	90 70       	andi	r25, 0x00	; 0
 70a:	88 23       	and	r24, r24
 70c:	99 f1       	breq	.+102    	; 0x774 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
 70e:	ec 81       	ldd	r30, Y+4	; 0x04
 710:	fd 81       	ldd	r31, Y+5	; 0x05
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	80 83       	st	Z, r24
 716:	2e c0       	rjmp	.+92     	; 0x774 <DIO__CheckStatusGetPinValue+0x1f8>
                                /* DO NOTHING */
                        }

                        break;
                case DIO__UINT8_PORTD:
                        if (GET_BIT(PIND__UINT8_REG, Copy__uint8PinId) == 0)
 718:	e0 e3       	ldi	r30, 0x30	; 48
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	80 81       	ld	r24, Z
 71e:	28 2f       	mov	r18, r24
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	8b 81       	ldd	r24, Y+3	; 0x03
 724:	88 2f       	mov	r24, r24
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	a9 01       	movw	r20, r18
 72a:	02 c0       	rjmp	.+4      	; 0x730 <DIO__CheckStatusGetPinValue+0x1b4>
 72c:	55 95       	asr	r21
 72e:	47 95       	ror	r20
 730:	8a 95       	dec	r24
 732:	e2 f7       	brpl	.-8      	; 0x72c <DIO__CheckStatusGetPinValue+0x1b0>
 734:	ca 01       	movw	r24, r20
 736:	81 70       	andi	r24, 0x01	; 1
 738:	90 70       	andi	r25, 0x00	; 0
 73a:	00 97       	sbiw	r24, 0x00	; 0
 73c:	21 f4       	brne	.+8      	; 0x746 <DIO__CheckStatusGetPinValue+0x1ca>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
 73e:	ec 81       	ldd	r30, Y+4	; 0x04
 740:	fd 81       	ldd	r31, Y+5	; 0x05
 742:	10 82       	st	Z, r1
 744:	17 c0       	rjmp	.+46     	; 0x774 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PIND__UINT8_REG, Copy__uint8PinId) != 0)
 746:	e0 e3       	ldi	r30, 0x30	; 48
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	80 81       	ld	r24, Z
 74c:	28 2f       	mov	r18, r24
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	8b 81       	ldd	r24, Y+3	; 0x03
 752:	88 2f       	mov	r24, r24
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	a9 01       	movw	r20, r18
 758:	02 c0       	rjmp	.+4      	; 0x75e <DIO__CheckStatusGetPinValue+0x1e2>
 75a:	55 95       	asr	r21
 75c:	47 95       	ror	r20
 75e:	8a 95       	dec	r24
 760:	e2 f7       	brpl	.-8      	; 0x75a <DIO__CheckStatusGetPinValue+0x1de>
 762:	ca 01       	movw	r24, r20
 764:	81 70       	andi	r24, 0x01	; 1
 766:	90 70       	andi	r25, 0x00	; 0
 768:	88 23       	and	r24, r24
 76a:	21 f0       	breq	.+8      	; 0x774 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
 76c:	ec 81       	ldd	r30, Y+4	; 0x04
 76e:	fd 81       	ldd	r31, Y+5	; 0x05
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
 774:	59 81       	ldd	r21, Y+1	; 0x01
 776:	5e 83       	std	Y+6, r21	; 0x06
 778:	04 c0       	rjmp	.+8      	; 0x782 <DIO__CheckStatusGetPinValue+0x206>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
 77e:	89 81       	ldd	r24, Y+1	; 0x01
 780:	8e 83       	std	Y+6, r24	; 0x06
 782:	8e 81       	ldd	r24, Y+6	; 0x06
        }
}
 784:	28 96       	adiw	r28, 0x08	; 8
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	f8 94       	cli
 78a:	de bf       	out	0x3e, r29	; 62
 78c:	0f be       	out	0x3f, r0	; 63
 78e:	cd bf       	out	0x3d, r28	; 61
 790:	cf 91       	pop	r28
 792:	df 91       	pop	r29
 794:	08 95       	ret

00000796 <DIO__CheckStatusSetPortDirection>:

CheckStatus DIO__CheckStatusSetPortDirection(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PortDirection)
{
 796:	df 93       	push	r29
 798:	cf 93       	push	r28
 79a:	cd b7       	in	r28, 0x3d	; 61
 79c:	de b7       	in	r29, 0x3e	; 62
 79e:	2e 97       	sbiw	r28, 0x0e	; 14
 7a0:	0f b6       	in	r0, 0x3f	; 63
 7a2:	f8 94       	cli
 7a4:	de bf       	out	0x3e, r29	; 62
 7a6:	0f be       	out	0x3f, r0	; 63
 7a8:	cd bf       	out	0x3d, r28	; 61
 7aa:	8a 83       	std	Y+2, r24	; 0x02
 7ac:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
 7ae:	19 82       	std	Y+1, r1	; 0x01
        /* 
        Check 1-Valid Port Id
              2-Valid PORT diraction 
        */

        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && ((Copy__uint8PortDirection == DIO__UINT8_OUTPUT) || (Copy__uint8PortDirection == DIO__UINT8_INPUT)))
 7b0:	8a 81       	ldd	r24, Y+2	; 0x02
 7b2:	84 30       	cpi	r24, 0x04	; 4
 7b4:	08 f0       	brcs	.+2      	; 0x7b8 <DIO__CheckStatusSetPortDirection+0x22>
 7b6:	89 c0       	rjmp	.+274    	; 0x8ca <__stack+0x6b>
 7b8:	8b 81       	ldd	r24, Y+3	; 0x03
 7ba:	81 30       	cpi	r24, 0x01	; 1
 7bc:	21 f0       	breq	.+8      	; 0x7c6 <DIO__CheckStatusSetPortDirection+0x30>
 7be:	8b 81       	ldd	r24, Y+3	; 0x03
 7c0:	88 23       	and	r24, r24
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <DIO__CheckStatusSetPortDirection+0x30>
 7c4:	82 c0       	rjmp	.+260    	; 0x8ca <__stack+0x6b>
        {
                switch (Copy__uint8PortId)
 7c6:	8a 81       	ldd	r24, Y+2	; 0x02
 7c8:	28 2f       	mov	r18, r24
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	3e 87       	std	Y+14, r19	; 0x0e
 7ce:	2d 87       	std	Y+13, r18	; 0x0d
 7d0:	8d 85       	ldd	r24, Y+13	; 0x0d
 7d2:	9e 85       	ldd	r25, Y+14	; 0x0e
 7d4:	81 30       	cpi	r24, 0x01	; 1
 7d6:	91 05       	cpc	r25, r1
 7d8:	71 f1       	breq	.+92     	; 0x836 <DIO__CheckStatusSetPortDirection+0xa0>
 7da:	2d 85       	ldd	r18, Y+13	; 0x0d
 7dc:	3e 85       	ldd	r19, Y+14	; 0x0e
 7de:	22 30       	cpi	r18, 0x02	; 2
 7e0:	31 05       	cpc	r19, r1
 7e2:	2c f4       	brge	.+10     	; 0x7ee <DIO__CheckStatusSetPortDirection+0x58>
 7e4:	8d 85       	ldd	r24, Y+13	; 0x0d
 7e6:	9e 85       	ldd	r25, Y+14	; 0x0e
 7e8:	00 97       	sbiw	r24, 0x00	; 0
 7ea:	69 f0       	breq	.+26     	; 0x806 <DIO__CheckStatusSetPortDirection+0x70>
 7ec:	6b c0       	rjmp	.+214    	; 0x8c4 <__stack+0x65>
 7ee:	2d 85       	ldd	r18, Y+13	; 0x0d
 7f0:	3e 85       	ldd	r19, Y+14	; 0x0e
 7f2:	22 30       	cpi	r18, 0x02	; 2
 7f4:	31 05       	cpc	r19, r1
 7f6:	b9 f1       	breq	.+110    	; 0x866 <__stack+0x7>
 7f8:	8d 85       	ldd	r24, Y+13	; 0x0d
 7fa:	9e 85       	ldd	r25, Y+14	; 0x0e
 7fc:	83 30       	cpi	r24, 0x03	; 3
 7fe:	91 05       	cpc	r25, r1
 800:	09 f4       	brne	.+2      	; 0x804 <DIO__CheckStatusSetPortDirection+0x6e>
 802:	49 c0       	rjmp	.+146    	; 0x896 <__stack+0x37>
 804:	5f c0       	rjmp	.+190    	; 0x8c4 <__stack+0x65>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PortDirection)
 806:	8b 81       	ldd	r24, Y+3	; 0x03
 808:	28 2f       	mov	r18, r24
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	3c 87       	std	Y+12, r19	; 0x0c
 80e:	2b 87       	std	Y+11, r18	; 0x0b
 810:	8b 85       	ldd	r24, Y+11	; 0x0b
 812:	9c 85       	ldd	r25, Y+12	; 0x0c
 814:	00 97       	sbiw	r24, 0x00	; 0
 816:	31 f0       	breq	.+12     	; 0x824 <DIO__CheckStatusSetPortDirection+0x8e>
 818:	2b 85       	ldd	r18, Y+11	; 0x0b
 81a:	3c 85       	ldd	r19, Y+12	; 0x0c
 81c:	21 30       	cpi	r18, 0x01	; 1
 81e:	31 05       	cpc	r19, r1
 820:	29 f0       	breq	.+10     	; 0x82c <DIO__CheckStatusSetPortDirection+0x96>
 822:	50 c0       	rjmp	.+160    	; 0x8c4 <__stack+0x65>
                        {
                        case DIO__UINT8_INPUT:
                                PORTA__UINT8_REG = 0x00;
 824:	eb e3       	ldi	r30, 0x3B	; 59
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	10 82       	st	Z, r1
 82a:	4c c0       	rjmp	.+152    	; 0x8c4 <__stack+0x65>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTA__UINT8_REG = 0xFF;
 82c:	eb e3       	ldi	r30, 0x3B	; 59
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	8f ef       	ldi	r24, 0xFF	; 255
 832:	80 83       	st	Z, r24
 834:	47 c0       	rjmp	.+142    	; 0x8c4 <__stack+0x65>
                                /* DO  NOTHING */
                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PortDirection)
 836:	8b 81       	ldd	r24, Y+3	; 0x03
 838:	28 2f       	mov	r18, r24
 83a:	30 e0       	ldi	r19, 0x00	; 0
 83c:	3a 87       	std	Y+10, r19	; 0x0a
 83e:	29 87       	std	Y+9, r18	; 0x09
 840:	89 85       	ldd	r24, Y+9	; 0x09
 842:	9a 85       	ldd	r25, Y+10	; 0x0a
 844:	00 97       	sbiw	r24, 0x00	; 0
 846:	31 f0       	breq	.+12     	; 0x854 <DIO__CheckStatusSetPortDirection+0xbe>
 848:	29 85       	ldd	r18, Y+9	; 0x09
 84a:	3a 85       	ldd	r19, Y+10	; 0x0a
 84c:	21 30       	cpi	r18, 0x01	; 1
 84e:	31 05       	cpc	r19, r1
 850:	29 f0       	breq	.+10     	; 0x85c <DIO__CheckStatusSetPortDirection+0xc6>
 852:	38 c0       	rjmp	.+112    	; 0x8c4 <__stack+0x65>
                        {
                        case DIO__UINT8_INPUT:
                                PORTB__UINT8_REG = 0x00;
 854:	e8 e3       	ldi	r30, 0x38	; 56
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	10 82       	st	Z, r1
 85a:	34 c0       	rjmp	.+104    	; 0x8c4 <__stack+0x65>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTB__UINT8_REG = 0xFF;
 85c:	e8 e3       	ldi	r30, 0x38	; 56
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	8f ef       	ldi	r24, 0xFF	; 255
 862:	80 83       	st	Z, r24
 864:	2f c0       	rjmp	.+94     	; 0x8c4 <__stack+0x65>
                        }

                        break;

                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PortDirection)
 866:	8b 81       	ldd	r24, Y+3	; 0x03
 868:	28 2f       	mov	r18, r24
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	38 87       	std	Y+8, r19	; 0x08
 86e:	2f 83       	std	Y+7, r18	; 0x07
 870:	8f 81       	ldd	r24, Y+7	; 0x07
 872:	98 85       	ldd	r25, Y+8	; 0x08
 874:	00 97       	sbiw	r24, 0x00	; 0
 876:	31 f0       	breq	.+12     	; 0x884 <__stack+0x25>
 878:	2f 81       	ldd	r18, Y+7	; 0x07
 87a:	38 85       	ldd	r19, Y+8	; 0x08
 87c:	21 30       	cpi	r18, 0x01	; 1
 87e:	31 05       	cpc	r19, r1
 880:	29 f0       	breq	.+10     	; 0x88c <__stack+0x2d>
 882:	20 c0       	rjmp	.+64     	; 0x8c4 <__stack+0x65>
                        {
                        case DIO__UINT8_INPUT:
                                PORTC__UINT8_REG = 0x00;
 884:	e5 e3       	ldi	r30, 0x35	; 53
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	10 82       	st	Z, r1
 88a:	1c c0       	rjmp	.+56     	; 0x8c4 <__stack+0x65>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTC__UINT8_REG = 0xFF;
 88c:	e5 e3       	ldi	r30, 0x35	; 53
 88e:	f0 e0       	ldi	r31, 0x00	; 0
 890:	8f ef       	ldi	r24, 0xFF	; 255
 892:	80 83       	st	Z, r24
 894:	17 c0       	rjmp	.+46     	; 0x8c4 <__stack+0x65>
                                break;
                        }

                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PortDirection)
 896:	8b 81       	ldd	r24, Y+3	; 0x03
 898:	28 2f       	mov	r18, r24
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	3e 83       	std	Y+6, r19	; 0x06
 89e:	2d 83       	std	Y+5, r18	; 0x05
 8a0:	8d 81       	ldd	r24, Y+5	; 0x05
 8a2:	9e 81       	ldd	r25, Y+6	; 0x06
 8a4:	00 97       	sbiw	r24, 0x00	; 0
 8a6:	31 f0       	breq	.+12     	; 0x8b4 <__stack+0x55>
 8a8:	2d 81       	ldd	r18, Y+5	; 0x05
 8aa:	3e 81       	ldd	r19, Y+6	; 0x06
 8ac:	21 30       	cpi	r18, 0x01	; 1
 8ae:	31 05       	cpc	r19, r1
 8b0:	29 f0       	breq	.+10     	; 0x8bc <__stack+0x5d>
 8b2:	08 c0       	rjmp	.+16     	; 0x8c4 <__stack+0x65>
                        {
                        case DIO__UINT8_INPUT:
                                PORTD__UINT8_REG = 0x00;
 8b4:	e2 e3       	ldi	r30, 0x32	; 50
 8b6:	f0 e0       	ldi	r31, 0x00	; 0
 8b8:	10 82       	st	Z, r1
 8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <__stack+0x65>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTD__UINT8_REG = 0xFF;
 8bc:	e2 e3       	ldi	r30, 0x32	; 50
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	8f ef       	ldi	r24, 0xFF	; 255
 8c2:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
 8c4:	39 81       	ldd	r19, Y+1	; 0x01
 8c6:	3c 83       	std	Y+4, r19	; 0x04
 8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <__stack+0x73>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
 8ca:	81 e0       	ldi	r24, 0x01	; 1
 8cc:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
 8ce:	89 81       	ldd	r24, Y+1	; 0x01
 8d0:	8c 83       	std	Y+4, r24	; 0x04
 8d2:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
 8d4:	2e 96       	adiw	r28, 0x0e	; 14
 8d6:	0f b6       	in	r0, 0x3f	; 63
 8d8:	f8 94       	cli
 8da:	de bf       	out	0x3e, r29	; 62
 8dc:	0f be       	out	0x3f, r0	; 63
 8de:	cd bf       	out	0x3d, r28	; 61
 8e0:	cf 91       	pop	r28
 8e2:	df 91       	pop	r29
 8e4:	08 95       	ret

000008e6 <DIO__CheckStatusSetPortValue>:

CheckStatus DIO__CheckStatusSetPortValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PortValue)
{
 8e6:	df 93       	push	r29
 8e8:	cf 93       	push	r28
 8ea:	00 d0       	rcall	.+0      	; 0x8ec <DIO__CheckStatusSetPortValue+0x6>
 8ec:	00 d0       	rcall	.+0      	; 0x8ee <DIO__CheckStatusSetPortValue+0x8>
 8ee:	00 d0       	rcall	.+0      	; 0x8f0 <DIO__CheckStatusSetPortValue+0xa>
 8f0:	cd b7       	in	r28, 0x3d	; 61
 8f2:	de b7       	in	r29, 0x3e	; 62
 8f4:	8a 83       	std	Y+2, r24	; 0x02
 8f6:	6b 83       	std	Y+3, r22	; 0x03

        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
 8f8:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
               
        */
        if (Copy__uint8PortId <= DIO__UINT8_PORTD)
 8fa:	8a 81       	ldd	r24, Y+2	; 0x02
 8fc:	84 30       	cpi	r24, 0x04	; 4
 8fe:	a8 f5       	brcc	.+106    	; 0x96a <DIO__CheckStatusSetPortValue+0x84>
        {
                switch (Copy__uint8PortId)
 900:	8a 81       	ldd	r24, Y+2	; 0x02
 902:	28 2f       	mov	r18, r24
 904:	30 e0       	ldi	r19, 0x00	; 0
 906:	3e 83       	std	Y+6, r19	; 0x06
 908:	2d 83       	std	Y+5, r18	; 0x05
 90a:	8d 81       	ldd	r24, Y+5	; 0x05
 90c:	9e 81       	ldd	r25, Y+6	; 0x06
 90e:	81 30       	cpi	r24, 0x01	; 1
 910:	91 05       	cpc	r25, r1
 912:	d1 f0       	breq	.+52     	; 0x948 <DIO__CheckStatusSetPortValue+0x62>
 914:	2d 81       	ldd	r18, Y+5	; 0x05
 916:	3e 81       	ldd	r19, Y+6	; 0x06
 918:	22 30       	cpi	r18, 0x02	; 2
 91a:	31 05       	cpc	r19, r1
 91c:	2c f4       	brge	.+10     	; 0x928 <DIO__CheckStatusSetPortValue+0x42>
 91e:	8d 81       	ldd	r24, Y+5	; 0x05
 920:	9e 81       	ldd	r25, Y+6	; 0x06
 922:	00 97       	sbiw	r24, 0x00	; 0
 924:	61 f0       	breq	.+24     	; 0x93e <DIO__CheckStatusSetPortValue+0x58>
 926:	1e c0       	rjmp	.+60     	; 0x964 <DIO__CheckStatusSetPortValue+0x7e>
 928:	2d 81       	ldd	r18, Y+5	; 0x05
 92a:	3e 81       	ldd	r19, Y+6	; 0x06
 92c:	22 30       	cpi	r18, 0x02	; 2
 92e:	31 05       	cpc	r19, r1
 930:	81 f0       	breq	.+32     	; 0x952 <DIO__CheckStatusSetPortValue+0x6c>
 932:	8d 81       	ldd	r24, Y+5	; 0x05
 934:	9e 81       	ldd	r25, Y+6	; 0x06
 936:	83 30       	cpi	r24, 0x03	; 3
 938:	91 05       	cpc	r25, r1
 93a:	81 f0       	breq	.+32     	; 0x95c <DIO__CheckStatusSetPortValue+0x76>
 93c:	13 c0       	rjmp	.+38     	; 0x964 <DIO__CheckStatusSetPortValue+0x7e>
                {
                case DIO__UINT8_PORTA:
                        PORTA__UINT8_REG = Copy__uint8PortValue;
 93e:	eb e3       	ldi	r30, 0x3B	; 59
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	8b 81       	ldd	r24, Y+3	; 0x03
 944:	80 83       	st	Z, r24
 946:	0e c0       	rjmp	.+28     	; 0x964 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTB:
                        PORTB__UINT8_REG = Copy__uint8PortValue;
 948:	e8 e3       	ldi	r30, 0x38	; 56
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	8b 81       	ldd	r24, Y+3	; 0x03
 94e:	80 83       	st	Z, r24
 950:	09 c0       	rjmp	.+18     	; 0x964 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTC:
                        PORTC__UINT8_REG = Copy__uint8PortValue;
 952:	e5 e3       	ldi	r30, 0x35	; 53
 954:	f0 e0       	ldi	r31, 0x00	; 0
 956:	8b 81       	ldd	r24, Y+3	; 0x03
 958:	80 83       	st	Z, r24
 95a:	04 c0       	rjmp	.+8      	; 0x964 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTD:
                        PORTD__UINT8_REG = Copy__uint8PortValue;
 95c:	e2 e3       	ldi	r30, 0x32	; 50
 95e:	f0 e0       	ldi	r31, 0x00	; 0
 960:	8b 81       	ldd	r24, Y+3	; 0x03
 962:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
 964:	99 81       	ldd	r25, Y+1	; 0x01
 966:	9c 83       	std	Y+4, r25	; 0x04
 968:	04 c0       	rjmp	.+8      	; 0x972 <DIO__CheckStatusSetPortValue+0x8c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
 96e:	29 81       	ldd	r18, Y+1	; 0x01
 970:	2c 83       	std	Y+4, r18	; 0x04
 972:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
 974:	26 96       	adiw	r28, 0x06	; 6
 976:	0f b6       	in	r0, 0x3f	; 63
 978:	f8 94       	cli
 97a:	de bf       	out	0x3e, r29	; 62
 97c:	0f be       	out	0x3f, r0	; 63
 97e:	cd bf       	out	0x3d, r28	; 61
 980:	cf 91       	pop	r28
 982:	df 91       	pop	r29
 984:	08 95       	ret

00000986 <DIO__CheckStatusGetPortValue>:

CheckStatus DIO__CheckStatusGetPortValue(_uint8 Copy__uint8PortId, _uint8 *Copy_p_uint8ReturnPortValue)
{
 986:	df 93       	push	r29
 988:	cf 93       	push	r28
 98a:	cd b7       	in	r28, 0x3d	; 61
 98c:	de b7       	in	r29, 0x3e	; 62
 98e:	27 97       	sbiw	r28, 0x07	; 7
 990:	0f b6       	in	r0, 0x3f	; 63
 992:	f8 94       	cli
 994:	de bf       	out	0x3e, r29	; 62
 996:	0f be       	out	0x3f, r0	; 63
 998:	cd bf       	out	0x3d, r28	; 61
 99a:	8a 83       	std	Y+2, r24	; 0x02
 99c:	7c 83       	std	Y+4, r23	; 0x04
 99e:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
 9a0:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid Pointer != NULL
               
        */
        if (Copy_p_uint8ReturnPortValue != NULL)
 9a2:	8b 81       	ldd	r24, Y+3	; 0x03
 9a4:	9c 81       	ldd	r25, Y+4	; 0x04
 9a6:	00 97       	sbiw	r24, 0x00	; 0
 9a8:	e9 f1       	breq	.+122    	; 0xa24 <DIO__CheckStatusGetPortValue+0x9e>
        {
                switch (Copy__uint8PortId)
 9aa:	8a 81       	ldd	r24, Y+2	; 0x02
 9ac:	28 2f       	mov	r18, r24
 9ae:	30 e0       	ldi	r19, 0x00	; 0
 9b0:	3f 83       	std	Y+7, r19	; 0x07
 9b2:	2e 83       	std	Y+6, r18	; 0x06
 9b4:	8e 81       	ldd	r24, Y+6	; 0x06
 9b6:	9f 81       	ldd	r25, Y+7	; 0x07
 9b8:	81 30       	cpi	r24, 0x01	; 1
 9ba:	91 05       	cpc	r25, r1
 9bc:	e1 f0       	breq	.+56     	; 0x9f6 <DIO__CheckStatusGetPortValue+0x70>
 9be:	2e 81       	ldd	r18, Y+6	; 0x06
 9c0:	3f 81       	ldd	r19, Y+7	; 0x07
 9c2:	22 30       	cpi	r18, 0x02	; 2
 9c4:	31 05       	cpc	r19, r1
 9c6:	2c f4       	brge	.+10     	; 0x9d2 <DIO__CheckStatusGetPortValue+0x4c>
 9c8:	8e 81       	ldd	r24, Y+6	; 0x06
 9ca:	9f 81       	ldd	r25, Y+7	; 0x07
 9cc:	00 97       	sbiw	r24, 0x00	; 0
 9ce:	61 f0       	breq	.+24     	; 0x9e8 <DIO__CheckStatusGetPortValue+0x62>
 9d0:	26 c0       	rjmp	.+76     	; 0xa1e <DIO__CheckStatusGetPortValue+0x98>
 9d2:	2e 81       	ldd	r18, Y+6	; 0x06
 9d4:	3f 81       	ldd	r19, Y+7	; 0x07
 9d6:	22 30       	cpi	r18, 0x02	; 2
 9d8:	31 05       	cpc	r19, r1
 9da:	a1 f0       	breq	.+40     	; 0xa04 <DIO__CheckStatusGetPortValue+0x7e>
 9dc:	8e 81       	ldd	r24, Y+6	; 0x06
 9de:	9f 81       	ldd	r25, Y+7	; 0x07
 9e0:	83 30       	cpi	r24, 0x03	; 3
 9e2:	91 05       	cpc	r25, r1
 9e4:	b1 f0       	breq	.+44     	; 0xa12 <DIO__CheckStatusGetPortValue+0x8c>
 9e6:	1b c0       	rjmp	.+54     	; 0xa1e <DIO__CheckStatusGetPortValue+0x98>
                {
                case DIO__UINT8_PORTA:
                        *Copy_p_uint8ReturnPortValue = PINA__UINT8_REG;
 9e8:	e9 e3       	ldi	r30, 0x39	; 57
 9ea:	f0 e0       	ldi	r31, 0x00	; 0
 9ec:	80 81       	ld	r24, Z
 9ee:	eb 81       	ldd	r30, Y+3	; 0x03
 9f0:	fc 81       	ldd	r31, Y+4	; 0x04
 9f2:	80 83       	st	Z, r24
 9f4:	14 c0       	rjmp	.+40     	; 0xa1e <DIO__CheckStatusGetPortValue+0x98>
                        break;
                case DIO__UINT8_PORTB:
                        *Copy_p_uint8ReturnPortValue = PINB__UINT8_REG;
 9f6:	e6 e3       	ldi	r30, 0x36	; 54
 9f8:	f0 e0       	ldi	r31, 0x00	; 0
 9fa:	80 81       	ld	r24, Z
 9fc:	eb 81       	ldd	r30, Y+3	; 0x03
 9fe:	fc 81       	ldd	r31, Y+4	; 0x04
 a00:	80 83       	st	Z, r24
 a02:	0d c0       	rjmp	.+26     	; 0xa1e <DIO__CheckStatusGetPortValue+0x98>

                        break;
                case DIO__UINT8_PORTC:
                        *Copy_p_uint8ReturnPortValue = PINC__UINT8_REG;
 a04:	e3 e3       	ldi	r30, 0x33	; 51
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	80 81       	ld	r24, Z
 a0a:	eb 81       	ldd	r30, Y+3	; 0x03
 a0c:	fc 81       	ldd	r31, Y+4	; 0x04
 a0e:	80 83       	st	Z, r24
 a10:	06 c0       	rjmp	.+12     	; 0xa1e <DIO__CheckStatusGetPortValue+0x98>
                        break;
                case DIO__UINT8_PORTD:
                        *Copy_p_uint8ReturnPortValue = PIND__UINT8_REG;
 a12:	e0 e3       	ldi	r30, 0x30	; 48
 a14:	f0 e0       	ldi	r31, 0x00	; 0
 a16:	80 81       	ld	r24, Z
 a18:	eb 81       	ldd	r30, Y+3	; 0x03
 a1a:	fc 81       	ldd	r31, Y+4	; 0x04
 a1c:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
 a1e:	99 81       	ldd	r25, Y+1	; 0x01
 a20:	9d 83       	std	Y+5, r25	; 0x05
 a22:	04 c0       	rjmp	.+8      	; 0xa2c <DIO__CheckStatusGetPortValue+0xa6>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
 a24:	81 e0       	ldi	r24, 0x01	; 1
 a26:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
 a28:	29 81       	ldd	r18, Y+1	; 0x01
 a2a:	2d 83       	std	Y+5, r18	; 0x05
 a2c:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
 a2e:	27 96       	adiw	r28, 0x07	; 7
 a30:	0f b6       	in	r0, 0x3f	; 63
 a32:	f8 94       	cli
 a34:	de bf       	out	0x3e, r29	; 62
 a36:	0f be       	out	0x3f, r0	; 63
 a38:	cd bf       	out	0x3d, r28	; 61
 a3a:	cf 91       	pop	r28
 a3c:	df 91       	pop	r29
 a3e:	08 95       	ret

00000a40 <UART_VoidInit>:
#include"UART_config.h"



Void UART_VoidInit(Void)
{
 a40:	df 93       	push	r29
 a42:	cf 93       	push	r28
 a44:	00 d0       	rcall	.+0      	; 0xa46 <UART_VoidInit+0x6>
 a46:	0f 92       	push	r0
 a48:	cd b7       	in	r28, 0x3d	; 61
 a4a:	de b7       	in	r29, 0x3e	; 62
        _uint8 Local_uint8UCSRCValue=0x80; 
 a4c:	80 e8       	ldi	r24, 0x80	; 128
 a4e:	8b 83       	std	Y+3, r24	; 0x03
        /* Buadrate = 9600*/
        _uint16 Local_uint16UBRRVALUE = 51;
 a50:	83 e3       	ldi	r24, 0x33	; 51
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	9a 83       	std	Y+2, r25	; 0x02
 a56:	89 83       	std	Y+1, r24	; 0x01
        UART_UBRRL_UINT8__REG = (_uint8)Local_uint16UBRRVALUE;
 a58:	e9 e2       	ldi	r30, 0x29	; 41
 a5a:	f0 e0       	ldi	r31, 0x00	; 0
 a5c:	89 81       	ldd	r24, Y+1	; 0x01
 a5e:	80 83       	st	Z, r24
        UART_UBRRH_UINT8__REG = (_uint8)(Local_uint16UBRRVALUE>>8);
 a60:	e0 e4       	ldi	r30, 0x40	; 64
 a62:	f0 e0       	ldi	r31, 0x00	; 0
 a64:	89 81       	ldd	r24, Y+1	; 0x01
 a66:	9a 81       	ldd	r25, Y+2	; 0x02
 a68:	89 2f       	mov	r24, r25
 a6a:	99 27       	eor	r25, r25
 a6c:	80 83       	st	Z, r24

        /*Enable TX/RX*/
        SET_BIT(UART_UCSRB_UINT8__REG,3);
 a6e:	aa e2       	ldi	r26, 0x2A	; 42
 a70:	b0 e0       	ldi	r27, 0x00	; 0
 a72:	ea e2       	ldi	r30, 0x2A	; 42
 a74:	f0 e0       	ldi	r31, 0x00	; 0
 a76:	80 81       	ld	r24, Z
 a78:	88 60       	ori	r24, 0x08	; 8
 a7a:	8c 93       	st	X, r24
        SET_BIT(UART_UCSRB_UINT8__REG,4);
 a7c:	aa e2       	ldi	r26, 0x2A	; 42
 a7e:	b0 e0       	ldi	r27, 0x00	; 0
 a80:	ea e2       	ldi	r30, 0x2A	; 42
 a82:	f0 e0       	ldi	r31, 0x00	; 0
 a84:	80 81       	ld	r24, Z
 a86:	80 61       	ori	r24, 0x10	; 16
 a88:	8c 93       	st	X, r24
        /*Character size is 8 bits*/
        CLEAR_BIT(UART_UCSRB_UINT8__REG,2);
 a8a:	aa e2       	ldi	r26, 0x2A	; 42
 a8c:	b0 e0       	ldi	r27, 0x00	; 0
 a8e:	ea e2       	ldi	r30, 0x2A	; 42
 a90:	f0 e0       	ldi	r31, 0x00	; 0
 a92:	80 81       	ld	r24, Z
 a94:	8b 7f       	andi	r24, 0xFB	; 251
 a96:	8c 93       	st	X, r24
        SET_BIT(Local_uint8UCSRCValue,2);
 a98:	8b 81       	ldd	r24, Y+3	; 0x03
 a9a:	84 60       	ori	r24, 0x04	; 4
 a9c:	8b 83       	std	Y+3, r24	; 0x03
        SET_BIT(Local_uint8UCSRCValue,1);
 a9e:	8b 81       	ldd	r24, Y+3	; 0x03
 aa0:	82 60       	ori	r24, 0x02	; 2
 aa2:	8b 83       	std	Y+3, r24	; 0x03
        /*Asynchrounce mode */
        CLEAR_BIT(Local_uint8UCSRCValue,6);
 aa4:	8b 81       	ldd	r24, Y+3	; 0x03
 aa6:	8f 7b       	andi	r24, 0xBF	; 191
 aa8:	8b 83       	std	Y+3, r24	; 0x03
        /*Disable oparity bit */
        CLEAR_BIT(Local_uint8UCSRCValue,5);
 aaa:	8b 81       	ldd	r24, Y+3	; 0x03
 aac:	8f 7d       	andi	r24, 0xDF	; 223
 aae:	8b 83       	std	Y+3, r24	; 0x03
        CLEAR_BIT(Local_uint8UCSRCValue,4);
 ab0:	8b 81       	ldd	r24, Y+3	; 0x03
 ab2:	8f 7e       	andi	r24, 0xEF	; 239
 ab4:	8b 83       	std	Y+3, r24	; 0x03
        /*two stop bit */
        SET_BIT(Local_uint8UCSRCValue,3);
 ab6:	8b 81       	ldd	r24, Y+3	; 0x03
 ab8:	88 60       	ori	r24, 0x08	; 8
 aba:	8b 83       	std	Y+3, r24	; 0x03
        /*Update UCSRC*/
        UART_UCSRC_UINT8__REG = Local_uint8UCSRCValue;
 abc:	e0 e4       	ldi	r30, 0x40	; 64
 abe:	f0 e0       	ldi	r31, 0x00	; 0
 ac0:	8b 81       	ldd	r24, Y+3	; 0x03
 ac2:	80 83       	st	Z, r24

}
 ac4:	0f 90       	pop	r0
 ac6:	0f 90       	pop	r0
 ac8:	0f 90       	pop	r0
 aca:	cf 91       	pop	r28
 acc:	df 91       	pop	r29
 ace:	08 95       	ret

00000ad0 <UART_VoidTxData>:

Void UART_VoidTxData(_uint8 Copy_Uint8TxData)
{
 ad0:	df 93       	push	r29
 ad2:	cf 93       	push	r28
 ad4:	0f 92       	push	r0
 ad6:	cd b7       	in	r28, 0x3d	; 61
 ad8:	de b7       	in	r29, 0x3e	; 62
 ada:	89 83       	std	Y+1, r24	; 0x01
        /*check if tx buffer empty*/
        while (!GET_BIT(UART_UCSRA_UINT8__REG,5))
 adc:	eb e2       	ldi	r30, 0x2B	; 43
 ade:	f0 e0       	ldi	r31, 0x00	; 0
 ae0:	80 81       	ld	r24, Z
 ae2:	82 95       	swap	r24
 ae4:	86 95       	lsr	r24
 ae6:	87 70       	andi	r24, 0x07	; 7
 ae8:	88 2f       	mov	r24, r24
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	81 70       	andi	r24, 0x01	; 1
 aee:	90 70       	andi	r25, 0x00	; 0
 af0:	00 97       	sbiw	r24, 0x00	; 0
 af2:	a1 f3       	breq	.-24     	; 0xadc <UART_VoidTxData+0xc>
        {
                /* code */
        }
        UART_UDR_UINT8__REG = Copy_Uint8TxData;
 af4:	ec e2       	ldi	r30, 0x2C	; 44
 af6:	f0 e0       	ldi	r31, 0x00	; 0
 af8:	89 81       	ldd	r24, Y+1	; 0x01
 afa:	80 83       	st	Z, r24
        
}
 afc:	0f 90       	pop	r0
 afe:	cf 91       	pop	r28
 b00:	df 91       	pop	r29
 b02:	08 95       	ret

00000b04 <UART_CheckStatusRxData>:
CheckStatus UART_CheckStatusRxData(_uint8 *Copy_Uint8RxData)
{
 b04:	df 93       	push	r29
 b06:	cf 93       	push	r28
 b08:	00 d0       	rcall	.+0      	; 0xb0a <UART_CheckStatusRxData+0x6>
 b0a:	0f 92       	push	r0
 b0c:	cd b7       	in	r28, 0x3d	; 61
 b0e:	de b7       	in	r29, 0x3e	; 62
 b10:	9b 83       	std	Y+3, r25	; 0x03
 b12:	8a 83       	std	Y+2, r24	; 0x02
        CheckStatus Local_CheckStatusErrorCheck = CHECK_SUCCESS;
 b14:	19 82       	std	Y+1, r1	; 0x01
        if(Copy_Uint8RxData != NULL)
 b16:	8a 81       	ldd	r24, Y+2	; 0x02
 b18:	9b 81       	ldd	r25, Y+3	; 0x03
 b1a:	00 97       	sbiw	r24, 0x00	; 0
 b1c:	61 f0       	breq	.+24     	; 0xb36 <UART_CheckStatusRxData+0x32>
        {
                /* check the recive flag */
                while (!GET_BIT(UART_UCSRA_UINT8__REG,7))
 b1e:	eb e2       	ldi	r30, 0x2B	; 43
 b20:	f0 e0       	ldi	r31, 0x00	; 0
 b22:	80 81       	ld	r24, Z
 b24:	88 23       	and	r24, r24
 b26:	dc f7       	brge	.-10     	; 0xb1e <UART_CheckStatusRxData+0x1a>
                {
                        /* code */
                }
                *Copy_Uint8RxData = UART_UDR_UINT8__REG;
 b28:	ec e2       	ldi	r30, 0x2C	; 44
 b2a:	f0 e0       	ldi	r31, 0x00	; 0
 b2c:	80 81       	ld	r24, Z
 b2e:	ea 81       	ldd	r30, Y+2	; 0x02
 b30:	fb 81       	ldd	r31, Y+3	; 0x03
 b32:	80 83       	st	Z, r24
 b34:	02 c0       	rjmp	.+4      	; 0xb3a <UART_CheckStatusRxData+0x36>


        }
        else
        {
                Local_CheckStatusErrorCheck = CHECK_FAIL;
 b36:	81 e0       	ldi	r24, 0x01	; 1
 b38:	89 83       	std	Y+1, r24	; 0x01
        }
  return Local_CheckStatusErrorCheck;       
 b3a:	89 81       	ldd	r24, Y+1	; 0x01
}
 b3c:	0f 90       	pop	r0
 b3e:	0f 90       	pop	r0
 b40:	0f 90       	pop	r0
 b42:	cf 91       	pop	r28
 b44:	df 91       	pop	r29
 b46:	08 95       	ret

00000b48 <UART_CheckStatusTxStringSynchWithBlocking>:




CheckStatus UART_CheckStatusTxStringSynchWithBlocking(_uint8 * Copy_Uint8TxString)
{
 b48:	df 93       	push	r29
 b4a:	cf 93       	push	r28
 b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_CheckStatusTxStringSynchWithBlocking+0x6>
 b4e:	00 d0       	rcall	.+0      	; 0xb50 <UART_CheckStatusTxStringSynchWithBlocking+0x8>
 b50:	cd b7       	in	r28, 0x3d	; 61
 b52:	de b7       	in	r29, 0x3e	; 62
 b54:	9c 83       	std	Y+4, r25	; 0x04
 b56:	8b 83       	std	Y+3, r24	; 0x03
        CheckStatus Local_CheckStatusReturnValue = CHECK_FAIL;
 b58:	81 e0       	ldi	r24, 0x01	; 1
 b5a:	8a 83       	std	Y+2, r24	; 0x02
        _uint8 Local_Uint8Counter = 0 ;
 b5c:	19 82       	std	Y+1, r1	; 0x01
 b5e:	0f c0       	rjmp	.+30     	; 0xb7e <UART_CheckStatusTxStringSynchWithBlocking+0x36>
    
        while (Copy_Uint8TxString[Local_Uint8Counter] != '\0')
        {
                UART_VoidTxData(Copy_Uint8TxString[Local_Uint8Counter]);
 b60:	89 81       	ldd	r24, Y+1	; 0x01
 b62:	28 2f       	mov	r18, r24
 b64:	30 e0       	ldi	r19, 0x00	; 0
 b66:	8b 81       	ldd	r24, Y+3	; 0x03
 b68:	9c 81       	ldd	r25, Y+4	; 0x04
 b6a:	fc 01       	movw	r30, r24
 b6c:	e2 0f       	add	r30, r18
 b6e:	f3 1f       	adc	r31, r19
 b70:	80 81       	ld	r24, Z
 b72:	0e 94 68 05 	call	0xad0	; 0xad0 <UART_VoidTxData>
                Local_Uint8Counter++;
 b76:	89 81       	ldd	r24, Y+1	; 0x01
 b78:	8f 5f       	subi	r24, 0xFF	; 255
 b7a:	89 83       	std	Y+1, r24	; 0x01
                Local_CheckStatusReturnValue = CHECK_SUCCESS;
 b7c:	1a 82       	std	Y+2, r1	; 0x02
CheckStatus UART_CheckStatusTxStringSynchWithBlocking(_uint8 * Copy_Uint8TxString)
{
        CheckStatus Local_CheckStatusReturnValue = CHECK_FAIL;
        _uint8 Local_Uint8Counter = 0 ;
    
        while (Copy_Uint8TxString[Local_Uint8Counter] != '\0')
 b7e:	89 81       	ldd	r24, Y+1	; 0x01
 b80:	28 2f       	mov	r18, r24
 b82:	30 e0       	ldi	r19, 0x00	; 0
 b84:	8b 81       	ldd	r24, Y+3	; 0x03
 b86:	9c 81       	ldd	r25, Y+4	; 0x04
 b88:	fc 01       	movw	r30, r24
 b8a:	e2 0f       	add	r30, r18
 b8c:	f3 1f       	adc	r31, r19
 b8e:	80 81       	ld	r24, Z
 b90:	88 23       	and	r24, r24
 b92:	31 f7       	brne	.-52     	; 0xb60 <UART_CheckStatusTxStringSynchWithBlocking+0x18>
        {
                UART_VoidTxData(Copy_Uint8TxString[Local_Uint8Counter]);
                Local_Uint8Counter++;
                Local_CheckStatusReturnValue = CHECK_SUCCESS;
        }
        return Local_CheckStatusReturnValue;
 b94:	8a 81       	ldd	r24, Y+2	; 0x02

}
 b96:	0f 90       	pop	r0
 b98:	0f 90       	pop	r0
 b9a:	0f 90       	pop	r0
 b9c:	0f 90       	pop	r0
 b9e:	cf 91       	pop	r28
 ba0:	df 91       	pop	r29
 ba2:	08 95       	ret

00000ba4 <UART_CheckStatusRxStringSynchWithBlocking>:

CheckStatus UART_CheckStatusRxStringSynchWithBlocking(_uint8 * Copy_Uint8RxString)
{
 ba4:	df 93       	push	r29
 ba6:	cf 93       	push	r28
 ba8:	00 d0       	rcall	.+0      	; 0xbaa <UART_CheckStatusRxStringSynchWithBlocking+0x6>
 baa:	00 d0       	rcall	.+0      	; 0xbac <UART_CheckStatusRxStringSynchWithBlocking+0x8>
 bac:	cd b7       	in	r28, 0x3d	; 61
 bae:	de b7       	in	r29, 0x3e	; 62
 bb0:	9c 83       	std	Y+4, r25	; 0x04
 bb2:	8b 83       	std	Y+3, r24	; 0x03
        CheckStatus Local_CheckStatusReturnValue = CHECK_FAIL;
 bb4:	81 e0       	ldi	r24, 0x01	; 1
 bb6:	8a 83       	std	Y+2, r24	; 0x02
        _uint8      Local_Uint8Counter=0;
 bb8:	19 82       	std	Y+1, r1	; 0x01
 bba:	11 c0       	rjmp	.+34     	; 0xbde <UART_CheckStatusRxStringSynchWithBlocking+0x3a>
        while (Copy_Uint8RxString[Local_Uint8Counter] != '\0')
        {
                UART_CheckStatusRxData(Copy_Uint8RxString[Local_Uint8Counter]);
 bbc:	89 81       	ldd	r24, Y+1	; 0x01
 bbe:	28 2f       	mov	r18, r24
 bc0:	30 e0       	ldi	r19, 0x00	; 0
 bc2:	8b 81       	ldd	r24, Y+3	; 0x03
 bc4:	9c 81       	ldd	r25, Y+4	; 0x04
 bc6:	fc 01       	movw	r30, r24
 bc8:	e2 0f       	add	r30, r18
 bca:	f3 1f       	adc	r31, r19
 bcc:	80 81       	ld	r24, Z
 bce:	88 2f       	mov	r24, r24
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	0e 94 82 05 	call	0xb04	; 0xb04 <UART_CheckStatusRxData>
                Local_Uint8Counter++;
 bd6:	89 81       	ldd	r24, Y+1	; 0x01
 bd8:	8f 5f       	subi	r24, 0xFF	; 255
 bda:	89 83       	std	Y+1, r24	; 0x01
                Local_CheckStatusReturnValue = CHECK_SUCCESS;
 bdc:	1a 82       	std	Y+2, r1	; 0x02

CheckStatus UART_CheckStatusRxStringSynchWithBlocking(_uint8 * Copy_Uint8RxString)
{
        CheckStatus Local_CheckStatusReturnValue = CHECK_FAIL;
        _uint8      Local_Uint8Counter=0;
        while (Copy_Uint8RxString[Local_Uint8Counter] != '\0')
 bde:	89 81       	ldd	r24, Y+1	; 0x01
 be0:	28 2f       	mov	r18, r24
 be2:	30 e0       	ldi	r19, 0x00	; 0
 be4:	8b 81       	ldd	r24, Y+3	; 0x03
 be6:	9c 81       	ldd	r25, Y+4	; 0x04
 be8:	fc 01       	movw	r30, r24
 bea:	e2 0f       	add	r30, r18
 bec:	f3 1f       	adc	r31, r19
 bee:	80 81       	ld	r24, Z
 bf0:	88 23       	and	r24, r24
 bf2:	21 f7       	brne	.-56     	; 0xbbc <UART_CheckStatusRxStringSynchWithBlocking+0x18>
        {
                UART_CheckStatusRxData(Copy_Uint8RxString[Local_Uint8Counter]);
                Local_Uint8Counter++;
                Local_CheckStatusReturnValue = CHECK_SUCCESS;
        }
        return Local_CheckStatusReturnValue;
 bf4:	8a 81       	ldd	r24, Y+2	; 0x02
        
}
 bf6:	0f 90       	pop	r0
 bf8:	0f 90       	pop	r0
 bfa:	0f 90       	pop	r0
 bfc:	0f 90       	pop	r0
 bfe:	cf 91       	pop	r28
 c00:	df 91       	pop	r29
 c02:	08 95       	ret

00000c04 <UART_VoidTxStringAsynch>:

Void UART_VoidTxStringAsynch(Void (*Copy_PF_Notification)(Void))
{
 c04:	df 93       	push	r29
 c06:	cf 93       	push	r28
 c08:	00 d0       	rcall	.+0      	; 0xc0a <UART_VoidTxStringAsynch+0x6>
 c0a:	cd b7       	in	r28, 0x3d	; 61
 c0c:	de b7       	in	r29, 0x3e	; 62
 c0e:	9a 83       	std	Y+2, r25	; 0x02
 c10:	89 83       	std	Y+1, r24	; 0x01


}
 c12:	0f 90       	pop	r0
 c14:	0f 90       	pop	r0
 c16:	cf 91       	pop	r28
 c18:	df 91       	pop	r29
 c1a:	08 95       	ret

00000c1c <UART_VoidRxStringAsynch>:

Void UART_VoidRxStringAsynch(Void (*Copy_PF_Notification)(Void))
{
 c1c:	df 93       	push	r29
 c1e:	cf 93       	push	r28
 c20:	00 d0       	rcall	.+0      	; 0xc22 <UART_VoidRxStringAsynch+0x6>
 c22:	cd b7       	in	r28, 0x3d	; 61
 c24:	de b7       	in	r29, 0x3e	; 62
 c26:	9a 83       	std	Y+2, r25	; 0x02
 c28:	89 83       	std	Y+1, r24	; 0x01

}
 c2a:	0f 90       	pop	r0
 c2c:	0f 90       	pop	r0
 c2e:	cf 91       	pop	r28
 c30:	df 91       	pop	r29
 c32:	08 95       	ret

00000c34 <main>:
#include "UART_interface.h"



int main()
{
 c34:	df 93       	push	r29
 c36:	cf 93       	push	r28
 c38:	0f 92       	push	r0
 c3a:	cd b7       	in	r28, 0x3d	; 61
 c3c:	de b7       	in	r29, 0x3e	; 62
_uint8 Local_Uint8Data;
DIO_VoidInit();
 c3e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VoidInit>
UART_VoidInit();
 c42:	0e 94 20 05 	call	0xa40	; 0xa40 <UART_VoidInit>
while(TRUE){
UART_CheckStatusRxData(&Local_Uint8Data);
 c46:	ce 01       	movw	r24, r28
 c48:	01 96       	adiw	r24, 0x01	; 1
 c4a:	0e 94 82 05 	call	0xb04	; 0xb04 <UART_CheckStatusRxData>
	if(Local_Uint8Data == 'a')
 c4e:	89 81       	ldd	r24, Y+1	; 0x01
 c50:	81 36       	cpi	r24, 0x61	; 97
 c52:	51 f4       	brne	.+20     	; 0xc68 <main+0x34>
   {
      DIO__CheckStatusSetPinValue(DIO__UINT8_PORTA,DIO__UINT8_PIN0,DIO__UINT8_HIGH);
 c54:	80 e0       	ldi	r24, 0x00	; 0
 c56:	60 e0       	ldi	r22, 0x00	; 0
 c58:	41 e0       	ldi	r20, 0x01	; 1
 c5a:	0e 94 90 01 	call	0x320	; 0x320 <DIO__CheckStatusSetPinValue>
      UART_CheckStatusTxStringSynchWithBlocking("ELABBAS");
 c5e:	80 e6       	ldi	r24, 0x60	; 96
 c60:	90 e0       	ldi	r25, 0x00	; 0
 c62:	0e 94 a4 05 	call	0xb48	; 0xb48 <UART_CheckStatusTxStringSynchWithBlocking>
 c66:	ef cf       	rjmp	.-34     	; 0xc46 <main+0x12>
   }
   else if (Local_Uint8Data == 'b')
 c68:	89 81       	ldd	r24, Y+1	; 0x01
 c6a:	82 36       	cpi	r24, 0x62	; 98
 c6c:	61 f7       	brne	.-40     	; 0xc46 <main+0x12>
   {
	   DIO__CheckStatusSetPinValue(DIO__UINT8_PORTA,DIO__UINT8_PIN0,DIO__UINT8_LOW);
 c6e:	80 e0       	ldi	r24, 0x00	; 0
 c70:	60 e0       	ldi	r22, 0x00	; 0
 c72:	40 e0       	ldi	r20, 0x00	; 0
 c74:	0e 94 90 01 	call	0x320	; 0x320 <DIO__CheckStatusSetPinValue>
 c78:	e6 cf       	rjmp	.-52     	; 0xc46 <main+0x12>

00000c7a <_exit>:
 c7a:	f8 94       	cli

00000c7c <__stop_program>:
 c7c:	ff cf       	rjmp	.-2      	; 0xc7c <__stop_program>
