
LCD_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000172  00800060  000034cc  00003540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002808  00000000  00000000  000036b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ff0  00000000  00000000  00005ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00006eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  0000723e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00009649  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000a9cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000bba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000bd68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000c05e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c9cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <main>
      7a:	0c 94 64 1a 	jmp	0x34c8	; 0x34c8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 49 1a 	jmp	0x3492	; 0x3492 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 49 1a 	jmp	0x3492	; 0x3492 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 35 1a 	jmp	0x346a	; 0x346a <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 3d 1a 	jmp	0x347a	; 0x347a <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 59 1a 	jmp	0x34b2	; 0x34b2 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 35 1a 	jmp	0x346a	; 0x346a <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e8 59       	subi	r30, 0x98	; 152
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <DIO_VoidInit>:

/* HAL */

/* Defination Of Function  */
Void DIO_VoidInit(Void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
        
        /* intial direction */ 
        
        DDRA__UINT8_REG = CONC(DIO__UINT8_PA7_INITIAL_DIRECTION, DIO__UINT8_PA6_INITIAL_DIRECTION, DIO__UINT8_PA5_INITIAL_DIRECTION, DIO__UINT8_PA4_INITIAL_DIRECTION, DIO__UINT8_PA3_INITIAL_DIRECTION, DIO__UINT8_PA2_INITIAL_DIRECTION, DIO__UINT8_PA1_INITIAL_DIRECTION, DIO__UINT8_PA0_INITIAL_DIRECTION);
     e26:	ea e3       	ldi	r30, 0x3A	; 58
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	87 e0       	ldi	r24, 0x07	; 7
     e2c:	80 83       	st	Z, r24
        DDRB__UINT8_REG = CONC(DIO__UINT8_PB7_INITIAL_DIRECTION, DIO__UINT8_PB6_INITIAL_DIRECTION, DIO__UINT8_PB5_INITIAL_DIRECTION, DIO__UINT8_PB4_INITIAL_DIRECTION, DIO__UINT8_PB3_INITIAL_DIRECTION, DIO__UINT8_PB2_INITIAL_DIRECTION, DIO__UINT8_PB1_INITIAL_DIRECTION, DIO__UINT8_PB0_INITIAL_DIRECTION);
     e2e:	e7 e3       	ldi	r30, 0x37	; 55
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	10 82       	st	Z, r1
        DDRC__UINT8_REG = CONC(DIO__UINT8_PC7_INITIAL_DIRECTION, DIO__UINT8_PC6_INITIAL_DIRECTION, DIO__UINT8_PC5_INITIAL_DIRECTION, DIO__UINT8_PC4_INITIAL_DIRECTION, DIO__UINT8_PC3_INITIAL_DIRECTION, DIO__UINT8_PC2_INITIAL_DIRECTION, DIO__UINT8_PC1_INITIAL_DIRECTION, DIO__UINT8_PC0_INITIAL_DIRECTION);
     e34:	e4 e3       	ldi	r30, 0x34	; 52
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 ef       	ldi	r24, 0xF0	; 240
     e3a:	80 83       	st	Z, r24
        DDRD__UINT8_REG = CONC(DIO__UINT8_PD7_INITIAL_DIRECTION, DIO__UINT8_PD6_INITIAL_DIRECTION, DIO__UINT8_PD5_INITIAL_DIRECTION, DIO__UINT8_PD4_INITIAL_DIRECTION, DIO__UINT8_PD3_INITIAL_DIRECTION, DIO__UINT8_PD2_INITIAL_DIRECTION, DIO__UINT8_PD1_INITIAL_DIRECTION, DIO__UINT8_PD0_INITIAL_DIRECTION);
     e3c:	e1 e3       	ldi	r30, 0x31	; 49
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	8f ef       	ldi	r24, 0xFF	; 255
     e42:	80 83       	st	Z, r24
        
        /* initial Value */
        
        PORTA__UINT8_REG = CONC(DIO__UINT8_PA7_INITIAL_VALUE, DIO__UINT8_PA6_INITIAL_VALUE, DIO__UINT8_PA5_INITIAL_VALUE, DIO__UINT8_PA4_INITIAL_VALUE, DIO__UINT8_PA3_INITIAL_VALUE, DIO__UINT8_PA2_INITIAL_VALUE, DIO__UINT8_PA1_INITIAL_VALUE, DIO__UINT8_PA0_INITIAL_VALUE);
     e44:	eb e3       	ldi	r30, 0x3B	; 59
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	10 82       	st	Z, r1
        PORTB__UINT8_REG = CONC(DIO__UINT8_PB7_INITIAL_VALUE, DIO__UINT8_PB6_INITIAL_VALUE, DIO__UINT8_PB5_INITIAL_VALUE, DIO__UINT8_PB4_INITIAL_VALUE, DIO__UINT8_PB3_INITIAL_VALUE, DIO__UINT8_PB2_INITIAL_VALUE, DIO__UINT8_PB1_INITIAL_VALUE, DIO__UINT8_PB0_INITIAL_VALUE);
     e4a:	e8 e3       	ldi	r30, 0x38	; 56
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	10 82       	st	Z, r1
        PORTC__UINT8_REG = CONC(DIO__UINT8_PC7_INITIAL_VALUE, DIO__UINT8_PC6_INITIAL_VALUE, DIO__UINT8_PC5_INITIAL_VALUE, DIO__UINT8_PC4_INITIAL_VALUE, DIO__UINT8_PC3_INITIAL_VALUE, DIO__UINT8_PC2_INITIAL_VALUE, DIO__UINT8_PC1_INITIAL_VALUE, DIO__UINT8_PC0_INITIAL_VALUE);
     e50:	e5 e3       	ldi	r30, 0x35	; 53
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	80 83       	st	Z, r24
        PORTD__UINT8_REG = CONC(DIO__UINT8_PD7_INITIAL_VALUE, DIO__UINT8_PD6_INITIAL_VALUE, DIO__UINT8_PD5_INITIAL_VALUE, DIO__UINT8_PD4_INITIAL_VALUE, DIO__UINT8_PD3_INITIAL_VALUE, DIO__UINT8_PD2_INITIAL_VALUE, DIO__UINT8_PD1_INITIAL_VALUE, DIO__UINT8_PD0_INITIAL_VALUE);
     e58:	e2 e3       	ldi	r30, 0x32	; 50
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	10 82       	st	Z, r1

}
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <DIO__CheckStatusSetPinDirection>:

CheckStatus DIO__CheckStatusSetPinDirection(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 Copy__uint8PinDirection)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	2f 97       	sbiw	r28, 0x0f	; 15
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	8a 83       	std	Y+2, r24	; 0x02
     e7a:	6b 83       	std	Y+3, r22	; 0x03
     e7c:	4c 83       	std	Y+4, r20	; 0x04
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
     e7e:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pin  Direction
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && ((Copy__uint8PinDirection == DIO__UINT8_OUTPUT) || (Copy__uint8PinDirection == DIO__UINT8_INPUT)))
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	84 30       	cpi	r24, 0x04	; 4
     e84:	08 f0       	brcs	.+2      	; 0xe88 <DIO__CheckStatusSetPinDirection+0x24>
     e86:	0e c1       	rjmp	.+540    	; 0x10a4 <DIO__CheckStatusSetPinDirection+0x240>
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	88 30       	cpi	r24, 0x08	; 8
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <DIO__CheckStatusSetPinDirection+0x2c>
     e8e:	0a c1       	rjmp	.+532    	; 0x10a4 <DIO__CheckStatusSetPinDirection+0x240>
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	21 f0       	breq	.+8      	; 0xe9e <DIO__CheckStatusSetPinDirection+0x3a>
     e96:	8c 81       	ldd	r24, Y+4	; 0x04
     e98:	88 23       	and	r24, r24
     e9a:	09 f0       	breq	.+2      	; 0xe9e <DIO__CheckStatusSetPinDirection+0x3a>
     e9c:	03 c1       	rjmp	.+518    	; 0x10a4 <DIO__CheckStatusSetPinDirection+0x240>
        {
                switch (Copy__uint8PortId)
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	3f 87       	std	Y+15, r19	; 0x0f
     ea6:	2e 87       	std	Y+14, r18	; 0x0e
     ea8:	8e 85       	ldd	r24, Y+14	; 0x0e
     eaa:	9f 85       	ldd	r25, Y+15	; 0x0f
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	91 05       	cpc	r25, r1
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <DIO__CheckStatusSetPinDirection+0x50>
     eb2:	4f c0       	rjmp	.+158    	; 0xf52 <DIO__CheckStatusSetPinDirection+0xee>
     eb4:	2e 85       	ldd	r18, Y+14	; 0x0e
     eb6:	3f 85       	ldd	r19, Y+15	; 0x0f
     eb8:	22 30       	cpi	r18, 0x02	; 2
     eba:	31 05       	cpc	r19, r1
     ebc:	2c f4       	brge	.+10     	; 0xec8 <DIO__CheckStatusSetPinDirection+0x64>
     ebe:	8e 85       	ldd	r24, Y+14	; 0x0e
     ec0:	9f 85       	ldd	r25, Y+15	; 0x0f
     ec2:	00 97       	sbiw	r24, 0x00	; 0
     ec4:	71 f0       	breq	.+28     	; 0xee2 <DIO__CheckStatusSetPinDirection+0x7e>
     ec6:	eb c0       	rjmp	.+470    	; 0x109e <DIO__CheckStatusSetPinDirection+0x23a>
     ec8:	2e 85       	ldd	r18, Y+14	; 0x0e
     eca:	3f 85       	ldd	r19, Y+15	; 0x0f
     ecc:	22 30       	cpi	r18, 0x02	; 2
     ece:	31 05       	cpc	r19, r1
     ed0:	09 f4       	brne	.+2      	; 0xed4 <DIO__CheckStatusSetPinDirection+0x70>
     ed2:	77 c0       	rjmp	.+238    	; 0xfc2 <DIO__CheckStatusSetPinDirection+0x15e>
     ed4:	8e 85       	ldd	r24, Y+14	; 0x0e
     ed6:	9f 85       	ldd	r25, Y+15	; 0x0f
     ed8:	83 30       	cpi	r24, 0x03	; 3
     eda:	91 05       	cpc	r25, r1
     edc:	09 f4       	brne	.+2      	; 0xee0 <DIO__CheckStatusSetPinDirection+0x7c>
     ede:	a9 c0       	rjmp	.+338    	; 0x1032 <DIO__CheckStatusSetPinDirection+0x1ce>
     ee0:	de c0       	rjmp	.+444    	; 0x109e <DIO__CheckStatusSetPinDirection+0x23a>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PinDirection)
     ee2:	8c 81       	ldd	r24, Y+4	; 0x04
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	3d 87       	std	Y+13, r19	; 0x0d
     eea:	2c 87       	std	Y+12, r18	; 0x0c
     eec:	8c 85       	ldd	r24, Y+12	; 0x0c
     eee:	9d 85       	ldd	r25, Y+13	; 0x0d
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	d1 f0       	breq	.+52     	; 0xf28 <DIO__CheckStatusSetPinDirection+0xc4>
     ef4:	2c 85       	ldd	r18, Y+12	; 0x0c
     ef6:	3d 85       	ldd	r19, Y+13	; 0x0d
     ef8:	21 30       	cpi	r18, 0x01	; 1
     efa:	31 05       	cpc	r19, r1
     efc:	09 f0       	breq	.+2      	; 0xf00 <DIO__CheckStatusSetPinDirection+0x9c>
     efe:	cf c0       	rjmp	.+414    	; 0x109e <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRA__UINT8_REG, Copy__uint8PinId);
     f00:	aa e3       	ldi	r26, 0x3A	; 58
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	ea e3       	ldi	r30, 0x3A	; 58
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO__CheckStatusSetPinDirection+0xba>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO__CheckStatusSetPinDirection+0xb6>
     f22:	84 2b       	or	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	bb c0       	rjmp	.+374    	; 0x109e <DIO__CheckStatusSetPinDirection+0x23a>
                                break;

                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRA__UINT8_REG, Copy__uint8PinId);
     f28:	aa e3       	ldi	r26, 0x3A	; 58
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	ea e3       	ldi	r30, 0x3A	; 58
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <DIO__CheckStatusSetPinDirection+0xe2>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <DIO__CheckStatusSetPinDirection+0xde>
     f4a:	80 95       	com	r24
     f4c:	84 23       	and	r24, r20
     f4e:	8c 93       	st	X, r24
     f50:	a6 c0       	rjmp	.+332    	; 0x109e <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PinDirection)
     f52:	8c 81       	ldd	r24, Y+4	; 0x04
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	3b 87       	std	Y+11, r19	; 0x0b
     f5a:	2a 87       	std	Y+10, r18	; 0x0a
     f5c:	8a 85       	ldd	r24, Y+10	; 0x0a
     f5e:	9b 85       	ldd	r25, Y+11	; 0x0b
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	d1 f0       	breq	.+52     	; 0xf98 <DIO__CheckStatusSetPinDirection+0x134>
     f64:	2a 85       	ldd	r18, Y+10	; 0x0a
     f66:	3b 85       	ldd	r19, Y+11	; 0x0b
     f68:	21 30       	cpi	r18, 0x01	; 1
     f6a:	31 05       	cpc	r19, r1
     f6c:	09 f0       	breq	.+2      	; 0xf70 <DIO__CheckStatusSetPinDirection+0x10c>
     f6e:	97 c0       	rjmp	.+302    	; 0x109e <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                           case DIO__UINT8_OUTPUT:
                                   SET_BIT(DDRB__UINT8_REG, Copy__uint8PinId);
     f70:	a7 e3       	ldi	r26, 0x37	; 55
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e7 e3       	ldi	r30, 0x37	; 55
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO__CheckStatusSetPinDirection+0x12a>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO__CheckStatusSetPinDirection+0x126>
     f92:	84 2b       	or	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	83 c0       	rjmp	.+262    	; 0x109e <DIO__CheckStatusSetPinDirection+0x23a>
                                   break;
                           case DIO__UINT8_INPUT:
                                   CLEAR_BIT(DDRB__UINT8_REG, Copy__uint8PinId);
     f98:	a7 e3       	ldi	r26, 0x37	; 55
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e7 e3       	ldi	r30, 0x37	; 55
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO__CheckStatusSetPinDirection+0x152>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO__CheckStatusSetPinDirection+0x14e>
     fba:	80 95       	com	r24
     fbc:	84 23       	and	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	6e c0       	rjmp	.+220    	; 0x109e <DIO__CheckStatusSetPinDirection+0x23a>

                                   break;
                        }
                        break;
                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PinDirection)
     fc2:	8c 81       	ldd	r24, Y+4	; 0x04
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	39 87       	std	Y+9, r19	; 0x09
     fca:	28 87       	std	Y+8, r18	; 0x08
     fcc:	88 85       	ldd	r24, Y+8	; 0x08
     fce:	99 85       	ldd	r25, Y+9	; 0x09
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	d1 f0       	breq	.+52     	; 0x1008 <DIO__CheckStatusSetPinDirection+0x1a4>
     fd4:	28 85       	ldd	r18, Y+8	; 0x08
     fd6:	39 85       	ldd	r19, Y+9	; 0x09
     fd8:	21 30       	cpi	r18, 0x01	; 1
     fda:	31 05       	cpc	r19, r1
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <DIO__CheckStatusSetPinDirection+0x17c>
     fde:	5f c0       	rjmp	.+190    	; 0x109e <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRC__UINT8_REG, Copy__uint8PinId);
     fe0:	a4 e3       	ldi	r26, 0x34	; 52
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e4 e3       	ldi	r30, 0x34	; 52
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO__CheckStatusSetPinDirection+0x19a>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO__CheckStatusSetPinDirection+0x196>
    1002:	84 2b       	or	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	4b c0       	rjmp	.+150    	; 0x109e <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRC__UINT8_REG, Copy__uint8PinId);
    1008:	a4 e3       	ldi	r26, 0x34	; 52
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e4 e3       	ldi	r30, 0x34	; 52
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO__CheckStatusSetPinDirection+0x1c2>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO__CheckStatusSetPinDirection+0x1be>
    102a:	80 95       	com	r24
    102c:	84 23       	and	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	36 c0       	rjmp	.+108    	; 0x109e <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PinDirection)
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	3f 83       	std	Y+7, r19	; 0x07
    103a:	2e 83       	std	Y+6, r18	; 0x06
    103c:	8e 81       	ldd	r24, Y+6	; 0x06
    103e:	9f 81       	ldd	r25, Y+7	; 0x07
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	c9 f0       	breq	.+50     	; 0x1076 <DIO__CheckStatusSetPinDirection+0x212>
    1044:	2e 81       	ldd	r18, Y+6	; 0x06
    1046:	3f 81       	ldd	r19, Y+7	; 0x07
    1048:	21 30       	cpi	r18, 0x01	; 1
    104a:	31 05       	cpc	r19, r1
    104c:	41 f5       	brne	.+80     	; 0x109e <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRD__UINT8_REG, Copy__uint8PinId);
    104e:	a1 e3       	ldi	r26, 0x31	; 49
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e1 e3       	ldi	r30, 0x31	; 49
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO__CheckStatusSetPinDirection+0x208>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <DIO__CheckStatusSetPinDirection+0x204>
    1070:	84 2b       	or	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	14 c0       	rjmp	.+40     	; 0x109e <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRD__UINT8_REG, Copy__uint8PinId);
    1076:	a1 e3       	ldi	r26, 0x31	; 49
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e1 e3       	ldi	r30, 0x31	; 49
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO__CheckStatusSetPinDirection+0x230>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO__CheckStatusSetPinDirection+0x22c>
    1098:	80 95       	com	r24
    109a:	84 23       	and	r24, r20
    109c:	8c 93       	st	X, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    109e:	39 81       	ldd	r19, Y+1	; 0x01
    10a0:	3d 83       	std	Y+5, r19	; 0x05
    10a2:	04 c0       	rjmp	.+8      	; 0x10ac <DIO__CheckStatusSetPinDirection+0x248>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	8d 83       	std	Y+5, r24	; 0x05
    10ac:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    10ae:	2f 96       	adiw	r28, 0x0f	; 15
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <DIO__CheckStatusSetPinValue>:

CheckStatus DIO__CheckStatusSetPinValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 Copy__uint8PinValue)
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	2f 97       	sbiw	r28, 0x0f	; 15
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	8a 83       	std	Y+2, r24	; 0x02
    10d6:	6b 83       	std	Y+3, r22	; 0x03
    10d8:	4c 83       	std	Y+4, r20	; 0x04
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    10da:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pin  Value 
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && ((Copy__uint8PinValue == DIO__UINT8_HIGH) || (Copy__uint8PinValue == DIO__UINT8_LOW)))
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	84 30       	cpi	r24, 0x04	; 4
    10e0:	08 f0       	brcs	.+2      	; 0x10e4 <DIO__CheckStatusSetPinValue+0x24>
    10e2:	0e c1       	rjmp	.+540    	; 0x1300 <DIO__CheckStatusSetPinValue+0x240>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	88 30       	cpi	r24, 0x08	; 8
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <DIO__CheckStatusSetPinValue+0x2c>
    10ea:	0a c1       	rjmp	.+532    	; 0x1300 <DIO__CheckStatusSetPinValue+0x240>
    10ec:	8c 81       	ldd	r24, Y+4	; 0x04
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	21 f0       	breq	.+8      	; 0x10fa <DIO__CheckStatusSetPinValue+0x3a>
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	88 23       	and	r24, r24
    10f6:	09 f0       	breq	.+2      	; 0x10fa <DIO__CheckStatusSetPinValue+0x3a>
    10f8:	03 c1       	rjmp	.+518    	; 0x1300 <DIO__CheckStatusSetPinValue+0x240>
        {
                switch (Copy__uint8PortId)
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	3f 87       	std	Y+15, r19	; 0x0f
    1102:	2e 87       	std	Y+14, r18	; 0x0e
    1104:	8e 85       	ldd	r24, Y+14	; 0x0e
    1106:	9f 85       	ldd	r25, Y+15	; 0x0f
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	91 05       	cpc	r25, r1
    110c:	09 f4       	brne	.+2      	; 0x1110 <DIO__CheckStatusSetPinValue+0x50>
    110e:	4f c0       	rjmp	.+158    	; 0x11ae <DIO__CheckStatusSetPinValue+0xee>
    1110:	2e 85       	ldd	r18, Y+14	; 0x0e
    1112:	3f 85       	ldd	r19, Y+15	; 0x0f
    1114:	22 30       	cpi	r18, 0x02	; 2
    1116:	31 05       	cpc	r19, r1
    1118:	2c f4       	brge	.+10     	; 0x1124 <DIO__CheckStatusSetPinValue+0x64>
    111a:	8e 85       	ldd	r24, Y+14	; 0x0e
    111c:	9f 85       	ldd	r25, Y+15	; 0x0f
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	71 f0       	breq	.+28     	; 0x113e <DIO__CheckStatusSetPinValue+0x7e>
    1122:	eb c0       	rjmp	.+470    	; 0x12fa <DIO__CheckStatusSetPinValue+0x23a>
    1124:	2e 85       	ldd	r18, Y+14	; 0x0e
    1126:	3f 85       	ldd	r19, Y+15	; 0x0f
    1128:	22 30       	cpi	r18, 0x02	; 2
    112a:	31 05       	cpc	r19, r1
    112c:	09 f4       	brne	.+2      	; 0x1130 <DIO__CheckStatusSetPinValue+0x70>
    112e:	77 c0       	rjmp	.+238    	; 0x121e <DIO__CheckStatusSetPinValue+0x15e>
    1130:	8e 85       	ldd	r24, Y+14	; 0x0e
    1132:	9f 85       	ldd	r25, Y+15	; 0x0f
    1134:	83 30       	cpi	r24, 0x03	; 3
    1136:	91 05       	cpc	r25, r1
    1138:	09 f4       	brne	.+2      	; 0x113c <DIO__CheckStatusSetPinValue+0x7c>
    113a:	a9 c0       	rjmp	.+338    	; 0x128e <DIO__CheckStatusSetPinValue+0x1ce>
    113c:	de c0       	rjmp	.+444    	; 0x12fa <DIO__CheckStatusSetPinValue+0x23a>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PinValue)
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	3d 87       	std	Y+13, r19	; 0x0d
    1146:	2c 87       	std	Y+12, r18	; 0x0c
    1148:	8c 85       	ldd	r24, Y+12	; 0x0c
    114a:	9d 85       	ldd	r25, Y+13	; 0x0d
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	d1 f0       	breq	.+52     	; 0x1184 <DIO__CheckStatusSetPinValue+0xc4>
    1150:	2c 85       	ldd	r18, Y+12	; 0x0c
    1152:	3d 85       	ldd	r19, Y+13	; 0x0d
    1154:	21 30       	cpi	r18, 0x01	; 1
    1156:	31 05       	cpc	r19, r1
    1158:	09 f0       	breq	.+2      	; 0x115c <DIO__CheckStatusSetPinValue+0x9c>
    115a:	cf c0       	rjmp	.+414    	; 0x12fa <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTA__UINT8_REG, Copy__uint8PinId);
    115c:	ab e3       	ldi	r26, 0x3B	; 59
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	eb e3       	ldi	r30, 0x3B	; 59
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO__CheckStatusSetPinValue+0xba>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO__CheckStatusSetPinValue+0xb6>
    117e:	84 2b       	or	r24, r20
    1180:	8c 93       	st	X, r24
    1182:	bb c0       	rjmp	.+374    	; 0x12fa <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTA__UINT8_REG, Copy__uint8PinId);
    1184:	ab e3       	ldi	r26, 0x3B	; 59
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	eb e3       	ldi	r30, 0x3B	; 59
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	48 2f       	mov	r20, r24
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	02 2e       	mov	r0, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO__CheckStatusSetPinValue+0xe2>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	0a 94       	dec	r0
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <DIO__CheckStatusSetPinValue+0xde>
    11a6:	80 95       	com	r24
    11a8:	84 23       	and	r24, r20
    11aa:	8c 93       	st	X, r24
    11ac:	a6 c0       	rjmp	.+332    	; 0x12fa <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PinValue)
    11ae:	8c 81       	ldd	r24, Y+4	; 0x04
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	3b 87       	std	Y+11, r19	; 0x0b
    11b6:	2a 87       	std	Y+10, r18	; 0x0a
    11b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    11ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	d1 f0       	breq	.+52     	; 0x11f4 <DIO__CheckStatusSetPinValue+0x134>
    11c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    11c2:	3b 85       	ldd	r19, Y+11	; 0x0b
    11c4:	21 30       	cpi	r18, 0x01	; 1
    11c6:	31 05       	cpc	r19, r1
    11c8:	09 f0       	breq	.+2      	; 0x11cc <DIO__CheckStatusSetPinValue+0x10c>
    11ca:	97 c0       	rjmp	.+302    	; 0x12fa <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTB__UINT8_REG, Copy__uint8PinId);
    11cc:	a8 e3       	ldi	r26, 0x38	; 56
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e8 e3       	ldi	r30, 0x38	; 56
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 2e       	mov	r0, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <DIO__CheckStatusSetPinValue+0x12a>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	0a 94       	dec	r0
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <DIO__CheckStatusSetPinValue+0x126>
    11ee:	84 2b       	or	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	83 c0       	rjmp	.+262    	; 0x12fa <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTB__UINT8_REG, Copy__uint8PinId);
    11f4:	a8 e3       	ldi	r26, 0x38	; 56
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e8 e3       	ldi	r30, 0x38	; 56
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 2e       	mov	r0, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <DIO__CheckStatusSetPinValue+0x152>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <DIO__CheckStatusSetPinValue+0x14e>
    1216:	80 95       	com	r24
    1218:	84 23       	and	r24, r20
    121a:	8c 93       	st	X, r24
    121c:	6e c0       	rjmp	.+220    	; 0x12fa <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PinValue)
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	39 87       	std	Y+9, r19	; 0x09
    1226:	28 87       	std	Y+8, r18	; 0x08
    1228:	88 85       	ldd	r24, Y+8	; 0x08
    122a:	99 85       	ldd	r25, Y+9	; 0x09
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	d1 f0       	breq	.+52     	; 0x1264 <DIO__CheckStatusSetPinValue+0x1a4>
    1230:	28 85       	ldd	r18, Y+8	; 0x08
    1232:	39 85       	ldd	r19, Y+9	; 0x09
    1234:	21 30       	cpi	r18, 0x01	; 1
    1236:	31 05       	cpc	r19, r1
    1238:	09 f0       	breq	.+2      	; 0x123c <DIO__CheckStatusSetPinValue+0x17c>
    123a:	5f c0       	rjmp	.+190    	; 0x12fa <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTC__UINT8_REG, Copy__uint8PinId);
    123c:	a5 e3       	ldi	r26, 0x35	; 53
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e5 e3       	ldi	r30, 0x35	; 53
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <DIO__CheckStatusSetPinValue+0x19a>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <DIO__CheckStatusSetPinValue+0x196>
    125e:	84 2b       	or	r24, r20
    1260:	8c 93       	st	X, r24
    1262:	4b c0       	rjmp	.+150    	; 0x12fa <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTC__UINT8_REG, Copy__uint8PinId);
    1264:	a5 e3       	ldi	r26, 0x35	; 53
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e5 e3       	ldi	r30, 0x35	; 53
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <DIO__CheckStatusSetPinValue+0x1c2>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <DIO__CheckStatusSetPinValue+0x1be>
    1286:	80 95       	com	r24
    1288:	84 23       	and	r24, r20
    128a:	8c 93       	st	X, r24
    128c:	36 c0       	rjmp	.+108    	; 0x12fa <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PinValue)
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	3f 83       	std	Y+7, r19	; 0x07
    1296:	2e 83       	std	Y+6, r18	; 0x06
    1298:	8e 81       	ldd	r24, Y+6	; 0x06
    129a:	9f 81       	ldd	r25, Y+7	; 0x07
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	c9 f0       	breq	.+50     	; 0x12d2 <DIO__CheckStatusSetPinValue+0x212>
    12a0:	2e 81       	ldd	r18, Y+6	; 0x06
    12a2:	3f 81       	ldd	r19, Y+7	; 0x07
    12a4:	21 30       	cpi	r18, 0x01	; 1
    12a6:	31 05       	cpc	r19, r1
    12a8:	41 f5       	brne	.+80     	; 0x12fa <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTD__UINT8_REG, Copy__uint8PinId);
    12aa:	a2 e3       	ldi	r26, 0x32	; 50
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e2 e3       	ldi	r30, 0x32	; 50
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO__CheckStatusSetPinValue+0x208>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO__CheckStatusSetPinValue+0x204>
    12cc:	84 2b       	or	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	14 c0       	rjmp	.+40     	; 0x12fa <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTD__UINT8_REG, Copy__uint8PinId);
    12d2:	a2 e3       	ldi	r26, 0x32	; 50
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e2 e3       	ldi	r30, 0x32	; 50
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <DIO__CheckStatusSetPinValue+0x230>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <DIO__CheckStatusSetPinValue+0x22c>
    12f4:	80 95       	com	r24
    12f6:	84 23       	and	r24, r20
    12f8:	8c 93       	st	X, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    12fa:	39 81       	ldd	r19, Y+1	; 0x01
    12fc:	3d 83       	std	Y+5, r19	; 0x05
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <DIO__CheckStatusSetPinValue+0x248>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	8d 83       	std	Y+5, r24	; 0x05
    1308:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    130a:	2f 96       	adiw	r28, 0x0f	; 15
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <DIO__CheckStatusGetPinValue>:

CheckStatus DIO__CheckStatusGetPinValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 *Copy_p_uint8ReturnPinValue)
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	28 97       	sbiw	r28, 0x08	; 8
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	8a 83       	std	Y+2, r24	; 0x02
    1332:	6b 83       	std	Y+3, r22	; 0x03
    1334:	5d 83       	std	Y+5, r21	; 0x05
    1336:	4c 83       	std	Y+4, r20	; 0x04

        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    1338:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pointer != NULL
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && (Copy_p_uint8ReturnPinValue != NULL))
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	84 30       	cpi	r24, 0x04	; 4
    133e:	08 f0       	brcs	.+2      	; 0x1342 <DIO__CheckStatusGetPinValue+0x26>
    1340:	ec c0       	rjmp	.+472    	; 0x151a <DIO__CheckStatusGetPinValue+0x1fe>
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	88 30       	cpi	r24, 0x08	; 8
    1346:	08 f0       	brcs	.+2      	; 0x134a <DIO__CheckStatusGetPinValue+0x2e>
    1348:	e8 c0       	rjmp	.+464    	; 0x151a <DIO__CheckStatusGetPinValue+0x1fe>
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	9d 81       	ldd	r25, Y+5	; 0x05
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	09 f4       	brne	.+2      	; 0x1354 <DIO__CheckStatusGetPinValue+0x38>
    1352:	e3 c0       	rjmp	.+454    	; 0x151a <DIO__CheckStatusGetPinValue+0x1fe>
        {
                switch (Copy__uint8PortId)
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	38 87       	std	Y+8, r19	; 0x08
    135c:	2f 83       	std	Y+7, r18	; 0x07
    135e:	4f 81       	ldd	r20, Y+7	; 0x07
    1360:	58 85       	ldd	r21, Y+8	; 0x08
    1362:	41 30       	cpi	r20, 0x01	; 1
    1364:	51 05       	cpc	r21, r1
    1366:	09 f4       	brne	.+2      	; 0x136a <DIO__CheckStatusGetPinValue+0x4e>
    1368:	48 c0       	rjmp	.+144    	; 0x13fa <DIO__CheckStatusGetPinValue+0xde>
    136a:	8f 81       	ldd	r24, Y+7	; 0x07
    136c:	98 85       	ldd	r25, Y+8	; 0x08
    136e:	82 30       	cpi	r24, 0x02	; 2
    1370:	91 05       	cpc	r25, r1
    1372:	34 f4       	brge	.+12     	; 0x1380 <DIO__CheckStatusGetPinValue+0x64>
    1374:	2f 81       	ldd	r18, Y+7	; 0x07
    1376:	38 85       	ldd	r19, Y+8	; 0x08
    1378:	21 15       	cp	r18, r1
    137a:	31 05       	cpc	r19, r1
    137c:	71 f0       	breq	.+28     	; 0x139a <DIO__CheckStatusGetPinValue+0x7e>
    137e:	ca c0       	rjmp	.+404    	; 0x1514 <DIO__CheckStatusGetPinValue+0x1f8>
    1380:	4f 81       	ldd	r20, Y+7	; 0x07
    1382:	58 85       	ldd	r21, Y+8	; 0x08
    1384:	42 30       	cpi	r20, 0x02	; 2
    1386:	51 05       	cpc	r21, r1
    1388:	09 f4       	brne	.+2      	; 0x138c <DIO__CheckStatusGetPinValue+0x70>
    138a:	67 c0       	rjmp	.+206    	; 0x145a <DIO__CheckStatusGetPinValue+0x13e>
    138c:	8f 81       	ldd	r24, Y+7	; 0x07
    138e:	98 85       	ldd	r25, Y+8	; 0x08
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	91 05       	cpc	r25, r1
    1394:	09 f4       	brne	.+2      	; 0x1398 <DIO__CheckStatusGetPinValue+0x7c>
    1396:	90 c0       	rjmp	.+288    	; 0x14b8 <DIO__CheckStatusGetPinValue+0x19c>
    1398:	bd c0       	rjmp	.+378    	; 0x1514 <DIO__CheckStatusGetPinValue+0x1f8>
                {
                case DIO__UINT8_PORTA:
                        if (GET_BIT(PINA__UINT8_REG, Copy__uint8PinId) == 0)
    139a:	e9 e3       	ldi	r30, 0x39	; 57
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	88 2f       	mov	r24, r24
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a9 01       	movw	r20, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <DIO__CheckStatusGetPinValue+0x96>
    13ae:	55 95       	asr	r21
    13b0:	47 95       	ror	r20
    13b2:	8a 95       	dec	r24
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <DIO__CheckStatusGetPinValue+0x92>
    13b6:	ca 01       	movw	r24, r20
    13b8:	81 70       	andi	r24, 0x01	; 1
    13ba:	90 70       	andi	r25, 0x00	; 0
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	21 f4       	brne	.+8      	; 0x13c8 <DIO__CheckStatusGetPinValue+0xac>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    13c0:	ec 81       	ldd	r30, Y+4	; 0x04
    13c2:	fd 81       	ldd	r31, Y+5	; 0x05
    13c4:	10 82       	st	Z, r1
    13c6:	a6 c0       	rjmp	.+332    	; 0x1514 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINA__UINT8_REG, Copy__uint8PinId) != 0)
    13c8:	e9 e3       	ldi	r30, 0x39	; 57
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	88 2f       	mov	r24, r24
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	a9 01       	movw	r20, r18
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <DIO__CheckStatusGetPinValue+0xc4>
    13dc:	55 95       	asr	r21
    13de:	47 95       	ror	r20
    13e0:	8a 95       	dec	r24
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <DIO__CheckStatusGetPinValue+0xc0>
    13e4:	ca 01       	movw	r24, r20
    13e6:	81 70       	andi	r24, 0x01	; 1
    13e8:	90 70       	andi	r25, 0x00	; 0
    13ea:	88 23       	and	r24, r24
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <DIO__CheckStatusGetPinValue+0xd4>
    13ee:	92 c0       	rjmp	.+292    	; 0x1514 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    13f0:	ec 81       	ldd	r30, Y+4	; 0x04
    13f2:	fd 81       	ldd	r31, Y+5	; 0x05
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	80 83       	st	Z, r24
    13f8:	8d c0       	rjmp	.+282    	; 0x1514 <DIO__CheckStatusGetPinValue+0x1f8>
                                /* DO NOTHING */
                        }

                        break;
                case DIO__UINT8_PORTB:
                        if (GET_BIT(PINB__UINT8_REG, Copy__uint8PinId) == 0)
    13fa:	e6 e3       	ldi	r30, 0x36	; 54
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	88 2f       	mov	r24, r24
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a9 01       	movw	r20, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <DIO__CheckStatusGetPinValue+0xf6>
    140e:	55 95       	asr	r21
    1410:	47 95       	ror	r20
    1412:	8a 95       	dec	r24
    1414:	e2 f7       	brpl	.-8      	; 0x140e <DIO__CheckStatusGetPinValue+0xf2>
    1416:	ca 01       	movw	r24, r20
    1418:	81 70       	andi	r24, 0x01	; 1
    141a:	90 70       	andi	r25, 0x00	; 0
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	21 f4       	brne	.+8      	; 0x1428 <DIO__CheckStatusGetPinValue+0x10c>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    1420:	ec 81       	ldd	r30, Y+4	; 0x04
    1422:	fd 81       	ldd	r31, Y+5	; 0x05
    1424:	10 82       	st	Z, r1
    1426:	76 c0       	rjmp	.+236    	; 0x1514 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINB__UINT8_REG, Copy__uint8PinId) != 0)
    1428:	e6 e3       	ldi	r30, 0x36	; 54
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	88 2f       	mov	r24, r24
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	a9 01       	movw	r20, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <DIO__CheckStatusGetPinValue+0x124>
    143c:	55 95       	asr	r21
    143e:	47 95       	ror	r20
    1440:	8a 95       	dec	r24
    1442:	e2 f7       	brpl	.-8      	; 0x143c <DIO__CheckStatusGetPinValue+0x120>
    1444:	ca 01       	movw	r24, r20
    1446:	81 70       	andi	r24, 0x01	; 1
    1448:	90 70       	andi	r25, 0x00	; 0
    144a:	88 23       	and	r24, r24
    144c:	09 f4       	brne	.+2      	; 0x1450 <DIO__CheckStatusGetPinValue+0x134>
    144e:	62 c0       	rjmp	.+196    	; 0x1514 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    1450:	ec 81       	ldd	r30, Y+4	; 0x04
    1452:	fd 81       	ldd	r31, Y+5	; 0x05
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	80 83       	st	Z, r24
    1458:	5d c0       	rjmp	.+186    	; 0x1514 <DIO__CheckStatusGetPinValue+0x1f8>

                        break;

                case DIO__UINT8_PORTC:

                        if (GET_BIT(PINC__UINT8_REG, Copy__uint8PinId) == 0)
    145a:	e3 e3       	ldi	r30, 0x33	; 51
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	88 2f       	mov	r24, r24
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	a9 01       	movw	r20, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <DIO__CheckStatusGetPinValue+0x156>
    146e:	55 95       	asr	r21
    1470:	47 95       	ror	r20
    1472:	8a 95       	dec	r24
    1474:	e2 f7       	brpl	.-8      	; 0x146e <DIO__CheckStatusGetPinValue+0x152>
    1476:	ca 01       	movw	r24, r20
    1478:	81 70       	andi	r24, 0x01	; 1
    147a:	90 70       	andi	r25, 0x00	; 0
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	21 f4       	brne	.+8      	; 0x1488 <DIO__CheckStatusGetPinValue+0x16c>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    1480:	ec 81       	ldd	r30, Y+4	; 0x04
    1482:	fd 81       	ldd	r31, Y+5	; 0x05
    1484:	10 82       	st	Z, r1
    1486:	46 c0       	rjmp	.+140    	; 0x1514 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINC__UINT8_REG, Copy__uint8PinId) != 0)
    1488:	e3 e3       	ldi	r30, 0x33	; 51
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a9 01       	movw	r20, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <DIO__CheckStatusGetPinValue+0x184>
    149c:	55 95       	asr	r21
    149e:	47 95       	ror	r20
    14a0:	8a 95       	dec	r24
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <DIO__CheckStatusGetPinValue+0x180>
    14a4:	ca 01       	movw	r24, r20
    14a6:	81 70       	andi	r24, 0x01	; 1
    14a8:	90 70       	andi	r25, 0x00	; 0
    14aa:	88 23       	and	r24, r24
    14ac:	99 f1       	breq	.+102    	; 0x1514 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    14ae:	ec 81       	ldd	r30, Y+4	; 0x04
    14b0:	fd 81       	ldd	r31, Y+5	; 0x05
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	80 83       	st	Z, r24
    14b6:	2e c0       	rjmp	.+92     	; 0x1514 <DIO__CheckStatusGetPinValue+0x1f8>
                                /* DO NOTHING */
                        }

                        break;
                case DIO__UINT8_PORTD:
                        if (GET_BIT(PIND__UINT8_REG, Copy__uint8PinId) == 0)
    14b8:	e0 e3       	ldi	r30, 0x30	; 48
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	a9 01       	movw	r20, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO__CheckStatusGetPinValue+0x1b4>
    14cc:	55 95       	asr	r21
    14ce:	47 95       	ror	r20
    14d0:	8a 95       	dec	r24
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO__CheckStatusGetPinValue+0x1b0>
    14d4:	ca 01       	movw	r24, r20
    14d6:	81 70       	andi	r24, 0x01	; 1
    14d8:	90 70       	andi	r25, 0x00	; 0
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	21 f4       	brne	.+8      	; 0x14e6 <DIO__CheckStatusGetPinValue+0x1ca>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    14de:	ec 81       	ldd	r30, Y+4	; 0x04
    14e0:	fd 81       	ldd	r31, Y+5	; 0x05
    14e2:	10 82       	st	Z, r1
    14e4:	17 c0       	rjmp	.+46     	; 0x1514 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PIND__UINT8_REG, Copy__uint8PinId) != 0)
    14e6:	e0 e3       	ldi	r30, 0x30	; 48
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	88 2f       	mov	r24, r24
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	a9 01       	movw	r20, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <DIO__CheckStatusGetPinValue+0x1e2>
    14fa:	55 95       	asr	r21
    14fc:	47 95       	ror	r20
    14fe:	8a 95       	dec	r24
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <DIO__CheckStatusGetPinValue+0x1de>
    1502:	ca 01       	movw	r24, r20
    1504:	81 70       	andi	r24, 0x01	; 1
    1506:	90 70       	andi	r25, 0x00	; 0
    1508:	88 23       	and	r24, r24
    150a:	21 f0       	breq	.+8      	; 0x1514 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    150c:	ec 81       	ldd	r30, Y+4	; 0x04
    150e:	fd 81       	ldd	r31, Y+5	; 0x05
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1514:	59 81       	ldd	r21, Y+1	; 0x01
    1516:	5e 83       	std	Y+6, r21	; 0x06
    1518:	04 c0       	rjmp	.+8      	; 0x1522 <DIO__CheckStatusGetPinValue+0x206>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	8e 83       	std	Y+6, r24	; 0x06
    1522:	8e 81       	ldd	r24, Y+6	; 0x06
        }
}
    1524:	28 96       	adiw	r28, 0x08	; 8
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <DIO__CheckStatusSetPortDirection>:

CheckStatus DIO__CheckStatusSetPortDirection(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PortDirection)
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	2e 97       	sbiw	r28, 0x0e	; 14
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	8a 83       	std	Y+2, r24	; 0x02
    154c:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    154e:	19 82       	std	Y+1, r1	; 0x01
        /* 
        Check 1-Valid Port Id
              2-Valid PORT diraction 
        */

        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && ((Copy__uint8PortDirection == DIO__UINT8_OUTPUT) || (Copy__uint8PortDirection == DIO__UINT8_INPUT)))
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	84 30       	cpi	r24, 0x04	; 4
    1554:	08 f0       	brcs	.+2      	; 0x1558 <DIO__CheckStatusSetPortDirection+0x22>
    1556:	89 c0       	rjmp	.+274    	; 0x166a <DIO__CheckStatusSetPortDirection+0x134>
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	21 f0       	breq	.+8      	; 0x1566 <DIO__CheckStatusSetPortDirection+0x30>
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	88 23       	and	r24, r24
    1562:	09 f0       	breq	.+2      	; 0x1566 <DIO__CheckStatusSetPortDirection+0x30>
    1564:	82 c0       	rjmp	.+260    	; 0x166a <DIO__CheckStatusSetPortDirection+0x134>
        {
                switch (Copy__uint8PortId)
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	3e 87       	std	Y+14, r19	; 0x0e
    156e:	2d 87       	std	Y+13, r18	; 0x0d
    1570:	8d 85       	ldd	r24, Y+13	; 0x0d
    1572:	9e 85       	ldd	r25, Y+14	; 0x0e
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	91 05       	cpc	r25, r1
    1578:	71 f1       	breq	.+92     	; 0x15d6 <DIO__CheckStatusSetPortDirection+0xa0>
    157a:	2d 85       	ldd	r18, Y+13	; 0x0d
    157c:	3e 85       	ldd	r19, Y+14	; 0x0e
    157e:	22 30       	cpi	r18, 0x02	; 2
    1580:	31 05       	cpc	r19, r1
    1582:	2c f4       	brge	.+10     	; 0x158e <DIO__CheckStatusSetPortDirection+0x58>
    1584:	8d 85       	ldd	r24, Y+13	; 0x0d
    1586:	9e 85       	ldd	r25, Y+14	; 0x0e
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	69 f0       	breq	.+26     	; 0x15a6 <DIO__CheckStatusSetPortDirection+0x70>
    158c:	6b c0       	rjmp	.+214    	; 0x1664 <DIO__CheckStatusSetPortDirection+0x12e>
    158e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1590:	3e 85       	ldd	r19, Y+14	; 0x0e
    1592:	22 30       	cpi	r18, 0x02	; 2
    1594:	31 05       	cpc	r19, r1
    1596:	b9 f1       	breq	.+110    	; 0x1606 <DIO__CheckStatusSetPortDirection+0xd0>
    1598:	8d 85       	ldd	r24, Y+13	; 0x0d
    159a:	9e 85       	ldd	r25, Y+14	; 0x0e
    159c:	83 30       	cpi	r24, 0x03	; 3
    159e:	91 05       	cpc	r25, r1
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <DIO__CheckStatusSetPortDirection+0x6e>
    15a2:	49 c0       	rjmp	.+146    	; 0x1636 <DIO__CheckStatusSetPortDirection+0x100>
    15a4:	5f c0       	rjmp	.+190    	; 0x1664 <DIO__CheckStatusSetPortDirection+0x12e>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PortDirection)
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	3c 87       	std	Y+12, r19	; 0x0c
    15ae:	2b 87       	std	Y+11, r18	; 0x0b
    15b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    15b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	31 f0       	breq	.+12     	; 0x15c4 <DIO__CheckStatusSetPortDirection+0x8e>
    15b8:	2b 85       	ldd	r18, Y+11	; 0x0b
    15ba:	3c 85       	ldd	r19, Y+12	; 0x0c
    15bc:	21 30       	cpi	r18, 0x01	; 1
    15be:	31 05       	cpc	r19, r1
    15c0:	29 f0       	breq	.+10     	; 0x15cc <DIO__CheckStatusSetPortDirection+0x96>
    15c2:	50 c0       	rjmp	.+160    	; 0x1664 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTA__UINT8_REG = 0x00;
    15c4:	eb e3       	ldi	r30, 0x3B	; 59
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	10 82       	st	Z, r1
    15ca:	4c c0       	rjmp	.+152    	; 0x1664 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTA__UINT8_REG = 0xFF;
    15cc:	eb e3       	ldi	r30, 0x3B	; 59
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	8f ef       	ldi	r24, 0xFF	; 255
    15d2:	80 83       	st	Z, r24
    15d4:	47 c0       	rjmp	.+142    	; 0x1664 <DIO__CheckStatusSetPortDirection+0x12e>
                                /* DO  NOTHING */
                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PortDirection)
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	3a 87       	std	Y+10, r19	; 0x0a
    15de:	29 87       	std	Y+9, r18	; 0x09
    15e0:	89 85       	ldd	r24, Y+9	; 0x09
    15e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	31 f0       	breq	.+12     	; 0x15f4 <DIO__CheckStatusSetPortDirection+0xbe>
    15e8:	29 85       	ldd	r18, Y+9	; 0x09
    15ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    15ec:	21 30       	cpi	r18, 0x01	; 1
    15ee:	31 05       	cpc	r19, r1
    15f0:	29 f0       	breq	.+10     	; 0x15fc <DIO__CheckStatusSetPortDirection+0xc6>
    15f2:	38 c0       	rjmp	.+112    	; 0x1664 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTB__UINT8_REG = 0x00;
    15f4:	e8 e3       	ldi	r30, 0x38	; 56
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	10 82       	st	Z, r1
    15fa:	34 c0       	rjmp	.+104    	; 0x1664 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTB__UINT8_REG = 0xFF;
    15fc:	e8 e3       	ldi	r30, 0x38	; 56
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	8f ef       	ldi	r24, 0xFF	; 255
    1602:	80 83       	st	Z, r24
    1604:	2f c0       	rjmp	.+94     	; 0x1664 <DIO__CheckStatusSetPortDirection+0x12e>
                        }

                        break;

                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PortDirection)
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	38 87       	std	Y+8, r19	; 0x08
    160e:	2f 83       	std	Y+7, r18	; 0x07
    1610:	8f 81       	ldd	r24, Y+7	; 0x07
    1612:	98 85       	ldd	r25, Y+8	; 0x08
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	31 f0       	breq	.+12     	; 0x1624 <DIO__CheckStatusSetPortDirection+0xee>
    1618:	2f 81       	ldd	r18, Y+7	; 0x07
    161a:	38 85       	ldd	r19, Y+8	; 0x08
    161c:	21 30       	cpi	r18, 0x01	; 1
    161e:	31 05       	cpc	r19, r1
    1620:	29 f0       	breq	.+10     	; 0x162c <DIO__CheckStatusSetPortDirection+0xf6>
    1622:	20 c0       	rjmp	.+64     	; 0x1664 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTC__UINT8_REG = 0x00;
    1624:	e5 e3       	ldi	r30, 0x35	; 53
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	10 82       	st	Z, r1
    162a:	1c c0       	rjmp	.+56     	; 0x1664 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTC__UINT8_REG = 0xFF;
    162c:	e5 e3       	ldi	r30, 0x35	; 53
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	8f ef       	ldi	r24, 0xFF	; 255
    1632:	80 83       	st	Z, r24
    1634:	17 c0       	rjmp	.+46     	; 0x1664 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        }

                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PortDirection)
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	3e 83       	std	Y+6, r19	; 0x06
    163e:	2d 83       	std	Y+5, r18	; 0x05
    1640:	8d 81       	ldd	r24, Y+5	; 0x05
    1642:	9e 81       	ldd	r25, Y+6	; 0x06
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	31 f0       	breq	.+12     	; 0x1654 <DIO__CheckStatusSetPortDirection+0x11e>
    1648:	2d 81       	ldd	r18, Y+5	; 0x05
    164a:	3e 81       	ldd	r19, Y+6	; 0x06
    164c:	21 30       	cpi	r18, 0x01	; 1
    164e:	31 05       	cpc	r19, r1
    1650:	29 f0       	breq	.+10     	; 0x165c <DIO__CheckStatusSetPortDirection+0x126>
    1652:	08 c0       	rjmp	.+16     	; 0x1664 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTD__UINT8_REG = 0x00;
    1654:	e2 e3       	ldi	r30, 0x32	; 50
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	10 82       	st	Z, r1
    165a:	04 c0       	rjmp	.+8      	; 0x1664 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTD__UINT8_REG = 0xFF;
    165c:	e2 e3       	ldi	r30, 0x32	; 50
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	8f ef       	ldi	r24, 0xFF	; 255
    1662:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1664:	39 81       	ldd	r19, Y+1	; 0x01
    1666:	3c 83       	std	Y+4, r19	; 0x04
    1668:	04 c0       	rjmp	.+8      	; 0x1672 <DIO__CheckStatusSetPortDirection+0x13c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	8c 83       	std	Y+4, r24	; 0x04
    1672:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    1674:	2e 96       	adiw	r28, 0x0e	; 14
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <DIO__CheckStatusSetPortValue>:

CheckStatus DIO__CheckStatusSetPortValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PortValue)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	00 d0       	rcall	.+0      	; 0x168c <DIO__CheckStatusSetPortValue+0x6>
    168c:	00 d0       	rcall	.+0      	; 0x168e <DIO__CheckStatusSetPortValue+0x8>
    168e:	00 d0       	rcall	.+0      	; 0x1690 <DIO__CheckStatusSetPortValue+0xa>
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	8a 83       	std	Y+2, r24	; 0x02
    1696:	6b 83       	std	Y+3, r22	; 0x03

        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    1698:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
               
        */
        if (Copy__uint8PortId <= DIO__UINT8_PORTD)
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	84 30       	cpi	r24, 0x04	; 4
    169e:	a8 f5       	brcc	.+106    	; 0x170a <DIO__CheckStatusSetPortValue+0x84>
        {
                switch (Copy__uint8PortId)
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	3e 83       	std	Y+6, r19	; 0x06
    16a8:	2d 83       	std	Y+5, r18	; 0x05
    16aa:	8d 81       	ldd	r24, Y+5	; 0x05
    16ac:	9e 81       	ldd	r25, Y+6	; 0x06
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	91 05       	cpc	r25, r1
    16b2:	d1 f0       	breq	.+52     	; 0x16e8 <DIO__CheckStatusSetPortValue+0x62>
    16b4:	2d 81       	ldd	r18, Y+5	; 0x05
    16b6:	3e 81       	ldd	r19, Y+6	; 0x06
    16b8:	22 30       	cpi	r18, 0x02	; 2
    16ba:	31 05       	cpc	r19, r1
    16bc:	2c f4       	brge	.+10     	; 0x16c8 <DIO__CheckStatusSetPortValue+0x42>
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	9e 81       	ldd	r25, Y+6	; 0x06
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	61 f0       	breq	.+24     	; 0x16de <DIO__CheckStatusSetPortValue+0x58>
    16c6:	1e c0       	rjmp	.+60     	; 0x1704 <DIO__CheckStatusSetPortValue+0x7e>
    16c8:	2d 81       	ldd	r18, Y+5	; 0x05
    16ca:	3e 81       	ldd	r19, Y+6	; 0x06
    16cc:	22 30       	cpi	r18, 0x02	; 2
    16ce:	31 05       	cpc	r19, r1
    16d0:	81 f0       	breq	.+32     	; 0x16f2 <DIO__CheckStatusSetPortValue+0x6c>
    16d2:	8d 81       	ldd	r24, Y+5	; 0x05
    16d4:	9e 81       	ldd	r25, Y+6	; 0x06
    16d6:	83 30       	cpi	r24, 0x03	; 3
    16d8:	91 05       	cpc	r25, r1
    16da:	81 f0       	breq	.+32     	; 0x16fc <DIO__CheckStatusSetPortValue+0x76>
    16dc:	13 c0       	rjmp	.+38     	; 0x1704 <DIO__CheckStatusSetPortValue+0x7e>
                {
                case DIO__UINT8_PORTA:
                        PORTA__UINT8_REG = Copy__uint8PortValue;
    16de:	eb e3       	ldi	r30, 0x3B	; 59
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	80 83       	st	Z, r24
    16e6:	0e c0       	rjmp	.+28     	; 0x1704 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTB:
                        PORTB__UINT8_REG = Copy__uint8PortValue;
    16e8:	e8 e3       	ldi	r30, 0x38	; 56
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	80 83       	st	Z, r24
    16f0:	09 c0       	rjmp	.+18     	; 0x1704 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTC:
                        PORTC__UINT8_REG = Copy__uint8PortValue;
    16f2:	e5 e3       	ldi	r30, 0x35	; 53
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	80 83       	st	Z, r24
    16fa:	04 c0       	rjmp	.+8      	; 0x1704 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTD:
                        PORTD__UINT8_REG = Copy__uint8PortValue;
    16fc:	e2 e3       	ldi	r30, 0x32	; 50
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1704:	99 81       	ldd	r25, Y+1	; 0x01
    1706:	9c 83       	std	Y+4, r25	; 0x04
    1708:	04 c0       	rjmp	.+8      	; 0x1712 <DIO__CheckStatusSetPortValue+0x8c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    170e:	29 81       	ldd	r18, Y+1	; 0x01
    1710:	2c 83       	std	Y+4, r18	; 0x04
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    1714:	26 96       	adiw	r28, 0x06	; 6
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <DIO__CheckStatusGetPortValue>:

CheckStatus DIO__CheckStatusGetPortValue(_uint8 Copy__uint8PortId, _uint8 *Copy_p_uint8ReturnPortValue)
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	27 97       	sbiw	r28, 0x07	; 7
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	8a 83       	std	Y+2, r24	; 0x02
    173c:	7c 83       	std	Y+4, r23	; 0x04
    173e:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    1740:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid Pointer != NULL
               
        */
        if (Copy_p_uint8ReturnPortValue != NULL)
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	9c 81       	ldd	r25, Y+4	; 0x04
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	e9 f1       	breq	.+122    	; 0x17c4 <DIO__CheckStatusGetPortValue+0x9e>
        {
                switch (Copy__uint8PortId)
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	3f 83       	std	Y+7, r19	; 0x07
    1752:	2e 83       	std	Y+6, r18	; 0x06
    1754:	8e 81       	ldd	r24, Y+6	; 0x06
    1756:	9f 81       	ldd	r25, Y+7	; 0x07
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	91 05       	cpc	r25, r1
    175c:	e1 f0       	breq	.+56     	; 0x1796 <DIO__CheckStatusGetPortValue+0x70>
    175e:	2e 81       	ldd	r18, Y+6	; 0x06
    1760:	3f 81       	ldd	r19, Y+7	; 0x07
    1762:	22 30       	cpi	r18, 0x02	; 2
    1764:	31 05       	cpc	r19, r1
    1766:	2c f4       	brge	.+10     	; 0x1772 <DIO__CheckStatusGetPortValue+0x4c>
    1768:	8e 81       	ldd	r24, Y+6	; 0x06
    176a:	9f 81       	ldd	r25, Y+7	; 0x07
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	61 f0       	breq	.+24     	; 0x1788 <DIO__CheckStatusGetPortValue+0x62>
    1770:	26 c0       	rjmp	.+76     	; 0x17be <DIO__CheckStatusGetPortValue+0x98>
    1772:	2e 81       	ldd	r18, Y+6	; 0x06
    1774:	3f 81       	ldd	r19, Y+7	; 0x07
    1776:	22 30       	cpi	r18, 0x02	; 2
    1778:	31 05       	cpc	r19, r1
    177a:	a1 f0       	breq	.+40     	; 0x17a4 <DIO__CheckStatusGetPortValue+0x7e>
    177c:	8e 81       	ldd	r24, Y+6	; 0x06
    177e:	9f 81       	ldd	r25, Y+7	; 0x07
    1780:	83 30       	cpi	r24, 0x03	; 3
    1782:	91 05       	cpc	r25, r1
    1784:	b1 f0       	breq	.+44     	; 0x17b2 <DIO__CheckStatusGetPortValue+0x8c>
    1786:	1b c0       	rjmp	.+54     	; 0x17be <DIO__CheckStatusGetPortValue+0x98>
                {
                case DIO__UINT8_PORTA:
                        *Copy_p_uint8ReturnPortValue = PINA__UINT8_REG;
    1788:	e9 e3       	ldi	r30, 0x39	; 57
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	eb 81       	ldd	r30, Y+3	; 0x03
    1790:	fc 81       	ldd	r31, Y+4	; 0x04
    1792:	80 83       	st	Z, r24
    1794:	14 c0       	rjmp	.+40     	; 0x17be <DIO__CheckStatusGetPortValue+0x98>
                        break;
                case DIO__UINT8_PORTB:
                        *Copy_p_uint8ReturnPortValue = PINB__UINT8_REG;
    1796:	e6 e3       	ldi	r30, 0x36	; 54
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	eb 81       	ldd	r30, Y+3	; 0x03
    179e:	fc 81       	ldd	r31, Y+4	; 0x04
    17a0:	80 83       	st	Z, r24
    17a2:	0d c0       	rjmp	.+26     	; 0x17be <DIO__CheckStatusGetPortValue+0x98>

                        break;
                case DIO__UINT8_PORTC:
                        *Copy_p_uint8ReturnPortValue = PINC__UINT8_REG;
    17a4:	e3 e3       	ldi	r30, 0x33	; 51
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	eb 81       	ldd	r30, Y+3	; 0x03
    17ac:	fc 81       	ldd	r31, Y+4	; 0x04
    17ae:	80 83       	st	Z, r24
    17b0:	06 c0       	rjmp	.+12     	; 0x17be <DIO__CheckStatusGetPortValue+0x98>
                        break;
                case DIO__UINT8_PORTD:
                        *Copy_p_uint8ReturnPortValue = PIND__UINT8_REG;
    17b2:	e0 e3       	ldi	r30, 0x30	; 48
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	eb 81       	ldd	r30, Y+3	; 0x03
    17ba:	fc 81       	ldd	r31, Y+4	; 0x04
    17bc:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    17be:	99 81       	ldd	r25, Y+1	; 0x01
    17c0:	9d 83       	std	Y+5, r25	; 0x05
    17c2:	04 c0       	rjmp	.+8      	; 0x17cc <DIO__CheckStatusGetPortValue+0xa6>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    17c8:	29 81       	ldd	r18, Y+1	; 0x01
    17ca:	2d 83       	std	Y+5, r18	; 0x05
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    17ce:	27 96       	adiw	r28, 0x07	; 7
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <KPAD_CheckStatusGetKey>:
_uint8 KPAD_A_UINT8ROWSPINS[4] = {KPAD__UINT8_ROW1,KPAD__UINT8_ROW2,KPAD__UINT8_ROW3,KPAD__UINT8_ROW4};
_uint8 KPAD_A_UINT8COLSPINS[4] = {KPAD__UINT8_COL1,KPAD__UINT8_COL2,KPAD__UINT8_COL3,KPAD__UINT8_COL4};
_uint8 KPAD_A_UINT8KEYS[4][4] = KPAD_A_UINT8VALUE  ;

CheckStatus KPAD_CheckStatusGetKey(_uint8 *Copy_P_Uint8ReturnValue)
{
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	65 97       	sbiw	r28, 0x15	; 21
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	9d 8b       	std	Y+21, r25	; 0x15
    17f6:	8c 8b       	std	Y+20, r24	; 0x14
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    17f8:	1a 8a       	std	Y+18, r1	; 0x12

        _uint8 Local__Uint8RowsCounter;
        _uint8 Local__Uint8ColsCounter;
        _uint8 Local__Uint8ReturnPinValue;
        _uint8 Local__Uint8Flag = 0;
    17fa:	1f 86       	std	Y+15, r1	; 0x0f

        if (Copy_P_Uint8ReturnValue != NULL)
    17fc:	8c 89       	ldd	r24, Y+20	; 0x14
    17fe:	9d 89       	ldd	r25, Y+21	; 0x15
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	09 f4       	brne	.+2      	; 0x1806 <KPAD_CheckStatusGetKey+0x26>
    1804:	e1 c0       	rjmp	.+450    	; 0x19c8 <KPAD_CheckStatusGetKey+0x1e8>
        {  
               *Copy_P_Uint8ReturnValue= KPAD__UINT8_KEY_NOT_PRESSED;     
    1806:	ec 89       	ldd	r30, Y+20	; 0x14
    1808:	fd 89       	ldd	r31, Y+21	; 0x15
    180a:	8f ef       	ldi	r24, 0xFF	; 255
    180c:	80 83       	st	Z, r24
                for (Local__Uint8RowsCounter = 0; Local__Uint8RowsCounter <= 3; ++Local__Uint8RowsCounter)
    180e:	19 8a       	std	Y+17, r1	; 0x11
    1810:	d6 c0       	rjmp	.+428    	; 0x19be <KPAD_CheckStatusGetKey+0x1de>
                {
                        DIO__CheckStatusSetPinValue(KPAD__UINT8_PORT, KPAD_A_UINT8ROWSPINS[Local__Uint8RowsCounter], DIO__UINT8_LOW);
    1812:	89 89       	ldd	r24, Y+17	; 0x11
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	fc 01       	movw	r30, r24
    181a:	e8 59       	subi	r30, 0x98	; 152
    181c:	fe 4f       	sbci	r31, 0xFE	; 254
    181e:	90 81       	ld	r25, Z
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	69 2f       	mov	r22, r25
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO__CheckStatusSetPinValue>
                        for (Local__Uint8ColsCounter = 0; Local__Uint8ColsCounter <= 3; ++Local__Uint8ColsCounter)
    182a:	18 8a       	std	Y+16, r1	; 0x10
    182c:	b2 c0       	rjmp	.+356    	; 0x1992 <KPAD_CheckStatusGetKey+0x1b2>
                        {

                                DIO__CheckStatusGetPinValue(KPAD__UINT8_PORT, KPAD_A_UINT8COLSPINS[Local__Uint8ColsCounter], &Local__Uint8ReturnPinValue);
    182e:	88 89       	ldd	r24, Y+16	; 0x10
    1830:	88 2f       	mov	r24, r24
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	fc 01       	movw	r30, r24
    1836:	e4 59       	subi	r30, 0x94	; 148
    1838:	fe 4f       	sbci	r31, 0xFE	; 254
    183a:	90 81       	ld	r25, Z
    183c:	9e 01       	movw	r18, r28
    183e:	2d 5e       	subi	r18, 0xED	; 237
    1840:	3f 4f       	sbci	r19, 0xFF	; 255
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	69 2f       	mov	r22, r25
    1846:	a9 01       	movw	r20, r18
    1848:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO__CheckStatusGetPinValue>

                                /*Check if switch is pressed */
                                if (Local__Uint8ReturnPinValue == DIO__UINT8_LOW)
    184c:	8b 89       	ldd	r24, Y+19	; 0x13
    184e:	88 23       	and	r24, r24
    1850:	09 f0       	breq	.+2      	; 0x1854 <KPAD_CheckStatusGetKey+0x74>
    1852:	9c c0       	rjmp	.+312    	; 0x198c <KPAD_CheckStatusGetKey+0x1ac>
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a0 ea       	ldi	r26, 0xA0	; 160
    185a:	b1 e4       	ldi	r27, 0x41	; 65
    185c:	8b 87       	std	Y+11, r24	; 0x0b
    185e:	9c 87       	std	Y+12, r25	; 0x0c
    1860:	ad 87       	std	Y+13, r26	; 0x0d
    1862:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1864:	6b 85       	ldd	r22, Y+11	; 0x0b
    1866:	7c 85       	ldd	r23, Y+12	; 0x0c
    1868:	8d 85       	ldd	r24, Y+13	; 0x0d
    186a:	9e 85       	ldd	r25, Y+14	; 0x0e
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	4a ef       	ldi	r20, 0xFA	; 250
    1872:	54 e4       	ldi	r21, 0x44	; 68
    1874:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	8f 83       	std	Y+7, r24	; 0x07
    187e:	98 87       	std	Y+8, r25	; 0x08
    1880:	a9 87       	std	Y+9, r26	; 0x09
    1882:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1884:	6f 81       	ldd	r22, Y+7	; 0x07
    1886:	78 85       	ldd	r23, Y+8	; 0x08
    1888:	89 85       	ldd	r24, Y+9	; 0x09
    188a:	9a 85       	ldd	r25, Y+10	; 0x0a
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e8       	ldi	r20, 0x80	; 128
    1892:	5f e3       	ldi	r21, 0x3F	; 63
    1894:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1898:	88 23       	and	r24, r24
    189a:	2c f4       	brge	.+10     	; 0x18a6 <KPAD_CheckStatusGetKey+0xc6>
		__ticks = 1;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	9e 83       	std	Y+6, r25	; 0x06
    18a2:	8d 83       	std	Y+5, r24	; 0x05
    18a4:	3f c0       	rjmp	.+126    	; 0x1924 <KPAD_CheckStatusGetKey+0x144>
	else if (__tmp > 65535)
    18a6:	6f 81       	ldd	r22, Y+7	; 0x07
    18a8:	78 85       	ldd	r23, Y+8	; 0x08
    18aa:	89 85       	ldd	r24, Y+9	; 0x09
    18ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	3f ef       	ldi	r19, 0xFF	; 255
    18b2:	4f e7       	ldi	r20, 0x7F	; 127
    18b4:	57 e4       	ldi	r21, 0x47	; 71
    18b6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18ba:	18 16       	cp	r1, r24
    18bc:	4c f5       	brge	.+82     	; 0x1910 <KPAD_CheckStatusGetKey+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18be:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e2       	ldi	r20, 0x20	; 32
    18cc:	51 e4       	ldi	r21, 0x41	; 65
    18ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	bc 01       	movw	r22, r24
    18d8:	cd 01       	movw	r24, r26
    18da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	9e 83       	std	Y+6, r25	; 0x06
    18e4:	8d 83       	std	Y+5, r24	; 0x05
    18e6:	0f c0       	rjmp	.+30     	; 0x1906 <KPAD_CheckStatusGetKey+0x126>
    18e8:	88 ec       	ldi	r24, 0xC8	; 200
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	9c 83       	std	Y+4, r25	; 0x04
    18ee:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	9c 81       	ldd	r25, Y+4	; 0x04
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <KPAD_CheckStatusGetKey+0x114>
    18f8:	9c 83       	std	Y+4, r25	; 0x04
    18fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fc:	8d 81       	ldd	r24, Y+5	; 0x05
    18fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	9e 83       	std	Y+6, r25	; 0x06
    1904:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1906:	8d 81       	ldd	r24, Y+5	; 0x05
    1908:	9e 81       	ldd	r25, Y+6	; 0x06
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	69 f7       	brne	.-38     	; 0x18e8 <KPAD_CheckStatusGetKey+0x108>
    190e:	24 c0       	rjmp	.+72     	; 0x1958 <KPAD_CheckStatusGetKey+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1910:	6f 81       	ldd	r22, Y+7	; 0x07
    1912:	78 85       	ldd	r23, Y+8	; 0x08
    1914:	89 85       	ldd	r24, Y+9	; 0x09
    1916:	9a 85       	ldd	r25, Y+10	; 0x0a
    1918:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	9e 83       	std	Y+6, r25	; 0x06
    1922:	8d 83       	std	Y+5, r24	; 0x05
    1924:	8d 81       	ldd	r24, Y+5	; 0x05
    1926:	9e 81       	ldd	r25, Y+6	; 0x06
    1928:	9a 83       	std	Y+2, r25	; 0x02
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	9a 81       	ldd	r25, Y+2	; 0x02
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	f1 f7       	brne	.-4      	; 0x1930 <KPAD_CheckStatusGetKey+0x150>
    1934:	9a 83       	std	Y+2, r25	; 0x02
    1936:	89 83       	std	Y+1, r24	; 0x01
    1938:	0f c0       	rjmp	.+30     	; 0x1958 <KPAD_CheckStatusGetKey+0x178>
                                {
                                        /* debouncing */
                                        _delay_ms(20);
                                        while (Local__Uint8ReturnPinValue == DIO__UINT8_LOW)
                                        {
                                                DIO__CheckStatusGetPinValue(KPAD__UINT8_PORT, KPAD_A_UINT8COLSPINS[Local__Uint8ColsCounter], &Local__Uint8ReturnPinValue);
    193a:	88 89       	ldd	r24, Y+16	; 0x10
    193c:	88 2f       	mov	r24, r24
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	fc 01       	movw	r30, r24
    1942:	e4 59       	subi	r30, 0x94	; 148
    1944:	fe 4f       	sbci	r31, 0xFE	; 254
    1946:	90 81       	ld	r25, Z
    1948:	9e 01       	movw	r18, r28
    194a:	2d 5e       	subi	r18, 0xED	; 237
    194c:	3f 4f       	sbci	r19, 0xFF	; 255
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	69 2f       	mov	r22, r25
    1952:	a9 01       	movw	r20, r18
    1954:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO__CheckStatusGetPinValue>
                                /*Check if switch is pressed */
                                if (Local__Uint8ReturnPinValue == DIO__UINT8_LOW)
                                {
                                        /* debouncing */
                                        _delay_ms(20);
                                        while (Local__Uint8ReturnPinValue == DIO__UINT8_LOW)
    1958:	8b 89       	ldd	r24, Y+19	; 0x13
    195a:	88 23       	and	r24, r24
    195c:	71 f3       	breq	.-36     	; 0x193a <KPAD_CheckStatusGetKey+0x15a>
                                        {
                                                DIO__CheckStatusGetPinValue(KPAD__UINT8_PORT, KPAD_A_UINT8COLSPINS[Local__Uint8ColsCounter], &Local__Uint8ReturnPinValue);
                                        }
                                        *Copy_P_Uint8ReturnValue = KPAD_A_UINT8KEYS[Local__Uint8RowsCounter][Local__Uint8ColsCounter];
    195e:	89 89       	ldd	r24, Y+17	; 0x11
    1960:	48 2f       	mov	r20, r24
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	88 89       	ldd	r24, Y+16	; 0x10
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	ca 01       	movw	r24, r20
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	82 0f       	add	r24, r18
    1976:	93 1f       	adc	r25, r19
    1978:	fc 01       	movw	r30, r24
    197a:	e0 59       	subi	r30, 0x90	; 144
    197c:	fe 4f       	sbci	r31, 0xFE	; 254
    197e:	80 81       	ld	r24, Z
    1980:	ec 89       	ldd	r30, Y+20	; 0x14
    1982:	fd 89       	ldd	r31, Y+21	; 0x15
    1984:	80 83       	st	Z, r24
                                        Local__Uint8Flag = 1;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	8f 87       	std	Y+15, r24	; 0x0f
    198a:	07 c0       	rjmp	.+14     	; 0x199a <KPAD_CheckStatusGetKey+0x1ba>
        {  
               *Copy_P_Uint8ReturnValue= KPAD__UINT8_KEY_NOT_PRESSED;     
                for (Local__Uint8RowsCounter = 0; Local__Uint8RowsCounter <= 3; ++Local__Uint8RowsCounter)
                {
                        DIO__CheckStatusSetPinValue(KPAD__UINT8_PORT, KPAD_A_UINT8ROWSPINS[Local__Uint8RowsCounter], DIO__UINT8_LOW);
                        for (Local__Uint8ColsCounter = 0; Local__Uint8ColsCounter <= 3; ++Local__Uint8ColsCounter)
    198c:	88 89       	ldd	r24, Y+16	; 0x10
    198e:	8f 5f       	subi	r24, 0xFF	; 255
    1990:	88 8b       	std	Y+16, r24	; 0x10
    1992:	88 89       	ldd	r24, Y+16	; 0x10
    1994:	84 30       	cpi	r24, 0x04	; 4
    1996:	08 f4       	brcc	.+2      	; 0x199a <KPAD_CheckStatusGetKey+0x1ba>
    1998:	4a cf       	rjmp	.-364    	; 0x182e <KPAD_CheckStatusGetKey+0x4e>
                                        *Copy_P_Uint8ReturnValue = KPAD_A_UINT8KEYS[Local__Uint8RowsCounter][Local__Uint8ColsCounter];
                                        Local__Uint8Flag = 1;
                                        break;
                                }
                        }
                        DIO__CheckStatusSetPinValue(KPAD__UINT8_PORT, KPAD_A_UINT8ROWSPINS[Local__Uint8RowsCounter], DIO__UINT8_LOW);
    199a:	89 89       	ldd	r24, Y+17	; 0x11
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	fc 01       	movw	r30, r24
    19a2:	e8 59       	subi	r30, 0x98	; 152
    19a4:	fe 4f       	sbci	r31, 0xFE	; 254
    19a6:	90 81       	ld	r25, Z
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	69 2f       	mov	r22, r25
    19ac:	40 e0       	ldi	r20, 0x00	; 0
    19ae:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO__CheckStatusSetPinValue>
                        if (Local__Uint8Flag == 1)
    19b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b4:	81 30       	cpi	r24, 0x01	; 1
    19b6:	51 f0       	breq	.+20     	; 0x19cc <KPAD_CheckStatusGetKey+0x1ec>
        _uint8 Local__Uint8Flag = 0;

        if (Copy_P_Uint8ReturnValue != NULL)
        {  
               *Copy_P_Uint8ReturnValue= KPAD__UINT8_KEY_NOT_PRESSED;     
                for (Local__Uint8RowsCounter = 0; Local__Uint8RowsCounter <= 3; ++Local__Uint8RowsCounter)
    19b8:	89 89       	ldd	r24, Y+17	; 0x11
    19ba:	8f 5f       	subi	r24, 0xFF	; 255
    19bc:	89 8b       	std	Y+17, r24	; 0x11
    19be:	89 89       	ldd	r24, Y+17	; 0x11
    19c0:	84 30       	cpi	r24, 0x04	; 4
    19c2:	08 f4       	brcc	.+2      	; 0x19c6 <KPAD_CheckStatusGetKey+0x1e6>
    19c4:	26 cf       	rjmp	.-436    	; 0x1812 <KPAD_CheckStatusGetKey+0x32>
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <KPAD_CheckStatusGetKey+0x1ec>
                        }
                }
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	8a 8b       	std	Y+18, r24	; 0x12
        }

        return Local_CheckStausReturnValue;
    19cc:	8a 89       	ldd	r24, Y+18	; 0x12
}
    19ce:	65 96       	adiw	r28, 0x15	; 21
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <LCD_VoidInit4bit>:
								   LCD_A_UINT8CHAR7,
								   LCD_A_UINT8CHAR8
								  };
/* Defination Of Function  */
Void LCD_VoidInit4bit(Void)
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	e8 97       	sbiw	r28, 0x38	; 56
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	ac e0       	ldi	r26, 0x0C	; 12
    19fa:	b2 e4       	ldi	r27, 0x42	; 66
    19fc:	8d ab       	std	Y+53, r24	; 0x35
    19fe:	9e ab       	std	Y+54, r25	; 0x36
    1a00:	af ab       	std	Y+55, r26	; 0x37
    1a02:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a04:	6d a9       	ldd	r22, Y+53	; 0x35
    1a06:	7e a9       	ldd	r23, Y+54	; 0x36
    1a08:	8f a9       	ldd	r24, Y+55	; 0x37
    1a0a:	98 ad       	ldd	r25, Y+56	; 0x38
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	4a ef       	ldi	r20, 0xFA	; 250
    1a12:	54 e4       	ldi	r21, 0x44	; 68
    1a14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	89 ab       	std	Y+49, r24	; 0x31
    1a1e:	9a ab       	std	Y+50, r25	; 0x32
    1a20:	ab ab       	std	Y+51, r26	; 0x33
    1a22:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a24:	69 a9       	ldd	r22, Y+49	; 0x31
    1a26:	7a a9       	ldd	r23, Y+50	; 0x32
    1a28:	8b a9       	ldd	r24, Y+51	; 0x33
    1a2a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e8       	ldi	r20, 0x80	; 128
    1a32:	5f e3       	ldi	r21, 0x3F	; 63
    1a34:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a38:	88 23       	and	r24, r24
    1a3a:	2c f4       	brge	.+10     	; 0x1a46 <LCD_VoidInit4bit+0x66>
		__ticks = 1;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	98 ab       	std	Y+48, r25	; 0x30
    1a42:	8f a7       	std	Y+47, r24	; 0x2f
    1a44:	3f c0       	rjmp	.+126    	; 0x1ac4 <LCD_VoidInit4bit+0xe4>
	else if (__tmp > 65535)
    1a46:	69 a9       	ldd	r22, Y+49	; 0x31
    1a48:	7a a9       	ldd	r23, Y+50	; 0x32
    1a4a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a4c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	3f ef       	ldi	r19, 0xFF	; 255
    1a52:	4f e7       	ldi	r20, 0x7F	; 127
    1a54:	57 e4       	ldi	r21, 0x47	; 71
    1a56:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a5a:	18 16       	cp	r1, r24
    1a5c:	4c f5       	brge	.+82     	; 0x1ab0 <LCD_VoidInit4bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5e:	6d a9       	ldd	r22, Y+53	; 0x35
    1a60:	7e a9       	ldd	r23, Y+54	; 0x36
    1a62:	8f a9       	ldd	r24, Y+55	; 0x37
    1a64:	98 ad       	ldd	r25, Y+56	; 0x38
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e2       	ldi	r20, 0x20	; 32
    1a6c:	51 e4       	ldi	r21, 0x41	; 65
    1a6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	bc 01       	movw	r22, r24
    1a78:	cd 01       	movw	r24, r26
    1a7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	98 ab       	std	Y+48, r25	; 0x30
    1a84:	8f a7       	std	Y+47, r24	; 0x2f
    1a86:	0f c0       	rjmp	.+30     	; 0x1aa6 <LCD_VoidInit4bit+0xc6>
    1a88:	88 ec       	ldi	r24, 0xC8	; 200
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	9e a7       	std	Y+46, r25	; 0x2e
    1a8e:	8d a7       	std	Y+45, r24	; 0x2d
    1a90:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a92:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	f1 f7       	brne	.-4      	; 0x1a94 <LCD_VoidInit4bit+0xb4>
    1a98:	9e a7       	std	Y+46, r25	; 0x2e
    1a9a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a9e:	98 a9       	ldd	r25, Y+48	; 0x30
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	98 ab       	std	Y+48, r25	; 0x30
    1aa4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aa8:	98 a9       	ldd	r25, Y+48	; 0x30
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	69 f7       	brne	.-38     	; 0x1a88 <LCD_VoidInit4bit+0xa8>
    1aae:	14 c0       	rjmp	.+40     	; 0x1ad8 <LCD_VoidInit4bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ab2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ab4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ab6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ab8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	98 ab       	std	Y+48, r25	; 0x30
    1ac2:	8f a7       	std	Y+47, r24	; 0x2f
    1ac4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ac6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ac8:	9c a7       	std	Y+44, r25	; 0x2c
    1aca:	8b a7       	std	Y+43, r24	; 0x2b
    1acc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ace:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <LCD_VoidInit4bit+0xf0>
    1ad4:	9c a7       	std	Y+44, r25	; 0x2c
    1ad6:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(35);
        LCD_CheckStatusSendCmnd(0b00100000);
    1ad8:	80 e2       	ldi	r24, 0x20	; 32
    1ada:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b00100000);
    1ade:	80 e2       	ldi	r24, 0x20	; 32
    1ae0:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b11000000);
    1ae4:	80 ec       	ldi	r24, 0xC0	; 192
    1ae6:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	a0 e2       	ldi	r26, 0x20	; 32
    1af0:	b2 e4       	ldi	r27, 0x42	; 66
    1af2:	8f a3       	std	Y+39, r24	; 0x27
    1af4:	98 a7       	std	Y+40, r25	; 0x28
    1af6:	a9 a7       	std	Y+41, r26	; 0x29
    1af8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afa:	6f a1       	ldd	r22, Y+39	; 0x27
    1afc:	78 a5       	ldd	r23, Y+40	; 0x28
    1afe:	89 a5       	ldd	r24, Y+41	; 0x29
    1b00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	4a ef       	ldi	r20, 0xFA	; 250
    1b08:	54 e4       	ldi	r21, 0x44	; 68
    1b0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	8b a3       	std	Y+35, r24	; 0x23
    1b14:	9c a3       	std	Y+36, r25	; 0x24
    1b16:	ad a3       	std	Y+37, r26	; 0x25
    1b18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b20:	9e a1       	ldd	r25, Y+38	; 0x26
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	40 e8       	ldi	r20, 0x80	; 128
    1b28:	5f e3       	ldi	r21, 0x3F	; 63
    1b2a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b2e:	88 23       	and	r24, r24
    1b30:	2c f4       	brge	.+10     	; 0x1b3c <LCD_VoidInit4bit+0x15c>
		__ticks = 1;
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	9a a3       	std	Y+34, r25	; 0x22
    1b38:	89 a3       	std	Y+33, r24	; 0x21
    1b3a:	3f c0       	rjmp	.+126    	; 0x1bba <LCD_VoidInit4bit+0x1da>
	else if (__tmp > 65535)
    1b3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b40:	8d a1       	ldd	r24, Y+37	; 0x25
    1b42:	9e a1       	ldd	r25, Y+38	; 0x26
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	3f ef       	ldi	r19, 0xFF	; 255
    1b48:	4f e7       	ldi	r20, 0x7F	; 127
    1b4a:	57 e4       	ldi	r21, 0x47	; 71
    1b4c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b50:	18 16       	cp	r1, r24
    1b52:	4c f5       	brge	.+82     	; 0x1ba6 <LCD_VoidInit4bit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b54:	6f a1       	ldd	r22, Y+39	; 0x27
    1b56:	78 a5       	ldd	r23, Y+40	; 0x28
    1b58:	89 a5       	ldd	r24, Y+41	; 0x29
    1b5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e2       	ldi	r20, 0x20	; 32
    1b62:	51 e4       	ldi	r21, 0x41	; 65
    1b64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	bc 01       	movw	r22, r24
    1b6e:	cd 01       	movw	r24, r26
    1b70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	9a a3       	std	Y+34, r25	; 0x22
    1b7a:	89 a3       	std	Y+33, r24	; 0x21
    1b7c:	0f c0       	rjmp	.+30     	; 0x1b9c <LCD_VoidInit4bit+0x1bc>
    1b7e:	88 ec       	ldi	r24, 0xC8	; 200
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	98 a3       	std	Y+32, r25	; 0x20
    1b84:	8f 8f       	std	Y+31, r24	; 0x1f
    1b86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b88:	98 a1       	ldd	r25, Y+32	; 0x20
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <LCD_VoidInit4bit+0x1aa>
    1b8e:	98 a3       	std	Y+32, r25	; 0x20
    1b90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b92:	89 a1       	ldd	r24, Y+33	; 0x21
    1b94:	9a a1       	ldd	r25, Y+34	; 0x22
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	9a a3       	std	Y+34, r25	; 0x22
    1b9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	69 f7       	brne	.-38     	; 0x1b7e <LCD_VoidInit4bit+0x19e>
    1ba4:	14 c0       	rjmp	.+40     	; 0x1bce <LCD_VoidInit4bit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba8:	7c a1       	ldd	r23, Y+36	; 0x24
    1baa:	8d a1       	ldd	r24, Y+37	; 0x25
    1bac:	9e a1       	ldd	r25, Y+38	; 0x26
    1bae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	9a a3       	std	Y+34, r25	; 0x22
    1bb8:	89 a3       	std	Y+33, r24	; 0x21
    1bba:	89 a1       	ldd	r24, Y+33	; 0x21
    1bbc:	9a a1       	ldd	r25, Y+34	; 0x22
    1bbe:	9e 8f       	std	Y+30, r25	; 0x1e
    1bc0:	8d 8f       	std	Y+29, r24	; 0x1d
    1bc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bc4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <LCD_VoidInit4bit+0x1e6>
    1bca:	9e 8f       	std	Y+30, r25	; 0x1e
    1bcc:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(40);
        LCD_CheckStatusSendCmnd(0b00000000);
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b11110000);
    1bd4:	80 ef       	ldi	r24, 0xF0	; 240
    1bd6:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	a0 e2       	ldi	r26, 0x20	; 32
    1be0:	b2 e4       	ldi	r27, 0x42	; 66
    1be2:	89 8f       	std	Y+25, r24	; 0x19
    1be4:	9a 8f       	std	Y+26, r25	; 0x1a
    1be6:	ab 8f       	std	Y+27, r26	; 0x1b
    1be8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bea:	69 8d       	ldd	r22, Y+25	; 0x19
    1bec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	4a ef       	ldi	r20, 0xFA	; 250
    1bf8:	54 e4       	ldi	r21, 0x44	; 68
    1bfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	8d 8b       	std	Y+21, r24	; 0x15
    1c04:	9e 8b       	std	Y+22, r25	; 0x16
    1c06:	af 8b       	std	Y+23, r26	; 0x17
    1c08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c10:	98 8d       	ldd	r25, Y+24	; 0x18
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e8       	ldi	r20, 0x80	; 128
    1c18:	5f e3       	ldi	r21, 0x3F	; 63
    1c1a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c1e:	88 23       	and	r24, r24
    1c20:	2c f4       	brge	.+10     	; 0x1c2c <LCD_VoidInit4bit+0x24c>
		__ticks = 1;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	9c 8b       	std	Y+20, r25	; 0x14
    1c28:	8b 8b       	std	Y+19, r24	; 0x13
    1c2a:	3f c0       	rjmp	.+126    	; 0x1caa <LCD_VoidInit4bit+0x2ca>
	else if (__tmp > 65535)
    1c2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c30:	8f 89       	ldd	r24, Y+23	; 0x17
    1c32:	98 8d       	ldd	r25, Y+24	; 0x18
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	3f ef       	ldi	r19, 0xFF	; 255
    1c38:	4f e7       	ldi	r20, 0x7F	; 127
    1c3a:	57 e4       	ldi	r21, 0x47	; 71
    1c3c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c40:	18 16       	cp	r1, r24
    1c42:	4c f5       	brge	.+82     	; 0x1c96 <LCD_VoidInit4bit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c44:	69 8d       	ldd	r22, Y+25	; 0x19
    1c46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e2       	ldi	r20, 0x20	; 32
    1c52:	51 e4       	ldi	r21, 0x41	; 65
    1c54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9c 8b       	std	Y+20, r25	; 0x14
    1c6a:	8b 8b       	std	Y+19, r24	; 0x13
    1c6c:	0f c0       	rjmp	.+30     	; 0x1c8c <LCD_VoidInit4bit+0x2ac>
    1c6e:	88 ec       	ldi	r24, 0xC8	; 200
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9a 8b       	std	Y+18, r25	; 0x12
    1c74:	89 8b       	std	Y+17, r24	; 0x11
    1c76:	89 89       	ldd	r24, Y+17	; 0x11
    1c78:	9a 89       	ldd	r25, Y+18	; 0x12
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LCD_VoidInit4bit+0x29a>
    1c7e:	9a 8b       	std	Y+18, r25	; 0x12
    1c80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c82:	8b 89       	ldd	r24, Y+19	; 0x13
    1c84:	9c 89       	ldd	r25, Y+20	; 0x14
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	9c 8b       	std	Y+20, r25	; 0x14
    1c8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	69 f7       	brne	.-38     	; 0x1c6e <LCD_VoidInit4bit+0x28e>
    1c94:	14 c0       	rjmp	.+40     	; 0x1cbe <LCD_VoidInit4bit+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c96:	6d 89       	ldd	r22, Y+21	; 0x15
    1c98:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9c 8b       	std	Y+20, r25	; 0x14
    1ca8:	8b 8b       	std	Y+19, r24	; 0x13
    1caa:	8b 89       	ldd	r24, Y+19	; 0x13
    1cac:	9c 89       	ldd	r25, Y+20	; 0x14
    1cae:	98 8b       	std	Y+16, r25	; 0x10
    1cb0:	8f 87       	std	Y+15, r24	; 0x0f
    1cb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb4:	98 89       	ldd	r25, Y+16	; 0x10
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <LCD_VoidInit4bit+0x2d6>
    1cba:	98 8b       	std	Y+16, r25	; 0x10
    1cbc:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(40);
        LCD_CheckStatusSendCmnd(0b00000000);
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b00010000);
    1cc4:	80 e1       	ldi	r24, 0x10	; 16
    1cc6:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	a0 e0       	ldi	r26, 0x00	; 0
    1cd0:	b0 e4       	ldi	r27, 0x40	; 64
    1cd2:	8b 87       	std	Y+11, r24	; 0x0b
    1cd4:	9c 87       	std	Y+12, r25	; 0x0c
    1cd6:	ad 87       	std	Y+13, r26	; 0x0d
    1cd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	4a ef       	ldi	r20, 0xFA	; 250
    1ce8:	54 e4       	ldi	r21, 0x44	; 68
    1cea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	8f 83       	std	Y+7, r24	; 0x07
    1cf4:	98 87       	std	Y+8, r25	; 0x08
    1cf6:	a9 87       	std	Y+9, r26	; 0x09
    1cf8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfc:	78 85       	ldd	r23, Y+8	; 0x08
    1cfe:	89 85       	ldd	r24, Y+9	; 0x09
    1d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e8       	ldi	r20, 0x80	; 128
    1d08:	5f e3       	ldi	r21, 0x3F	; 63
    1d0a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d0e:	88 23       	and	r24, r24
    1d10:	2c f4       	brge	.+10     	; 0x1d1c <LCD_VoidInit4bit+0x33c>
		__ticks = 1;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9e 83       	std	Y+6, r25	; 0x06
    1d18:	8d 83       	std	Y+5, r24	; 0x05
    1d1a:	3f c0       	rjmp	.+126    	; 0x1d9a <LCD_VoidInit4bit+0x3ba>
	else if (__tmp > 65535)
    1d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1e:	78 85       	ldd	r23, Y+8	; 0x08
    1d20:	89 85       	ldd	r24, Y+9	; 0x09
    1d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	3f ef       	ldi	r19, 0xFF	; 255
    1d28:	4f e7       	ldi	r20, 0x7F	; 127
    1d2a:	57 e4       	ldi	r21, 0x47	; 71
    1d2c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d30:	18 16       	cp	r1, r24
    1d32:	4c f5       	brge	.+82     	; 0x1d86 <LCD_VoidInit4bit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e2       	ldi	r20, 0x20	; 32
    1d42:	51 e4       	ldi	r21, 0x41	; 65
    1d44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	bc 01       	movw	r22, r24
    1d4e:	cd 01       	movw	r24, r26
    1d50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
    1d5c:	0f c0       	rjmp	.+30     	; 0x1d7c <LCD_VoidInit4bit+0x39c>
    1d5e:	88 ec       	ldi	r24, 0xC8	; 200
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	9c 83       	std	Y+4, r25	; 0x04
    1d64:	8b 83       	std	Y+3, r24	; 0x03
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <LCD_VoidInit4bit+0x38a>
    1d6e:	9c 83       	std	Y+4, r25	; 0x04
    1d70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d72:	8d 81       	ldd	r24, Y+5	; 0x05
    1d74:	9e 81       	ldd	r25, Y+6	; 0x06
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	9e 83       	std	Y+6, r25	; 0x06
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	69 f7       	brne	.-38     	; 0x1d5e <LCD_VoidInit4bit+0x37e>
    1d84:	14 c0       	rjmp	.+40     	; 0x1dae <LCD_VoidInit4bit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d86:	6f 81       	ldd	r22, Y+7	; 0x07
    1d88:	78 85       	ldd	r23, Y+8	; 0x08
    1d8a:	89 85       	ldd	r24, Y+9	; 0x09
    1d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	9e 83       	std	Y+6, r25	; 0x06
    1d98:	8d 83       	std	Y+5, r24	; 0x05
    1d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9e:	9a 83       	std	Y+2, r25	; 0x02
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	9a 81       	ldd	r25, Y+2	; 0x02
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <LCD_VoidInit4bit+0x3c6>
    1daa:	9a 83       	std	Y+2, r25	; 0x02
    1dac:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
        LCD_CheckStatusSendCmnd(0b00000000);
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b01100000);
    1db4:	80 e6       	ldi	r24, 0x60	; 96
    1db6:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>

}
    1dba:	e8 96       	adiw	r28, 0x38	; 56
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <LCD_VoidInit>:
Void LCD_VoidInit(Void)
{
    1dcc:	0f 93       	push	r16
    1dce:	1f 93       	push	r17
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	cc 54       	subi	r28, 0x4C	; 76
    1dda:	d0 40       	sbci	r29, 0x00	; 0
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	de bf       	out	0x3e, r29	; 62
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	cd bf       	out	0x3d, r28	; 61
    1de6:	fe 01       	movw	r30, r28
    1de8:	e7 5b       	subi	r30, 0xB7	; 183
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	ac e0       	ldi	r26, 0x0C	; 12
    1df2:	b2 e4       	ldi	r27, 0x42	; 66
    1df4:	80 83       	st	Z, r24
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	a2 83       	std	Z+2, r26	; 0x02
    1dfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfc:	8e 01       	movw	r16, r28
    1dfe:	0b 5b       	subi	r16, 0xBB	; 187
    1e00:	1f 4f       	sbci	r17, 0xFF	; 255
    1e02:	fe 01       	movw	r30, r28
    1e04:	e7 5b       	subi	r30, 0xB7	; 183
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	60 81       	ld	r22, Z
    1e0a:	71 81       	ldd	r23, Z+1	; 0x01
    1e0c:	82 81       	ldd	r24, Z+2	; 0x02
    1e0e:	93 81       	ldd	r25, Z+3	; 0x03
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	4a ef       	ldi	r20, 0xFA	; 250
    1e16:	54 e4       	ldi	r21, 0x44	; 68
    1e18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	f8 01       	movw	r30, r16
    1e22:	80 83       	st	Z, r24
    1e24:	91 83       	std	Z+1, r25	; 0x01
    1e26:	a2 83       	std	Z+2, r26	; 0x02
    1e28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	eb 5b       	subi	r30, 0xBB	; 187
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	60 81       	ld	r22, Z
    1e32:	71 81       	ldd	r23, Z+1	; 0x01
    1e34:	82 81       	ldd	r24, Z+2	; 0x02
    1e36:	93 81       	ldd	r25, Z+3	; 0x03
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e8       	ldi	r20, 0x80	; 128
    1e3e:	5f e3       	ldi	r21, 0x3F	; 63
    1e40:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e44:	88 23       	and	r24, r24
    1e46:	44 f4       	brge	.+16     	; 0x1e58 <LCD_VoidInit+0x8c>
		__ticks = 1;
    1e48:	fe 01       	movw	r30, r28
    1e4a:	ed 5b       	subi	r30, 0xBD	; 189
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	91 83       	std	Z+1, r25	; 0x01
    1e54:	80 83       	st	Z, r24
    1e56:	64 c0       	rjmp	.+200    	; 0x1f20 <LCD_VoidInit+0x154>
	else if (__tmp > 65535)
    1e58:	fe 01       	movw	r30, r28
    1e5a:	eb 5b       	subi	r30, 0xBB	; 187
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	60 81       	ld	r22, Z
    1e60:	71 81       	ldd	r23, Z+1	; 0x01
    1e62:	82 81       	ldd	r24, Z+2	; 0x02
    1e64:	93 81       	ldd	r25, Z+3	; 0x03
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	3f ef       	ldi	r19, 0xFF	; 255
    1e6a:	4f e7       	ldi	r20, 0x7F	; 127
    1e6c:	57 e4       	ldi	r21, 0x47	; 71
    1e6e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e72:	18 16       	cp	r1, r24
    1e74:	0c f0       	brlt	.+2      	; 0x1e78 <LCD_VoidInit+0xac>
    1e76:	43 c0       	rjmp	.+134    	; 0x1efe <LCD_VoidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e78:	fe 01       	movw	r30, r28
    1e7a:	e7 5b       	subi	r30, 0xB7	; 183
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	60 81       	ld	r22, Z
    1e80:	71 81       	ldd	r23, Z+1	; 0x01
    1e82:	82 81       	ldd	r24, Z+2	; 0x02
    1e84:	93 81       	ldd	r25, Z+3	; 0x03
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e2       	ldi	r20, 0x20	; 32
    1e8c:	51 e4       	ldi	r21, 0x41	; 65
    1e8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	8e 01       	movw	r16, r28
    1e98:	0d 5b       	subi	r16, 0xBD	; 189
    1e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9c:	bc 01       	movw	r22, r24
    1e9e:	cd 01       	movw	r24, r26
    1ea0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	f8 01       	movw	r30, r16
    1eaa:	91 83       	std	Z+1, r25	; 0x01
    1eac:	80 83       	st	Z, r24
    1eae:	1f c0       	rjmp	.+62     	; 0x1eee <LCD_VoidInit+0x122>
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	ef 5b       	subi	r30, 0xBF	; 191
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	88 ec       	ldi	r24, 0xC8	; 200
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	91 83       	std	Z+1, r25	; 0x01
    1ebc:	80 83       	st	Z, r24
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	ef 5b       	subi	r30, 0xBF	; 191
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 81       	ld	r24, Z
    1ec6:	91 81       	ldd	r25, Z+1	; 0x01
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <LCD_VoidInit+0xfc>
    1ecc:	fe 01       	movw	r30, r28
    1ece:	ef 5b       	subi	r30, 0xBF	; 191
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	91 83       	std	Z+1, r25	; 0x01
    1ed4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed6:	de 01       	movw	r26, r28
    1ed8:	ad 5b       	subi	r26, 0xBD	; 189
    1eda:	bf 4f       	sbci	r27, 0xFF	; 255
    1edc:	fe 01       	movw	r30, r28
    1ede:	ed 5b       	subi	r30, 0xBD	; 189
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 81       	ld	r24, Z
    1ee4:	91 81       	ldd	r25, Z+1	; 0x01
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	11 96       	adiw	r26, 0x01	; 1
    1eea:	9c 93       	st	X, r25
    1eec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eee:	fe 01       	movw	r30, r28
    1ef0:	ed 5b       	subi	r30, 0xBD	; 189
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	80 81       	ld	r24, Z
    1ef6:	91 81       	ldd	r25, Z+1	; 0x01
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	d1 f6       	brne	.-76     	; 0x1eb0 <LCD_VoidInit+0xe4>
    1efc:	24 c0       	rjmp	.+72     	; 0x1f46 <LCD_VoidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efe:	8e 01       	movw	r16, r28
    1f00:	0d 5b       	subi	r16, 0xBD	; 189
    1f02:	1f 4f       	sbci	r17, 0xFF	; 255
    1f04:	fe 01       	movw	r30, r28
    1f06:	eb 5b       	subi	r30, 0xBB	; 187
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	60 81       	ld	r22, Z
    1f0c:	71 81       	ldd	r23, Z+1	; 0x01
    1f0e:	82 81       	ldd	r24, Z+2	; 0x02
    1f10:	93 81       	ldd	r25, Z+3	; 0x03
    1f12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	f8 01       	movw	r30, r16
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	80 83       	st	Z, r24
    1f20:	fe 01       	movw	r30, r28
    1f22:	ed 5b       	subi	r30, 0xBD	; 189
    1f24:	ff 4f       	sbci	r31, 0xFF	; 255
    1f26:	80 81       	ld	r24, Z
    1f28:	91 81       	ldd	r25, Z+1	; 0x01
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	ff 96       	adiw	r30, 0x3f	; 63
    1f2e:	91 83       	std	Z+1, r25	; 0x01
    1f30:	80 83       	st	Z, r24
    1f32:	fe 01       	movw	r30, r28
    1f34:	ff 96       	adiw	r30, 0x3f	; 63
    1f36:	80 81       	ld	r24, Z
    1f38:	91 81       	ldd	r25, Z+1	; 0x01
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <LCD_VoidInit+0x16e>
    1f3e:	fe 01       	movw	r30, r28
    1f40:	ff 96       	adiw	r30, 0x3f	; 63
    1f42:	91 83       	std	Z+1, r25	; 0x01
    1f44:	80 83       	st	Z, r24

        _delay_ms(35);
        /* Function Set Cmnd 0b00111000*/

        LCD_CheckStatusSendCmnd(0b00111000);
    1f46:	88 e3       	ldi	r24, 0x38	; 56
    1f48:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	a0 e2       	ldi	r26, 0x20	; 32
    1f52:	b2 e4       	ldi	r27, 0x42	; 66
    1f54:	8b af       	std	Y+59, r24	; 0x3b
    1f56:	9c af       	std	Y+60, r25	; 0x3c
    1f58:	ad af       	std	Y+61, r26	; 0x3d
    1f5a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f5c:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f5e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1f60:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f62:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f64:	2b ea       	ldi	r18, 0xAB	; 171
    1f66:	3a ea       	ldi	r19, 0xAA	; 170
    1f68:	4a e2       	ldi	r20, 0x2A	; 42
    1f6a:	50 e4       	ldi	r21, 0x40	; 64
    1f6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	8f ab       	std	Y+55, r24	; 0x37
    1f76:	98 af       	std	Y+56, r25	; 0x38
    1f78:	a9 af       	std	Y+57, r26	; 0x39
    1f7a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1f7c:	6f a9       	ldd	r22, Y+55	; 0x37
    1f7e:	78 ad       	ldd	r23, Y+56	; 0x38
    1f80:	89 ad       	ldd	r24, Y+57	; 0x39
    1f82:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e8       	ldi	r20, 0x80	; 128
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	1c f4       	brge	.+6      	; 0x1f9a <LCD_VoidInit+0x1ce>
		__ticks = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	8e ab       	std	Y+54, r24	; 0x36
    1f98:	91 c0       	rjmp	.+290    	; 0x20bc <LCD_VoidInit+0x2f0>
	else if (__tmp > 255)
    1f9a:	6f a9       	ldd	r22, Y+55	; 0x37
    1f9c:	78 ad       	ldd	r23, Y+56	; 0x38
    1f9e:	89 ad       	ldd	r24, Y+57	; 0x39
    1fa0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	4f e7       	ldi	r20, 0x7F	; 127
    1fa8:	53 e4       	ldi	r21, 0x43	; 67
    1faa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fae:	18 16       	cp	r1, r24
    1fb0:	0c f0       	brlt	.+2      	; 0x1fb4 <LCD_VoidInit+0x1e8>
    1fb2:	7b c0       	rjmp	.+246    	; 0x20aa <LCD_VoidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1fb4:	6b ad       	ldd	r22, Y+59	; 0x3b
    1fb6:	7c ad       	ldd	r23, Y+60	; 0x3c
    1fb8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fba:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	4a e7       	ldi	r20, 0x7A	; 122
    1fc2:	54 e4       	ldi	r21, 0x44	; 68
    1fc4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	8a ab       	std	Y+50, r24	; 0x32
    1fce:	9b ab       	std	Y+51, r25	; 0x33
    1fd0:	ac ab       	std	Y+52, r26	; 0x34
    1fd2:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd4:	6a a9       	ldd	r22, Y+50	; 0x32
    1fd6:	7b a9       	ldd	r23, Y+51	; 0x33
    1fd8:	8c a9       	ldd	r24, Y+52	; 0x34
    1fda:	9d a9       	ldd	r25, Y+53	; 0x35
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	4a ef       	ldi	r20, 0xFA	; 250
    1fe2:	54 e4       	ldi	r21, 0x44	; 68
    1fe4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	8e a7       	std	Y+46, r24	; 0x2e
    1fee:	9f a7       	std	Y+47, r25	; 0x2f
    1ff0:	a8 ab       	std	Y+48, r26	; 0x30
    1ff2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1ff4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ff6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ff8:	88 a9       	ldd	r24, Y+48	; 0x30
    1ffa:	99 a9       	ldd	r25, Y+49	; 0x31
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e8       	ldi	r20, 0x80	; 128
    2002:	5f e3       	ldi	r21, 0x3F	; 63
    2004:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2008:	88 23       	and	r24, r24
    200a:	2c f4       	brge	.+10     	; 0x2016 <LCD_VoidInit+0x24a>
		__ticks = 1;
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	9d a7       	std	Y+45, r25	; 0x2d
    2012:	8c a7       	std	Y+44, r24	; 0x2c
    2014:	3f c0       	rjmp	.+126    	; 0x2094 <LCD_VoidInit+0x2c8>
	else if (__tmp > 65535)
    2016:	6e a5       	ldd	r22, Y+46	; 0x2e
    2018:	7f a5       	ldd	r23, Y+47	; 0x2f
    201a:	88 a9       	ldd	r24, Y+48	; 0x30
    201c:	99 a9       	ldd	r25, Y+49	; 0x31
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	3f ef       	ldi	r19, 0xFF	; 255
    2022:	4f e7       	ldi	r20, 0x7F	; 127
    2024:	57 e4       	ldi	r21, 0x47	; 71
    2026:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    202a:	18 16       	cp	r1, r24
    202c:	4c f5       	brge	.+82     	; 0x2080 <LCD_VoidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202e:	6a a9       	ldd	r22, Y+50	; 0x32
    2030:	7b a9       	ldd	r23, Y+51	; 0x33
    2032:	8c a9       	ldd	r24, Y+52	; 0x34
    2034:	9d a9       	ldd	r25, Y+53	; 0x35
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e2       	ldi	r20, 0x20	; 32
    203c:	51 e4       	ldi	r21, 0x41	; 65
    203e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	bc 01       	movw	r22, r24
    2048:	cd 01       	movw	r24, r26
    204a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	9d a7       	std	Y+45, r25	; 0x2d
    2054:	8c a7       	std	Y+44, r24	; 0x2c
    2056:	0f c0       	rjmp	.+30     	; 0x2076 <LCD_VoidInit+0x2aa>
    2058:	88 ec       	ldi	r24, 0xC8	; 200
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	9b a7       	std	Y+43, r25	; 0x2b
    205e:	8a a7       	std	Y+42, r24	; 0x2a
    2060:	8a a5       	ldd	r24, Y+42	; 0x2a
    2062:	9b a5       	ldd	r25, Y+43	; 0x2b
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	f1 f7       	brne	.-4      	; 0x2064 <LCD_VoidInit+0x298>
    2068:	9b a7       	std	Y+43, r25	; 0x2b
    206a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206c:	8c a5       	ldd	r24, Y+44	; 0x2c
    206e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	9d a7       	std	Y+45, r25	; 0x2d
    2074:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2076:	8c a5       	ldd	r24, Y+44	; 0x2c
    2078:	9d a5       	ldd	r25, Y+45	; 0x2d
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	69 f7       	brne	.-38     	; 0x2058 <LCD_VoidInit+0x28c>
    207e:	24 c0       	rjmp	.+72     	; 0x20c8 <LCD_VoidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2080:	6e a5       	ldd	r22, Y+46	; 0x2e
    2082:	7f a5       	ldd	r23, Y+47	; 0x2f
    2084:	88 a9       	ldd	r24, Y+48	; 0x30
    2086:	99 a9       	ldd	r25, Y+49	; 0x31
    2088:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	9d a7       	std	Y+45, r25	; 0x2d
    2092:	8c a7       	std	Y+44, r24	; 0x2c
    2094:	8c a5       	ldd	r24, Y+44	; 0x2c
    2096:	9d a5       	ldd	r25, Y+45	; 0x2d
    2098:	99 a7       	std	Y+41, r25	; 0x29
    209a:	88 a7       	std	Y+40, r24	; 0x28
    209c:	88 a5       	ldd	r24, Y+40	; 0x28
    209e:	99 a5       	ldd	r25, Y+41	; 0x29
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	f1 f7       	brne	.-4      	; 0x20a0 <LCD_VoidInit+0x2d4>
    20a4:	99 a7       	std	Y+41, r25	; 0x29
    20a6:	88 a7       	std	Y+40, r24	; 0x28
    20a8:	0f c0       	rjmp	.+30     	; 0x20c8 <LCD_VoidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20aa:	6f a9       	ldd	r22, Y+55	; 0x37
    20ac:	78 ad       	ldd	r23, Y+56	; 0x38
    20ae:	89 ad       	ldd	r24, Y+57	; 0x39
    20b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    20b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	8e ab       	std	Y+54, r24	; 0x36
    20bc:	8e a9       	ldd	r24, Y+54	; 0x36
    20be:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20c0:	8f a1       	ldd	r24, Y+39	; 0x27
    20c2:	8a 95       	dec	r24
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <LCD_VoidInit+0x2f6>
    20c6:	8f a3       	std	Y+39, r24	; 0x27
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00001111);
    20c8:	8f e0       	ldi	r24, 0x0F	; 15
    20ca:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	a0 e2       	ldi	r26, 0x20	; 32
    20d4:	b2 e4       	ldi	r27, 0x42	; 66
    20d6:	8b a3       	std	Y+35, r24	; 0x23
    20d8:	9c a3       	std	Y+36, r25	; 0x24
    20da:	ad a3       	std	Y+37, r26	; 0x25
    20dc:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20de:	6b a1       	ldd	r22, Y+35	; 0x23
    20e0:	7c a1       	ldd	r23, Y+36	; 0x24
    20e2:	8d a1       	ldd	r24, Y+37	; 0x25
    20e4:	9e a1       	ldd	r25, Y+38	; 0x26
    20e6:	2b ea       	ldi	r18, 0xAB	; 171
    20e8:	3a ea       	ldi	r19, 0xAA	; 170
    20ea:	4a e2       	ldi	r20, 0x2A	; 42
    20ec:	50 e4       	ldi	r21, 0x40	; 64
    20ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	8f 8f       	std	Y+31, r24	; 0x1f
    20f8:	98 a3       	std	Y+32, r25	; 0x20
    20fa:	a9 a3       	std	Y+33, r26	; 0x21
    20fc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    20fe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2100:	78 a1       	ldd	r23, Y+32	; 0x20
    2102:	89 a1       	ldd	r24, Y+33	; 0x21
    2104:	9a a1       	ldd	r25, Y+34	; 0x22
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e8       	ldi	r20, 0x80	; 128
    210c:	5f e3       	ldi	r21, 0x3F	; 63
    210e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2112:	88 23       	and	r24, r24
    2114:	1c f4       	brge	.+6      	; 0x211c <LCD_VoidInit+0x350>
		__ticks = 1;
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	8e 8f       	std	Y+30, r24	; 0x1e
    211a:	91 c0       	rjmp	.+290    	; 0x223e <LCD_VoidInit+0x472>
	else if (__tmp > 255)
    211c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    211e:	78 a1       	ldd	r23, Y+32	; 0x20
    2120:	89 a1       	ldd	r24, Y+33	; 0x21
    2122:	9a a1       	ldd	r25, Y+34	; 0x22
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	4f e7       	ldi	r20, 0x7F	; 127
    212a:	53 e4       	ldi	r21, 0x43	; 67
    212c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2130:	18 16       	cp	r1, r24
    2132:	0c f0       	brlt	.+2      	; 0x2136 <LCD_VoidInit+0x36a>
    2134:	7b c0       	rjmp	.+246    	; 0x222c <LCD_VoidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    2136:	6b a1       	ldd	r22, Y+35	; 0x23
    2138:	7c a1       	ldd	r23, Y+36	; 0x24
    213a:	8d a1       	ldd	r24, Y+37	; 0x25
    213c:	9e a1       	ldd	r25, Y+38	; 0x26
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	4a e7       	ldi	r20, 0x7A	; 122
    2144:	54 e4       	ldi	r21, 0x44	; 68
    2146:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	8a 8f       	std	Y+26, r24	; 0x1a
    2150:	9b 8f       	std	Y+27, r25	; 0x1b
    2152:	ac 8f       	std	Y+28, r26	; 0x1c
    2154:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2156:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2158:	7b 8d       	ldd	r23, Y+27	; 0x1b
    215a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    215c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	4a ef       	ldi	r20, 0xFA	; 250
    2164:	54 e4       	ldi	r21, 0x44	; 68
    2166:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	8e 8b       	std	Y+22, r24	; 0x16
    2170:	9f 8b       	std	Y+23, r25	; 0x17
    2172:	a8 8f       	std	Y+24, r26	; 0x18
    2174:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2176:	6e 89       	ldd	r22, Y+22	; 0x16
    2178:	7f 89       	ldd	r23, Y+23	; 0x17
    217a:	88 8d       	ldd	r24, Y+24	; 0x18
    217c:	99 8d       	ldd	r25, Y+25	; 0x19
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	40 e8       	ldi	r20, 0x80	; 128
    2184:	5f e3       	ldi	r21, 0x3F	; 63
    2186:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    218a:	88 23       	and	r24, r24
    218c:	2c f4       	brge	.+10     	; 0x2198 <LCD_VoidInit+0x3cc>
		__ticks = 1;
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	9d 8b       	std	Y+21, r25	; 0x15
    2194:	8c 8b       	std	Y+20, r24	; 0x14
    2196:	3f c0       	rjmp	.+126    	; 0x2216 <LCD_VoidInit+0x44a>
	else if (__tmp > 65535)
    2198:	6e 89       	ldd	r22, Y+22	; 0x16
    219a:	7f 89       	ldd	r23, Y+23	; 0x17
    219c:	88 8d       	ldd	r24, Y+24	; 0x18
    219e:	99 8d       	ldd	r25, Y+25	; 0x19
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	3f ef       	ldi	r19, 0xFF	; 255
    21a4:	4f e7       	ldi	r20, 0x7F	; 127
    21a6:	57 e4       	ldi	r21, 0x47	; 71
    21a8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21ac:	18 16       	cp	r1, r24
    21ae:	4c f5       	brge	.+82     	; 0x2202 <LCD_VoidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    21b2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    21b4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21b6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e2       	ldi	r20, 0x20	; 32
    21be:	51 e4       	ldi	r21, 0x41	; 65
    21c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	bc 01       	movw	r22, r24
    21ca:	cd 01       	movw	r24, r26
    21cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	9d 8b       	std	Y+21, r25	; 0x15
    21d6:	8c 8b       	std	Y+20, r24	; 0x14
    21d8:	0f c0       	rjmp	.+30     	; 0x21f8 <LCD_VoidInit+0x42c>
    21da:	88 ec       	ldi	r24, 0xC8	; 200
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	9b 8b       	std	Y+19, r25	; 0x13
    21e0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21e2:	8a 89       	ldd	r24, Y+18	; 0x12
    21e4:	9b 89       	ldd	r25, Y+19	; 0x13
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <LCD_VoidInit+0x41a>
    21ea:	9b 8b       	std	Y+19, r25	; 0x13
    21ec:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ee:	8c 89       	ldd	r24, Y+20	; 0x14
    21f0:	9d 89       	ldd	r25, Y+21	; 0x15
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	9d 8b       	std	Y+21, r25	; 0x15
    21f6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f8:	8c 89       	ldd	r24, Y+20	; 0x14
    21fa:	9d 89       	ldd	r25, Y+21	; 0x15
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	69 f7       	brne	.-38     	; 0x21da <LCD_VoidInit+0x40e>
    2200:	24 c0       	rjmp	.+72     	; 0x224a <LCD_VoidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2202:	6e 89       	ldd	r22, Y+22	; 0x16
    2204:	7f 89       	ldd	r23, Y+23	; 0x17
    2206:	88 8d       	ldd	r24, Y+24	; 0x18
    2208:	99 8d       	ldd	r25, Y+25	; 0x19
    220a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	9d 8b       	std	Y+21, r25	; 0x15
    2214:	8c 8b       	std	Y+20, r24	; 0x14
    2216:	8c 89       	ldd	r24, Y+20	; 0x14
    2218:	9d 89       	ldd	r25, Y+21	; 0x15
    221a:	99 8b       	std	Y+17, r25	; 0x11
    221c:	88 8b       	std	Y+16, r24	; 0x10
    221e:	88 89       	ldd	r24, Y+16	; 0x10
    2220:	99 89       	ldd	r25, Y+17	; 0x11
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <LCD_VoidInit+0x456>
    2226:	99 8b       	std	Y+17, r25	; 0x11
    2228:	88 8b       	std	Y+16, r24	; 0x10
    222a:	0f c0       	rjmp	.+30     	; 0x224a <LCD_VoidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    222c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    222e:	78 a1       	ldd	r23, Y+32	; 0x20
    2230:	89 a1       	ldd	r24, Y+33	; 0x21
    2232:	9a a1       	ldd	r25, Y+34	; 0x22
    2234:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	8e 8f       	std	Y+30, r24	; 0x1e
    223e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2240:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2242:	8f 85       	ldd	r24, Y+15	; 0x0f
    2244:	8a 95       	dec	r24
    2246:	f1 f7       	brne	.-4      	; 0x2244 <LCD_VoidInit+0x478>
    2248:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00000001);
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	a0 e0       	ldi	r26, 0x00	; 0
    2256:	b0 e4       	ldi	r27, 0x40	; 64
    2258:	8b 87       	std	Y+11, r24	; 0x0b
    225a:	9c 87       	std	Y+12, r25	; 0x0c
    225c:	ad 87       	std	Y+13, r26	; 0x0d
    225e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2260:	6b 85       	ldd	r22, Y+11	; 0x0b
    2262:	7c 85       	ldd	r23, Y+12	; 0x0c
    2264:	8d 85       	ldd	r24, Y+13	; 0x0d
    2266:	9e 85       	ldd	r25, Y+14	; 0x0e
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	4a ef       	ldi	r20, 0xFA	; 250
    226e:	54 e4       	ldi	r21, 0x44	; 68
    2270:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	8f 83       	std	Y+7, r24	; 0x07
    227a:	98 87       	std	Y+8, r25	; 0x08
    227c:	a9 87       	std	Y+9, r26	; 0x09
    227e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2280:	6f 81       	ldd	r22, Y+7	; 0x07
    2282:	78 85       	ldd	r23, Y+8	; 0x08
    2284:	89 85       	ldd	r24, Y+9	; 0x09
    2286:	9a 85       	ldd	r25, Y+10	; 0x0a
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e8       	ldi	r20, 0x80	; 128
    228e:	5f e3       	ldi	r21, 0x3F	; 63
    2290:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2294:	88 23       	and	r24, r24
    2296:	2c f4       	brge	.+10     	; 0x22a2 <LCD_VoidInit+0x4d6>
		__ticks = 1;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	9e 83       	std	Y+6, r25	; 0x06
    229e:	8d 83       	std	Y+5, r24	; 0x05
    22a0:	3f c0       	rjmp	.+126    	; 0x2320 <LCD_VoidInit+0x554>
	else if (__tmp > 65535)
    22a2:	6f 81       	ldd	r22, Y+7	; 0x07
    22a4:	78 85       	ldd	r23, Y+8	; 0x08
    22a6:	89 85       	ldd	r24, Y+9	; 0x09
    22a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	3f ef       	ldi	r19, 0xFF	; 255
    22ae:	4f e7       	ldi	r20, 0x7F	; 127
    22b0:	57 e4       	ldi	r21, 0x47	; 71
    22b2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22b6:	18 16       	cp	r1, r24
    22b8:	4c f5       	brge	.+82     	; 0x230c <LCD_VoidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    22bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22be:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e2       	ldi	r20, 0x20	; 32
    22c8:	51 e4       	ldi	r21, 0x41	; 65
    22ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	bc 01       	movw	r22, r24
    22d4:	cd 01       	movw	r24, r26
    22d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	9e 83       	std	Y+6, r25	; 0x06
    22e0:	8d 83       	std	Y+5, r24	; 0x05
    22e2:	0f c0       	rjmp	.+30     	; 0x2302 <LCD_VoidInit+0x536>
    22e4:	88 ec       	ldi	r24, 0xC8	; 200
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	9c 83       	std	Y+4, r25	; 0x04
    22ea:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	9c 81       	ldd	r25, Y+4	; 0x04
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <LCD_VoidInit+0x524>
    22f4:	9c 83       	std	Y+4, r25	; 0x04
    22f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f8:	8d 81       	ldd	r24, Y+5	; 0x05
    22fa:	9e 81       	ldd	r25, Y+6	; 0x06
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	9e 83       	std	Y+6, r25	; 0x06
    2300:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2302:	8d 81       	ldd	r24, Y+5	; 0x05
    2304:	9e 81       	ldd	r25, Y+6	; 0x06
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	69 f7       	brne	.-38     	; 0x22e4 <LCD_VoidInit+0x518>
    230a:	14 c0       	rjmp	.+40     	; 0x2334 <LCD_VoidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230c:	6f 81       	ldd	r22, Y+7	; 0x07
    230e:	78 85       	ldd	r23, Y+8	; 0x08
    2310:	89 85       	ldd	r24, Y+9	; 0x09
    2312:	9a 85       	ldd	r25, Y+10	; 0x0a
    2314:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	9e 83       	std	Y+6, r25	; 0x06
    231e:	8d 83       	std	Y+5, r24	; 0x05
    2320:	8d 81       	ldd	r24, Y+5	; 0x05
    2322:	9e 81       	ldd	r25, Y+6	; 0x06
    2324:	9a 83       	std	Y+2, r25	; 0x02
    2326:	89 83       	std	Y+1, r24	; 0x01
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	9a 81       	ldd	r25, Y+2	; 0x02
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <LCD_VoidInit+0x560>
    2330:	9a 83       	std	Y+2, r25	; 0x02
    2332:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
        LCD_CheckStatusSendCmnd(0b00000110);
    2334:	86 e0       	ldi	r24, 0x06	; 6
    2336:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
}
    233a:	c4 5b       	subi	r28, 0xB4	; 180
    233c:	df 4f       	sbci	r29, 0xFF	; 255
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	1f 91       	pop	r17
    234e:	0f 91       	pop	r16
    2350:	08 95       	ret

00002352 <LCD_CheckStatusSendCmnd>:
CheckStatus LCD_CheckStatusSendCmnd(_uint8 Copy__Uint8Cmnd)
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	e2 97       	sbiw	r28, 0x32	; 50
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	de bf       	out	0x3e, r29	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	8a ab       	std	Y+50, r24	; 0x32
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2368:	19 aa       	std	Y+49, r1	; 0x31
         3-Send CMND byte  to the Data Pins of LCD
         4-PULSE of Enable E = 1 ,E = 0
        */
        if (Copy__Uint8Cmnd <= 255)
        {
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_LOW);
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	60 e0       	ldi	r22, 0x00	; 0
    236e:	40 e0       	ldi	r20, 0x00	; 0
    2370:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	61 e0       	ldi	r22, 0x01	; 1
    2378:	40 e0       	ldi	r20, 0x00	; 0
    237a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, Copy__Uint8Cmnd);
    237e:	83 e0       	ldi	r24, 0x03	; 3
    2380:	6a a9       	ldd	r22, Y+50	; 0x32
    2382:	0e 94 43 0b 	call	0x1686	; 0x1686 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	62 e0       	ldi	r22, 0x02	; 2
    238a:	41 e0       	ldi	r20, 0x01	; 1
    238c:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO__CheckStatusSetPinValue>
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	a0 e8       	ldi	r26, 0x80	; 128
    2396:	bf e3       	ldi	r27, 0x3F	; 63
    2398:	8d a7       	std	Y+45, r24	; 0x2d
    239a:	9e a7       	std	Y+46, r25	; 0x2e
    239c:	af a7       	std	Y+47, r26	; 0x2f
    239e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23a0:	6d a5       	ldd	r22, Y+45	; 0x2d
    23a2:	7e a5       	ldd	r23, Y+46	; 0x2e
    23a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    23a6:	98 a9       	ldd	r25, Y+48	; 0x30
    23a8:	2b ea       	ldi	r18, 0xAB	; 171
    23aa:	3a ea       	ldi	r19, 0xAA	; 170
    23ac:	4a e2       	ldi	r20, 0x2A	; 42
    23ae:	50 e4       	ldi	r21, 0x40	; 64
    23b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	89 a7       	std	Y+41, r24	; 0x29
    23ba:	9a a7       	std	Y+42, r25	; 0x2a
    23bc:	ab a7       	std	Y+43, r26	; 0x2b
    23be:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    23c0:	69 a5       	ldd	r22, Y+41	; 0x29
    23c2:	7a a5       	ldd	r23, Y+42	; 0x2a
    23c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    23c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	40 e8       	ldi	r20, 0x80	; 128
    23ce:	5f e3       	ldi	r21, 0x3F	; 63
    23d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23d4:	88 23       	and	r24, r24
    23d6:	1c f4       	brge	.+6      	; 0x23de <LCD_CheckStatusSendCmnd+0x8c>
		__ticks = 1;
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	88 a7       	std	Y+40, r24	; 0x28
    23dc:	91 c0       	rjmp	.+290    	; 0x2500 <LCD_CheckStatusSendCmnd+0x1ae>
	else if (__tmp > 255)
    23de:	69 a5       	ldd	r22, Y+41	; 0x29
    23e0:	7a a5       	ldd	r23, Y+42	; 0x2a
    23e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    23e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	4f e7       	ldi	r20, 0x7F	; 127
    23ec:	53 e4       	ldi	r21, 0x43	; 67
    23ee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23f2:	18 16       	cp	r1, r24
    23f4:	0c f0       	brlt	.+2      	; 0x23f8 <LCD_CheckStatusSendCmnd+0xa6>
    23f6:	7b c0       	rjmp	.+246    	; 0x24ee <LCD_CheckStatusSendCmnd+0x19c>
	{
		_delay_ms(__us / 1000.0);
    23f8:	6d a5       	ldd	r22, Y+45	; 0x2d
    23fa:	7e a5       	ldd	r23, Y+46	; 0x2e
    23fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    23fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	4a e7       	ldi	r20, 0x7A	; 122
    2406:	54 e4       	ldi	r21, 0x44	; 68
    2408:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	8c a3       	std	Y+36, r24	; 0x24
    2412:	9d a3       	std	Y+37, r25	; 0x25
    2414:	ae a3       	std	Y+38, r26	; 0x26
    2416:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2418:	6c a1       	ldd	r22, Y+36	; 0x24
    241a:	7d a1       	ldd	r23, Y+37	; 0x25
    241c:	8e a1       	ldd	r24, Y+38	; 0x26
    241e:	9f a1       	ldd	r25, Y+39	; 0x27
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	4a ef       	ldi	r20, 0xFA	; 250
    2426:	54 e4       	ldi	r21, 0x44	; 68
    2428:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	88 a3       	std	Y+32, r24	; 0x20
    2432:	99 a3       	std	Y+33, r25	; 0x21
    2434:	aa a3       	std	Y+34, r26	; 0x22
    2436:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2438:	68 a1       	ldd	r22, Y+32	; 0x20
    243a:	79 a1       	ldd	r23, Y+33	; 0x21
    243c:	8a a1       	ldd	r24, Y+34	; 0x22
    243e:	9b a1       	ldd	r25, Y+35	; 0x23
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e8       	ldi	r20, 0x80	; 128
    2446:	5f e3       	ldi	r21, 0x3F	; 63
    2448:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    244c:	88 23       	and	r24, r24
    244e:	2c f4       	brge	.+10     	; 0x245a <LCD_CheckStatusSendCmnd+0x108>
		__ticks = 1;
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9f 8f       	std	Y+31, r25	; 0x1f
    2456:	8e 8f       	std	Y+30, r24	; 0x1e
    2458:	3f c0       	rjmp	.+126    	; 0x24d8 <LCD_CheckStatusSendCmnd+0x186>
	else if (__tmp > 65535)
    245a:	68 a1       	ldd	r22, Y+32	; 0x20
    245c:	79 a1       	ldd	r23, Y+33	; 0x21
    245e:	8a a1       	ldd	r24, Y+34	; 0x22
    2460:	9b a1       	ldd	r25, Y+35	; 0x23
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	3f ef       	ldi	r19, 0xFF	; 255
    2466:	4f e7       	ldi	r20, 0x7F	; 127
    2468:	57 e4       	ldi	r21, 0x47	; 71
    246a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    246e:	18 16       	cp	r1, r24
    2470:	4c f5       	brge	.+82     	; 0x24c4 <LCD_CheckStatusSendCmnd+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2472:	6c a1       	ldd	r22, Y+36	; 0x24
    2474:	7d a1       	ldd	r23, Y+37	; 0x25
    2476:	8e a1       	ldd	r24, Y+38	; 0x26
    2478:	9f a1       	ldd	r25, Y+39	; 0x27
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e2       	ldi	r20, 0x20	; 32
    2480:	51 e4       	ldi	r21, 0x41	; 65
    2482:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9f 8f       	std	Y+31, r25	; 0x1f
    2498:	8e 8f       	std	Y+30, r24	; 0x1e
    249a:	0f c0       	rjmp	.+30     	; 0x24ba <LCD_CheckStatusSendCmnd+0x168>
    249c:	88 ec       	ldi	r24, 0xC8	; 200
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	9d 8f       	std	Y+29, r25	; 0x1d
    24a2:	8c 8f       	std	Y+28, r24	; 0x1c
    24a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24a6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <LCD_CheckStatusSendCmnd+0x156>
    24ac:	9d 8f       	std	Y+29, r25	; 0x1d
    24ae:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	9f 8f       	std	Y+31, r25	; 0x1f
    24b8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24bc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	69 f7       	brne	.-38     	; 0x249c <LCD_CheckStatusSendCmnd+0x14a>
    24c2:	24 c0       	rjmp	.+72     	; 0x250c <LCD_CheckStatusSendCmnd+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c4:	68 a1       	ldd	r22, Y+32	; 0x20
    24c6:	79 a1       	ldd	r23, Y+33	; 0x21
    24c8:	8a a1       	ldd	r24, Y+34	; 0x22
    24ca:	9b a1       	ldd	r25, Y+35	; 0x23
    24cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	9f 8f       	std	Y+31, r25	; 0x1f
    24d6:	8e 8f       	std	Y+30, r24	; 0x1e
    24d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24da:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24dc:	9b 8f       	std	Y+27, r25	; 0x1b
    24de:	8a 8f       	std	Y+26, r24	; 0x1a
    24e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    24e2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <LCD_CheckStatusSendCmnd+0x192>
    24e8:	9b 8f       	std	Y+27, r25	; 0x1b
    24ea:	8a 8f       	std	Y+26, r24	; 0x1a
    24ec:	0f c0       	rjmp	.+30     	; 0x250c <LCD_CheckStatusSendCmnd+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24ee:	69 a5       	ldd	r22, Y+41	; 0x29
    24f0:	7a a5       	ldd	r23, Y+42	; 0x2a
    24f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    24f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    24f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	88 a7       	std	Y+40, r24	; 0x28
    2500:	88 a5       	ldd	r24, Y+40	; 0x28
    2502:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2504:	89 8d       	ldd	r24, Y+25	; 0x19
    2506:	8a 95       	dec	r24
    2508:	f1 f7       	brne	.-4      	; 0x2506 <LCD_CheckStatusSendCmnd+0x1b4>
    250a:	89 8f       	std	Y+25, r24	; 0x19
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	62 e0       	ldi	r22, 0x02	; 2
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO__CheckStatusSetPinValue>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	a0 e8       	ldi	r26, 0x80	; 128
    251c:	bf e3       	ldi	r27, 0x3F	; 63
    251e:	8d 8b       	std	Y+21, r24	; 0x15
    2520:	9e 8b       	std	Y+22, r25	; 0x16
    2522:	af 8b       	std	Y+23, r26	; 0x17
    2524:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2526:	6d 89       	ldd	r22, Y+21	; 0x15
    2528:	7e 89       	ldd	r23, Y+22	; 0x16
    252a:	8f 89       	ldd	r24, Y+23	; 0x17
    252c:	98 8d       	ldd	r25, Y+24	; 0x18
    252e:	2b ea       	ldi	r18, 0xAB	; 171
    2530:	3a ea       	ldi	r19, 0xAA	; 170
    2532:	4a e2       	ldi	r20, 0x2A	; 42
    2534:	50 e4       	ldi	r21, 0x40	; 64
    2536:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	89 8b       	std	Y+17, r24	; 0x11
    2540:	9a 8b       	std	Y+18, r25	; 0x12
    2542:	ab 8b       	std	Y+19, r26	; 0x13
    2544:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2546:	69 89       	ldd	r22, Y+17	; 0x11
    2548:	7a 89       	ldd	r23, Y+18	; 0x12
    254a:	8b 89       	ldd	r24, Y+19	; 0x13
    254c:	9c 89       	ldd	r25, Y+20	; 0x14
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e8       	ldi	r20, 0x80	; 128
    2554:	5f e3       	ldi	r21, 0x3F	; 63
    2556:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    255a:	88 23       	and	r24, r24
    255c:	1c f4       	brge	.+6      	; 0x2564 <LCD_CheckStatusSendCmnd+0x212>
		__ticks = 1;
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	88 8b       	std	Y+16, r24	; 0x10
    2562:	91 c0       	rjmp	.+290    	; 0x2686 <LCD_CheckStatusSendCmnd+0x334>
	else if (__tmp > 255)
    2564:	69 89       	ldd	r22, Y+17	; 0x11
    2566:	7a 89       	ldd	r23, Y+18	; 0x12
    2568:	8b 89       	ldd	r24, Y+19	; 0x13
    256a:	9c 89       	ldd	r25, Y+20	; 0x14
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	4f e7       	ldi	r20, 0x7F	; 127
    2572:	53 e4       	ldi	r21, 0x43	; 67
    2574:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2578:	18 16       	cp	r1, r24
    257a:	0c f0       	brlt	.+2      	; 0x257e <LCD_CheckStatusSendCmnd+0x22c>
    257c:	7b c0       	rjmp	.+246    	; 0x2674 <LCD_CheckStatusSendCmnd+0x322>
	{
		_delay_ms(__us / 1000.0);
    257e:	6d 89       	ldd	r22, Y+21	; 0x15
    2580:	7e 89       	ldd	r23, Y+22	; 0x16
    2582:	8f 89       	ldd	r24, Y+23	; 0x17
    2584:	98 8d       	ldd	r25, Y+24	; 0x18
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	4a e7       	ldi	r20, 0x7A	; 122
    258c:	54 e4       	ldi	r21, 0x44	; 68
    258e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	8c 87       	std	Y+12, r24	; 0x0c
    2598:	9d 87       	std	Y+13, r25	; 0x0d
    259a:	ae 87       	std	Y+14, r26	; 0x0e
    259c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259e:	6c 85       	ldd	r22, Y+12	; 0x0c
    25a0:	7d 85       	ldd	r23, Y+13	; 0x0d
    25a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	4a ef       	ldi	r20, 0xFA	; 250
    25ac:	54 e4       	ldi	r21, 0x44	; 68
    25ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	88 87       	std	Y+8, r24	; 0x08
    25b8:	99 87       	std	Y+9, r25	; 0x09
    25ba:	aa 87       	std	Y+10, r26	; 0x0a
    25bc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    25be:	68 85       	ldd	r22, Y+8	; 0x08
    25c0:	79 85       	ldd	r23, Y+9	; 0x09
    25c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    25c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	40 e8       	ldi	r20, 0x80	; 128
    25cc:	5f e3       	ldi	r21, 0x3F	; 63
    25ce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25d2:	88 23       	and	r24, r24
    25d4:	2c f4       	brge	.+10     	; 0x25e0 <LCD_CheckStatusSendCmnd+0x28e>
		__ticks = 1;
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	9f 83       	std	Y+7, r25	; 0x07
    25dc:	8e 83       	std	Y+6, r24	; 0x06
    25de:	3f c0       	rjmp	.+126    	; 0x265e <LCD_CheckStatusSendCmnd+0x30c>
	else if (__tmp > 65535)
    25e0:	68 85       	ldd	r22, Y+8	; 0x08
    25e2:	79 85       	ldd	r23, Y+9	; 0x09
    25e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    25e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	3f ef       	ldi	r19, 0xFF	; 255
    25ec:	4f e7       	ldi	r20, 0x7F	; 127
    25ee:	57 e4       	ldi	r21, 0x47	; 71
    25f0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25f4:	18 16       	cp	r1, r24
    25f6:	4c f5       	brge	.+82     	; 0x264a <LCD_CheckStatusSendCmnd+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f8:	6c 85       	ldd	r22, Y+12	; 0x0c
    25fa:	7d 85       	ldd	r23, Y+13	; 0x0d
    25fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    25fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e2       	ldi	r20, 0x20	; 32
    2606:	51 e4       	ldi	r21, 0x41	; 65
    2608:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	bc 01       	movw	r22, r24
    2612:	cd 01       	movw	r24, r26
    2614:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	9f 83       	std	Y+7, r25	; 0x07
    261e:	8e 83       	std	Y+6, r24	; 0x06
    2620:	0f c0       	rjmp	.+30     	; 0x2640 <LCD_CheckStatusSendCmnd+0x2ee>
    2622:	88 ec       	ldi	r24, 0xC8	; 200
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	9d 83       	std	Y+5, r25	; 0x05
    2628:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    262a:	8c 81       	ldd	r24, Y+4	; 0x04
    262c:	9d 81       	ldd	r25, Y+5	; 0x05
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	f1 f7       	brne	.-4      	; 0x262e <LCD_CheckStatusSendCmnd+0x2dc>
    2632:	9d 83       	std	Y+5, r25	; 0x05
    2634:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2636:	8e 81       	ldd	r24, Y+6	; 0x06
    2638:	9f 81       	ldd	r25, Y+7	; 0x07
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	9f 83       	std	Y+7, r25	; 0x07
    263e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2640:	8e 81       	ldd	r24, Y+6	; 0x06
    2642:	9f 81       	ldd	r25, Y+7	; 0x07
    2644:	00 97       	sbiw	r24, 0x00	; 0
    2646:	69 f7       	brne	.-38     	; 0x2622 <LCD_CheckStatusSendCmnd+0x2d0>
    2648:	24 c0       	rjmp	.+72     	; 0x2692 <LCD_CheckStatusSendCmnd+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264a:	68 85       	ldd	r22, Y+8	; 0x08
    264c:	79 85       	ldd	r23, Y+9	; 0x09
    264e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2650:	9b 85       	ldd	r25, Y+11	; 0x0b
    2652:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	9f 83       	std	Y+7, r25	; 0x07
    265c:	8e 83       	std	Y+6, r24	; 0x06
    265e:	8e 81       	ldd	r24, Y+6	; 0x06
    2660:	9f 81       	ldd	r25, Y+7	; 0x07
    2662:	9b 83       	std	Y+3, r25	; 0x03
    2664:	8a 83       	std	Y+2, r24	; 0x02
    2666:	8a 81       	ldd	r24, Y+2	; 0x02
    2668:	9b 81       	ldd	r25, Y+3	; 0x03
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	f1 f7       	brne	.-4      	; 0x266a <LCD_CheckStatusSendCmnd+0x318>
    266e:	9b 83       	std	Y+3, r25	; 0x03
    2670:	8a 83       	std	Y+2, r24	; 0x02
    2672:	0f c0       	rjmp	.+30     	; 0x2692 <LCD_CheckStatusSendCmnd+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2674:	69 89       	ldd	r22, Y+17	; 0x11
    2676:	7a 89       	ldd	r23, Y+18	; 0x12
    2678:	8b 89       	ldd	r24, Y+19	; 0x13
    267a:	9c 89       	ldd	r25, Y+20	; 0x14
    267c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	88 8b       	std	Y+16, r24	; 0x10
    2686:	88 89       	ldd	r24, Y+16	; 0x10
    2688:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	8a 95       	dec	r24
    268e:	f1 f7       	brne	.-4      	; 0x268c <LCD_CheckStatusSendCmnd+0x33a>
    2690:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    2692:	89 a9       	ldd	r24, Y+49	; 0x31
}
    2694:	e2 96       	adiw	r28, 0x32	; 50
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <LCD_CheckStatusSendChar>:
CheckStatus LCD_CheckStatusSendChar(_uint8 Copy__Uint8Char)
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	e2 97       	sbiw	r28, 0x32	; 50
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	cd bf       	out	0x3d, r28	; 61
    26ba:	8a ab       	std	Y+50, r24	; 0x32
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    26bc:	19 aa       	std	Y+49, r1	; 0x31
         3-Send CMND byte  to the Data Pins of LCD
         4-PULSE of Enable E = 1 ,E = 0
        */
        if (Copy__Uint8Char <= 255)
        {
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_HIGH);
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	60 e0       	ldi	r22, 0x00	; 0
    26c2:	41 e0       	ldi	r20, 0x01	; 1
    26c4:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	61 e0       	ldi	r22, 0x01	; 1
    26cc:	40 e0       	ldi	r20, 0x00	; 0
    26ce:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, Copy__Uint8Char);
    26d2:	83 e0       	ldi	r24, 0x03	; 3
    26d4:	6a a9       	ldd	r22, Y+50	; 0x32
    26d6:	0e 94 43 0b 	call	0x1686	; 0x1686 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	62 e0       	ldi	r22, 0x02	; 2
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO__CheckStatusSetPinValue>
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	a0 e8       	ldi	r26, 0x80	; 128
    26ea:	bf e3       	ldi	r27, 0x3F	; 63
    26ec:	8d a7       	std	Y+45, r24	; 0x2d
    26ee:	9e a7       	std	Y+46, r25	; 0x2e
    26f0:	af a7       	std	Y+47, r26	; 0x2f
    26f2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26f4:	6d a5       	ldd	r22, Y+45	; 0x2d
    26f6:	7e a5       	ldd	r23, Y+46	; 0x2e
    26f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26fa:	98 a9       	ldd	r25, Y+48	; 0x30
    26fc:	2b ea       	ldi	r18, 0xAB	; 171
    26fe:	3a ea       	ldi	r19, 0xAA	; 170
    2700:	4a e2       	ldi	r20, 0x2A	; 42
    2702:	50 e4       	ldi	r21, 0x40	; 64
    2704:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	89 a7       	std	Y+41, r24	; 0x29
    270e:	9a a7       	std	Y+42, r25	; 0x2a
    2710:	ab a7       	std	Y+43, r26	; 0x2b
    2712:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2714:	69 a5       	ldd	r22, Y+41	; 0x29
    2716:	7a a5       	ldd	r23, Y+42	; 0x2a
    2718:	8b a5       	ldd	r24, Y+43	; 0x2b
    271a:	9c a5       	ldd	r25, Y+44	; 0x2c
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e8       	ldi	r20, 0x80	; 128
    2722:	5f e3       	ldi	r21, 0x3F	; 63
    2724:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2728:	88 23       	and	r24, r24
    272a:	1c f4       	brge	.+6      	; 0x2732 <LCD_CheckStatusSendChar+0x8c>
		__ticks = 1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	88 a7       	std	Y+40, r24	; 0x28
    2730:	91 c0       	rjmp	.+290    	; 0x2854 <LCD_CheckStatusSendChar+0x1ae>
	else if (__tmp > 255)
    2732:	69 a5       	ldd	r22, Y+41	; 0x29
    2734:	7a a5       	ldd	r23, Y+42	; 0x2a
    2736:	8b a5       	ldd	r24, Y+43	; 0x2b
    2738:	9c a5       	ldd	r25, Y+44	; 0x2c
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	4f e7       	ldi	r20, 0x7F	; 127
    2740:	53 e4       	ldi	r21, 0x43	; 67
    2742:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2746:	18 16       	cp	r1, r24
    2748:	0c f0       	brlt	.+2      	; 0x274c <LCD_CheckStatusSendChar+0xa6>
    274a:	7b c0       	rjmp	.+246    	; 0x2842 <LCD_CheckStatusSendChar+0x19c>
	{
		_delay_ms(__us / 1000.0);
    274c:	6d a5       	ldd	r22, Y+45	; 0x2d
    274e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2750:	8f a5       	ldd	r24, Y+47	; 0x2f
    2752:	98 a9       	ldd	r25, Y+48	; 0x30
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	4a e7       	ldi	r20, 0x7A	; 122
    275a:	54 e4       	ldi	r21, 0x44	; 68
    275c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	8c a3       	std	Y+36, r24	; 0x24
    2766:	9d a3       	std	Y+37, r25	; 0x25
    2768:	ae a3       	std	Y+38, r26	; 0x26
    276a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    276c:	6c a1       	ldd	r22, Y+36	; 0x24
    276e:	7d a1       	ldd	r23, Y+37	; 0x25
    2770:	8e a1       	ldd	r24, Y+38	; 0x26
    2772:	9f a1       	ldd	r25, Y+39	; 0x27
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	4a ef       	ldi	r20, 0xFA	; 250
    277a:	54 e4       	ldi	r21, 0x44	; 68
    277c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	88 a3       	std	Y+32, r24	; 0x20
    2786:	99 a3       	std	Y+33, r25	; 0x21
    2788:	aa a3       	std	Y+34, r26	; 0x22
    278a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    278c:	68 a1       	ldd	r22, Y+32	; 0x20
    278e:	79 a1       	ldd	r23, Y+33	; 0x21
    2790:	8a a1       	ldd	r24, Y+34	; 0x22
    2792:	9b a1       	ldd	r25, Y+35	; 0x23
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e8       	ldi	r20, 0x80	; 128
    279a:	5f e3       	ldi	r21, 0x3F	; 63
    279c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27a0:	88 23       	and	r24, r24
    27a2:	2c f4       	brge	.+10     	; 0x27ae <LCD_CheckStatusSendChar+0x108>
		__ticks = 1;
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	9f 8f       	std	Y+31, r25	; 0x1f
    27aa:	8e 8f       	std	Y+30, r24	; 0x1e
    27ac:	3f c0       	rjmp	.+126    	; 0x282c <LCD_CheckStatusSendChar+0x186>
	else if (__tmp > 65535)
    27ae:	68 a1       	ldd	r22, Y+32	; 0x20
    27b0:	79 a1       	ldd	r23, Y+33	; 0x21
    27b2:	8a a1       	ldd	r24, Y+34	; 0x22
    27b4:	9b a1       	ldd	r25, Y+35	; 0x23
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	3f ef       	ldi	r19, 0xFF	; 255
    27ba:	4f e7       	ldi	r20, 0x7F	; 127
    27bc:	57 e4       	ldi	r21, 0x47	; 71
    27be:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27c2:	18 16       	cp	r1, r24
    27c4:	4c f5       	brge	.+82     	; 0x2818 <LCD_CheckStatusSendChar+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c6:	6c a1       	ldd	r22, Y+36	; 0x24
    27c8:	7d a1       	ldd	r23, Y+37	; 0x25
    27ca:	8e a1       	ldd	r24, Y+38	; 0x26
    27cc:	9f a1       	ldd	r25, Y+39	; 0x27
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e2       	ldi	r20, 0x20	; 32
    27d4:	51 e4       	ldi	r21, 0x41	; 65
    27d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	bc 01       	movw	r22, r24
    27e0:	cd 01       	movw	r24, r26
    27e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	9f 8f       	std	Y+31, r25	; 0x1f
    27ec:	8e 8f       	std	Y+30, r24	; 0x1e
    27ee:	0f c0       	rjmp	.+30     	; 0x280e <LCD_CheckStatusSendChar+0x168>
    27f0:	88 ec       	ldi	r24, 0xC8	; 200
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	9d 8f       	std	Y+29, r25	; 0x1d
    27f6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27f8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27fa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <LCD_CheckStatusSendChar+0x156>
    2800:	9d 8f       	std	Y+29, r25	; 0x1d
    2802:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2804:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2806:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	9f 8f       	std	Y+31, r25	; 0x1f
    280c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2810:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2812:	00 97       	sbiw	r24, 0x00	; 0
    2814:	69 f7       	brne	.-38     	; 0x27f0 <LCD_CheckStatusSendChar+0x14a>
    2816:	24 c0       	rjmp	.+72     	; 0x2860 <LCD_CheckStatusSendChar+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2818:	68 a1       	ldd	r22, Y+32	; 0x20
    281a:	79 a1       	ldd	r23, Y+33	; 0x21
    281c:	8a a1       	ldd	r24, Y+34	; 0x22
    281e:	9b a1       	ldd	r25, Y+35	; 0x23
    2820:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	9f 8f       	std	Y+31, r25	; 0x1f
    282a:	8e 8f       	std	Y+30, r24	; 0x1e
    282c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    282e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2830:	9b 8f       	std	Y+27, r25	; 0x1b
    2832:	8a 8f       	std	Y+26, r24	; 0x1a
    2834:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2836:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	f1 f7       	brne	.-4      	; 0x2838 <LCD_CheckStatusSendChar+0x192>
    283c:	9b 8f       	std	Y+27, r25	; 0x1b
    283e:	8a 8f       	std	Y+26, r24	; 0x1a
    2840:	0f c0       	rjmp	.+30     	; 0x2860 <LCD_CheckStatusSendChar+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2842:	69 a5       	ldd	r22, Y+41	; 0x29
    2844:	7a a5       	ldd	r23, Y+42	; 0x2a
    2846:	8b a5       	ldd	r24, Y+43	; 0x2b
    2848:	9c a5       	ldd	r25, Y+44	; 0x2c
    284a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	88 a7       	std	Y+40, r24	; 0x28
    2854:	88 a5       	ldd	r24, Y+40	; 0x28
    2856:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2858:	89 8d       	ldd	r24, Y+25	; 0x19
    285a:	8a 95       	dec	r24
    285c:	f1 f7       	brne	.-4      	; 0x285a <LCD_CheckStatusSendChar+0x1b4>
    285e:	89 8f       	std	Y+25, r24	; 0x19
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	62 e0       	ldi	r22, 0x02	; 2
    2864:	40 e0       	ldi	r20, 0x00	; 0
    2866:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO__CheckStatusSetPinValue>
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	a0 e8       	ldi	r26, 0x80	; 128
    2870:	bf e3       	ldi	r27, 0x3F	; 63
    2872:	8d 8b       	std	Y+21, r24	; 0x15
    2874:	9e 8b       	std	Y+22, r25	; 0x16
    2876:	af 8b       	std	Y+23, r26	; 0x17
    2878:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    287a:	6d 89       	ldd	r22, Y+21	; 0x15
    287c:	7e 89       	ldd	r23, Y+22	; 0x16
    287e:	8f 89       	ldd	r24, Y+23	; 0x17
    2880:	98 8d       	ldd	r25, Y+24	; 0x18
    2882:	2b ea       	ldi	r18, 0xAB	; 171
    2884:	3a ea       	ldi	r19, 0xAA	; 170
    2886:	4a e2       	ldi	r20, 0x2A	; 42
    2888:	50 e4       	ldi	r21, 0x40	; 64
    288a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	89 8b       	std	Y+17, r24	; 0x11
    2894:	9a 8b       	std	Y+18, r25	; 0x12
    2896:	ab 8b       	std	Y+19, r26	; 0x13
    2898:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    289a:	69 89       	ldd	r22, Y+17	; 0x11
    289c:	7a 89       	ldd	r23, Y+18	; 0x12
    289e:	8b 89       	ldd	r24, Y+19	; 0x13
    28a0:	9c 89       	ldd	r25, Y+20	; 0x14
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e8       	ldi	r20, 0x80	; 128
    28a8:	5f e3       	ldi	r21, 0x3F	; 63
    28aa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28ae:	88 23       	and	r24, r24
    28b0:	1c f4       	brge	.+6      	; 0x28b8 <LCD_CheckStatusSendChar+0x212>
		__ticks = 1;
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	88 8b       	std	Y+16, r24	; 0x10
    28b6:	91 c0       	rjmp	.+290    	; 0x29da <LCD_CheckStatusSendChar+0x334>
	else if (__tmp > 255)
    28b8:	69 89       	ldd	r22, Y+17	; 0x11
    28ba:	7a 89       	ldd	r23, Y+18	; 0x12
    28bc:	8b 89       	ldd	r24, Y+19	; 0x13
    28be:	9c 89       	ldd	r25, Y+20	; 0x14
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	4f e7       	ldi	r20, 0x7F	; 127
    28c6:	53 e4       	ldi	r21, 0x43	; 67
    28c8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28cc:	18 16       	cp	r1, r24
    28ce:	0c f0       	brlt	.+2      	; 0x28d2 <LCD_CheckStatusSendChar+0x22c>
    28d0:	7b c0       	rjmp	.+246    	; 0x29c8 <LCD_CheckStatusSendChar+0x322>
	{
		_delay_ms(__us / 1000.0);
    28d2:	6d 89       	ldd	r22, Y+21	; 0x15
    28d4:	7e 89       	ldd	r23, Y+22	; 0x16
    28d6:	8f 89       	ldd	r24, Y+23	; 0x17
    28d8:	98 8d       	ldd	r25, Y+24	; 0x18
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	4a e7       	ldi	r20, 0x7A	; 122
    28e0:	54 e4       	ldi	r21, 0x44	; 68
    28e2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	8c 87       	std	Y+12, r24	; 0x0c
    28ec:	9d 87       	std	Y+13, r25	; 0x0d
    28ee:	ae 87       	std	Y+14, r26	; 0x0e
    28f0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    28f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    28f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    28f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	4a ef       	ldi	r20, 0xFA	; 250
    2900:	54 e4       	ldi	r21, 0x44	; 68
    2902:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	88 87       	std	Y+8, r24	; 0x08
    290c:	99 87       	std	Y+9, r25	; 0x09
    290e:	aa 87       	std	Y+10, r26	; 0x0a
    2910:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2912:	68 85       	ldd	r22, Y+8	; 0x08
    2914:	79 85       	ldd	r23, Y+9	; 0x09
    2916:	8a 85       	ldd	r24, Y+10	; 0x0a
    2918:	9b 85       	ldd	r25, Y+11	; 0x0b
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e8       	ldi	r20, 0x80	; 128
    2920:	5f e3       	ldi	r21, 0x3F	; 63
    2922:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2926:	88 23       	and	r24, r24
    2928:	2c f4       	brge	.+10     	; 0x2934 <LCD_CheckStatusSendChar+0x28e>
		__ticks = 1;
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	9f 83       	std	Y+7, r25	; 0x07
    2930:	8e 83       	std	Y+6, r24	; 0x06
    2932:	3f c0       	rjmp	.+126    	; 0x29b2 <LCD_CheckStatusSendChar+0x30c>
	else if (__tmp > 65535)
    2934:	68 85       	ldd	r22, Y+8	; 0x08
    2936:	79 85       	ldd	r23, Y+9	; 0x09
    2938:	8a 85       	ldd	r24, Y+10	; 0x0a
    293a:	9b 85       	ldd	r25, Y+11	; 0x0b
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	3f ef       	ldi	r19, 0xFF	; 255
    2940:	4f e7       	ldi	r20, 0x7F	; 127
    2942:	57 e4       	ldi	r21, 0x47	; 71
    2944:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2948:	18 16       	cp	r1, r24
    294a:	4c f5       	brge	.+82     	; 0x299e <LCD_CheckStatusSendChar+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294c:	6c 85       	ldd	r22, Y+12	; 0x0c
    294e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2950:	8e 85       	ldd	r24, Y+14	; 0x0e
    2952:	9f 85       	ldd	r25, Y+15	; 0x0f
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e2       	ldi	r20, 0x20	; 32
    295a:	51 e4       	ldi	r21, 0x41	; 65
    295c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	bc 01       	movw	r22, r24
    2966:	cd 01       	movw	r24, r26
    2968:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	9f 83       	std	Y+7, r25	; 0x07
    2972:	8e 83       	std	Y+6, r24	; 0x06
    2974:	0f c0       	rjmp	.+30     	; 0x2994 <LCD_CheckStatusSendChar+0x2ee>
    2976:	88 ec       	ldi	r24, 0xC8	; 200
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	9d 83       	std	Y+5, r25	; 0x05
    297c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    297e:	8c 81       	ldd	r24, Y+4	; 0x04
    2980:	9d 81       	ldd	r25, Y+5	; 0x05
    2982:	01 97       	sbiw	r24, 0x01	; 1
    2984:	f1 f7       	brne	.-4      	; 0x2982 <LCD_CheckStatusSendChar+0x2dc>
    2986:	9d 83       	std	Y+5, r25	; 0x05
    2988:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    298a:	8e 81       	ldd	r24, Y+6	; 0x06
    298c:	9f 81       	ldd	r25, Y+7	; 0x07
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	9f 83       	std	Y+7, r25	; 0x07
    2992:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2994:	8e 81       	ldd	r24, Y+6	; 0x06
    2996:	9f 81       	ldd	r25, Y+7	; 0x07
    2998:	00 97       	sbiw	r24, 0x00	; 0
    299a:	69 f7       	brne	.-38     	; 0x2976 <LCD_CheckStatusSendChar+0x2d0>
    299c:	24 c0       	rjmp	.+72     	; 0x29e6 <LCD_CheckStatusSendChar+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299e:	68 85       	ldd	r22, Y+8	; 0x08
    29a0:	79 85       	ldd	r23, Y+9	; 0x09
    29a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    29a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    29a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	9f 83       	std	Y+7, r25	; 0x07
    29b0:	8e 83       	std	Y+6, r24	; 0x06
    29b2:	8e 81       	ldd	r24, Y+6	; 0x06
    29b4:	9f 81       	ldd	r25, Y+7	; 0x07
    29b6:	9b 83       	std	Y+3, r25	; 0x03
    29b8:	8a 83       	std	Y+2, r24	; 0x02
    29ba:	8a 81       	ldd	r24, Y+2	; 0x02
    29bc:	9b 81       	ldd	r25, Y+3	; 0x03
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	f1 f7       	brne	.-4      	; 0x29be <LCD_CheckStatusSendChar+0x318>
    29c2:	9b 83       	std	Y+3, r25	; 0x03
    29c4:	8a 83       	std	Y+2, r24	; 0x02
    29c6:	0f c0       	rjmp	.+30     	; 0x29e6 <LCD_CheckStatusSendChar+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29c8:	69 89       	ldd	r22, Y+17	; 0x11
    29ca:	7a 89       	ldd	r23, Y+18	; 0x12
    29cc:	8b 89       	ldd	r24, Y+19	; 0x13
    29ce:	9c 89       	ldd	r25, Y+20	; 0x14
    29d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	88 8b       	std	Y+16, r24	; 0x10
    29da:	88 89       	ldd	r24, Y+16	; 0x10
    29dc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29de:	89 81       	ldd	r24, Y+1	; 0x01
    29e0:	8a 95       	dec	r24
    29e2:	f1 f7       	brne	.-4      	; 0x29e0 <LCD_CheckStatusSendChar+0x33a>
    29e4:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    29e6:	89 a9       	ldd	r24, Y+49	; 0x31
}
    29e8:	e2 96       	adiw	r28, 0x32	; 50
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	f8 94       	cli
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	cd bf       	out	0x3d, r28	; 61
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	08 95       	ret

000029fa <LCD_CheckStatusWriteString>:

CheckStatus LCD_CheckStatusWriteString(_uint8 *Copy_p__Uint8String)
{
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	00 d0       	rcall	.+0      	; 0x2a00 <LCD_CheckStatusWriteString+0x6>
    2a00:	00 d0       	rcall	.+0      	; 0x2a02 <LCD_CheckStatusWriteString+0x8>
    2a02:	0f 92       	push	r0
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2a0c:	1a 82       	std	Y+2, r1	; 0x02
        _uint8 Local__Uint8Index = DIO__UINT8_LOW;
    2a0e:	19 82       	std	Y+1, r1	; 0x01

        if (Copy_p__Uint8String != NULL)
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	9c 81       	ldd	r25, Y+4	; 0x04
    2a14:	00 97       	sbiw	r24, 0x00	; 0
    2a16:	f1 f0       	breq	.+60     	; 0x2a54 <LCD_CheckStatusWriteString+0x5a>
        {
                for (Local__Uint8Index = DIO__UINT8_LOW; *(Copy_p__Uint8String + Local__Uint8Index) != '\0'; ++Local__Uint8Index)
    2a18:	19 82       	std	Y+1, r1	; 0x01
    2a1a:	0e c0       	rjmp	.+28     	; 0x2a38 <LCD_CheckStatusWriteString+0x3e>
                {
                        LCD_CheckStatusSendChar(*(Copy_p__Uint8String + Local__Uint8Index));
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	28 2f       	mov	r18, r24
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	8b 81       	ldd	r24, Y+3	; 0x03
    2a24:	9c 81       	ldd	r25, Y+4	; 0x04
    2a26:	fc 01       	movw	r30, r24
    2a28:	e2 0f       	add	r30, r18
    2a2a:	f3 1f       	adc	r31, r19
    2a2c:	80 81       	ld	r24, Z
    2a2e:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
        _uint8 Local__Uint8Index = DIO__UINT8_LOW;

        if (Copy_p__Uint8String != NULL)
        {
                for (Local__Uint8Index = DIO__UINT8_LOW; *(Copy_p__Uint8String + Local__Uint8Index) != '\0'; ++Local__Uint8Index)
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	8f 5f       	subi	r24, 0xFF	; 255
    2a36:	89 83       	std	Y+1, r24	; 0x01
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	28 2f       	mov	r18, r24
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a40:	9c 81       	ldd	r25, Y+4	; 0x04
    2a42:	fc 01       	movw	r30, r24
    2a44:	e2 0f       	add	r30, r18
    2a46:	f3 1f       	adc	r31, r19
    2a48:	80 81       	ld	r24, Z
    2a4a:	88 23       	and	r24, r24
    2a4c:	39 f7       	brne	.-50     	; 0x2a1c <LCD_CheckStatusWriteString+0x22>
                {
                        LCD_CheckStatusSendChar(*(Copy_p__Uint8String + Local__Uint8Index));
                }

                return Local_CheckStausReturnValue;
    2a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a50:	8d 83       	std	Y+5, r24	; 0x05
    2a52:	04 c0       	rjmp	.+8      	; 0x2a5c <LCD_CheckStatusWriteString+0x62>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	8a 83       	std	Y+2, r24	; 0x02
                return Local_CheckStausReturnValue;
    2a58:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5a:	8d 83       	std	Y+5, r24	; 0x05
    2a5c:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	cf 91       	pop	r28
    2a6a:	df 91       	pop	r29
    2a6c:	08 95       	ret

00002a6e <LCD_CheckStatusGoToXY>:
CheckStatus LCD_CheckStatusGoToXY(_uint8 Copy__Uint8LineNumber, _uint8 Copy__Uint8LocationNumber)
{
    2a6e:	df 93       	push	r29
    2a70:	cf 93       	push	r28
    2a72:	00 d0       	rcall	.+0      	; 0x2a74 <LCD_CheckStatusGoToXY+0x6>
    2a74:	00 d0       	rcall	.+0      	; 0x2a76 <LCD_CheckStatusGoToXY+0x8>
    2a76:	00 d0       	rcall	.+0      	; 0x2a78 <LCD_CheckStatusGoToXY+0xa>
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
    2a7c:	8a 83       	std	Y+2, r24	; 0x02
    2a7e:	6b 83       	std	Y+3, r22	; 0x03

        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2a80:	19 82       	std	Y+1, r1	; 0x01

        if ((Copy__Uint8LineNumber <= 1) && (Copy__Uint8LocationNumber <= 39))
    2a82:	8a 81       	ldd	r24, Y+2	; 0x02
    2a84:	82 30       	cpi	r24, 0x02	; 2
    2a86:	f0 f4       	brcc	.+60     	; 0x2ac4 <LCD_CheckStatusGoToXY+0x56>
    2a88:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8a:	88 32       	cpi	r24, 0x28	; 40
    2a8c:	d8 f4       	brcc	.+54     	; 0x2ac4 <LCD_CheckStatusGoToXY+0x56>
        {

                switch (Copy__Uint8LineNumber)
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	28 2f       	mov	r18, r24
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	3e 83       	std	Y+6, r19	; 0x06
    2a96:	2d 83       	std	Y+5, r18	; 0x05
    2a98:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9c:	00 97       	sbiw	r24, 0x00	; 0
    2a9e:	31 f0       	breq	.+12     	; 0x2aac <LCD_CheckStatusGoToXY+0x3e>
    2aa0:	2d 81       	ldd	r18, Y+5	; 0x05
    2aa2:	3e 81       	ldd	r19, Y+6	; 0x06
    2aa4:	21 30       	cpi	r18, 0x01	; 1
    2aa6:	31 05       	cpc	r19, r1
    2aa8:	31 f0       	breq	.+12     	; 0x2ab6 <LCD_CheckStatusGoToXY+0x48>
    2aaa:	09 c0       	rjmp	.+18     	; 0x2abe <LCD_CheckStatusGoToXY+0x50>
                {
                case LCD__UINT8_LINE1:
                        LCD_CheckStatusSendCmnd(0x80 + Copy__Uint8LocationNumber); //BASE +OFFSET
    2aac:	8b 81       	ldd	r24, Y+3	; 0x03
    2aae:	80 58       	subi	r24, 0x80	; 128
    2ab0:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
    2ab4:	04 c0       	rjmp	.+8      	; 0x2abe <LCD_CheckStatusGoToXY+0x50>
                        break;
                case LCD__UINT8_LINE2:
                        LCD_CheckStatusSendCmnd(0xc0 + Copy__Uint8LocationNumber);
    2ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab8:	80 54       	subi	r24, 0x40	; 64
    2aba:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
                        break;
                default:
                        break;
                }
                return Local_CheckStausReturnValue;
    2abe:	39 81       	ldd	r19, Y+1	; 0x01
    2ac0:	3c 83       	std	Y+4, r19	; 0x04
    2ac2:	04 c0       	rjmp	.+8      	; 0x2acc <LCD_CheckStatusGoToXY+0x5e>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStausReturnValue;
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	8c 83       	std	Y+4, r24	; 0x04
    2acc:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    2ace:	26 96       	adiw	r28, 0x06	; 6
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	f8 94       	cli
    2ad4:	de bf       	out	0x3e, r29	; 62
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	cd bf       	out	0x3d, r28	; 61
    2ada:	cf 91       	pop	r28
    2adc:	df 91       	pop	r29
    2ade:	08 95       	ret

00002ae0 <LCD_VoidClearDisplay>:

Void LCD_VoidClearDisplay(Void)
{
    2ae0:	df 93       	push	r29
    2ae2:	cf 93       	push	r28
    2ae4:	cd b7       	in	r28, 0x3d	; 61
    2ae6:	de b7       	in	r29, 0x3e	; 62
    2ae8:	2e 97       	sbiw	r28, 0x0e	; 14
    2aea:	0f b6       	in	r0, 0x3f	; 63
    2aec:	f8 94       	cli
    2aee:	de bf       	out	0x3e, r29	; 62
    2af0:	0f be       	out	0x3f, r0	; 63
    2af2:	cd bf       	out	0x3d, r28	; 61
        LCD_CheckStatusSendCmnd(0x01);
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	a0 e0       	ldi	r26, 0x00	; 0
    2b00:	b0 e4       	ldi	r27, 0x40	; 64
    2b02:	8b 87       	std	Y+11, r24	; 0x0b
    2b04:	9c 87       	std	Y+12, r25	; 0x0c
    2b06:	ad 87       	std	Y+13, r26	; 0x0d
    2b08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	4a ef       	ldi	r20, 0xFA	; 250
    2b18:	54 e4       	ldi	r21, 0x44	; 68
    2b1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	8f 83       	std	Y+7, r24	; 0x07
    2b24:	98 87       	std	Y+8, r25	; 0x08
    2b26:	a9 87       	std	Y+9, r26	; 0x09
    2b28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2c:	78 85       	ldd	r23, Y+8	; 0x08
    2b2e:	89 85       	ldd	r24, Y+9	; 0x09
    2b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	40 e8       	ldi	r20, 0x80	; 128
    2b38:	5f e3       	ldi	r21, 0x3F	; 63
    2b3a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b3e:	88 23       	and	r24, r24
    2b40:	2c f4       	brge	.+10     	; 0x2b4c <LCD_VoidClearDisplay+0x6c>
		__ticks = 1;
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	9e 83       	std	Y+6, r25	; 0x06
    2b48:	8d 83       	std	Y+5, r24	; 0x05
    2b4a:	3f c0       	rjmp	.+126    	; 0x2bca <LCD_VoidClearDisplay+0xea>
	else if (__tmp > 65535)
    2b4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4e:	78 85       	ldd	r23, Y+8	; 0x08
    2b50:	89 85       	ldd	r24, Y+9	; 0x09
    2b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	3f ef       	ldi	r19, 0xFF	; 255
    2b58:	4f e7       	ldi	r20, 0x7F	; 127
    2b5a:	57 e4       	ldi	r21, 0x47	; 71
    2b5c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b60:	18 16       	cp	r1, r24
    2b62:	4c f5       	brge	.+82     	; 0x2bb6 <LCD_VoidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	40 e2       	ldi	r20, 0x20	; 32
    2b72:	51 e4       	ldi	r21, 0x41	; 65
    2b74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	bc 01       	movw	r22, r24
    2b7e:	cd 01       	movw	r24, r26
    2b80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	9e 83       	std	Y+6, r25	; 0x06
    2b8a:	8d 83       	std	Y+5, r24	; 0x05
    2b8c:	0f c0       	rjmp	.+30     	; 0x2bac <LCD_VoidClearDisplay+0xcc>
    2b8e:	88 ec       	ldi	r24, 0xC8	; 200
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	9c 83       	std	Y+4, r25	; 0x04
    2b94:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b96:	8b 81       	ldd	r24, Y+3	; 0x03
    2b98:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	f1 f7       	brne	.-4      	; 0x2b9a <LCD_VoidClearDisplay+0xba>
    2b9e:	9c 83       	std	Y+4, r25	; 0x04
    2ba0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	9e 83       	std	Y+6, r25	; 0x06
    2baa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bac:	8d 81       	ldd	r24, Y+5	; 0x05
    2bae:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb0:	00 97       	sbiw	r24, 0x00	; 0
    2bb2:	69 f7       	brne	.-38     	; 0x2b8e <LCD_VoidClearDisplay+0xae>
    2bb4:	14 c0       	rjmp	.+40     	; 0x2bde <LCD_VoidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb8:	78 85       	ldd	r23, Y+8	; 0x08
    2bba:	89 85       	ldd	r24, Y+9	; 0x09
    2bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	9e 83       	std	Y+6, r25	; 0x06
    2bc8:	8d 83       	std	Y+5, r24	; 0x05
    2bca:	8d 81       	ldd	r24, Y+5	; 0x05
    2bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bce:	9a 83       	std	Y+2, r25	; 0x02
    2bd0:	89 83       	std	Y+1, r24	; 0x01
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	f1 f7       	brne	.-4      	; 0x2bd6 <LCD_VoidClearDisplay+0xf6>
    2bda:	9a 83       	std	Y+2, r25	; 0x02
    2bdc:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
}
    2bde:	2e 96       	adiw	r28, 0x0e	; 14
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	cd bf       	out	0x3d, r28	; 61
    2bea:	cf 91       	pop	r28
    2bec:	df 91       	pop	r29
    2bee:	08 95       	ret

00002bf0 <LCD_CheckStatusSendNumber>:
CheckStatus LCD_CheckStatusSendNumber(_uint32 Copy__Uint32Number)
{
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	2d 97       	sbiw	r28, 0x0d	; 13
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	68 87       	std	Y+8, r22	; 0x08
    2c06:	79 87       	std	Y+9, r23	; 0x09
    2c08:	8a 87       	std	Y+10, r24	; 0x0a
    2c0a:	9b 87       	std	Y+11, r25	; 0x0b
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2c0c:	1f 82       	std	Y+7, r1	; 0x07

        _uint8 Local__Uint8Remendier = 0x00;
    2c0e:	1e 82       	std	Y+6, r1	; 0x06
        _uint8 Local__Uint8Counter = 0x00;
    2c10:	1d 82       	std	Y+5, r1	; 0x05
        _uint32 Local__Uint32Temporary = 0;
    2c12:	19 82       	std	Y+1, r1	; 0x01
    2c14:	1a 82       	std	Y+2, r1	; 0x02
    2c16:	1b 82       	std	Y+3, r1	; 0x03
    2c18:	1c 82       	std	Y+4, r1	; 0x04
    2c1a:	40 c0       	rjmp	.+128    	; 0x2c9c <LCD_CheckStatusSendNumber+0xac>
        if (Copy__Uint32Number <= 4294967296)
        {
                while (Copy__Uint32Number != 0)
                {
                        Local__Uint32Temporary = Local__Uint32Temporary * 0x0A;
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c20:	ab 81       	ldd	r26, Y+3	; 0x03
    2c22:	bc 81       	ldd	r27, Y+4	; 0x04
    2c24:	2a e0       	ldi	r18, 0x0A	; 10
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	40 e0       	ldi	r20, 0x00	; 0
    2c2a:	50 e0       	ldi	r21, 0x00	; 0
    2c2c:	bc 01       	movw	r22, r24
    2c2e:	cd 01       	movw	r24, r26
    2c30:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__mulsi3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	89 83       	std	Y+1, r24	; 0x01
    2c3a:	9a 83       	std	Y+2, r25	; 0x02
    2c3c:	ab 83       	std	Y+3, r26	; 0x03
    2c3e:	bc 83       	std	Y+4, r27	; 0x04
                        Local__Uint32Temporary = Local__Uint32Temporary + Copy__Uint32Number % 0x0A;
    2c40:	88 85       	ldd	r24, Y+8	; 0x08
    2c42:	99 85       	ldd	r25, Y+9	; 0x09
    2c44:	aa 85       	ldd	r26, Y+10	; 0x0a
    2c46:	bb 85       	ldd	r27, Y+11	; 0x0b
    2c48:	2a e0       	ldi	r18, 0x0A	; 10
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	40 e0       	ldi	r20, 0x00	; 0
    2c4e:	50 e0       	ldi	r21, 0x00	; 0
    2c50:	bc 01       	movw	r22, r24
    2c52:	cd 01       	movw	r24, r26
    2c54:	0e 94 0b 1a 	call	0x3416	; 0x3416 <__udivmodsi4>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	9c 01       	movw	r18, r24
    2c5e:	ad 01       	movw	r20, r26
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	9a 81       	ldd	r25, Y+2	; 0x02
    2c64:	ab 81       	ldd	r26, Y+3	; 0x03
    2c66:	bc 81       	ldd	r27, Y+4	; 0x04
    2c68:	82 0f       	add	r24, r18
    2c6a:	93 1f       	adc	r25, r19
    2c6c:	a4 1f       	adc	r26, r20
    2c6e:	b5 1f       	adc	r27, r21
    2c70:	89 83       	std	Y+1, r24	; 0x01
    2c72:	9a 83       	std	Y+2, r25	; 0x02
    2c74:	ab 83       	std	Y+3, r26	; 0x03
    2c76:	bc 83       	std	Y+4, r27	; 0x04
                        Copy__Uint32Number = Copy__Uint32Number / 0x0A;
    2c78:	88 85       	ldd	r24, Y+8	; 0x08
    2c7a:	99 85       	ldd	r25, Y+9	; 0x09
    2c7c:	aa 85       	ldd	r26, Y+10	; 0x0a
    2c7e:	bb 85       	ldd	r27, Y+11	; 0x0b
    2c80:	2a e0       	ldi	r18, 0x0A	; 10
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	40 e0       	ldi	r20, 0x00	; 0
    2c86:	50 e0       	ldi	r21, 0x00	; 0
    2c88:	bc 01       	movw	r22, r24
    2c8a:	cd 01       	movw	r24, r26
    2c8c:	0e 94 0b 1a 	call	0x3416	; 0x3416 <__udivmodsi4>
    2c90:	da 01       	movw	r26, r20
    2c92:	c9 01       	movw	r24, r18
    2c94:	88 87       	std	Y+8, r24	; 0x08
    2c96:	99 87       	std	Y+9, r25	; 0x09
    2c98:	aa 87       	std	Y+10, r26	; 0x0a
    2c9a:	bb 87       	std	Y+11, r27	; 0x0b
        _uint8 Local__Uint8Remendier = 0x00;
        _uint8 Local__Uint8Counter = 0x00;
        _uint32 Local__Uint32Temporary = 0;
        if (Copy__Uint32Number <= 4294967296)
        {
                while (Copy__Uint32Number != 0)
    2c9c:	88 85       	ldd	r24, Y+8	; 0x08
    2c9e:	99 85       	ldd	r25, Y+9	; 0x09
    2ca0:	aa 85       	ldd	r26, Y+10	; 0x0a
    2ca2:	bb 85       	ldd	r27, Y+11	; 0x0b
    2ca4:	00 97       	sbiw	r24, 0x00	; 0
    2ca6:	a1 05       	cpc	r26, r1
    2ca8:	b1 05       	cpc	r27, r1
    2caa:	09 f0       	breq	.+2      	; 0x2cae <LCD_CheckStatusSendNumber+0xbe>
    2cac:	b7 cf       	rjmp	.-146    	; 0x2c1c <LCD_CheckStatusSendNumber+0x2c>
                        Local__Uint32Temporary = Local__Uint32Temporary * 0x0A;
                        Local__Uint32Temporary = Local__Uint32Temporary + Copy__Uint32Number % 0x0A;
                        Copy__Uint32Number = Copy__Uint32Number / 0x0A;
                }

                for (Local__Uint8Counter = 0; Local__Uint32Temporary != 0; ++Local__Uint8Counter)
    2cae:	1d 82       	std	Y+5, r1	; 0x05
    2cb0:	95 c0       	rjmp	.+298    	; 0x2ddc <LCD_CheckStatusSendNumber+0x1ec>
                {
                        Local__Uint8Remendier = Local__Uint32Temporary % 0x0A;
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb6:	ab 81       	ldd	r26, Y+3	; 0x03
    2cb8:	bc 81       	ldd	r27, Y+4	; 0x04
    2cba:	2a e0       	ldi	r18, 0x0A	; 10
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	40 e0       	ldi	r20, 0x00	; 0
    2cc0:	50 e0       	ldi	r21, 0x00	; 0
    2cc2:	bc 01       	movw	r22, r24
    2cc4:	cd 01       	movw	r24, r26
    2cc6:	0e 94 0b 1a 	call	0x3416	; 0x3416 <__udivmodsi4>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	8e 83       	std	Y+6, r24	; 0x06
                        Local__Uint32Temporary = Local__Uint32Temporary / 0x0A;
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd4:	ab 81       	ldd	r26, Y+3	; 0x03
    2cd6:	bc 81       	ldd	r27, Y+4	; 0x04
    2cd8:	2a e0       	ldi	r18, 0x0A	; 10
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	40 e0       	ldi	r20, 0x00	; 0
    2cde:	50 e0       	ldi	r21, 0x00	; 0
    2ce0:	bc 01       	movw	r22, r24
    2ce2:	cd 01       	movw	r24, r26
    2ce4:	0e 94 0b 1a 	call	0x3416	; 0x3416 <__udivmodsi4>
    2ce8:	da 01       	movw	r26, r20
    2cea:	c9 01       	movw	r24, r18
    2cec:	89 83       	std	Y+1, r24	; 0x01
    2cee:	9a 83       	std	Y+2, r25	; 0x02
    2cf0:	ab 83       	std	Y+3, r26	; 0x03
    2cf2:	bc 83       	std	Y+4, r27	; 0x04
                        switch (Local__Uint8Remendier)
    2cf4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cf6:	28 2f       	mov	r18, r24
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	3d 87       	std	Y+13, r19	; 0x0d
    2cfc:	2c 87       	std	Y+12, r18	; 0x0c
    2cfe:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d00:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d02:	84 30       	cpi	r24, 0x04	; 4
    2d04:	91 05       	cpc	r25, r1
    2d06:	09 f4       	brne	.+2      	; 0x2d0a <LCD_CheckStatusSendNumber+0x11a>
    2d08:	4f c0       	rjmp	.+158    	; 0x2da8 <LCD_CheckStatusSendNumber+0x1b8>
    2d0a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d0c:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d0e:	25 30       	cpi	r18, 0x05	; 5
    2d10:	31 05       	cpc	r19, r1
    2d12:	d4 f4       	brge	.+52     	; 0x2d48 <LCD_CheckStatusSendNumber+0x158>
    2d14:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d16:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d18:	81 30       	cpi	r24, 0x01	; 1
    2d1a:	91 05       	cpc	r25, r1
    2d1c:	c9 f1       	breq	.+114    	; 0x2d90 <LCD_CheckStatusSendNumber+0x1a0>
    2d1e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d20:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d22:	22 30       	cpi	r18, 0x02	; 2
    2d24:	31 05       	cpc	r19, r1
    2d26:	2c f4       	brge	.+10     	; 0x2d32 <LCD_CheckStatusSendNumber+0x142>
    2d28:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d2a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	61 f1       	breq	.+88     	; 0x2d88 <LCD_CheckStatusSendNumber+0x198>
    2d30:	52 c0       	rjmp	.+164    	; 0x2dd6 <LCD_CheckStatusSendNumber+0x1e6>
    2d32:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d34:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d36:	22 30       	cpi	r18, 0x02	; 2
    2d38:	31 05       	cpc	r19, r1
    2d3a:	71 f1       	breq	.+92     	; 0x2d98 <LCD_CheckStatusSendNumber+0x1a8>
    2d3c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d3e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d40:	83 30       	cpi	r24, 0x03	; 3
    2d42:	91 05       	cpc	r25, r1
    2d44:	69 f1       	breq	.+90     	; 0x2da0 <LCD_CheckStatusSendNumber+0x1b0>
    2d46:	47 c0       	rjmp	.+142    	; 0x2dd6 <LCD_CheckStatusSendNumber+0x1e6>
    2d48:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d4a:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d4c:	27 30       	cpi	r18, 0x07	; 7
    2d4e:	31 05       	cpc	r19, r1
    2d50:	b9 f1       	breq	.+110    	; 0x2dc0 <LCD_CheckStatusSendNumber+0x1d0>
    2d52:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d54:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d56:	88 30       	cpi	r24, 0x08	; 8
    2d58:	91 05       	cpc	r25, r1
    2d5a:	5c f4       	brge	.+22     	; 0x2d72 <LCD_CheckStatusSendNumber+0x182>
    2d5c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d5e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d60:	25 30       	cpi	r18, 0x05	; 5
    2d62:	31 05       	cpc	r19, r1
    2d64:	29 f1       	breq	.+74     	; 0x2db0 <LCD_CheckStatusSendNumber+0x1c0>
    2d66:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d68:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d6a:	86 30       	cpi	r24, 0x06	; 6
    2d6c:	91 05       	cpc	r25, r1
    2d6e:	21 f1       	breq	.+72     	; 0x2db8 <LCD_CheckStatusSendNumber+0x1c8>
    2d70:	32 c0       	rjmp	.+100    	; 0x2dd6 <LCD_CheckStatusSendNumber+0x1e6>
    2d72:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d74:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d76:	28 30       	cpi	r18, 0x08	; 8
    2d78:	31 05       	cpc	r19, r1
    2d7a:	31 f1       	breq	.+76     	; 0x2dc8 <LCD_CheckStatusSendNumber+0x1d8>
    2d7c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d7e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d80:	89 30       	cpi	r24, 0x09	; 9
    2d82:	91 05       	cpc	r25, r1
    2d84:	29 f1       	breq	.+74     	; 0x2dd0 <LCD_CheckStatusSendNumber+0x1e0>
    2d86:	27 c0       	rjmp	.+78     	; 0x2dd6 <LCD_CheckStatusSendNumber+0x1e6>
                        {
                        case 0:
                                LCD_CheckStatusSendChar('0');
    2d88:	80 e3       	ldi	r24, 0x30	; 48
    2d8a:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
    2d8e:	23 c0       	rjmp	.+70     	; 0x2dd6 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 1:
                                LCD_CheckStatusSendChar('1');
    2d90:	81 e3       	ldi	r24, 0x31	; 49
    2d92:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
    2d96:	1f c0       	rjmp	.+62     	; 0x2dd6 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 2:
                                LCD_CheckStatusSendChar('2');
    2d98:	82 e3       	ldi	r24, 0x32	; 50
    2d9a:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
    2d9e:	1b c0       	rjmp	.+54     	; 0x2dd6 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 3:
                                LCD_CheckStatusSendChar('3');
    2da0:	83 e3       	ldi	r24, 0x33	; 51
    2da2:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
    2da6:	17 c0       	rjmp	.+46     	; 0x2dd6 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 4:
                                LCD_CheckStatusSendChar('4');
    2da8:	84 e3       	ldi	r24, 0x34	; 52
    2daa:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
    2dae:	13 c0       	rjmp	.+38     	; 0x2dd6 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 5:
                                LCD_CheckStatusSendChar('5');
    2db0:	85 e3       	ldi	r24, 0x35	; 53
    2db2:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
    2db6:	0f c0       	rjmp	.+30     	; 0x2dd6 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 6:
                                LCD_CheckStatusSendChar('6');
    2db8:	86 e3       	ldi	r24, 0x36	; 54
    2dba:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
    2dbe:	0b c0       	rjmp	.+22     	; 0x2dd6 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 7:
                                LCD_CheckStatusSendChar('7');
    2dc0:	87 e3       	ldi	r24, 0x37	; 55
    2dc2:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
    2dc6:	07 c0       	rjmp	.+14     	; 0x2dd6 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 8:
                                LCD_CheckStatusSendChar('8');
    2dc8:	88 e3       	ldi	r24, 0x38	; 56
    2dca:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
    2dce:	03 c0       	rjmp	.+6      	; 0x2dd6 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 9:
                                LCD_CheckStatusSendChar('9');
    2dd0:	89 e3       	ldi	r24, 0x39	; 57
    2dd2:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
                        Local__Uint32Temporary = Local__Uint32Temporary * 0x0A;
                        Local__Uint32Temporary = Local__Uint32Temporary + Copy__Uint32Number % 0x0A;
                        Copy__Uint32Number = Copy__Uint32Number / 0x0A;
                }

                for (Local__Uint8Counter = 0; Local__Uint32Temporary != 0; ++Local__Uint8Counter)
    2dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd8:	8f 5f       	subi	r24, 0xFF	; 255
    2dda:	8d 83       	std	Y+5, r24	; 0x05
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	9a 81       	ldd	r25, Y+2	; 0x02
    2de0:	ab 81       	ldd	r26, Y+3	; 0x03
    2de2:	bc 81       	ldd	r27, Y+4	; 0x04
    2de4:	00 97       	sbiw	r24, 0x00	; 0
    2de6:	a1 05       	cpc	r26, r1
    2de8:	b1 05       	cpc	r27, r1
    2dea:	09 f0       	breq	.+2      	; 0x2dee <LCD_CheckStatusSendNumber+0x1fe>
    2dec:	62 cf       	rjmp	.-316    	; 0x2cb2 <LCD_CheckStatusSendNumber+0xc2>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    2dee:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2df0:	2d 96       	adiw	r28, 0x0d	; 13
    2df2:	0f b6       	in	r0, 0x3f	; 63
    2df4:	f8 94       	cli
    2df6:	de bf       	out	0x3e, r29	; 62
    2df8:	0f be       	out	0x3f, r0	; 63
    2dfa:	cd bf       	out	0x3d, r28	; 61
    2dfc:	cf 91       	pop	r28
    2dfe:	df 91       	pop	r29
    2e00:	08 95       	ret

00002e02 <LCD_CheckStatusSpecialChar>:

CheckStatus LCD_CheckStatusSpecialChar(_uint8 Copy__Uint8CGRamLocation, _uint8 Copy__Uint8LCDLine, _uint8 Copy__Uint8DDRamLocation)
{
    2e02:	df 93       	push	r29
    2e04:	cf 93       	push	r28
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
    2e0a:	27 97       	sbiw	r28, 0x07	; 7
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	f8 94       	cli
    2e10:	de bf       	out	0x3e, r29	; 62
    2e12:	0f be       	out	0x3f, r0	; 63
    2e14:	cd bf       	out	0x3d, r28	; 61
    2e16:	8b 83       	std	Y+3, r24	; 0x03
    2e18:	6c 83       	std	Y+4, r22	; 0x04
    2e1a:	4d 83       	std	Y+5, r20	; 0x05
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2e1c:	1a 82       	std	Y+2, r1	; 0x02

        _uint8 Local__Uint8CounterJ = 0x00;
    2e1e:	19 82       	std	Y+1, r1	; 0x01
        if ((Copy__Uint8CGRamLocation <= LCD__UINT8_CG_RAMLOCATION8) && (Copy__Uint8DDRamLocation <= LCD__UINT8_LOCATION_NUMBER39))
    2e20:	8b 81       	ldd	r24, Y+3	; 0x03
    2e22:	89 30       	cpi	r24, 0x09	; 9
    2e24:	08 f0       	brcs	.+2      	; 0x2e28 <LCD_CheckStatusSpecialChar+0x26>
    2e26:	0b c1       	rjmp	.+534    	; 0x303e <LCD_CheckStatusSpecialChar+0x23c>
    2e28:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2a:	88 32       	cpi	r24, 0x28	; 40
    2e2c:	08 f0       	brcs	.+2      	; 0x2e30 <LCD_CheckStatusSpecialChar+0x2e>
    2e2e:	07 c1       	rjmp	.+526    	; 0x303e <LCD_CheckStatusSpecialChar+0x23c>
        {

                switch (Copy__Uint8CGRamLocation)
    2e30:	8b 81       	ldd	r24, Y+3	; 0x03
    2e32:	28 2f       	mov	r18, r24
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	3f 83       	std	Y+7, r19	; 0x07
    2e38:	2e 83       	std	Y+6, r18	; 0x06
    2e3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e3c:	9f 81       	ldd	r25, Y+7	; 0x07
    2e3e:	84 30       	cpi	r24, 0x04	; 4
    2e40:	91 05       	cpc	r25, r1
    2e42:	09 f4       	brne	.+2      	; 0x2e46 <LCD_CheckStatusSpecialChar+0x44>
    2e44:	7b c0       	rjmp	.+246    	; 0x2f3c <LCD_CheckStatusSpecialChar+0x13a>
    2e46:	2e 81       	ldd	r18, Y+6	; 0x06
    2e48:	3f 81       	ldd	r19, Y+7	; 0x07
    2e4a:	25 30       	cpi	r18, 0x05	; 5
    2e4c:	31 05       	cpc	r19, r1
    2e4e:	94 f4       	brge	.+36     	; 0x2e74 <LCD_CheckStatusSpecialChar+0x72>
    2e50:	8e 81       	ldd	r24, Y+6	; 0x06
    2e52:	9f 81       	ldd	r25, Y+7	; 0x07
    2e54:	82 30       	cpi	r24, 0x02	; 2
    2e56:	91 05       	cpc	r25, r1
    2e58:	09 f4       	brne	.+2      	; 0x2e5c <LCD_CheckStatusSpecialChar+0x5a>
    2e5a:	3e c0       	rjmp	.+124    	; 0x2ed8 <LCD_CheckStatusSpecialChar+0xd6>
    2e5c:	2e 81       	ldd	r18, Y+6	; 0x06
    2e5e:	3f 81       	ldd	r19, Y+7	; 0x07
    2e60:	23 30       	cpi	r18, 0x03	; 3
    2e62:	31 05       	cpc	r19, r1
    2e64:	0c f0       	brlt	.+2      	; 0x2e68 <LCD_CheckStatusSpecialChar+0x66>
    2e66:	51 c0       	rjmp	.+162    	; 0x2f0a <LCD_CheckStatusSpecialChar+0x108>
    2e68:	8e 81       	ldd	r24, Y+6	; 0x06
    2e6a:	9f 81       	ldd	r25, Y+7	; 0x07
    2e6c:	81 30       	cpi	r24, 0x01	; 1
    2e6e:	91 05       	cpc	r25, r1
    2e70:	d1 f0       	breq	.+52     	; 0x2ea6 <LCD_CheckStatusSpecialChar+0xa4>
    2e72:	e0 c0       	rjmp	.+448    	; 0x3034 <LCD_CheckStatusSpecialChar+0x232>
    2e74:	2e 81       	ldd	r18, Y+6	; 0x06
    2e76:	3f 81       	ldd	r19, Y+7	; 0x07
    2e78:	26 30       	cpi	r18, 0x06	; 6
    2e7a:	31 05       	cpc	r19, r1
    2e7c:	09 f4       	brne	.+2      	; 0x2e80 <LCD_CheckStatusSpecialChar+0x7e>
    2e7e:	90 c0       	rjmp	.+288    	; 0x2fa0 <LCD_CheckStatusSpecialChar+0x19e>
    2e80:	8e 81       	ldd	r24, Y+6	; 0x06
    2e82:	9f 81       	ldd	r25, Y+7	; 0x07
    2e84:	86 30       	cpi	r24, 0x06	; 6
    2e86:	91 05       	cpc	r25, r1
    2e88:	0c f4       	brge	.+2      	; 0x2e8c <LCD_CheckStatusSpecialChar+0x8a>
    2e8a:	71 c0       	rjmp	.+226    	; 0x2f6e <LCD_CheckStatusSpecialChar+0x16c>
    2e8c:	2e 81       	ldd	r18, Y+6	; 0x06
    2e8e:	3f 81       	ldd	r19, Y+7	; 0x07
    2e90:	27 30       	cpi	r18, 0x07	; 7
    2e92:	31 05       	cpc	r19, r1
    2e94:	09 f4       	brne	.+2      	; 0x2e98 <LCD_CheckStatusSpecialChar+0x96>
    2e96:	9d c0       	rjmp	.+314    	; 0x2fd2 <LCD_CheckStatusSpecialChar+0x1d0>
    2e98:	8e 81       	ldd	r24, Y+6	; 0x06
    2e9a:	9f 81       	ldd	r25, Y+7	; 0x07
    2e9c:	88 30       	cpi	r24, 0x08	; 8
    2e9e:	91 05       	cpc	r25, r1
    2ea0:	09 f4       	brne	.+2      	; 0x2ea4 <LCD_CheckStatusSpecialChar+0xa2>
    2ea2:	b0 c0       	rjmp	.+352    	; 0x3004 <LCD_CheckStatusSpecialChar+0x202>
    2ea4:	c7 c0       	rjmp	.+398    	; 0x3034 <LCD_CheckStatusSpecialChar+0x232>
                {

                case 1:
                        LCD_CheckStatusSendCmnd(LCD__UINT8_CGRAM_BYTE0);
    2ea6:	80 e4       	ldi	r24, 0x40	; 64
    2ea8:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
                    	for(Local__Uint8CounterJ=0;Local__Uint8CounterJ<8;++Local__Uint8CounterJ)
    2eac:	19 82       	std	Y+1, r1	; 0x01
    2eae:	10 c0       	rjmp	.+32     	; 0x2ed0 <LCD_CheckStatusSpecialChar+0xce>
                    	{
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[0][Local__Uint8CounterJ]);
    2eb0:	20 91 c0 01 	lds	r18, 0x01C0
    2eb4:	30 91 c1 01 	lds	r19, 0x01C1
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	88 2f       	mov	r24, r24
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	f9 01       	movw	r30, r18
    2ec0:	e8 0f       	add	r30, r24
    2ec2:	f9 1f       	adc	r31, r25
    2ec4:	80 81       	ld	r24, Z
    2ec6:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
                switch (Copy__Uint8CGRamLocation)
                {

                case 1:
                        LCD_CheckStatusSendCmnd(LCD__UINT8_CGRAM_BYTE0);
                    	for(Local__Uint8CounterJ=0;Local__Uint8CounterJ<8;++Local__Uint8CounterJ)
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	8f 5f       	subi	r24, 0xFF	; 255
    2ece:	89 83       	std	Y+1, r24	; 0x01
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	88 30       	cpi	r24, 0x08	; 8
    2ed4:	68 f3       	brcs	.-38     	; 0x2eb0 <LCD_CheckStatusSpecialChar+0xae>
    2ed6:	ae c0       	rjmp	.+348    	; 0x3034 <LCD_CheckStatusSpecialChar+0x232>
                    	{
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[0][Local__Uint8CounterJ]);
                        }
                        break;
                case 2:
                        LCD_CheckStatusSendCmnd(LCD__UINT8_CGRAM_BYTE1);
    2ed8:	88 e4       	ldi	r24, 0x48	; 72
    2eda:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
                    	for(Local__Uint8CounterJ=0;Local__Uint8CounterJ<8;++Local__Uint8CounterJ)
    2ede:	19 82       	std	Y+1, r1	; 0x01
    2ee0:	10 c0       	rjmp	.+32     	; 0x2f02 <LCD_CheckStatusSpecialChar+0x100>
                    	{
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[1][Local__Uint8CounterJ]);
    2ee2:	20 91 c2 01 	lds	r18, 0x01C2
    2ee6:	30 91 c3 01 	lds	r19, 0x01C3
    2eea:	89 81       	ldd	r24, Y+1	; 0x01
    2eec:	88 2f       	mov	r24, r24
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	f9 01       	movw	r30, r18
    2ef2:	e8 0f       	add	r30, r24
    2ef4:	f9 1f       	adc	r31, r25
    2ef6:	80 81       	ld	r24, Z
    2ef8:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[0][Local__Uint8CounterJ]);
                        }
                        break;
                case 2:
                        LCD_CheckStatusSendCmnd(LCD__UINT8_CGRAM_BYTE1);
                    	for(Local__Uint8CounterJ=0;Local__Uint8CounterJ<8;++Local__Uint8CounterJ)
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	8f 5f       	subi	r24, 0xFF	; 255
    2f00:	89 83       	std	Y+1, r24	; 0x01
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	88 30       	cpi	r24, 0x08	; 8
    2f06:	68 f3       	brcs	.-38     	; 0x2ee2 <LCD_CheckStatusSpecialChar+0xe0>
    2f08:	95 c0       	rjmp	.+298    	; 0x3034 <LCD_CheckStatusSpecialChar+0x232>
                    	{
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[1][Local__Uint8CounterJ]);
                        }
                        break;
                case 3:
                        LCD_CheckStatusSendCmnd(LCD__UINT8_CGRAM_BYTE2);
    2f0a:	80 e5       	ldi	r24, 0x50	; 80
    2f0c:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
                    	for(Local__Uint8CounterJ=0;Local__Uint8CounterJ<8;++Local__Uint8CounterJ)
    2f10:	19 82       	std	Y+1, r1	; 0x01
    2f12:	10 c0       	rjmp	.+32     	; 0x2f34 <LCD_CheckStatusSpecialChar+0x132>
                    	{
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[2][Local__Uint8CounterJ]);
    2f14:	20 91 c4 01 	lds	r18, 0x01C4
    2f18:	30 91 c5 01 	lds	r19, 0x01C5
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	88 2f       	mov	r24, r24
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	f9 01       	movw	r30, r18
    2f24:	e8 0f       	add	r30, r24
    2f26:	f9 1f       	adc	r31, r25
    2f28:	80 81       	ld	r24, Z
    2f2a:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[1][Local__Uint8CounterJ]);
                        }
                        break;
                case 3:
                        LCD_CheckStatusSendCmnd(LCD__UINT8_CGRAM_BYTE2);
                    	for(Local__Uint8CounterJ=0;Local__Uint8CounterJ<8;++Local__Uint8CounterJ)
    2f2e:	89 81       	ldd	r24, Y+1	; 0x01
    2f30:	8f 5f       	subi	r24, 0xFF	; 255
    2f32:	89 83       	std	Y+1, r24	; 0x01
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
    2f36:	88 30       	cpi	r24, 0x08	; 8
    2f38:	68 f3       	brcs	.-38     	; 0x2f14 <LCD_CheckStatusSpecialChar+0x112>
    2f3a:	7c c0       	rjmp	.+248    	; 0x3034 <LCD_CheckStatusSpecialChar+0x232>
                    	{
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[2][Local__Uint8CounterJ]);
                        }
                        break;
                case 4:
                        LCD_CheckStatusSendCmnd(LCD__UINT8_CGRAM_BYTE3);
    2f3c:	88 e5       	ldi	r24, 0x58	; 88
    2f3e:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
                    	for(Local__Uint8CounterJ=0;Local__Uint8CounterJ<8;++Local__Uint8CounterJ)
    2f42:	19 82       	std	Y+1, r1	; 0x01
    2f44:	10 c0       	rjmp	.+32     	; 0x2f66 <LCD_CheckStatusSpecialChar+0x164>
                    	{
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[3][Local__Uint8CounterJ]);
    2f46:	20 91 c6 01 	lds	r18, 0x01C6
    2f4a:	30 91 c7 01 	lds	r19, 0x01C7
    2f4e:	89 81       	ldd	r24, Y+1	; 0x01
    2f50:	88 2f       	mov	r24, r24
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	f9 01       	movw	r30, r18
    2f56:	e8 0f       	add	r30, r24
    2f58:	f9 1f       	adc	r31, r25
    2f5a:	80 81       	ld	r24, Z
    2f5c:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[2][Local__Uint8CounterJ]);
                        }
                        break;
                case 4:
                        LCD_CheckStatusSendCmnd(LCD__UINT8_CGRAM_BYTE3);
                    	for(Local__Uint8CounterJ=0;Local__Uint8CounterJ<8;++Local__Uint8CounterJ)
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	8f 5f       	subi	r24, 0xFF	; 255
    2f64:	89 83       	std	Y+1, r24	; 0x01
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	88 30       	cpi	r24, 0x08	; 8
    2f6a:	68 f3       	brcs	.-38     	; 0x2f46 <LCD_CheckStatusSpecialChar+0x144>
    2f6c:	63 c0       	rjmp	.+198    	; 0x3034 <LCD_CheckStatusSpecialChar+0x232>
                    	{
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[3][Local__Uint8CounterJ]);
                        }
                        break;
                case 5:
                        LCD_CheckStatusSendCmnd(LCD__UINT8_CGRAM_BYTE4);
    2f6e:	80 e6       	ldi	r24, 0x60	; 96
    2f70:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
                    	for(Local__Uint8CounterJ=0;Local__Uint8CounterJ<8;++Local__Uint8CounterJ)
    2f74:	19 82       	std	Y+1, r1	; 0x01
    2f76:	10 c0       	rjmp	.+32     	; 0x2f98 <LCD_CheckStatusSpecialChar+0x196>
                    	{
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[4][Local__Uint8CounterJ]);
    2f78:	20 91 c8 01 	lds	r18, 0x01C8
    2f7c:	30 91 c9 01 	lds	r19, 0x01C9
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	88 2f       	mov	r24, r24
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	f9 01       	movw	r30, r18
    2f88:	e8 0f       	add	r30, r24
    2f8a:	f9 1f       	adc	r31, r25
    2f8c:	80 81       	ld	r24, Z
    2f8e:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[3][Local__Uint8CounterJ]);
                        }
                        break;
                case 5:
                        LCD_CheckStatusSendCmnd(LCD__UINT8_CGRAM_BYTE4);
                    	for(Local__Uint8CounterJ=0;Local__Uint8CounterJ<8;++Local__Uint8CounterJ)
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	8f 5f       	subi	r24, 0xFF	; 255
    2f96:	89 83       	std	Y+1, r24	; 0x01
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	88 30       	cpi	r24, 0x08	; 8
    2f9c:	68 f3       	brcs	.-38     	; 0x2f78 <LCD_CheckStatusSpecialChar+0x176>
    2f9e:	4a c0       	rjmp	.+148    	; 0x3034 <LCD_CheckStatusSpecialChar+0x232>
                    	{
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[4][Local__Uint8CounterJ]);
                        }
                        break;
                case 6:
                        LCD_CheckStatusSendCmnd(LCD__UINT8_CGRAM_BYTE5);
    2fa0:	88 e6       	ldi	r24, 0x68	; 104
    2fa2:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
                    	for(Local__Uint8CounterJ=0;Local__Uint8CounterJ<8;++Local__Uint8CounterJ)
    2fa6:	19 82       	std	Y+1, r1	; 0x01
    2fa8:	10 c0       	rjmp	.+32     	; 0x2fca <LCD_CheckStatusSpecialChar+0x1c8>
                    	{
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[5][Local__Uint8CounterJ]);
    2faa:	20 91 ca 01 	lds	r18, 0x01CA
    2fae:	30 91 cb 01 	lds	r19, 0x01CB
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	88 2f       	mov	r24, r24
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	f9 01       	movw	r30, r18
    2fba:	e8 0f       	add	r30, r24
    2fbc:	f9 1f       	adc	r31, r25
    2fbe:	80 81       	ld	r24, Z
    2fc0:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[4][Local__Uint8CounterJ]);
                        }
                        break;
                case 6:
                        LCD_CheckStatusSendCmnd(LCD__UINT8_CGRAM_BYTE5);
                    	for(Local__Uint8CounterJ=0;Local__Uint8CounterJ<8;++Local__Uint8CounterJ)
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	8f 5f       	subi	r24, 0xFF	; 255
    2fc8:	89 83       	std	Y+1, r24	; 0x01
    2fca:	89 81       	ldd	r24, Y+1	; 0x01
    2fcc:	88 30       	cpi	r24, 0x08	; 8
    2fce:	68 f3       	brcs	.-38     	; 0x2faa <LCD_CheckStatusSpecialChar+0x1a8>
    2fd0:	31 c0       	rjmp	.+98     	; 0x3034 <LCD_CheckStatusSpecialChar+0x232>
                    	{
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[5][Local__Uint8CounterJ]);
                        }
                        break;
                case 7:
                        LCD_CheckStatusSendCmnd(LCD__UINT8_CGRAM_BYTE6);
    2fd2:	80 e7       	ldi	r24, 0x70	; 112
    2fd4:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
                    	for(Local__Uint8CounterJ=0;Local__Uint8CounterJ<8;++Local__Uint8CounterJ)
    2fd8:	19 82       	std	Y+1, r1	; 0x01
    2fda:	10 c0       	rjmp	.+32     	; 0x2ffc <LCD_CheckStatusSpecialChar+0x1fa>
                    	{
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[6][Local__Uint8CounterJ]);
    2fdc:	20 91 cc 01 	lds	r18, 0x01CC
    2fe0:	30 91 cd 01 	lds	r19, 0x01CD
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	88 2f       	mov	r24, r24
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	f9 01       	movw	r30, r18
    2fec:	e8 0f       	add	r30, r24
    2fee:	f9 1f       	adc	r31, r25
    2ff0:	80 81       	ld	r24, Z
    2ff2:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[5][Local__Uint8CounterJ]);
                        }
                        break;
                case 7:
                        LCD_CheckStatusSendCmnd(LCD__UINT8_CGRAM_BYTE6);
                    	for(Local__Uint8CounterJ=0;Local__Uint8CounterJ<8;++Local__Uint8CounterJ)
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	8f 5f       	subi	r24, 0xFF	; 255
    2ffa:	89 83       	std	Y+1, r24	; 0x01
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	88 30       	cpi	r24, 0x08	; 8
    3000:	68 f3       	brcs	.-38     	; 0x2fdc <LCD_CheckStatusSpecialChar+0x1da>
    3002:	18 c0       	rjmp	.+48     	; 0x3034 <LCD_CheckStatusSpecialChar+0x232>
                    	{
                            LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[6][Local__Uint8CounterJ]);
                        }
                        break;
                case 8:
                        LCD_CheckStatusSendCmnd(LCD__UINT8_CGRAM_BYTE7);
    3004:	88 e7       	ldi	r24, 0x78	; 120
    3006:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>

                    	for(Local__Uint8CounterJ=0;Local__Uint8CounterJ<8;++Local__Uint8CounterJ)
    300a:	19 82       	std	Y+1, r1	; 0x01
    300c:	10 c0       	rjmp	.+32     	; 0x302e <LCD_CheckStatusSpecialChar+0x22c>
                    	{
                    		 LCD_CheckStatusSendChar(LCD_A_UINT8SPECIALCHAR[7][Local__Uint8CounterJ]);
    300e:	20 91 ce 01 	lds	r18, 0x01CE
    3012:	30 91 cf 01 	lds	r19, 0x01CF
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	88 2f       	mov	r24, r24
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	f9 01       	movw	r30, r18
    301e:	e8 0f       	add	r30, r24
    3020:	f9 1f       	adc	r31, r25
    3022:	80 81       	ld	r24, Z
    3024:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
                        }
                        break;
                case 8:
                        LCD_CheckStatusSendCmnd(LCD__UINT8_CGRAM_BYTE7);

                    	for(Local__Uint8CounterJ=0;Local__Uint8CounterJ<8;++Local__Uint8CounterJ)
    3028:	89 81       	ldd	r24, Y+1	; 0x01
    302a:	8f 5f       	subi	r24, 0xFF	; 255
    302c:	89 83       	std	Y+1, r24	; 0x01
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	88 30       	cpi	r24, 0x08	; 8
    3032:	68 f3       	brcs	.-38     	; 0x300e <LCD_CheckStatusSpecialChar+0x20c>
                        break;
//                default:
//                        break;
                }

                LCD_CheckStatusGoToXY(Copy__Uint8LCDLine, Copy__Uint8DDRamLocation);
    3034:	8c 81       	ldd	r24, Y+4	; 0x04
    3036:	6d 81       	ldd	r22, Y+5	; 0x05
    3038:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <LCD_CheckStatusGoToXY>
    303c:	02 c0       	rjmp	.+4      	; 0x3042 <LCD_CheckStatusSpecialChar+0x240>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	8a 83       	std	Y+2, r24	; 0x02
        }
        return Local_CheckStausReturnValue;
    3042:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3044:	27 96       	adiw	r28, 0x07	; 7
    3046:	0f b6       	in	r0, 0x3f	; 63
    3048:	f8 94       	cli
    304a:	de bf       	out	0x3e, r29	; 62
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	cd bf       	out	0x3d, r28	; 61
    3050:	cf 91       	pop	r28
    3052:	df 91       	pop	r29
    3054:	08 95       	ret

00003056 <LCD_VoidShiftRight>:
Void LCD_VoidShiftRight(_uint8 Copy__Uint8PositionValue,_uint32 Copy__Uint32DelayValue)
{
    3056:	df 93       	push	r29
    3058:	cf 93       	push	r28
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	64 97       	sbiw	r28, 0x14	; 20
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	f8 94       	cli
    3064:	de bf       	out	0x3e, r29	; 62
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	cd bf       	out	0x3d, r28	; 61
    306a:	88 8b       	std	Y+16, r24	; 0x10
    306c:	49 8b       	std	Y+17, r20	; 0x11
    306e:	5a 8b       	std	Y+18, r21	; 0x12
    3070:	6b 8b       	std	Y+19, r22	; 0x13
    3072:	7c 8b       	std	Y+20, r23	; 0x14
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    3074:	1f 86       	std	Y+15, r1	; 0x0f
    3076:	7c c0       	rjmp	.+248    	; 0x3170 <LCD_VoidShiftRight+0x11a>
        {
                LCD_CheckStatusSendCmnd(0b00011100);
    3078:	8c e1       	ldi	r24, 0x1C	; 28
    307a:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
                _delay_ms(Copy__Uint32DelayValue);
    307e:	69 89       	ldd	r22, Y+17	; 0x11
    3080:	7a 89       	ldd	r23, Y+18	; 0x12
    3082:	8b 89       	ldd	r24, Y+19	; 0x13
    3084:	9c 89       	ldd	r25, Y+20	; 0x14
    3086:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	8b 87       	std	Y+11, r24	; 0x0b
    3090:	9c 87       	std	Y+12, r25	; 0x0c
    3092:	ad 87       	std	Y+13, r26	; 0x0d
    3094:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3096:	6b 85       	ldd	r22, Y+11	; 0x0b
    3098:	7c 85       	ldd	r23, Y+12	; 0x0c
    309a:	8d 85       	ldd	r24, Y+13	; 0x0d
    309c:	9e 85       	ldd	r25, Y+14	; 0x0e
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	4a ef       	ldi	r20, 0xFA	; 250
    30a4:	54 e4       	ldi	r21, 0x44	; 68
    30a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	8f 83       	std	Y+7, r24	; 0x07
    30b0:	98 87       	std	Y+8, r25	; 0x08
    30b2:	a9 87       	std	Y+9, r26	; 0x09
    30b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30b6:	6f 81       	ldd	r22, Y+7	; 0x07
    30b8:	78 85       	ldd	r23, Y+8	; 0x08
    30ba:	89 85       	ldd	r24, Y+9	; 0x09
    30bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	40 e8       	ldi	r20, 0x80	; 128
    30c4:	5f e3       	ldi	r21, 0x3F	; 63
    30c6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    30ca:	88 23       	and	r24, r24
    30cc:	2c f4       	brge	.+10     	; 0x30d8 <LCD_VoidShiftRight+0x82>
		__ticks = 1;
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	9e 83       	std	Y+6, r25	; 0x06
    30d4:	8d 83       	std	Y+5, r24	; 0x05
    30d6:	3f c0       	rjmp	.+126    	; 0x3156 <LCD_VoidShiftRight+0x100>
	else if (__tmp > 65535)
    30d8:	6f 81       	ldd	r22, Y+7	; 0x07
    30da:	78 85       	ldd	r23, Y+8	; 0x08
    30dc:	89 85       	ldd	r24, Y+9	; 0x09
    30de:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	3f ef       	ldi	r19, 0xFF	; 255
    30e4:	4f e7       	ldi	r20, 0x7F	; 127
    30e6:	57 e4       	ldi	r21, 0x47	; 71
    30e8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    30ec:	18 16       	cp	r1, r24
    30ee:	4c f5       	brge	.+82     	; 0x3142 <LCD_VoidShiftRight+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30f8:	20 e0       	ldi	r18, 0x00	; 0
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	40 e2       	ldi	r20, 0x20	; 32
    30fe:	51 e4       	ldi	r21, 0x41	; 65
    3100:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	bc 01       	movw	r22, r24
    310a:	cd 01       	movw	r24, r26
    310c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	9e 83       	std	Y+6, r25	; 0x06
    3116:	8d 83       	std	Y+5, r24	; 0x05
    3118:	0f c0       	rjmp	.+30     	; 0x3138 <LCD_VoidShiftRight+0xe2>
    311a:	88 ec       	ldi	r24, 0xC8	; 200
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	9c 83       	std	Y+4, r25	; 0x04
    3120:	8b 83       	std	Y+3, r24	; 0x03
    3122:	8b 81       	ldd	r24, Y+3	; 0x03
    3124:	9c 81       	ldd	r25, Y+4	; 0x04
    3126:	01 97       	sbiw	r24, 0x01	; 1
    3128:	f1 f7       	brne	.-4      	; 0x3126 <LCD_VoidShiftRight+0xd0>
    312a:	9c 83       	std	Y+4, r25	; 0x04
    312c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    312e:	8d 81       	ldd	r24, Y+5	; 0x05
    3130:	9e 81       	ldd	r25, Y+6	; 0x06
    3132:	01 97       	sbiw	r24, 0x01	; 1
    3134:	9e 83       	std	Y+6, r25	; 0x06
    3136:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3138:	8d 81       	ldd	r24, Y+5	; 0x05
    313a:	9e 81       	ldd	r25, Y+6	; 0x06
    313c:	00 97       	sbiw	r24, 0x00	; 0
    313e:	69 f7       	brne	.-38     	; 0x311a <LCD_VoidShiftRight+0xc4>
    3140:	14 c0       	rjmp	.+40     	; 0x316a <LCD_VoidShiftRight+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3142:	6f 81       	ldd	r22, Y+7	; 0x07
    3144:	78 85       	ldd	r23, Y+8	; 0x08
    3146:	89 85       	ldd	r24, Y+9	; 0x09
    3148:	9a 85       	ldd	r25, Y+10	; 0x0a
    314a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	9e 83       	std	Y+6, r25	; 0x06
    3154:	8d 83       	std	Y+5, r24	; 0x05
    3156:	8d 81       	ldd	r24, Y+5	; 0x05
    3158:	9e 81       	ldd	r25, Y+6	; 0x06
    315a:	9a 83       	std	Y+2, r25	; 0x02
    315c:	89 83       	std	Y+1, r24	; 0x01
    315e:	89 81       	ldd	r24, Y+1	; 0x01
    3160:	9a 81       	ldd	r25, Y+2	; 0x02
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	f1 f7       	brne	.-4      	; 0x3162 <LCD_VoidShiftRight+0x10c>
    3166:	9a 83       	std	Y+2, r25	; 0x02
    3168:	89 83       	std	Y+1, r24	; 0x01
        return Local_CheckStausReturnValue;
}
Void LCD_VoidShiftRight(_uint8 Copy__Uint8PositionValue,_uint32 Copy__Uint32DelayValue)
{
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    316a:	8f 85       	ldd	r24, Y+15	; 0x0f
    316c:	8f 5f       	subi	r24, 0xFF	; 255
    316e:	8f 87       	std	Y+15, r24	; 0x0f
    3170:	9f 85       	ldd	r25, Y+15	; 0x0f
    3172:	88 89       	ldd	r24, Y+16	; 0x10
    3174:	98 17       	cp	r25, r24
    3176:	08 f4       	brcc	.+2      	; 0x317a <LCD_VoidShiftRight+0x124>
    3178:	7f cf       	rjmp	.-258    	; 0x3078 <LCD_VoidShiftRight+0x22>
        {
                LCD_CheckStatusSendCmnd(0b00011100);
                _delay_ms(Copy__Uint32DelayValue);
        }
}
    317a:	64 96       	adiw	r28, 0x14	; 20
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	f8 94       	cli
    3180:	de bf       	out	0x3e, r29	; 62
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	cd bf       	out	0x3d, r28	; 61
    3186:	cf 91       	pop	r28
    3188:	df 91       	pop	r29
    318a:	08 95       	ret

0000318c <LCD_CheckStatusShiftRightOrLeft>:
CheckStatus LCD_CheckStatusShiftRightOrLeft(_uint32 Copy__Uint32DelayValue)
{
    318c:	df 93       	push	r29
    318e:	cf 93       	push	r28
    3190:	00 d0       	rcall	.+0      	; 0x3192 <LCD_CheckStatusShiftRightOrLeft+0x6>
    3192:	00 d0       	rcall	.+0      	; 0x3194 <LCD_CheckStatusShiftRightOrLeft+0x8>
    3194:	0f 92       	push	r0
    3196:	cd b7       	in	r28, 0x3d	; 61
    3198:	de b7       	in	r29, 0x3e	; 62
    319a:	6a 83       	std	Y+2, r22	; 0x02
    319c:	7b 83       	std	Y+3, r23	; 0x03
    319e:	8c 83       	std	Y+4, r24	; 0x04
    31a0:	9d 83       	std	Y+5, r25	; 0x05
    CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    31a2:	19 82       	std	Y+1, r1	; 0x01
    }
    else
    {
            Local_CheckStausReturnValue = CHECK_FAIL;
    }
    return Local_CheckStausReturnValue;
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
    31b0:	cf 91       	pop	r28
    31b2:	df 91       	pop	r29
    31b4:	08 95       	ret

000031b6 <LCD_VoidShiftLeft>:
Void LCD_VoidShiftLeft(_uint8 Copy__Uint8PositionValue,_uint32 Copy__Uint32DelayValue)
{
    31b6:	df 93       	push	r29
    31b8:	cf 93       	push	r28
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62
    31be:	64 97       	sbiw	r28, 0x14	; 20
    31c0:	0f b6       	in	r0, 0x3f	; 63
    31c2:	f8 94       	cli
    31c4:	de bf       	out	0x3e, r29	; 62
    31c6:	0f be       	out	0x3f, r0	; 63
    31c8:	cd bf       	out	0x3d, r28	; 61
    31ca:	88 8b       	std	Y+16, r24	; 0x10
    31cc:	49 8b       	std	Y+17, r20	; 0x11
    31ce:	5a 8b       	std	Y+18, r21	; 0x12
    31d0:	6b 8b       	std	Y+19, r22	; 0x13
    31d2:	7c 8b       	std	Y+20, r23	; 0x14
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    31d4:	1f 86       	std	Y+15, r1	; 0x0f
    31d6:	7c c0       	rjmp	.+248    	; 0x32d0 <LCD_VoidShiftLeft+0x11a>
        {
                LCD_CheckStatusSendCmnd(0b00011000);
    31d8:	88 e1       	ldi	r24, 0x18	; 24
    31da:	0e 94 a9 11 	call	0x2352	; 0x2352 <LCD_CheckStatusSendCmnd>
                _delay_ms(Copy__Uint32DelayValue);
    31de:	69 89       	ldd	r22, Y+17	; 0x11
    31e0:	7a 89       	ldd	r23, Y+18	; 0x12
    31e2:	8b 89       	ldd	r24, Y+19	; 0x13
    31e4:	9c 89       	ldd	r25, Y+20	; 0x14
    31e6:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	8b 87       	std	Y+11, r24	; 0x0b
    31f0:	9c 87       	std	Y+12, r25	; 0x0c
    31f2:	ad 87       	std	Y+13, r26	; 0x0d
    31f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    31fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	4a ef       	ldi	r20, 0xFA	; 250
    3204:	54 e4       	ldi	r21, 0x44	; 68
    3206:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    320a:	dc 01       	movw	r26, r24
    320c:	cb 01       	movw	r24, r22
    320e:	8f 83       	std	Y+7, r24	; 0x07
    3210:	98 87       	std	Y+8, r25	; 0x08
    3212:	a9 87       	std	Y+9, r26	; 0x09
    3214:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3216:	6f 81       	ldd	r22, Y+7	; 0x07
    3218:	78 85       	ldd	r23, Y+8	; 0x08
    321a:	89 85       	ldd	r24, Y+9	; 0x09
    321c:	9a 85       	ldd	r25, Y+10	; 0x0a
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	40 e8       	ldi	r20, 0x80	; 128
    3224:	5f e3       	ldi	r21, 0x3F	; 63
    3226:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    322a:	88 23       	and	r24, r24
    322c:	2c f4       	brge	.+10     	; 0x3238 <LCD_VoidShiftLeft+0x82>
		__ticks = 1;
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	9e 83       	std	Y+6, r25	; 0x06
    3234:	8d 83       	std	Y+5, r24	; 0x05
    3236:	3f c0       	rjmp	.+126    	; 0x32b6 <LCD_VoidShiftLeft+0x100>
	else if (__tmp > 65535)
    3238:	6f 81       	ldd	r22, Y+7	; 0x07
    323a:	78 85       	ldd	r23, Y+8	; 0x08
    323c:	89 85       	ldd	r24, Y+9	; 0x09
    323e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	3f ef       	ldi	r19, 0xFF	; 255
    3244:	4f e7       	ldi	r20, 0x7F	; 127
    3246:	57 e4       	ldi	r21, 0x47	; 71
    3248:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    324c:	18 16       	cp	r1, r24
    324e:	4c f5       	brge	.+82     	; 0x32a2 <LCD_VoidShiftLeft+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3250:	6b 85       	ldd	r22, Y+11	; 0x0b
    3252:	7c 85       	ldd	r23, Y+12	; 0x0c
    3254:	8d 85       	ldd	r24, Y+13	; 0x0d
    3256:	9e 85       	ldd	r25, Y+14	; 0x0e
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	40 e2       	ldi	r20, 0x20	; 32
    325e:	51 e4       	ldi	r21, 0x41	; 65
    3260:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	bc 01       	movw	r22, r24
    326a:	cd 01       	movw	r24, r26
    326c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	9e 83       	std	Y+6, r25	; 0x06
    3276:	8d 83       	std	Y+5, r24	; 0x05
    3278:	0f c0       	rjmp	.+30     	; 0x3298 <LCD_VoidShiftLeft+0xe2>
    327a:	88 ec       	ldi	r24, 0xC8	; 200
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	9c 83       	std	Y+4, r25	; 0x04
    3280:	8b 83       	std	Y+3, r24	; 0x03
    3282:	8b 81       	ldd	r24, Y+3	; 0x03
    3284:	9c 81       	ldd	r25, Y+4	; 0x04
    3286:	01 97       	sbiw	r24, 0x01	; 1
    3288:	f1 f7       	brne	.-4      	; 0x3286 <LCD_VoidShiftLeft+0xd0>
    328a:	9c 83       	std	Y+4, r25	; 0x04
    328c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    328e:	8d 81       	ldd	r24, Y+5	; 0x05
    3290:	9e 81       	ldd	r25, Y+6	; 0x06
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	9e 83       	std	Y+6, r25	; 0x06
    3296:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3298:	8d 81       	ldd	r24, Y+5	; 0x05
    329a:	9e 81       	ldd	r25, Y+6	; 0x06
    329c:	00 97       	sbiw	r24, 0x00	; 0
    329e:	69 f7       	brne	.-38     	; 0x327a <LCD_VoidShiftLeft+0xc4>
    32a0:	14 c0       	rjmp	.+40     	; 0x32ca <LCD_VoidShiftLeft+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a2:	6f 81       	ldd	r22, Y+7	; 0x07
    32a4:	78 85       	ldd	r23, Y+8	; 0x08
    32a6:	89 85       	ldd	r24, Y+9	; 0x09
    32a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	9e 83       	std	Y+6, r25	; 0x06
    32b4:	8d 83       	std	Y+5, r24	; 0x05
    32b6:	8d 81       	ldd	r24, Y+5	; 0x05
    32b8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ba:	9a 83       	std	Y+2, r25	; 0x02
    32bc:	89 83       	std	Y+1, r24	; 0x01
    32be:	89 81       	ldd	r24, Y+1	; 0x01
    32c0:	9a 81       	ldd	r25, Y+2	; 0x02
    32c2:	01 97       	sbiw	r24, 0x01	; 1
    32c4:	f1 f7       	brne	.-4      	; 0x32c2 <LCD_VoidShiftLeft+0x10c>
    32c6:	9a 83       	std	Y+2, r25	; 0x02
    32c8:	89 83       	std	Y+1, r24	; 0x01
    return Local_CheckStausReturnValue;
}
Void LCD_VoidShiftLeft(_uint8 Copy__Uint8PositionValue,_uint32 Copy__Uint32DelayValue)
{
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    32ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    32cc:	8f 5f       	subi	r24, 0xFF	; 255
    32ce:	8f 87       	std	Y+15, r24	; 0x0f
    32d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    32d2:	88 89       	ldd	r24, Y+16	; 0x10
    32d4:	98 17       	cp	r25, r24
    32d6:	08 f4       	brcc	.+2      	; 0x32da <LCD_VoidShiftLeft+0x124>
    32d8:	7f cf       	rjmp	.-258    	; 0x31d8 <LCD_VoidShiftLeft+0x22>
        {
                LCD_CheckStatusSendCmnd(0b00011000);
                _delay_ms(Copy__Uint32DelayValue);
        }
}
    32da:	64 96       	adiw	r28, 0x14	; 20
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	f8 94       	cli
    32e0:	de bf       	out	0x3e, r29	; 62
    32e2:	0f be       	out	0x3f, r0	; 63
    32e4:	cd bf       	out	0x3d, r28	; 61
    32e6:	cf 91       	pop	r28
    32e8:	df 91       	pop	r29
    32ea:	08 95       	ret

000032ec <LCD_CheckStatusDisplaySpecialChar>:
CheckStatus LCD_CheckStatusDisplaySpecialChar(_uint8 Copy__Uint8Char)
{
    32ec:	df 93       	push	r29
    32ee:	cf 93       	push	r28
    32f0:	00 d0       	rcall	.+0      	; 0x32f2 <LCD_CheckStatusDisplaySpecialChar+0x6>
    32f2:	00 d0       	rcall	.+0      	; 0x32f4 <LCD_CheckStatusDisplaySpecialChar+0x8>
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
    32f8:	8a 83       	std	Y+2, r24	; 0x02
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    32fa:	19 82       	std	Y+1, r1	; 0x01
        if (Copy__Uint8Char <=8)
    32fc:	8a 81       	ldd	r24, Y+2	; 0x02
    32fe:	89 30       	cpi	r24, 0x09	; 9
    3300:	08 f0       	brcs	.+2      	; 0x3304 <LCD_CheckStatusDisplaySpecialChar+0x18>
    3302:	54 c0       	rjmp	.+168    	; 0x33ac <LCD_CheckStatusDisplaySpecialChar+0xc0>
        {
                switch (Copy__Uint8Char)
    3304:	8a 81       	ldd	r24, Y+2	; 0x02
    3306:	28 2f       	mov	r18, r24
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	3c 83       	std	Y+4, r19	; 0x04
    330c:	2b 83       	std	Y+3, r18	; 0x03
    330e:	8b 81       	ldd	r24, Y+3	; 0x03
    3310:	9c 81       	ldd	r25, Y+4	; 0x04
    3312:	84 30       	cpi	r24, 0x04	; 4
    3314:	91 05       	cpc	r25, r1
    3316:	b1 f1       	breq	.+108    	; 0x3384 <LCD_CheckStatusDisplaySpecialChar+0x98>
    3318:	2b 81       	ldd	r18, Y+3	; 0x03
    331a:	3c 81       	ldd	r19, Y+4	; 0x04
    331c:	25 30       	cpi	r18, 0x05	; 5
    331e:	31 05       	cpc	r19, r1
    3320:	84 f4       	brge	.+32     	; 0x3342 <LCD_CheckStatusDisplaySpecialChar+0x56>
    3322:	8b 81       	ldd	r24, Y+3	; 0x03
    3324:	9c 81       	ldd	r25, Y+4	; 0x04
    3326:	82 30       	cpi	r24, 0x02	; 2
    3328:	91 05       	cpc	r25, r1
    332a:	21 f1       	breq	.+72     	; 0x3374 <LCD_CheckStatusDisplaySpecialChar+0x88>
    332c:	2b 81       	ldd	r18, Y+3	; 0x03
    332e:	3c 81       	ldd	r19, Y+4	; 0x04
    3330:	23 30       	cpi	r18, 0x03	; 3
    3332:	31 05       	cpc	r19, r1
    3334:	1c f5       	brge	.+70     	; 0x337c <LCD_CheckStatusDisplaySpecialChar+0x90>
    3336:	8b 81       	ldd	r24, Y+3	; 0x03
    3338:	9c 81       	ldd	r25, Y+4	; 0x04
    333a:	81 30       	cpi	r24, 0x01	; 1
    333c:	91 05       	cpc	r25, r1
    333e:	b1 f0       	breq	.+44     	; 0x336c <LCD_CheckStatusDisplaySpecialChar+0x80>
    3340:	37 c0       	rjmp	.+110    	; 0x33b0 <LCD_CheckStatusDisplaySpecialChar+0xc4>
    3342:	2b 81       	ldd	r18, Y+3	; 0x03
    3344:	3c 81       	ldd	r19, Y+4	; 0x04
    3346:	26 30       	cpi	r18, 0x06	; 6
    3348:	31 05       	cpc	r19, r1
    334a:	21 f1       	breq	.+72     	; 0x3394 <LCD_CheckStatusDisplaySpecialChar+0xa8>
    334c:	8b 81       	ldd	r24, Y+3	; 0x03
    334e:	9c 81       	ldd	r25, Y+4	; 0x04
    3350:	86 30       	cpi	r24, 0x06	; 6
    3352:	91 05       	cpc	r25, r1
    3354:	dc f0       	brlt	.+54     	; 0x338c <LCD_CheckStatusDisplaySpecialChar+0xa0>
    3356:	2b 81       	ldd	r18, Y+3	; 0x03
    3358:	3c 81       	ldd	r19, Y+4	; 0x04
    335a:	27 30       	cpi	r18, 0x07	; 7
    335c:	31 05       	cpc	r19, r1
    335e:	f1 f0       	breq	.+60     	; 0x339c <LCD_CheckStatusDisplaySpecialChar+0xb0>
    3360:	8b 81       	ldd	r24, Y+3	; 0x03
    3362:	9c 81       	ldd	r25, Y+4	; 0x04
    3364:	88 30       	cpi	r24, 0x08	; 8
    3366:	91 05       	cpc	r25, r1
    3368:	e9 f0       	breq	.+58     	; 0x33a4 <LCD_CheckStatusDisplaySpecialChar+0xb8>
    336a:	22 c0       	rjmp	.+68     	; 0x33b0 <LCD_CheckStatusDisplaySpecialChar+0xc4>
                {

                case 1:
                        LCD_CheckStatusSendChar(0);
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
    3372:	1e c0       	rjmp	.+60     	; 0x33b0 <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 2:
                        LCD_CheckStatusSendChar(1);
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
    337a:	1a c0       	rjmp	.+52     	; 0x33b0 <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 3:
                        LCD_CheckStatusSendChar(2);
    337c:	82 e0       	ldi	r24, 0x02	; 2
    337e:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
    3382:	16 c0       	rjmp	.+44     	; 0x33b0 <LCD_CheckStatusDisplaySpecialChar+0xc4>

                        break;
                case 4:
                        LCD_CheckStatusSendChar(3);
    3384:	83 e0       	ldi	r24, 0x03	; 3
    3386:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
    338a:	12 c0       	rjmp	.+36     	; 0x33b0 <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 5:
                        LCD_CheckStatusSendChar(4);
    338c:	84 e0       	ldi	r24, 0x04	; 4
    338e:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
    3392:	0e c0       	rjmp	.+28     	; 0x33b0 <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 6:
                        LCD_CheckStatusSendChar(5);
    3394:	85 e0       	ldi	r24, 0x05	; 5
    3396:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
    339a:	0a c0       	rjmp	.+20     	; 0x33b0 <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 7:
                        LCD_CheckStatusSendChar(6);
    339c:	86 e0       	ldi	r24, 0x06	; 6
    339e:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
    33a2:	06 c0       	rjmp	.+12     	; 0x33b0 <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 8:
                        LCD_CheckStatusSendChar(7);
    33a4:	87 e0       	ldi	r24, 0x07	; 7
    33a6:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
    33aa:	02 c0       	rjmp	.+4      	; 0x33b0 <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                }
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	89 83       	std	Y+1, r24	; 0x01
        }
        return Local_CheckStausReturnValue;
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    33b2:	0f 90       	pop	r0
    33b4:	0f 90       	pop	r0
    33b6:	0f 90       	pop	r0
    33b8:	0f 90       	pop	r0
    33ba:	cf 91       	pop	r28
    33bc:	df 91       	pop	r29
    33be:	08 95       	ret

000033c0 <main>:
/*
void Framethree(void);
void Frameone(void);
void Frametwo(void);
*/
int main (){
    33c0:	df 93       	push	r29
    33c2:	cf 93       	push	r28
    33c4:	cd b7       	in	r28, 0x3d	; 61
    33c6:	de b7       	in	r29, 0x3e	; 62

     /* DIO INIT */
     DIO_VoidInit();
    33c8:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_VoidInit>
     /* LCD INIT */
     LCD_VoidInit();
    33cc:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_VoidInit>
     /* Write NAME */

LCD_CheckStatusSendChar('A');
    33d0:	81 e4       	ldi	r24, 0x41	; 65
    33d2:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_CheckStatusSendChar>
    33d6:	ff cf       	rjmp	.-2      	; 0x33d6 <main+0x16>

000033d8 <__mulsi3>:
    33d8:	62 9f       	mul	r22, r18
    33da:	d0 01       	movw	r26, r0
    33dc:	73 9f       	mul	r23, r19
    33de:	f0 01       	movw	r30, r0
    33e0:	82 9f       	mul	r24, r18
    33e2:	e0 0d       	add	r30, r0
    33e4:	f1 1d       	adc	r31, r1
    33e6:	64 9f       	mul	r22, r20
    33e8:	e0 0d       	add	r30, r0
    33ea:	f1 1d       	adc	r31, r1
    33ec:	92 9f       	mul	r25, r18
    33ee:	f0 0d       	add	r31, r0
    33f0:	83 9f       	mul	r24, r19
    33f2:	f0 0d       	add	r31, r0
    33f4:	74 9f       	mul	r23, r20
    33f6:	f0 0d       	add	r31, r0
    33f8:	65 9f       	mul	r22, r21
    33fa:	f0 0d       	add	r31, r0
    33fc:	99 27       	eor	r25, r25
    33fe:	72 9f       	mul	r23, r18
    3400:	b0 0d       	add	r27, r0
    3402:	e1 1d       	adc	r30, r1
    3404:	f9 1f       	adc	r31, r25
    3406:	63 9f       	mul	r22, r19
    3408:	b0 0d       	add	r27, r0
    340a:	e1 1d       	adc	r30, r1
    340c:	f9 1f       	adc	r31, r25
    340e:	bd 01       	movw	r22, r26
    3410:	cf 01       	movw	r24, r30
    3412:	11 24       	eor	r1, r1
    3414:	08 95       	ret

00003416 <__udivmodsi4>:
    3416:	a1 e2       	ldi	r26, 0x21	; 33
    3418:	1a 2e       	mov	r1, r26
    341a:	aa 1b       	sub	r26, r26
    341c:	bb 1b       	sub	r27, r27
    341e:	fd 01       	movw	r30, r26
    3420:	0d c0       	rjmp	.+26     	; 0x343c <__udivmodsi4_ep>

00003422 <__udivmodsi4_loop>:
    3422:	aa 1f       	adc	r26, r26
    3424:	bb 1f       	adc	r27, r27
    3426:	ee 1f       	adc	r30, r30
    3428:	ff 1f       	adc	r31, r31
    342a:	a2 17       	cp	r26, r18
    342c:	b3 07       	cpc	r27, r19
    342e:	e4 07       	cpc	r30, r20
    3430:	f5 07       	cpc	r31, r21
    3432:	20 f0       	brcs	.+8      	; 0x343c <__udivmodsi4_ep>
    3434:	a2 1b       	sub	r26, r18
    3436:	b3 0b       	sbc	r27, r19
    3438:	e4 0b       	sbc	r30, r20
    343a:	f5 0b       	sbc	r31, r21

0000343c <__udivmodsi4_ep>:
    343c:	66 1f       	adc	r22, r22
    343e:	77 1f       	adc	r23, r23
    3440:	88 1f       	adc	r24, r24
    3442:	99 1f       	adc	r25, r25
    3444:	1a 94       	dec	r1
    3446:	69 f7       	brne	.-38     	; 0x3422 <__udivmodsi4_loop>
    3448:	60 95       	com	r22
    344a:	70 95       	com	r23
    344c:	80 95       	com	r24
    344e:	90 95       	com	r25
    3450:	9b 01       	movw	r18, r22
    3452:	ac 01       	movw	r20, r24
    3454:	bd 01       	movw	r22, r26
    3456:	cf 01       	movw	r24, r30
    3458:	08 95       	ret

0000345a <__prologue_saves__>:
    345a:	2f 92       	push	r2
    345c:	3f 92       	push	r3
    345e:	4f 92       	push	r4
    3460:	5f 92       	push	r5
    3462:	6f 92       	push	r6
    3464:	7f 92       	push	r7
    3466:	8f 92       	push	r8
    3468:	9f 92       	push	r9
    346a:	af 92       	push	r10
    346c:	bf 92       	push	r11
    346e:	cf 92       	push	r12
    3470:	df 92       	push	r13
    3472:	ef 92       	push	r14
    3474:	ff 92       	push	r15
    3476:	0f 93       	push	r16
    3478:	1f 93       	push	r17
    347a:	cf 93       	push	r28
    347c:	df 93       	push	r29
    347e:	cd b7       	in	r28, 0x3d	; 61
    3480:	de b7       	in	r29, 0x3e	; 62
    3482:	ca 1b       	sub	r28, r26
    3484:	db 0b       	sbc	r29, r27
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	f8 94       	cli
    348a:	de bf       	out	0x3e, r29	; 62
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	cd bf       	out	0x3d, r28	; 61
    3490:	09 94       	ijmp

00003492 <__epilogue_restores__>:
    3492:	2a 88       	ldd	r2, Y+18	; 0x12
    3494:	39 88       	ldd	r3, Y+17	; 0x11
    3496:	48 88       	ldd	r4, Y+16	; 0x10
    3498:	5f 84       	ldd	r5, Y+15	; 0x0f
    349a:	6e 84       	ldd	r6, Y+14	; 0x0e
    349c:	7d 84       	ldd	r7, Y+13	; 0x0d
    349e:	8c 84       	ldd	r8, Y+12	; 0x0c
    34a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    34a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    34a4:	b9 84       	ldd	r11, Y+9	; 0x09
    34a6:	c8 84       	ldd	r12, Y+8	; 0x08
    34a8:	df 80       	ldd	r13, Y+7	; 0x07
    34aa:	ee 80       	ldd	r14, Y+6	; 0x06
    34ac:	fd 80       	ldd	r15, Y+5	; 0x05
    34ae:	0c 81       	ldd	r16, Y+4	; 0x04
    34b0:	1b 81       	ldd	r17, Y+3	; 0x03
    34b2:	aa 81       	ldd	r26, Y+2	; 0x02
    34b4:	b9 81       	ldd	r27, Y+1	; 0x01
    34b6:	ce 0f       	add	r28, r30
    34b8:	d1 1d       	adc	r29, r1
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	f8 94       	cli
    34be:	de bf       	out	0x3e, r29	; 62
    34c0:	0f be       	out	0x3f, r0	; 63
    34c2:	cd bf       	out	0x3d, r28	; 61
    34c4:	ed 01       	movw	r28, r26
    34c6:	08 95       	ret

000034c8 <_exit>:
    34c8:	f8 94       	cli

000034ca <__stop_program>:
    34ca:	ff cf       	rjmp	.-2      	; 0x34ca <__stop_program>
