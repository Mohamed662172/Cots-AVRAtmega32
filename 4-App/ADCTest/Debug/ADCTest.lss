
ADCTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000156  00800060  000046e2  00004776  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008001b6  008001b6  000048cc  2**0
                  ALLOC
  3 .stab         00003414  00000000  00000000  000048cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000100b  00000000  00000000  00007ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000907d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b488  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c80e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d9e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000dba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000de9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 eb       	ldi	r26, 0xB6	; 182
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e5 22 	call	0x45ca	; 0x45ca <main>
      8a:	0c 94 6f 23 	jmp	0x46de	; 0x46de <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 54 23 	jmp	0x46a8	; 0x46a8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 44 23 	jmp	0x4688	; 0x4688 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 60 23 	jmp	0x46c0	; 0x46c0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 44 23 	jmp	0x4688	; 0x4688 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 60 23 	jmp	0x46c0	; 0x46c0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 54 23 	jmp	0x46a8	; 0x46a8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 40 23 	jmp	0x4680	; 0x4680 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e6       	ldi	r22, 0x66	; 102
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5c 23 	jmp	0x46b8	; 0x46b8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 44 23 	jmp	0x4688	; 0x4688 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 60 23 	jmp	0x46c0	; 0x46c0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 44 23 	jmp	0x4688	; 0x4688 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 60 23 	jmp	0x46c0	; 0x46c0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 44 23 	jmp	0x4688	; 0x4688 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 60 23 	jmp	0x46c0	; 0x46c0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 48 23 	jmp	0x4690	; 0x4690 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 64 23 	jmp	0x46c8	; 0x46c8 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 40 23 	jmp	0x4680	; 0x4680 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 5c 23 	jmp	0x46b8	; 0x46b8 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e2 59       	subi	r30, 0x92	; 146
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_VoidDisable>:
#include"ADC_private.h"

#define  ADC_MAX_NUMBER_OF_CHANNALE   32
#define  ADC_CHANNEL_CLEAR(REG)      REG &= (0b11100000)   
Void ADC_VoidDisable(Void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
        /*1- Disable Peripheral */
        CLEAR_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADEN);
     e36:	a6 e2       	ldi	r26, 0x26	; 38
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e6 e2       	ldi	r30, 0x26	; 38
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8f 77       	andi	r24, 0x7F	; 127
     e42:	8c 93       	st	X, r24
        
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <ADC_VoidInit>:

Void ADC_VoidInit(Void)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
        /* 1-Select Vref = Vcc */
         SET_BIT(ADC_UINT8_ADMUX_REG,ADMUX_REFS0);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 64       	ori	r24, 0x40	; 64
     e5e:	8c 93       	st	X, r24
        /* 2-Select Right adjust */
		CLEAR_BIT(ADC_UINT8_ADMUX_REG,ADMUX_ADLAR);
     e60:	a7 e2       	ldi	r26, 0x27	; 39
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e7 e2       	ldi	r30, 0x27	; 39
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8f 7d       	andi	r24, 0xDF	; 223
     e6c:	8c 93       	st	X, r24
        /* 3-disable AutoTrigger  */ 
         CLEAR_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADATE);
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8f 7d       	andi	r24, 0xDF	; 223
     e7a:	8c 93       	st	X, r24
        /* 4-CLK/64 */
         SET_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADPS2);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	84 60       	ori	r24, 0x04	; 4
     e88:	8c 93       	st	X, r24
         SET_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADPS1);
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	82 60       	ori	r24, 0x02	; 2
     e96:	8c 93       	st	X, r24
         CLEAR_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADPS0);
     e98:	a6 e2       	ldi	r26, 0x26	; 38
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e6 e2       	ldi	r30, 0x26	; 38
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8e 7f       	andi	r24, 0xFE	; 254
     ea4:	8c 93       	st	X, r24
        /* 5-Enable ADC Peripheral */
        SET_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADEN);
     ea6:	a6 e2       	ldi	r26, 0x26	; 38
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e6 e2       	ldi	r30, 0x26	; 38
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	80 68       	ori	r24, 0x80	; 128
     eb2:	8c 93       	st	X, r24
}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <ADC_CheckStatusGetDigigtalValueSynchNonBlocking>:

CheckStatus  ADC_CheckStatusGetDigigtalValueSynchNonBlocking ( _uint8 Copy__Uint8ChannelId, _uint16 *Copy__Uint8DigitalValue )
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	28 97       	sbiw	r28, 0x08	; 8
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	8e 83       	std	Y+6, r24	; 0x06
     ed0:	78 87       	std	Y+8, r23	; 0x08
     ed2:	6f 83       	std	Y+7, r22	; 0x07
             CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
     ed4:	1d 82       	std	Y+5, r1	; 0x05
             _uint32   Local__Uint32TimeOutCounter = 0;
     ed6:	19 82       	std	Y+1, r1	; 0x01
     ed8:	1a 82       	std	Y+2, r1	; 0x02
     eda:	1b 82       	std	Y+3, r1	; 0x03
     edc:	1c 82       	std	Y+4, r1	; 0x04
             if((Copy__Uint8ChannelId < ADC_MAX_NUMBER_OF_CHANNALE) && (Copy__Uint8DigitalValue != NULL)  )
     ede:	8e 81       	ldd	r24, Y+6	; 0x06
     ee0:	80 32       	cpi	r24, 0x20	; 32
     ee2:	08 f0       	brcs	.+2      	; 0xee6 <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0x2c>
     ee4:	68 c0       	rjmp	.+208    	; 0xfb6 <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0xfc>
     ee6:	8f 81       	ldd	r24, Y+7	; 0x07
     ee8:	98 85       	ldd	r25, Y+8	; 0x08
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	09 f4       	brne	.+2      	; 0xef0 <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0x36>
     eee:	63 c0       	rjmp	.+198    	; 0xfb6 <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0xfc>
             {
                        /* empety ADMUX Reg */
                        ADC_CHANNEL_CLEAR(ADC_UINT8_ADMUX_REG);
     ef0:	a7 e2       	ldi	r26, 0x27	; 39
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e7 e2       	ldi	r30, 0x27	; 39
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	80 7e       	andi	r24, 0xE0	; 224
     efc:	8c 93       	st	X, r24
                        /* select channel */
                        ADC_UINT8_ADMUX_REG |= Copy__Uint8ChannelId;
     efe:	a7 e2       	ldi	r26, 0x27	; 39
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e7 e2       	ldi	r30, 0x27	; 39
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	90 81       	ld	r25, Z
     f08:	8e 81       	ldd	r24, Y+6	; 0x06
     f0a:	89 2b       	or	r24, r25
     f0c:	8c 93       	st	X, r24
                        /* start conversion */
                        SET_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADSC);
     f0e:	a6 e2       	ldi	r26, 0x26	; 38
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e6 e2       	ldi	r30, 0x26	; 38
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 64       	ori	r24, 0x40	; 64
     f1a:	8c 93       	st	X, r24
     f1c:	0b c0       	rjmp	.+22     	; 0xf34 <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0x7a>
                        /* waiting flag = 1 */
                        while ((!GET_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADIF)) && (Local__Uint32TimeOutCounter < ADC__UINT32_TIME_OUT_RATE))
                        {
                                Local__Uint32TimeOutCounter++ ;
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	9a 81       	ldd	r25, Y+2	; 0x02
     f22:	ab 81       	ldd	r26, Y+3	; 0x03
     f24:	bc 81       	ldd	r27, Y+4	; 0x04
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	a1 1d       	adc	r26, r1
     f2a:	b1 1d       	adc	r27, r1
     f2c:	89 83       	std	Y+1, r24	; 0x01
     f2e:	9a 83       	std	Y+2, r25	; 0x02
     f30:	ab 83       	std	Y+3, r26	; 0x03
     f32:	bc 83       	std	Y+4, r27	; 0x04
                        /* select channel */
                        ADC_UINT8_ADMUX_REG |= Copy__Uint8ChannelId;
                        /* start conversion */
                        SET_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADSC);
                        /* waiting flag = 1 */
                        while ((!GET_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADIF)) && (Local__Uint32TimeOutCounter < ADC__UINT32_TIME_OUT_RATE))
     f34:	e6 e2       	ldi	r30, 0x26	; 38
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	82 95       	swap	r24
     f3c:	8f 70       	andi	r24, 0x0F	; 15
     f3e:	88 2f       	mov	r24, r24
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	81 70       	andi	r24, 0x01	; 1
     f44:	90 70       	andi	r25, 0x00	; 0
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	61 f4       	brne	.+24     	; 0xf62 <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0xa8>
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	9a 81       	ldd	r25, Y+2	; 0x02
     f4e:	ab 81       	ldd	r26, Y+3	; 0x03
     f50:	bc 81       	ldd	r27, Y+4	; 0x04
     f52:	80 35       	cpi	r24, 0x50	; 80
     f54:	23 ec       	ldi	r18, 0xC3	; 195
     f56:	92 07       	cpc	r25, r18
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	a2 07       	cpc	r26, r18
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	b2 07       	cpc	r27, r18
     f60:	f0 f2       	brcs	.-68     	; 0xf1e <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0x64>
                        {
                                Local__Uint32TimeOutCounter++ ;
                        }
                        if((Local__Uint32TimeOutCounter >= ADC__UINT32_TIME_OUT_RATE) || (GET_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADIF) == 0))
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	ab 81       	ldd	r26, Y+3	; 0x03
     f68:	bc 81       	ldd	r27, Y+4	; 0x04
     f6a:	80 35       	cpi	r24, 0x50	; 80
     f6c:	23 ec       	ldi	r18, 0xC3	; 195
     f6e:	92 07       	cpc	r25, r18
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	a2 07       	cpc	r26, r18
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	b2 07       	cpc	r27, r18
     f78:	58 f4       	brcc	.+22     	; 0xf90 <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0xd6>
     f7a:	e6 e2       	ldi	r30, 0x26	; 38
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	82 95       	swap	r24
     f82:	8f 70       	andi	r24, 0x0F	; 15
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	81 70       	andi	r24, 0x01	; 1
     f8a:	90 70       	andi	r25, 0x00	; 0
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	19 f4       	brne	.+6      	; 0xf96 <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0xdc>
                        {
                        		Local_CheckStausReturnValue =CHECK_FAIL;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	8d 83       	std	Y+5, r24	; 0x05
     f94:	12 c0       	rjmp	.+36     	; 0xfba <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0x100>
                        }
                        else
                        {
                          *Copy__Uint8DigitalValue = ADC_UINT16_ADCL_REG;
     f96:	e4 e2       	ldi	r30, 0x24	; 36
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	ef 81       	ldd	r30, Y+7	; 0x07
     fa0:	f8 85       	ldd	r31, Y+8	; 0x08
     fa2:	91 83       	std	Z+1, r25	; 0x01
     fa4:	80 83       	st	Z, r24
                          /* Clear Flag */
                          SET_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADIF);
     fa6:	a6 e2       	ldi	r26, 0x26	; 38
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e6 e2       	ldi	r30, 0x26	; 38
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 61       	ori	r24, 0x10	; 16
     fb2:	8c 93       	st	X, r24
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0x100>
                        }
             }
             else
             {
                Local_CheckStausReturnValue = CHECK_FAIL;                     
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	8d 83       	std	Y+5, r24	; 0x05
             }
             return Local_CheckStausReturnValue;
     fba:	8d 81       	ldd	r24, Y+5	; 0x05
             
}
     fbc:	28 96       	adiw	r28, 0x08	; 8
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <DIO_VoidInit>:

/* HAL */

/* Defination Of Function  */
Void DIO_VoidInit(Void)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62

        /* intial direction */

        DDRA__UINT8_REG = CONC(DIO__UINT8_PA7_INITIAL_DIRECTION, DIO__UINT8_PA6_INITIAL_DIRECTION, DIO__UINT8_PA5_INITIAL_DIRECTION, DIO__UINT8_PA4_INITIAL_DIRECTION, DIO__UINT8_PA3_INITIAL_DIRECTION, DIO__UINT8_PA2_INITIAL_DIRECTION, DIO__UINT8_PA1_INITIAL_DIRECTION, DIO__UINT8_PA0_INITIAL_DIRECTION);
     fd6:	ea e3       	ldi	r30, 0x3A	; 58
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	86 e0       	ldi	r24, 0x06	; 6
     fdc:	80 83       	st	Z, r24
        DDRB__UINT8_REG = CONC(DIO__UINT8_PB7_INITIAL_DIRECTION, DIO__UINT8_PB6_INITIAL_DIRECTION, DIO__UINT8_PB5_INITIAL_DIRECTION, DIO__UINT8_PB4_INITIAL_DIRECTION, DIO__UINT8_PB3_INITIAL_DIRECTION, DIO__UINT8_PB2_INITIAL_DIRECTION, DIO__UINT8_PB1_INITIAL_DIRECTION, DIO__UINT8_PB0_INITIAL_DIRECTION);
     fde:	e7 e3       	ldi	r30, 0x37	; 55
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	87 e0       	ldi	r24, 0x07	; 7
     fe4:	80 83       	st	Z, r24
        DDRC__UINT8_REG = CONC(DIO__UINT8_PC7_INITIAL_DIRECTION, DIO__UINT8_PC6_INITIAL_DIRECTION, DIO__UINT8_PC5_INITIAL_DIRECTION, DIO__UINT8_PC4_INITIAL_DIRECTION, DIO__UINT8_PC3_INITIAL_DIRECTION, DIO__UINT8_PC2_INITIAL_DIRECTION, DIO__UINT8_PC1_INITIAL_DIRECTION, DIO__UINT8_PC0_INITIAL_DIRECTION);
     fe6:	e4 e3       	ldi	r30, 0x34	; 52
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	8f e0       	ldi	r24, 0x0F	; 15
     fec:	80 83       	st	Z, r24
        DDRD__UINT8_REG = CONC(DIO__UINT8_PD7_INITIAL_DIRECTION, DIO__UINT8_PD6_INITIAL_DIRECTION, DIO__UINT8_PD5_INITIAL_DIRECTION, DIO__UINT8_PD4_INITIAL_DIRECTION, DIO__UINT8_PD3_INITIAL_DIRECTION, DIO__UINT8_PD2_INITIAL_DIRECTION, DIO__UINT8_PD1_INITIAL_DIRECTION, DIO__UINT8_PD0_INITIAL_DIRECTION);
     fee:	e1 e3       	ldi	r30, 0x31	; 49
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	8e ef       	ldi	r24, 0xFE	; 254
     ff4:	80 83       	st	Z, r24

        /* initial Value */

        PORTA__UINT8_REG = CONC(DIO__UINT8_PA7_INITIAL_VALUE, DIO__UINT8_PA6_INITIAL_VALUE, DIO__UINT8_PA5_INITIAL_VALUE, DIO__UINT8_PA4_INITIAL_VALUE, DIO__UINT8_PA3_INITIAL_VALUE, DIO__UINT8_PA2_INITIAL_VALUE, DIO__UINT8_PA1_INITIAL_VALUE, DIO__UINT8_PA0_INITIAL_VALUE);
     ff6:	eb e3       	ldi	r30, 0x3B	; 59
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	10 82       	st	Z, r1
        PORTB__UINT8_REG = CONC(DIO__UINT8_PB7_INITIAL_VALUE, DIO__UINT8_PB6_INITIAL_VALUE, DIO__UINT8_PB5_INITIAL_VALUE, DIO__UINT8_PB4_INITIAL_VALUE, DIO__UINT8_PB3_INITIAL_VALUE, DIO__UINT8_PB2_INITIAL_VALUE, DIO__UINT8_PB1_INITIAL_VALUE, DIO__UINT8_PB0_INITIAL_VALUE);
     ffc:	e8 e3       	ldi	r30, 0x38	; 56
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	10 82       	st	Z, r1
        PORTC__UINT8_REG = CONC(DIO__UINT8_PC7_INITIAL_VALUE, DIO__UINT8_PC6_INITIAL_VALUE, DIO__UINT8_PC5_INITIAL_VALUE, DIO__UINT8_PC4_INITIAL_VALUE, DIO__UINT8_PC3_INITIAL_VALUE, DIO__UINT8_PC2_INITIAL_VALUE, DIO__UINT8_PC1_INITIAL_VALUE, DIO__UINT8_PC0_INITIAL_VALUE);
    1002:	e5 e3       	ldi	r30, 0x35	; 53
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	10 82       	st	Z, r1
        PORTD__UINT8_REG = CONC(DIO__UINT8_PD7_INITIAL_VALUE, DIO__UINT8_PD6_INITIAL_VALUE, DIO__UINT8_PD5_INITIAL_VALUE, DIO__UINT8_PD4_INITIAL_VALUE, DIO__UINT8_PD3_INITIAL_VALUE, DIO__UINT8_PD2_INITIAL_VALUE, DIO__UINT8_PD1_INITIAL_VALUE, DIO__UINT8_PD0_INITIAL_VALUE);
    1008:	e2 e3       	ldi	r30, 0x32	; 50
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	10 82       	st	Z, r1
}
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <DIO__CheckStatusSetPinDirection>:

CheckStatus DIO__CheckStatusSetPinDirection(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 Copy__uint8PinDirection)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	2f 97       	sbiw	r28, 0x0f	; 15
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	8a 83       	std	Y+2, r24	; 0x02
    102a:	6b 83       	std	Y+3, r22	; 0x03
    102c:	4c 83       	std	Y+4, r20	; 0x04
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    102e:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pin  Direction
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && ((Copy__uint8PinDirection == DIO__UINT8_OUTPUT) || (Copy__uint8PinDirection == DIO__UINT8_INPUT)))
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	84 30       	cpi	r24, 0x04	; 4
    1034:	08 f0       	brcs	.+2      	; 0x1038 <DIO__CheckStatusSetPinDirection+0x24>
    1036:	0e c1       	rjmp	.+540    	; 0x1254 <DIO__CheckStatusSetPinDirection+0x240>
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	88 30       	cpi	r24, 0x08	; 8
    103c:	08 f0       	brcs	.+2      	; 0x1040 <DIO__CheckStatusSetPinDirection+0x2c>
    103e:	0a c1       	rjmp	.+532    	; 0x1254 <DIO__CheckStatusSetPinDirection+0x240>
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	21 f0       	breq	.+8      	; 0x104e <DIO__CheckStatusSetPinDirection+0x3a>
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	88 23       	and	r24, r24
    104a:	09 f0       	breq	.+2      	; 0x104e <DIO__CheckStatusSetPinDirection+0x3a>
    104c:	03 c1       	rjmp	.+518    	; 0x1254 <DIO__CheckStatusSetPinDirection+0x240>
        {
                switch (Copy__uint8PortId)
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	3f 87       	std	Y+15, r19	; 0x0f
    1056:	2e 87       	std	Y+14, r18	; 0x0e
    1058:	8e 85       	ldd	r24, Y+14	; 0x0e
    105a:	9f 85       	ldd	r25, Y+15	; 0x0f
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	91 05       	cpc	r25, r1
    1060:	09 f4       	brne	.+2      	; 0x1064 <DIO__CheckStatusSetPinDirection+0x50>
    1062:	4f c0       	rjmp	.+158    	; 0x1102 <DIO__CheckStatusSetPinDirection+0xee>
    1064:	2e 85       	ldd	r18, Y+14	; 0x0e
    1066:	3f 85       	ldd	r19, Y+15	; 0x0f
    1068:	22 30       	cpi	r18, 0x02	; 2
    106a:	31 05       	cpc	r19, r1
    106c:	2c f4       	brge	.+10     	; 0x1078 <DIO__CheckStatusSetPinDirection+0x64>
    106e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1070:	9f 85       	ldd	r25, Y+15	; 0x0f
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	71 f0       	breq	.+28     	; 0x1092 <DIO__CheckStatusSetPinDirection+0x7e>
    1076:	eb c0       	rjmp	.+470    	; 0x124e <DIO__CheckStatusSetPinDirection+0x23a>
    1078:	2e 85       	ldd	r18, Y+14	; 0x0e
    107a:	3f 85       	ldd	r19, Y+15	; 0x0f
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <DIO__CheckStatusSetPinDirection+0x70>
    1082:	77 c0       	rjmp	.+238    	; 0x1172 <DIO__CheckStatusSetPinDirection+0x15e>
    1084:	8e 85       	ldd	r24, Y+14	; 0x0e
    1086:	9f 85       	ldd	r25, Y+15	; 0x0f
    1088:	83 30       	cpi	r24, 0x03	; 3
    108a:	91 05       	cpc	r25, r1
    108c:	09 f4       	brne	.+2      	; 0x1090 <DIO__CheckStatusSetPinDirection+0x7c>
    108e:	a9 c0       	rjmp	.+338    	; 0x11e2 <DIO__CheckStatusSetPinDirection+0x1ce>
    1090:	de c0       	rjmp	.+444    	; 0x124e <DIO__CheckStatusSetPinDirection+0x23a>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PinDirection)
    1092:	8c 81       	ldd	r24, Y+4	; 0x04
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	3d 87       	std	Y+13, r19	; 0x0d
    109a:	2c 87       	std	Y+12, r18	; 0x0c
    109c:	8c 85       	ldd	r24, Y+12	; 0x0c
    109e:	9d 85       	ldd	r25, Y+13	; 0x0d
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	d1 f0       	breq	.+52     	; 0x10d8 <DIO__CheckStatusSetPinDirection+0xc4>
    10a4:	2c 85       	ldd	r18, Y+12	; 0x0c
    10a6:	3d 85       	ldd	r19, Y+13	; 0x0d
    10a8:	21 30       	cpi	r18, 0x01	; 1
    10aa:	31 05       	cpc	r19, r1
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <DIO__CheckStatusSetPinDirection+0x9c>
    10ae:	cf c0       	rjmp	.+414    	; 0x124e <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRA__UINT8_REG, Copy__uint8PinId);
    10b0:	aa e3       	ldi	r26, 0x3A	; 58
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	ea e3       	ldi	r30, 0x3A	; 58
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 2e       	mov	r0, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO__CheckStatusSetPinDirection+0xba>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	0a 94       	dec	r0
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO__CheckStatusSetPinDirection+0xb6>
    10d2:	84 2b       	or	r24, r20
    10d4:	8c 93       	st	X, r24
    10d6:	bb c0       	rjmp	.+374    	; 0x124e <DIO__CheckStatusSetPinDirection+0x23a>
                                break;

                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRA__UINT8_REG, Copy__uint8PinId);
    10d8:	aa e3       	ldi	r26, 0x3A	; 58
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	ea e3       	ldi	r30, 0x3A	; 58
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <DIO__CheckStatusSetPinDirection+0xe2>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <DIO__CheckStatusSetPinDirection+0xde>
    10fa:	80 95       	com	r24
    10fc:	84 23       	and	r24, r20
    10fe:	8c 93       	st	X, r24
    1100:	a6 c0       	rjmp	.+332    	; 0x124e <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PinDirection)
    1102:	8c 81       	ldd	r24, Y+4	; 0x04
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	3b 87       	std	Y+11, r19	; 0x0b
    110a:	2a 87       	std	Y+10, r18	; 0x0a
    110c:	8a 85       	ldd	r24, Y+10	; 0x0a
    110e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	d1 f0       	breq	.+52     	; 0x1148 <DIO__CheckStatusSetPinDirection+0x134>
    1114:	2a 85       	ldd	r18, Y+10	; 0x0a
    1116:	3b 85       	ldd	r19, Y+11	; 0x0b
    1118:	21 30       	cpi	r18, 0x01	; 1
    111a:	31 05       	cpc	r19, r1
    111c:	09 f0       	breq	.+2      	; 0x1120 <DIO__CheckStatusSetPinDirection+0x10c>
    111e:	97 c0       	rjmp	.+302    	; 0x124e <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRB__UINT8_REG, Copy__uint8PinId);
    1120:	a7 e3       	ldi	r26, 0x37	; 55
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e7 e3       	ldi	r30, 0x37	; 55
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO__CheckStatusSetPinDirection+0x12a>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO__CheckStatusSetPinDirection+0x126>
    1142:	84 2b       	or	r24, r20
    1144:	8c 93       	st	X, r24
    1146:	83 c0       	rjmp	.+262    	; 0x124e <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRB__UINT8_REG, Copy__uint8PinId);
    1148:	a7 e3       	ldi	r26, 0x37	; 55
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e7 e3       	ldi	r30, 0x37	; 55
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO__CheckStatusSetPinDirection+0x152>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO__CheckStatusSetPinDirection+0x14e>
    116a:	80 95       	com	r24
    116c:	84 23       	and	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	6e c0       	rjmp	.+220    	; 0x124e <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PinDirection)
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	39 87       	std	Y+9, r19	; 0x09
    117a:	28 87       	std	Y+8, r18	; 0x08
    117c:	88 85       	ldd	r24, Y+8	; 0x08
    117e:	99 85       	ldd	r25, Y+9	; 0x09
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	d1 f0       	breq	.+52     	; 0x11b8 <DIO__CheckStatusSetPinDirection+0x1a4>
    1184:	28 85       	ldd	r18, Y+8	; 0x08
    1186:	39 85       	ldd	r19, Y+9	; 0x09
    1188:	21 30       	cpi	r18, 0x01	; 1
    118a:	31 05       	cpc	r19, r1
    118c:	09 f0       	breq	.+2      	; 0x1190 <DIO__CheckStatusSetPinDirection+0x17c>
    118e:	5f c0       	rjmp	.+190    	; 0x124e <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRC__UINT8_REG, Copy__uint8PinId);
    1190:	a4 e3       	ldi	r26, 0x34	; 52
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e4 e3       	ldi	r30, 0x34	; 52
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO__CheckStatusSetPinDirection+0x19a>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO__CheckStatusSetPinDirection+0x196>
    11b2:	84 2b       	or	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	4b c0       	rjmp	.+150    	; 0x124e <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRC__UINT8_REG, Copy__uint8PinId);
    11b8:	a4 e3       	ldi	r26, 0x34	; 52
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e4 e3       	ldi	r30, 0x34	; 52
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO__CheckStatusSetPinDirection+0x1c2>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO__CheckStatusSetPinDirection+0x1be>
    11da:	80 95       	com	r24
    11dc:	84 23       	and	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	36 c0       	rjmp	.+108    	; 0x124e <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PinDirection)
    11e2:	8c 81       	ldd	r24, Y+4	; 0x04
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	3f 83       	std	Y+7, r19	; 0x07
    11ea:	2e 83       	std	Y+6, r18	; 0x06
    11ec:	8e 81       	ldd	r24, Y+6	; 0x06
    11ee:	9f 81       	ldd	r25, Y+7	; 0x07
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	c9 f0       	breq	.+50     	; 0x1226 <DIO__CheckStatusSetPinDirection+0x212>
    11f4:	2e 81       	ldd	r18, Y+6	; 0x06
    11f6:	3f 81       	ldd	r19, Y+7	; 0x07
    11f8:	21 30       	cpi	r18, 0x01	; 1
    11fa:	31 05       	cpc	r19, r1
    11fc:	41 f5       	brne	.+80     	; 0x124e <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRD__UINT8_REG, Copy__uint8PinId);
    11fe:	a1 e3       	ldi	r26, 0x31	; 49
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e1 e3       	ldi	r30, 0x31	; 49
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO__CheckStatusSetPinDirection+0x208>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO__CheckStatusSetPinDirection+0x204>
    1220:	84 2b       	or	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	14 c0       	rjmp	.+40     	; 0x124e <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRD__UINT8_REG, Copy__uint8PinId);
    1226:	a1 e3       	ldi	r26, 0x31	; 49
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e1 e3       	ldi	r30, 0x31	; 49
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO__CheckStatusSetPinDirection+0x230>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO__CheckStatusSetPinDirection+0x22c>
    1248:	80 95       	com	r24
    124a:	84 23       	and	r24, r20
    124c:	8c 93       	st	X, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    124e:	39 81       	ldd	r19, Y+1	; 0x01
    1250:	3d 83       	std	Y+5, r19	; 0x05
    1252:	04 c0       	rjmp	.+8      	; 0x125c <DIO__CheckStatusSetPinDirection+0x248>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	8d 83       	std	Y+5, r24	; 0x05
    125c:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    125e:	2f 96       	adiw	r28, 0x0f	; 15
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <DIO__CheckStatusSetPinValue>:

CheckStatus DIO__CheckStatusSetPinValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 Copy__uint8PinValue)
{
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	2f 97       	sbiw	r28, 0x0f	; 15
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	8a 83       	std	Y+2, r24	; 0x02
    1286:	6b 83       	std	Y+3, r22	; 0x03
    1288:	4c 83       	std	Y+4, r20	; 0x04
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    128a:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pin  Value 
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && ((Copy__uint8PinValue == DIO__UINT8_HIGH) || (Copy__uint8PinValue == DIO__UINT8_LOW)))
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	84 30       	cpi	r24, 0x04	; 4
    1290:	08 f0       	brcs	.+2      	; 0x1294 <DIO__CheckStatusSetPinValue+0x24>
    1292:	0e c1       	rjmp	.+540    	; 0x14b0 <DIO__CheckStatusSetPinValue+0x240>
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	88 30       	cpi	r24, 0x08	; 8
    1298:	08 f0       	brcs	.+2      	; 0x129c <DIO__CheckStatusSetPinValue+0x2c>
    129a:	0a c1       	rjmp	.+532    	; 0x14b0 <DIO__CheckStatusSetPinValue+0x240>
    129c:	8c 81       	ldd	r24, Y+4	; 0x04
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	21 f0       	breq	.+8      	; 0x12aa <DIO__CheckStatusSetPinValue+0x3a>
    12a2:	8c 81       	ldd	r24, Y+4	; 0x04
    12a4:	88 23       	and	r24, r24
    12a6:	09 f0       	breq	.+2      	; 0x12aa <DIO__CheckStatusSetPinValue+0x3a>
    12a8:	03 c1       	rjmp	.+518    	; 0x14b0 <DIO__CheckStatusSetPinValue+0x240>
        {
                switch (Copy__uint8PortId)
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	3f 87       	std	Y+15, r19	; 0x0f
    12b2:	2e 87       	std	Y+14, r18	; 0x0e
    12b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    12b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	91 05       	cpc	r25, r1
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <DIO__CheckStatusSetPinValue+0x50>
    12be:	4f c0       	rjmp	.+158    	; 0x135e <DIO__CheckStatusSetPinValue+0xee>
    12c0:	2e 85       	ldd	r18, Y+14	; 0x0e
    12c2:	3f 85       	ldd	r19, Y+15	; 0x0f
    12c4:	22 30       	cpi	r18, 0x02	; 2
    12c6:	31 05       	cpc	r19, r1
    12c8:	2c f4       	brge	.+10     	; 0x12d4 <DIO__CheckStatusSetPinValue+0x64>
    12ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    12cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	71 f0       	breq	.+28     	; 0x12ee <DIO__CheckStatusSetPinValue+0x7e>
    12d2:	eb c0       	rjmp	.+470    	; 0x14aa <DIO__CheckStatusSetPinValue+0x23a>
    12d4:	2e 85       	ldd	r18, Y+14	; 0x0e
    12d6:	3f 85       	ldd	r19, Y+15	; 0x0f
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	31 05       	cpc	r19, r1
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <DIO__CheckStatusSetPinValue+0x70>
    12de:	77 c0       	rjmp	.+238    	; 0x13ce <DIO__CheckStatusSetPinValue+0x15e>
    12e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    12e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    12e4:	83 30       	cpi	r24, 0x03	; 3
    12e6:	91 05       	cpc	r25, r1
    12e8:	09 f4       	brne	.+2      	; 0x12ec <DIO__CheckStatusSetPinValue+0x7c>
    12ea:	a9 c0       	rjmp	.+338    	; 0x143e <DIO__CheckStatusSetPinValue+0x1ce>
    12ec:	de c0       	rjmp	.+444    	; 0x14aa <DIO__CheckStatusSetPinValue+0x23a>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PinValue)
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	3d 87       	std	Y+13, r19	; 0x0d
    12f6:	2c 87       	std	Y+12, r18	; 0x0c
    12f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    12fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	d1 f0       	breq	.+52     	; 0x1334 <DIO__CheckStatusSetPinValue+0xc4>
    1300:	2c 85       	ldd	r18, Y+12	; 0x0c
    1302:	3d 85       	ldd	r19, Y+13	; 0x0d
    1304:	21 30       	cpi	r18, 0x01	; 1
    1306:	31 05       	cpc	r19, r1
    1308:	09 f0       	breq	.+2      	; 0x130c <DIO__CheckStatusSetPinValue+0x9c>
    130a:	cf c0       	rjmp	.+414    	; 0x14aa <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTA__UINT8_REG, Copy__uint8PinId);
    130c:	ab e3       	ldi	r26, 0x3B	; 59
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	eb e3       	ldi	r30, 0x3B	; 59
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO__CheckStatusSetPinValue+0xba>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <DIO__CheckStatusSetPinValue+0xb6>
    132e:	84 2b       	or	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	bb c0       	rjmp	.+374    	; 0x14aa <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTA__UINT8_REG, Copy__uint8PinId);
    1334:	ab e3       	ldi	r26, 0x3B	; 59
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	eb e3       	ldi	r30, 0x3B	; 59
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 2e       	mov	r0, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <DIO__CheckStatusSetPinValue+0xe2>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <DIO__CheckStatusSetPinValue+0xde>
    1356:	80 95       	com	r24
    1358:	84 23       	and	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	a6 c0       	rjmp	.+332    	; 0x14aa <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PinValue)
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	3b 87       	std	Y+11, r19	; 0x0b
    1366:	2a 87       	std	Y+10, r18	; 0x0a
    1368:	8a 85       	ldd	r24, Y+10	; 0x0a
    136a:	9b 85       	ldd	r25, Y+11	; 0x0b
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	d1 f0       	breq	.+52     	; 0x13a4 <DIO__CheckStatusSetPinValue+0x134>
    1370:	2a 85       	ldd	r18, Y+10	; 0x0a
    1372:	3b 85       	ldd	r19, Y+11	; 0x0b
    1374:	21 30       	cpi	r18, 0x01	; 1
    1376:	31 05       	cpc	r19, r1
    1378:	09 f0       	breq	.+2      	; 0x137c <DIO__CheckStatusSetPinValue+0x10c>
    137a:	97 c0       	rjmp	.+302    	; 0x14aa <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTB__UINT8_REG, Copy__uint8PinId);
    137c:	a8 e3       	ldi	r26, 0x38	; 56
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e8 e3       	ldi	r30, 0x38	; 56
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 2e       	mov	r0, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO__CheckStatusSetPinValue+0x12a>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 94       	dec	r0
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <DIO__CheckStatusSetPinValue+0x126>
    139e:	84 2b       	or	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	83 c0       	rjmp	.+262    	; 0x14aa <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTB__UINT8_REG, Copy__uint8PinId);
    13a4:	a8 e3       	ldi	r26, 0x38	; 56
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e8 e3       	ldi	r30, 0x38	; 56
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <DIO__CheckStatusSetPinValue+0x152>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <DIO__CheckStatusSetPinValue+0x14e>
    13c6:	80 95       	com	r24
    13c8:	84 23       	and	r24, r20
    13ca:	8c 93       	st	X, r24
    13cc:	6e c0       	rjmp	.+220    	; 0x14aa <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PinValue)
    13ce:	8c 81       	ldd	r24, Y+4	; 0x04
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	39 87       	std	Y+9, r19	; 0x09
    13d6:	28 87       	std	Y+8, r18	; 0x08
    13d8:	88 85       	ldd	r24, Y+8	; 0x08
    13da:	99 85       	ldd	r25, Y+9	; 0x09
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	d1 f0       	breq	.+52     	; 0x1414 <DIO__CheckStatusSetPinValue+0x1a4>
    13e0:	28 85       	ldd	r18, Y+8	; 0x08
    13e2:	39 85       	ldd	r19, Y+9	; 0x09
    13e4:	21 30       	cpi	r18, 0x01	; 1
    13e6:	31 05       	cpc	r19, r1
    13e8:	09 f0       	breq	.+2      	; 0x13ec <DIO__CheckStatusSetPinValue+0x17c>
    13ea:	5f c0       	rjmp	.+190    	; 0x14aa <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTC__UINT8_REG, Copy__uint8PinId);
    13ec:	a5 e3       	ldi	r26, 0x35	; 53
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e5 e3       	ldi	r30, 0x35	; 53
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	48 2f       	mov	r20, r24
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 2e       	mov	r0, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <DIO__CheckStatusSetPinValue+0x19a>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <DIO__CheckStatusSetPinValue+0x196>
    140e:	84 2b       	or	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	4b c0       	rjmp	.+150    	; 0x14aa <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTC__UINT8_REG, Copy__uint8PinId);
    1414:	a5 e3       	ldi	r26, 0x35	; 53
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e5 e3       	ldi	r30, 0x35	; 53
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <DIO__CheckStatusSetPinValue+0x1c2>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <DIO__CheckStatusSetPinValue+0x1be>
    1436:	80 95       	com	r24
    1438:	84 23       	and	r24, r20
    143a:	8c 93       	st	X, r24
    143c:	36 c0       	rjmp	.+108    	; 0x14aa <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PinValue)
    143e:	8c 81       	ldd	r24, Y+4	; 0x04
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	3f 83       	std	Y+7, r19	; 0x07
    1446:	2e 83       	std	Y+6, r18	; 0x06
    1448:	8e 81       	ldd	r24, Y+6	; 0x06
    144a:	9f 81       	ldd	r25, Y+7	; 0x07
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	c9 f0       	breq	.+50     	; 0x1482 <DIO__CheckStatusSetPinValue+0x212>
    1450:	2e 81       	ldd	r18, Y+6	; 0x06
    1452:	3f 81       	ldd	r19, Y+7	; 0x07
    1454:	21 30       	cpi	r18, 0x01	; 1
    1456:	31 05       	cpc	r19, r1
    1458:	41 f5       	brne	.+80     	; 0x14aa <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTD__UINT8_REG, Copy__uint8PinId);
    145a:	a2 e3       	ldi	r26, 0x32	; 50
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e2 e3       	ldi	r30, 0x32	; 50
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <DIO__CheckStatusSetPinValue+0x208>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <DIO__CheckStatusSetPinValue+0x204>
    147c:	84 2b       	or	r24, r20
    147e:	8c 93       	st	X, r24
    1480:	14 c0       	rjmp	.+40     	; 0x14aa <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTD__UINT8_REG, Copy__uint8PinId);
    1482:	a2 e3       	ldi	r26, 0x32	; 50
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e2 e3       	ldi	r30, 0x32	; 50
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <DIO__CheckStatusSetPinValue+0x230>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <DIO__CheckStatusSetPinValue+0x22c>
    14a4:	80 95       	com	r24
    14a6:	84 23       	and	r24, r20
    14a8:	8c 93       	st	X, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    14aa:	39 81       	ldd	r19, Y+1	; 0x01
    14ac:	3d 83       	std	Y+5, r19	; 0x05
    14ae:	04 c0       	rjmp	.+8      	; 0x14b8 <DIO__CheckStatusSetPinValue+0x248>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	8d 83       	std	Y+5, r24	; 0x05
    14b8:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    14ba:	2f 96       	adiw	r28, 0x0f	; 15
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <DIO__CheckStatusGetPinValue>:

CheckStatus DIO__CheckStatusGetPinValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 *Copy_p_uint8ReturnPinValue)
{
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	28 97       	sbiw	r28, 0x08	; 8
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	8a 83       	std	Y+2, r24	; 0x02
    14e2:	6b 83       	std	Y+3, r22	; 0x03
    14e4:	5d 83       	std	Y+5, r21	; 0x05
    14e6:	4c 83       	std	Y+4, r20	; 0x04

        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    14e8:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pointer != NULL
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && (Copy_p_uint8ReturnPinValue != NULL))
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	84 30       	cpi	r24, 0x04	; 4
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <DIO__CheckStatusGetPinValue+0x26>
    14f0:	ec c0       	rjmp	.+472    	; 0x16ca <DIO__CheckStatusGetPinValue+0x1fe>
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	88 30       	cpi	r24, 0x08	; 8
    14f6:	08 f0       	brcs	.+2      	; 0x14fa <DIO__CheckStatusGetPinValue+0x2e>
    14f8:	e8 c0       	rjmp	.+464    	; 0x16ca <DIO__CheckStatusGetPinValue+0x1fe>
    14fa:	8c 81       	ldd	r24, Y+4	; 0x04
    14fc:	9d 81       	ldd	r25, Y+5	; 0x05
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	09 f4       	brne	.+2      	; 0x1504 <DIO__CheckStatusGetPinValue+0x38>
    1502:	e3 c0       	rjmp	.+454    	; 0x16ca <DIO__CheckStatusGetPinValue+0x1fe>
        {
                switch (Copy__uint8PortId)
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	38 87       	std	Y+8, r19	; 0x08
    150c:	2f 83       	std	Y+7, r18	; 0x07
    150e:	4f 81       	ldd	r20, Y+7	; 0x07
    1510:	58 85       	ldd	r21, Y+8	; 0x08
    1512:	41 30       	cpi	r20, 0x01	; 1
    1514:	51 05       	cpc	r21, r1
    1516:	09 f4       	brne	.+2      	; 0x151a <DIO__CheckStatusGetPinValue+0x4e>
    1518:	48 c0       	rjmp	.+144    	; 0x15aa <DIO__CheckStatusGetPinValue+0xde>
    151a:	8f 81       	ldd	r24, Y+7	; 0x07
    151c:	98 85       	ldd	r25, Y+8	; 0x08
    151e:	82 30       	cpi	r24, 0x02	; 2
    1520:	91 05       	cpc	r25, r1
    1522:	34 f4       	brge	.+12     	; 0x1530 <DIO__CheckStatusGetPinValue+0x64>
    1524:	2f 81       	ldd	r18, Y+7	; 0x07
    1526:	38 85       	ldd	r19, Y+8	; 0x08
    1528:	21 15       	cp	r18, r1
    152a:	31 05       	cpc	r19, r1
    152c:	71 f0       	breq	.+28     	; 0x154a <DIO__CheckStatusGetPinValue+0x7e>
    152e:	ca c0       	rjmp	.+404    	; 0x16c4 <DIO__CheckStatusGetPinValue+0x1f8>
    1530:	4f 81       	ldd	r20, Y+7	; 0x07
    1532:	58 85       	ldd	r21, Y+8	; 0x08
    1534:	42 30       	cpi	r20, 0x02	; 2
    1536:	51 05       	cpc	r21, r1
    1538:	09 f4       	brne	.+2      	; 0x153c <DIO__CheckStatusGetPinValue+0x70>
    153a:	67 c0       	rjmp	.+206    	; 0x160a <DIO__CheckStatusGetPinValue+0x13e>
    153c:	8f 81       	ldd	r24, Y+7	; 0x07
    153e:	98 85       	ldd	r25, Y+8	; 0x08
    1540:	83 30       	cpi	r24, 0x03	; 3
    1542:	91 05       	cpc	r25, r1
    1544:	09 f4       	brne	.+2      	; 0x1548 <DIO__CheckStatusGetPinValue+0x7c>
    1546:	90 c0       	rjmp	.+288    	; 0x1668 <DIO__CheckStatusGetPinValue+0x19c>
    1548:	bd c0       	rjmp	.+378    	; 0x16c4 <DIO__CheckStatusGetPinValue+0x1f8>
                {
                case DIO__UINT8_PORTA:
                        if (GET_BIT(PINA__UINT8_REG, Copy__uint8PinId) == 0)
    154a:	e9 e3       	ldi	r30, 0x39	; 57
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	88 2f       	mov	r24, r24
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	a9 01       	movw	r20, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <DIO__CheckStatusGetPinValue+0x96>
    155e:	55 95       	asr	r21
    1560:	47 95       	ror	r20
    1562:	8a 95       	dec	r24
    1564:	e2 f7       	brpl	.-8      	; 0x155e <DIO__CheckStatusGetPinValue+0x92>
    1566:	ca 01       	movw	r24, r20
    1568:	81 70       	andi	r24, 0x01	; 1
    156a:	90 70       	andi	r25, 0x00	; 0
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	21 f4       	brne	.+8      	; 0x1578 <DIO__CheckStatusGetPinValue+0xac>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    1570:	ec 81       	ldd	r30, Y+4	; 0x04
    1572:	fd 81       	ldd	r31, Y+5	; 0x05
    1574:	10 82       	st	Z, r1
    1576:	a6 c0       	rjmp	.+332    	; 0x16c4 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINA__UINT8_REG, Copy__uint8PinId) != 0)
    1578:	e9 e3       	ldi	r30, 0x39	; 57
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	88 2f       	mov	r24, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	a9 01       	movw	r20, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO__CheckStatusGetPinValue+0xc4>
    158c:	55 95       	asr	r21
    158e:	47 95       	ror	r20
    1590:	8a 95       	dec	r24
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO__CheckStatusGetPinValue+0xc0>
    1594:	ca 01       	movw	r24, r20
    1596:	81 70       	andi	r24, 0x01	; 1
    1598:	90 70       	andi	r25, 0x00	; 0
    159a:	88 23       	and	r24, r24
    159c:	09 f4       	brne	.+2      	; 0x15a0 <DIO__CheckStatusGetPinValue+0xd4>
    159e:	92 c0       	rjmp	.+292    	; 0x16c4 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    15a0:	ec 81       	ldd	r30, Y+4	; 0x04
    15a2:	fd 81       	ldd	r31, Y+5	; 0x05
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	80 83       	st	Z, r24
    15a8:	8d c0       	rjmp	.+282    	; 0x16c4 <DIO__CheckStatusGetPinValue+0x1f8>
                                /* DO NOTHING */
                        }

                        break;
                case DIO__UINT8_PORTB:
                        if (GET_BIT(PINB__UINT8_REG, Copy__uint8PinId) == 0)
    15aa:	e6 e3       	ldi	r30, 0x36	; 54
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	88 2f       	mov	r24, r24
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	a9 01       	movw	r20, r18
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <DIO__CheckStatusGetPinValue+0xf6>
    15be:	55 95       	asr	r21
    15c0:	47 95       	ror	r20
    15c2:	8a 95       	dec	r24
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <DIO__CheckStatusGetPinValue+0xf2>
    15c6:	ca 01       	movw	r24, r20
    15c8:	81 70       	andi	r24, 0x01	; 1
    15ca:	90 70       	andi	r25, 0x00	; 0
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	21 f4       	brne	.+8      	; 0x15d8 <DIO__CheckStatusGetPinValue+0x10c>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    15d0:	ec 81       	ldd	r30, Y+4	; 0x04
    15d2:	fd 81       	ldd	r31, Y+5	; 0x05
    15d4:	10 82       	st	Z, r1
    15d6:	76 c0       	rjmp	.+236    	; 0x16c4 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINB__UINT8_REG, Copy__uint8PinId) != 0)
    15d8:	e6 e3       	ldi	r30, 0x36	; 54
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	88 2f       	mov	r24, r24
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	a9 01       	movw	r20, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <DIO__CheckStatusGetPinValue+0x124>
    15ec:	55 95       	asr	r21
    15ee:	47 95       	ror	r20
    15f0:	8a 95       	dec	r24
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <DIO__CheckStatusGetPinValue+0x120>
    15f4:	ca 01       	movw	r24, r20
    15f6:	81 70       	andi	r24, 0x01	; 1
    15f8:	90 70       	andi	r25, 0x00	; 0
    15fa:	88 23       	and	r24, r24
    15fc:	09 f4       	brne	.+2      	; 0x1600 <DIO__CheckStatusGetPinValue+0x134>
    15fe:	62 c0       	rjmp	.+196    	; 0x16c4 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    1600:	ec 81       	ldd	r30, Y+4	; 0x04
    1602:	fd 81       	ldd	r31, Y+5	; 0x05
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	80 83       	st	Z, r24
    1608:	5d c0       	rjmp	.+186    	; 0x16c4 <DIO__CheckStatusGetPinValue+0x1f8>

                        break;

                case DIO__UINT8_PORTC:

                        if (GET_BIT(PINC__UINT8_REG, Copy__uint8PinId) == 0)
    160a:	e3 e3       	ldi	r30, 0x33	; 51
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	88 2f       	mov	r24, r24
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a9 01       	movw	r20, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <DIO__CheckStatusGetPinValue+0x156>
    161e:	55 95       	asr	r21
    1620:	47 95       	ror	r20
    1622:	8a 95       	dec	r24
    1624:	e2 f7       	brpl	.-8      	; 0x161e <DIO__CheckStatusGetPinValue+0x152>
    1626:	ca 01       	movw	r24, r20
    1628:	81 70       	andi	r24, 0x01	; 1
    162a:	90 70       	andi	r25, 0x00	; 0
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	21 f4       	brne	.+8      	; 0x1638 <DIO__CheckStatusGetPinValue+0x16c>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    1630:	ec 81       	ldd	r30, Y+4	; 0x04
    1632:	fd 81       	ldd	r31, Y+5	; 0x05
    1634:	10 82       	st	Z, r1
    1636:	46 c0       	rjmp	.+140    	; 0x16c4 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINC__UINT8_REG, Copy__uint8PinId) != 0)
    1638:	e3 e3       	ldi	r30, 0x33	; 51
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	a9 01       	movw	r20, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <DIO__CheckStatusGetPinValue+0x184>
    164c:	55 95       	asr	r21
    164e:	47 95       	ror	r20
    1650:	8a 95       	dec	r24
    1652:	e2 f7       	brpl	.-8      	; 0x164c <DIO__CheckStatusGetPinValue+0x180>
    1654:	ca 01       	movw	r24, r20
    1656:	81 70       	andi	r24, 0x01	; 1
    1658:	90 70       	andi	r25, 0x00	; 0
    165a:	88 23       	and	r24, r24
    165c:	99 f1       	breq	.+102    	; 0x16c4 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    165e:	ec 81       	ldd	r30, Y+4	; 0x04
    1660:	fd 81       	ldd	r31, Y+5	; 0x05
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	80 83       	st	Z, r24
    1666:	2e c0       	rjmp	.+92     	; 0x16c4 <DIO__CheckStatusGetPinValue+0x1f8>
                                /* DO NOTHING */
                        }

                        break;
                case DIO__UINT8_PORTD:
                        if (GET_BIT(PIND__UINT8_REG, Copy__uint8PinId) == 0)
    1668:	e0 e3       	ldi	r30, 0x30	; 48
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	a9 01       	movw	r20, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <DIO__CheckStatusGetPinValue+0x1b4>
    167c:	55 95       	asr	r21
    167e:	47 95       	ror	r20
    1680:	8a 95       	dec	r24
    1682:	e2 f7       	brpl	.-8      	; 0x167c <DIO__CheckStatusGetPinValue+0x1b0>
    1684:	ca 01       	movw	r24, r20
    1686:	81 70       	andi	r24, 0x01	; 1
    1688:	90 70       	andi	r25, 0x00	; 0
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	21 f4       	brne	.+8      	; 0x1696 <DIO__CheckStatusGetPinValue+0x1ca>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    168e:	ec 81       	ldd	r30, Y+4	; 0x04
    1690:	fd 81       	ldd	r31, Y+5	; 0x05
    1692:	10 82       	st	Z, r1
    1694:	17 c0       	rjmp	.+46     	; 0x16c4 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PIND__UINT8_REG, Copy__uint8PinId) != 0)
    1696:	e0 e3       	ldi	r30, 0x30	; 48
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	88 2f       	mov	r24, r24
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	a9 01       	movw	r20, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <DIO__CheckStatusGetPinValue+0x1e2>
    16aa:	55 95       	asr	r21
    16ac:	47 95       	ror	r20
    16ae:	8a 95       	dec	r24
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <DIO__CheckStatusGetPinValue+0x1de>
    16b2:	ca 01       	movw	r24, r20
    16b4:	81 70       	andi	r24, 0x01	; 1
    16b6:	90 70       	andi	r25, 0x00	; 0
    16b8:	88 23       	and	r24, r24
    16ba:	21 f0       	breq	.+8      	; 0x16c4 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    16bc:	ec 81       	ldd	r30, Y+4	; 0x04
    16be:	fd 81       	ldd	r31, Y+5	; 0x05
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    16c4:	59 81       	ldd	r21, Y+1	; 0x01
    16c6:	5e 83       	std	Y+6, r21	; 0x06
    16c8:	04 c0       	rjmp	.+8      	; 0x16d2 <DIO__CheckStatusGetPinValue+0x206>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	8e 83       	std	Y+6, r24	; 0x06
    16d2:	8e 81       	ldd	r24, Y+6	; 0x06
        }
}
    16d4:	28 96       	adiw	r28, 0x08	; 8
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	de bf       	out	0x3e, r29	; 62
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <DIO__CheckStatusSetPortDirection>:

CheckStatus DIO__CheckStatusSetPortDirection(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PortDirection)
{
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	2e 97       	sbiw	r28, 0x0e	; 14
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	8a 83       	std	Y+2, r24	; 0x02
    16fc:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    16fe:	19 82       	std	Y+1, r1	; 0x01
        /* 
        Check 1-Valid Port Id
              2-Valid PORT diraction 
        */

        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && ((Copy__uint8PortDirection == DIO__UINT8_OUTPUT) || (Copy__uint8PortDirection == DIO__UINT8_INPUT)))
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	84 30       	cpi	r24, 0x04	; 4
    1704:	08 f0       	brcs	.+2      	; 0x1708 <DIO__CheckStatusSetPortDirection+0x22>
    1706:	89 c0       	rjmp	.+274    	; 0x181a <DIO__CheckStatusSetPortDirection+0x134>
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	21 f0       	breq	.+8      	; 0x1716 <DIO__CheckStatusSetPortDirection+0x30>
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	88 23       	and	r24, r24
    1712:	09 f0       	breq	.+2      	; 0x1716 <DIO__CheckStatusSetPortDirection+0x30>
    1714:	82 c0       	rjmp	.+260    	; 0x181a <DIO__CheckStatusSetPortDirection+0x134>
        {
                switch (Copy__uint8PortId)
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	3e 87       	std	Y+14, r19	; 0x0e
    171e:	2d 87       	std	Y+13, r18	; 0x0d
    1720:	8d 85       	ldd	r24, Y+13	; 0x0d
    1722:	9e 85       	ldd	r25, Y+14	; 0x0e
    1724:	81 30       	cpi	r24, 0x01	; 1
    1726:	91 05       	cpc	r25, r1
    1728:	71 f1       	breq	.+92     	; 0x1786 <DIO__CheckStatusSetPortDirection+0xa0>
    172a:	2d 85       	ldd	r18, Y+13	; 0x0d
    172c:	3e 85       	ldd	r19, Y+14	; 0x0e
    172e:	22 30       	cpi	r18, 0x02	; 2
    1730:	31 05       	cpc	r19, r1
    1732:	2c f4       	brge	.+10     	; 0x173e <DIO__CheckStatusSetPortDirection+0x58>
    1734:	8d 85       	ldd	r24, Y+13	; 0x0d
    1736:	9e 85       	ldd	r25, Y+14	; 0x0e
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	69 f0       	breq	.+26     	; 0x1756 <DIO__CheckStatusSetPortDirection+0x70>
    173c:	6b c0       	rjmp	.+214    	; 0x1814 <DIO__CheckStatusSetPortDirection+0x12e>
    173e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1740:	3e 85       	ldd	r19, Y+14	; 0x0e
    1742:	22 30       	cpi	r18, 0x02	; 2
    1744:	31 05       	cpc	r19, r1
    1746:	b9 f1       	breq	.+110    	; 0x17b6 <DIO__CheckStatusSetPortDirection+0xd0>
    1748:	8d 85       	ldd	r24, Y+13	; 0x0d
    174a:	9e 85       	ldd	r25, Y+14	; 0x0e
    174c:	83 30       	cpi	r24, 0x03	; 3
    174e:	91 05       	cpc	r25, r1
    1750:	09 f4       	brne	.+2      	; 0x1754 <DIO__CheckStatusSetPortDirection+0x6e>
    1752:	49 c0       	rjmp	.+146    	; 0x17e6 <DIO__CheckStatusSetPortDirection+0x100>
    1754:	5f c0       	rjmp	.+190    	; 0x1814 <DIO__CheckStatusSetPortDirection+0x12e>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PortDirection)
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	3c 87       	std	Y+12, r19	; 0x0c
    175e:	2b 87       	std	Y+11, r18	; 0x0b
    1760:	8b 85       	ldd	r24, Y+11	; 0x0b
    1762:	9c 85       	ldd	r25, Y+12	; 0x0c
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	31 f0       	breq	.+12     	; 0x1774 <DIO__CheckStatusSetPortDirection+0x8e>
    1768:	2b 85       	ldd	r18, Y+11	; 0x0b
    176a:	3c 85       	ldd	r19, Y+12	; 0x0c
    176c:	21 30       	cpi	r18, 0x01	; 1
    176e:	31 05       	cpc	r19, r1
    1770:	29 f0       	breq	.+10     	; 0x177c <DIO__CheckStatusSetPortDirection+0x96>
    1772:	50 c0       	rjmp	.+160    	; 0x1814 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTA__UINT8_REG = 0x00;
    1774:	eb e3       	ldi	r30, 0x3B	; 59
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	10 82       	st	Z, r1
    177a:	4c c0       	rjmp	.+152    	; 0x1814 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTA__UINT8_REG = 0xFF;
    177c:	eb e3       	ldi	r30, 0x3B	; 59
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	8f ef       	ldi	r24, 0xFF	; 255
    1782:	80 83       	st	Z, r24
    1784:	47 c0       	rjmp	.+142    	; 0x1814 <DIO__CheckStatusSetPortDirection+0x12e>
                                /* DO  NOTHING */
                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PortDirection)
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	3a 87       	std	Y+10, r19	; 0x0a
    178e:	29 87       	std	Y+9, r18	; 0x09
    1790:	89 85       	ldd	r24, Y+9	; 0x09
    1792:	9a 85       	ldd	r25, Y+10	; 0x0a
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	31 f0       	breq	.+12     	; 0x17a4 <DIO__CheckStatusSetPortDirection+0xbe>
    1798:	29 85       	ldd	r18, Y+9	; 0x09
    179a:	3a 85       	ldd	r19, Y+10	; 0x0a
    179c:	21 30       	cpi	r18, 0x01	; 1
    179e:	31 05       	cpc	r19, r1
    17a0:	29 f0       	breq	.+10     	; 0x17ac <DIO__CheckStatusSetPortDirection+0xc6>
    17a2:	38 c0       	rjmp	.+112    	; 0x1814 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTB__UINT8_REG = 0x00;
    17a4:	e8 e3       	ldi	r30, 0x38	; 56
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	10 82       	st	Z, r1
    17aa:	34 c0       	rjmp	.+104    	; 0x1814 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTB__UINT8_REG = 0xFF;
    17ac:	e8 e3       	ldi	r30, 0x38	; 56
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	8f ef       	ldi	r24, 0xFF	; 255
    17b2:	80 83       	st	Z, r24
    17b4:	2f c0       	rjmp	.+94     	; 0x1814 <DIO__CheckStatusSetPortDirection+0x12e>
                        }

                        break;

                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PortDirection)
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	38 87       	std	Y+8, r19	; 0x08
    17be:	2f 83       	std	Y+7, r18	; 0x07
    17c0:	8f 81       	ldd	r24, Y+7	; 0x07
    17c2:	98 85       	ldd	r25, Y+8	; 0x08
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	31 f0       	breq	.+12     	; 0x17d4 <DIO__CheckStatusSetPortDirection+0xee>
    17c8:	2f 81       	ldd	r18, Y+7	; 0x07
    17ca:	38 85       	ldd	r19, Y+8	; 0x08
    17cc:	21 30       	cpi	r18, 0x01	; 1
    17ce:	31 05       	cpc	r19, r1
    17d0:	29 f0       	breq	.+10     	; 0x17dc <DIO__CheckStatusSetPortDirection+0xf6>
    17d2:	20 c0       	rjmp	.+64     	; 0x1814 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTC__UINT8_REG = 0x00;
    17d4:	e5 e3       	ldi	r30, 0x35	; 53
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	10 82       	st	Z, r1
    17da:	1c c0       	rjmp	.+56     	; 0x1814 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTC__UINT8_REG = 0xFF;
    17dc:	e5 e3       	ldi	r30, 0x35	; 53
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	8f ef       	ldi	r24, 0xFF	; 255
    17e2:	80 83       	st	Z, r24
    17e4:	17 c0       	rjmp	.+46     	; 0x1814 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        }

                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PortDirection)
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	3e 83       	std	Y+6, r19	; 0x06
    17ee:	2d 83       	std	Y+5, r18	; 0x05
    17f0:	8d 81       	ldd	r24, Y+5	; 0x05
    17f2:	9e 81       	ldd	r25, Y+6	; 0x06
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	31 f0       	breq	.+12     	; 0x1804 <DIO__CheckStatusSetPortDirection+0x11e>
    17f8:	2d 81       	ldd	r18, Y+5	; 0x05
    17fa:	3e 81       	ldd	r19, Y+6	; 0x06
    17fc:	21 30       	cpi	r18, 0x01	; 1
    17fe:	31 05       	cpc	r19, r1
    1800:	29 f0       	breq	.+10     	; 0x180c <DIO__CheckStatusSetPortDirection+0x126>
    1802:	08 c0       	rjmp	.+16     	; 0x1814 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTD__UINT8_REG = 0x00;
    1804:	e2 e3       	ldi	r30, 0x32	; 50
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	10 82       	st	Z, r1
    180a:	04 c0       	rjmp	.+8      	; 0x1814 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTD__UINT8_REG = 0xFF;
    180c:	e2 e3       	ldi	r30, 0x32	; 50
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	8f ef       	ldi	r24, 0xFF	; 255
    1812:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1814:	39 81       	ldd	r19, Y+1	; 0x01
    1816:	3c 83       	std	Y+4, r19	; 0x04
    1818:	04 c0       	rjmp	.+8      	; 0x1822 <DIO__CheckStatusSetPortDirection+0x13c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	8c 83       	std	Y+4, r24	; 0x04
    1822:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    1824:	2e 96       	adiw	r28, 0x0e	; 14
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <DIO__CheckStatusSetPortValue>:

CheckStatus DIO__CheckStatusSetPortValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PortValue)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <DIO__CheckStatusSetPortValue+0x6>
    183c:	00 d0       	rcall	.+0      	; 0x183e <DIO__CheckStatusSetPortValue+0x8>
    183e:	00 d0       	rcall	.+0      	; 0x1840 <DIO__CheckStatusSetPortValue+0xa>
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	8a 83       	std	Y+2, r24	; 0x02
    1846:	6b 83       	std	Y+3, r22	; 0x03

        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    1848:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
               
        */
        if (Copy__uint8PortId <= DIO__UINT8_PORTD)
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	84 30       	cpi	r24, 0x04	; 4
    184e:	a8 f5       	brcc	.+106    	; 0x18ba <DIO__CheckStatusSetPortValue+0x84>
        {
                switch (Copy__uint8PortId)
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	3e 83       	std	Y+6, r19	; 0x06
    1858:	2d 83       	std	Y+5, r18	; 0x05
    185a:	8d 81       	ldd	r24, Y+5	; 0x05
    185c:	9e 81       	ldd	r25, Y+6	; 0x06
    185e:	81 30       	cpi	r24, 0x01	; 1
    1860:	91 05       	cpc	r25, r1
    1862:	d1 f0       	breq	.+52     	; 0x1898 <DIO__CheckStatusSetPortValue+0x62>
    1864:	2d 81       	ldd	r18, Y+5	; 0x05
    1866:	3e 81       	ldd	r19, Y+6	; 0x06
    1868:	22 30       	cpi	r18, 0x02	; 2
    186a:	31 05       	cpc	r19, r1
    186c:	2c f4       	brge	.+10     	; 0x1878 <DIO__CheckStatusSetPortValue+0x42>
    186e:	8d 81       	ldd	r24, Y+5	; 0x05
    1870:	9e 81       	ldd	r25, Y+6	; 0x06
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	61 f0       	breq	.+24     	; 0x188e <DIO__CheckStatusSetPortValue+0x58>
    1876:	1e c0       	rjmp	.+60     	; 0x18b4 <DIO__CheckStatusSetPortValue+0x7e>
    1878:	2d 81       	ldd	r18, Y+5	; 0x05
    187a:	3e 81       	ldd	r19, Y+6	; 0x06
    187c:	22 30       	cpi	r18, 0x02	; 2
    187e:	31 05       	cpc	r19, r1
    1880:	81 f0       	breq	.+32     	; 0x18a2 <DIO__CheckStatusSetPortValue+0x6c>
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	9e 81       	ldd	r25, Y+6	; 0x06
    1886:	83 30       	cpi	r24, 0x03	; 3
    1888:	91 05       	cpc	r25, r1
    188a:	81 f0       	breq	.+32     	; 0x18ac <DIO__CheckStatusSetPortValue+0x76>
    188c:	13 c0       	rjmp	.+38     	; 0x18b4 <DIO__CheckStatusSetPortValue+0x7e>
                {
                case DIO__UINT8_PORTA:
                        PORTA__UINT8_REG = Copy__uint8PortValue;
    188e:	eb e3       	ldi	r30, 0x3B	; 59
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	80 83       	st	Z, r24
    1896:	0e c0       	rjmp	.+28     	; 0x18b4 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTB:
                        PORTB__UINT8_REG = Copy__uint8PortValue;
    1898:	e8 e3       	ldi	r30, 0x38	; 56
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	80 83       	st	Z, r24
    18a0:	09 c0       	rjmp	.+18     	; 0x18b4 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTC:
                        PORTC__UINT8_REG = Copy__uint8PortValue;
    18a2:	e5 e3       	ldi	r30, 0x35	; 53
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	80 83       	st	Z, r24
    18aa:	04 c0       	rjmp	.+8      	; 0x18b4 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTD:
                        PORTD__UINT8_REG = Copy__uint8PortValue;
    18ac:	e2 e3       	ldi	r30, 0x32	; 50
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    18b4:	99 81       	ldd	r25, Y+1	; 0x01
    18b6:	9c 83       	std	Y+4, r25	; 0x04
    18b8:	04 c0       	rjmp	.+8      	; 0x18c2 <DIO__CheckStatusSetPortValue+0x8c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    18be:	29 81       	ldd	r18, Y+1	; 0x01
    18c0:	2c 83       	std	Y+4, r18	; 0x04
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    18c4:	26 96       	adiw	r28, 0x06	; 6
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <DIO__CheckStatusGetPortValue>:

CheckStatus DIO__CheckStatusGetPortValue(_uint8 Copy__uint8PortId, _uint8 *Copy_p_uint8ReturnPortValue)
{
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	27 97       	sbiw	r28, 0x07	; 7
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	de bf       	out	0x3e, r29	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	cd bf       	out	0x3d, r28	; 61
    18ea:	8a 83       	std	Y+2, r24	; 0x02
    18ec:	7c 83       	std	Y+4, r23	; 0x04
    18ee:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    18f0:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid Pointer != NULL
               
        */
        if (Copy_p_uint8ReturnPortValue != NULL)
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	9c 81       	ldd	r25, Y+4	; 0x04
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	e9 f1       	breq	.+122    	; 0x1974 <DIO__CheckStatusGetPortValue+0x9e>
        {
                switch (Copy__uint8PortId)
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	3f 83       	std	Y+7, r19	; 0x07
    1902:	2e 83       	std	Y+6, r18	; 0x06
    1904:	8e 81       	ldd	r24, Y+6	; 0x06
    1906:	9f 81       	ldd	r25, Y+7	; 0x07
    1908:	81 30       	cpi	r24, 0x01	; 1
    190a:	91 05       	cpc	r25, r1
    190c:	e1 f0       	breq	.+56     	; 0x1946 <DIO__CheckStatusGetPortValue+0x70>
    190e:	2e 81       	ldd	r18, Y+6	; 0x06
    1910:	3f 81       	ldd	r19, Y+7	; 0x07
    1912:	22 30       	cpi	r18, 0x02	; 2
    1914:	31 05       	cpc	r19, r1
    1916:	2c f4       	brge	.+10     	; 0x1922 <DIO__CheckStatusGetPortValue+0x4c>
    1918:	8e 81       	ldd	r24, Y+6	; 0x06
    191a:	9f 81       	ldd	r25, Y+7	; 0x07
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	61 f0       	breq	.+24     	; 0x1938 <DIO__CheckStatusGetPortValue+0x62>
    1920:	26 c0       	rjmp	.+76     	; 0x196e <DIO__CheckStatusGetPortValue+0x98>
    1922:	2e 81       	ldd	r18, Y+6	; 0x06
    1924:	3f 81       	ldd	r19, Y+7	; 0x07
    1926:	22 30       	cpi	r18, 0x02	; 2
    1928:	31 05       	cpc	r19, r1
    192a:	a1 f0       	breq	.+40     	; 0x1954 <DIO__CheckStatusGetPortValue+0x7e>
    192c:	8e 81       	ldd	r24, Y+6	; 0x06
    192e:	9f 81       	ldd	r25, Y+7	; 0x07
    1930:	83 30       	cpi	r24, 0x03	; 3
    1932:	91 05       	cpc	r25, r1
    1934:	b1 f0       	breq	.+44     	; 0x1962 <DIO__CheckStatusGetPortValue+0x8c>
    1936:	1b c0       	rjmp	.+54     	; 0x196e <DIO__CheckStatusGetPortValue+0x98>
                {
                case DIO__UINT8_PORTA:
                        *Copy_p_uint8ReturnPortValue = PINA__UINT8_REG;
    1938:	e9 e3       	ldi	r30, 0x39	; 57
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	eb 81       	ldd	r30, Y+3	; 0x03
    1940:	fc 81       	ldd	r31, Y+4	; 0x04
    1942:	80 83       	st	Z, r24
    1944:	14 c0       	rjmp	.+40     	; 0x196e <DIO__CheckStatusGetPortValue+0x98>
                        break;
                case DIO__UINT8_PORTB:
                        *Copy_p_uint8ReturnPortValue = PINB__UINT8_REG;
    1946:	e6 e3       	ldi	r30, 0x36	; 54
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	eb 81       	ldd	r30, Y+3	; 0x03
    194e:	fc 81       	ldd	r31, Y+4	; 0x04
    1950:	80 83       	st	Z, r24
    1952:	0d c0       	rjmp	.+26     	; 0x196e <DIO__CheckStatusGetPortValue+0x98>

                        break;
                case DIO__UINT8_PORTC:
                        *Copy_p_uint8ReturnPortValue = PINC__UINT8_REG;
    1954:	e3 e3       	ldi	r30, 0x33	; 51
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	eb 81       	ldd	r30, Y+3	; 0x03
    195c:	fc 81       	ldd	r31, Y+4	; 0x04
    195e:	80 83       	st	Z, r24
    1960:	06 c0       	rjmp	.+12     	; 0x196e <DIO__CheckStatusGetPortValue+0x98>
                        break;
                case DIO__UINT8_PORTD:
                        *Copy_p_uint8ReturnPortValue = PIND__UINT8_REG;
    1962:	e0 e3       	ldi	r30, 0x30	; 48
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	eb 81       	ldd	r30, Y+3	; 0x03
    196a:	fc 81       	ldd	r31, Y+4	; 0x04
    196c:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    196e:	99 81       	ldd	r25, Y+1	; 0x01
    1970:	9d 83       	std	Y+5, r25	; 0x05
    1972:	04 c0       	rjmp	.+8      	; 0x197c <DIO__CheckStatusGetPortValue+0xa6>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    1978:	29 81       	ldd	r18, Y+1	; 0x01
    197a:	2d 83       	std	Y+5, r18	; 0x05
    197c:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    197e:	27 96       	adiw	r28, 0x07	; 7
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <LCD_VoidInit>:
                                     LCD_A_UINT8CHAR6,
                                     LCD_A_UINT8CHAR7,
                                     LCD_A_UINT8CHAR8};
/* Defination Of Function  */
Void LCD_VoidInit(Void)
{
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	cc 54       	subi	r28, 0x4C	; 76
    199e:	d0 40       	sbci	r29, 0x00	; 0
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	f8 94       	cli
    19a4:	de bf       	out	0x3e, r29	; 62
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	cd bf       	out	0x3d, r28	; 61
    19aa:	fe 01       	movw	r30, r28
    19ac:	e7 5b       	subi	r30, 0xB7	; 183
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	ac e0       	ldi	r26, 0x0C	; 12
    19b6:	b2 e4       	ldi	r27, 0x42	; 66
    19b8:	80 83       	st	Z, r24
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	a2 83       	std	Z+2, r26	; 0x02
    19be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c0:	8e 01       	movw	r16, r28
    19c2:	0b 5b       	subi	r16, 0xBB	; 187
    19c4:	1f 4f       	sbci	r17, 0xFF	; 255
    19c6:	fe 01       	movw	r30, r28
    19c8:	e7 5b       	subi	r30, 0xB7	; 183
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	60 81       	ld	r22, Z
    19ce:	71 81       	ldd	r23, Z+1	; 0x01
    19d0:	82 81       	ldd	r24, Z+2	; 0x02
    19d2:	93 81       	ldd	r25, Z+3	; 0x03
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	4a ef       	ldi	r20, 0xFA	; 250
    19da:	54 e4       	ldi	r21, 0x44	; 68
    19dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	f8 01       	movw	r30, r16
    19e6:	80 83       	st	Z, r24
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	a2 83       	std	Z+2, r26	; 0x02
    19ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19ee:	fe 01       	movw	r30, r28
    19f0:	eb 5b       	subi	r30, 0xBB	; 187
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	60 81       	ld	r22, Z
    19f6:	71 81       	ldd	r23, Z+1	; 0x01
    19f8:	82 81       	ldd	r24, Z+2	; 0x02
    19fa:	93 81       	ldd	r25, Z+3	; 0x03
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e8       	ldi	r20, 0x80	; 128
    1a02:	5f e3       	ldi	r21, 0x3F	; 63
    1a04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a08:	88 23       	and	r24, r24
    1a0a:	44 f4       	brge	.+16     	; 0x1a1c <LCD_VoidInit+0x8c>
		__ticks = 1;
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	ed 5b       	subi	r30, 0xBD	; 189
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	91 83       	std	Z+1, r25	; 0x01
    1a18:	80 83       	st	Z, r24
    1a1a:	64 c0       	rjmp	.+200    	; 0x1ae4 <LCD_VoidInit+0x154>
	else if (__tmp > 65535)
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	eb 5b       	subi	r30, 0xBB	; 187
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	60 81       	ld	r22, Z
    1a24:	71 81       	ldd	r23, Z+1	; 0x01
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	93 81       	ldd	r25, Z+3	; 0x03
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	3f ef       	ldi	r19, 0xFF	; 255
    1a2e:	4f e7       	ldi	r20, 0x7F	; 127
    1a30:	57 e4       	ldi	r21, 0x47	; 71
    1a32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a36:	18 16       	cp	r1, r24
    1a38:	0c f0       	brlt	.+2      	; 0x1a3c <LCD_VoidInit+0xac>
    1a3a:	43 c0       	rjmp	.+134    	; 0x1ac2 <LCD_VoidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	e7 5b       	subi	r30, 0xB7	; 183
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	60 81       	ld	r22, Z
    1a44:	71 81       	ldd	r23, Z+1	; 0x01
    1a46:	82 81       	ldd	r24, Z+2	; 0x02
    1a48:	93 81       	ldd	r25, Z+3	; 0x03
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e2       	ldi	r20, 0x20	; 32
    1a50:	51 e4       	ldi	r21, 0x41	; 65
    1a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	8e 01       	movw	r16, r28
    1a5c:	0d 5b       	subi	r16, 0xBD	; 189
    1a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a60:	bc 01       	movw	r22, r24
    1a62:	cd 01       	movw	r24, r26
    1a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	f8 01       	movw	r30, r16
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	80 83       	st	Z, r24
    1a72:	1f c0       	rjmp	.+62     	; 0x1ab2 <LCD_VoidInit+0x122>
    1a74:	fe 01       	movw	r30, r28
    1a76:	ef 5b       	subi	r30, 0xBF	; 191
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	88 ec       	ldi	r24, 0xC8	; 200
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	91 83       	std	Z+1, r25	; 0x01
    1a80:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a82:	fe 01       	movw	r30, r28
    1a84:	ef 5b       	subi	r30, 0xBF	; 191
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 81       	ld	r24, Z
    1a8a:	91 81       	ldd	r25, Z+1	; 0x01
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_VoidInit+0xfc>
    1a90:	fe 01       	movw	r30, r28
    1a92:	ef 5b       	subi	r30, 0xBF	; 191
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	91 83       	std	Z+1, r25	; 0x01
    1a98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9a:	de 01       	movw	r26, r28
    1a9c:	ad 5b       	subi	r26, 0xBD	; 189
    1a9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	ed 5b       	subi	r30, 0xBD	; 189
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	80 81       	ld	r24, Z
    1aa8:	91 81       	ldd	r25, Z+1	; 0x01
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	11 96       	adiw	r26, 0x01	; 1
    1aae:	9c 93       	st	X, r25
    1ab0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	ed 5b       	subi	r30, 0xBD	; 189
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	80 81       	ld	r24, Z
    1aba:	91 81       	ldd	r25, Z+1	; 0x01
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	d1 f6       	brne	.-76     	; 0x1a74 <LCD_VoidInit+0xe4>
    1ac0:	24 c0       	rjmp	.+72     	; 0x1b0a <LCD_VoidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac2:	8e 01       	movw	r16, r28
    1ac4:	0d 5b       	subi	r16, 0xBD	; 189
    1ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac8:	fe 01       	movw	r30, r28
    1aca:	eb 5b       	subi	r30, 0xBB	; 187
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	60 81       	ld	r22, Z
    1ad0:	71 81       	ldd	r23, Z+1	; 0x01
    1ad2:	82 81       	ldd	r24, Z+2	; 0x02
    1ad4:	93 81       	ldd	r25, Z+3	; 0x03
    1ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	f8 01       	movw	r30, r16
    1ae0:	91 83       	std	Z+1, r25	; 0x01
    1ae2:	80 83       	st	Z, r24
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	ed 5b       	subi	r30, 0xBD	; 189
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	80 81       	ld	r24, Z
    1aec:	91 81       	ldd	r25, Z+1	; 0x01
    1aee:	fe 01       	movw	r30, r28
    1af0:	ff 96       	adiw	r30, 0x3f	; 63
    1af2:	91 83       	std	Z+1, r25	; 0x01
    1af4:	80 83       	st	Z, r24
    1af6:	fe 01       	movw	r30, r28
    1af8:	ff 96       	adiw	r30, 0x3f	; 63
    1afa:	80 81       	ld	r24, Z
    1afc:	91 81       	ldd	r25, Z+1	; 0x01
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <LCD_VoidInit+0x16e>
    1b02:	fe 01       	movw	r30, r28
    1b04:	ff 96       	adiw	r30, 0x3f	; 63
    1b06:	91 83       	std	Z+1, r25	; 0x01
    1b08:	80 83       	st	Z, r24

        _delay_ms(35);
        /* Function Set Cmnd 0b00111000*/

        LCD_CheckStatusSendCmnd(0b00111000);
    1b0a:	88 e3       	ldi	r24, 0x38	; 56
    1b0c:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_CheckStatusSendCmnd>
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a0 e2       	ldi	r26, 0x20	; 32
    1b16:	b2 e4       	ldi	r27, 0x42	; 66
    1b18:	8b af       	std	Y+59, r24	; 0x3b
    1b1a:	9c af       	std	Y+60, r25	; 0x3c
    1b1c:	ad af       	std	Y+61, r26	; 0x3d
    1b1e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b20:	6b ad       	ldd	r22, Y+59	; 0x3b
    1b22:	7c ad       	ldd	r23, Y+60	; 0x3c
    1b24:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b26:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b28:	2b ea       	ldi	r18, 0xAB	; 171
    1b2a:	3a ea       	ldi	r19, 0xAA	; 170
    1b2c:	4a e2       	ldi	r20, 0x2A	; 42
    1b2e:	50 e4       	ldi	r21, 0x40	; 64
    1b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	8f ab       	std	Y+55, r24	; 0x37
    1b3a:	98 af       	std	Y+56, r25	; 0x38
    1b3c:	a9 af       	std	Y+57, r26	; 0x39
    1b3e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1b40:	6f a9       	ldd	r22, Y+55	; 0x37
    1b42:	78 ad       	ldd	r23, Y+56	; 0x38
    1b44:	89 ad       	ldd	r24, Y+57	; 0x39
    1b46:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e8       	ldi	r20, 0x80	; 128
    1b4e:	5f e3       	ldi	r21, 0x3F	; 63
    1b50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b54:	88 23       	and	r24, r24
    1b56:	1c f4       	brge	.+6      	; 0x1b5e <LCD_VoidInit+0x1ce>
		__ticks = 1;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	8e ab       	std	Y+54, r24	; 0x36
    1b5c:	91 c0       	rjmp	.+290    	; 0x1c80 <LCD_VoidInit+0x2f0>
	else if (__tmp > 255)
    1b5e:	6f a9       	ldd	r22, Y+55	; 0x37
    1b60:	78 ad       	ldd	r23, Y+56	; 0x38
    1b62:	89 ad       	ldd	r24, Y+57	; 0x39
    1b64:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	4f e7       	ldi	r20, 0x7F	; 127
    1b6c:	53 e4       	ldi	r21, 0x43	; 67
    1b6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b72:	18 16       	cp	r1, r24
    1b74:	0c f0       	brlt	.+2      	; 0x1b78 <LCD_VoidInit+0x1e8>
    1b76:	7b c0       	rjmp	.+246    	; 0x1c6e <LCD_VoidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1b78:	6b ad       	ldd	r22, Y+59	; 0x3b
    1b7a:	7c ad       	ldd	r23, Y+60	; 0x3c
    1b7c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b7e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	4a e7       	ldi	r20, 0x7A	; 122
    1b86:	54 e4       	ldi	r21, 0x44	; 68
    1b88:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	8a ab       	std	Y+50, r24	; 0x32
    1b92:	9b ab       	std	Y+51, r25	; 0x33
    1b94:	ac ab       	std	Y+52, r26	; 0x34
    1b96:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b98:	6a a9       	ldd	r22, Y+50	; 0x32
    1b9a:	7b a9       	ldd	r23, Y+51	; 0x33
    1b9c:	8c a9       	ldd	r24, Y+52	; 0x34
    1b9e:	9d a9       	ldd	r25, Y+53	; 0x35
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	4a ef       	ldi	r20, 0xFA	; 250
    1ba6:	54 e4       	ldi	r21, 0x44	; 68
    1ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	8e a7       	std	Y+46, r24	; 0x2e
    1bb2:	9f a7       	std	Y+47, r25	; 0x2f
    1bb4:	a8 ab       	std	Y+48, r26	; 0x30
    1bb6:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1bb8:	6e a5       	ldd	r22, Y+46	; 0x2e
    1bba:	7f a5       	ldd	r23, Y+47	; 0x2f
    1bbc:	88 a9       	ldd	r24, Y+48	; 0x30
    1bbe:	99 a9       	ldd	r25, Y+49	; 0x31
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e8       	ldi	r20, 0x80	; 128
    1bc6:	5f e3       	ldi	r21, 0x3F	; 63
    1bc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bcc:	88 23       	and	r24, r24
    1bce:	2c f4       	brge	.+10     	; 0x1bda <LCD_VoidInit+0x24a>
		__ticks = 1;
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	9d a7       	std	Y+45, r25	; 0x2d
    1bd6:	8c a7       	std	Y+44, r24	; 0x2c
    1bd8:	3f c0       	rjmp	.+126    	; 0x1c58 <LCD_VoidInit+0x2c8>
	else if (__tmp > 65535)
    1bda:	6e a5       	ldd	r22, Y+46	; 0x2e
    1bdc:	7f a5       	ldd	r23, Y+47	; 0x2f
    1bde:	88 a9       	ldd	r24, Y+48	; 0x30
    1be0:	99 a9       	ldd	r25, Y+49	; 0x31
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	3f ef       	ldi	r19, 0xFF	; 255
    1be6:	4f e7       	ldi	r20, 0x7F	; 127
    1be8:	57 e4       	ldi	r21, 0x47	; 71
    1bea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bee:	18 16       	cp	r1, r24
    1bf0:	4c f5       	brge	.+82     	; 0x1c44 <LCD_VoidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf2:	6a a9       	ldd	r22, Y+50	; 0x32
    1bf4:	7b a9       	ldd	r23, Y+51	; 0x33
    1bf6:	8c a9       	ldd	r24, Y+52	; 0x34
    1bf8:	9d a9       	ldd	r25, Y+53	; 0x35
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e2       	ldi	r20, 0x20	; 32
    1c00:	51 e4       	ldi	r21, 0x41	; 65
    1c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	bc 01       	movw	r22, r24
    1c0c:	cd 01       	movw	r24, r26
    1c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	9d a7       	std	Y+45, r25	; 0x2d
    1c18:	8c a7       	std	Y+44, r24	; 0x2c
    1c1a:	0f c0       	rjmp	.+30     	; 0x1c3a <LCD_VoidInit+0x2aa>
    1c1c:	88 ec       	ldi	r24, 0xC8	; 200
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	9b a7       	std	Y+43, r25	; 0x2b
    1c22:	8a a7       	std	Y+42, r24	; 0x2a
    1c24:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c26:	9b a5       	ldd	r25, Y+43	; 0x2b
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <LCD_VoidInit+0x298>
    1c2c:	9b a7       	std	Y+43, r25	; 0x2b
    1c2e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c30:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c32:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	9d a7       	std	Y+45, r25	; 0x2d
    1c38:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c3c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	69 f7       	brne	.-38     	; 0x1c1c <LCD_VoidInit+0x28c>
    1c42:	24 c0       	rjmp	.+72     	; 0x1c8c <LCD_VoidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c44:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c46:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c48:	88 a9       	ldd	r24, Y+48	; 0x30
    1c4a:	99 a9       	ldd	r25, Y+49	; 0x31
    1c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	9d a7       	std	Y+45, r25	; 0x2d
    1c56:	8c a7       	std	Y+44, r24	; 0x2c
    1c58:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c5a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c5c:	99 a7       	std	Y+41, r25	; 0x29
    1c5e:	88 a7       	std	Y+40, r24	; 0x28
    1c60:	88 a5       	ldd	r24, Y+40	; 0x28
    1c62:	99 a5       	ldd	r25, Y+41	; 0x29
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	f1 f7       	brne	.-4      	; 0x1c64 <LCD_VoidInit+0x2d4>
    1c68:	99 a7       	std	Y+41, r25	; 0x29
    1c6a:	88 a7       	std	Y+40, r24	; 0x28
    1c6c:	0f c0       	rjmp	.+30     	; 0x1c8c <LCD_VoidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c6e:	6f a9       	ldd	r22, Y+55	; 0x37
    1c70:	78 ad       	ldd	r23, Y+56	; 0x38
    1c72:	89 ad       	ldd	r24, Y+57	; 0x39
    1c74:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	8e ab       	std	Y+54, r24	; 0x36
    1c80:	8e a9       	ldd	r24, Y+54	; 0x36
    1c82:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c84:	8f a1       	ldd	r24, Y+39	; 0x27
    1c86:	8a 95       	dec	r24
    1c88:	f1 f7       	brne	.-4      	; 0x1c86 <LCD_VoidInit+0x2f6>
    1c8a:	8f a3       	std	Y+39, r24	; 0x27
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00001111);
    1c8c:	8f e0       	ldi	r24, 0x0F	; 15
    1c8e:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_CheckStatusSendCmnd>
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a0 e2       	ldi	r26, 0x20	; 32
    1c98:	b2 e4       	ldi	r27, 0x42	; 66
    1c9a:	8b a3       	std	Y+35, r24	; 0x23
    1c9c:	9c a3       	std	Y+36, r25	; 0x24
    1c9e:	ad a3       	std	Y+37, r26	; 0x25
    1ca0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ca2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ca4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ca6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ca8:	9e a1       	ldd	r25, Y+38	; 0x26
    1caa:	2b ea       	ldi	r18, 0xAB	; 171
    1cac:	3a ea       	ldi	r19, 0xAA	; 170
    1cae:	4a e2       	ldi	r20, 0x2A	; 42
    1cb0:	50 e4       	ldi	r21, 0x40	; 64
    1cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	8f 8f       	std	Y+31, r24	; 0x1f
    1cbc:	98 a3       	std	Y+32, r25	; 0x20
    1cbe:	a9 a3       	std	Y+33, r26	; 0x21
    1cc0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1cc2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1cc4:	78 a1       	ldd	r23, Y+32	; 0x20
    1cc6:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc8:	9a a1       	ldd	r25, Y+34	; 0x22
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e8       	ldi	r20, 0x80	; 128
    1cd0:	5f e3       	ldi	r21, 0x3F	; 63
    1cd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cd6:	88 23       	and	r24, r24
    1cd8:	1c f4       	brge	.+6      	; 0x1ce0 <LCD_VoidInit+0x350>
		__ticks = 1;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	8e 8f       	std	Y+30, r24	; 0x1e
    1cde:	91 c0       	rjmp	.+290    	; 0x1e02 <LCD_VoidInit+0x472>
	else if (__tmp > 255)
    1ce0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ce2:	78 a1       	ldd	r23, Y+32	; 0x20
    1ce4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	4f e7       	ldi	r20, 0x7F	; 127
    1cee:	53 e4       	ldi	r21, 0x43	; 67
    1cf0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf4:	18 16       	cp	r1, r24
    1cf6:	0c f0       	brlt	.+2      	; 0x1cfa <LCD_VoidInit+0x36a>
    1cf8:	7b c0       	rjmp	.+246    	; 0x1df0 <LCD_VoidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1cfa:	6b a1       	ldd	r22, Y+35	; 0x23
    1cfc:	7c a1       	ldd	r23, Y+36	; 0x24
    1cfe:	8d a1       	ldd	r24, Y+37	; 0x25
    1d00:	9e a1       	ldd	r25, Y+38	; 0x26
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	4a e7       	ldi	r20, 0x7A	; 122
    1d08:	54 e4       	ldi	r21, 0x44	; 68
    1d0a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	8a 8f       	std	Y+26, r24	; 0x1a
    1d14:	9b 8f       	std	Y+27, r25	; 0x1b
    1d16:	ac 8f       	std	Y+28, r26	; 0x1c
    1d18:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1d1c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1d1e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d20:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	4a ef       	ldi	r20, 0xFA	; 250
    1d28:	54 e4       	ldi	r21, 0x44	; 68
    1d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	8e 8b       	std	Y+22, r24	; 0x16
    1d34:	9f 8b       	std	Y+23, r25	; 0x17
    1d36:	a8 8f       	std	Y+24, r26	; 0x18
    1d38:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1d3a:	6e 89       	ldd	r22, Y+22	; 0x16
    1d3c:	7f 89       	ldd	r23, Y+23	; 0x17
    1d3e:	88 8d       	ldd	r24, Y+24	; 0x18
    1d40:	99 8d       	ldd	r25, Y+25	; 0x19
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	40 e8       	ldi	r20, 0x80	; 128
    1d48:	5f e3       	ldi	r21, 0x3F	; 63
    1d4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d4e:	88 23       	and	r24, r24
    1d50:	2c f4       	brge	.+10     	; 0x1d5c <LCD_VoidInit+0x3cc>
		__ticks = 1;
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	9d 8b       	std	Y+21, r25	; 0x15
    1d58:	8c 8b       	std	Y+20, r24	; 0x14
    1d5a:	3f c0       	rjmp	.+126    	; 0x1dda <LCD_VoidInit+0x44a>
	else if (__tmp > 65535)
    1d5c:	6e 89       	ldd	r22, Y+22	; 0x16
    1d5e:	7f 89       	ldd	r23, Y+23	; 0x17
    1d60:	88 8d       	ldd	r24, Y+24	; 0x18
    1d62:	99 8d       	ldd	r25, Y+25	; 0x19
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	3f ef       	ldi	r19, 0xFF	; 255
    1d68:	4f e7       	ldi	r20, 0x7F	; 127
    1d6a:	57 e4       	ldi	r21, 0x47	; 71
    1d6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d70:	18 16       	cp	r1, r24
    1d72:	4c f5       	brge	.+82     	; 0x1dc6 <LCD_VoidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d74:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1d76:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1d78:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d7a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e2       	ldi	r20, 0x20	; 32
    1d82:	51 e4       	ldi	r21, 0x41	; 65
    1d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	bc 01       	movw	r22, r24
    1d8e:	cd 01       	movw	r24, r26
    1d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	9d 8b       	std	Y+21, r25	; 0x15
    1d9a:	8c 8b       	std	Y+20, r24	; 0x14
    1d9c:	0f c0       	rjmp	.+30     	; 0x1dbc <LCD_VoidInit+0x42c>
    1d9e:	88 ec       	ldi	r24, 0xC8	; 200
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	9b 8b       	std	Y+19, r25	; 0x13
    1da4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1da6:	8a 89       	ldd	r24, Y+18	; 0x12
    1da8:	9b 89       	ldd	r25, Y+19	; 0x13
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	f1 f7       	brne	.-4      	; 0x1daa <LCD_VoidInit+0x41a>
    1dae:	9b 8b       	std	Y+19, r25	; 0x13
    1db0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db2:	8c 89       	ldd	r24, Y+20	; 0x14
    1db4:	9d 89       	ldd	r25, Y+21	; 0x15
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	9d 8b       	std	Y+21, r25	; 0x15
    1dba:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dbc:	8c 89       	ldd	r24, Y+20	; 0x14
    1dbe:	9d 89       	ldd	r25, Y+21	; 0x15
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	69 f7       	brne	.-38     	; 0x1d9e <LCD_VoidInit+0x40e>
    1dc4:	24 c0       	rjmp	.+72     	; 0x1e0e <LCD_VoidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc6:	6e 89       	ldd	r22, Y+22	; 0x16
    1dc8:	7f 89       	ldd	r23, Y+23	; 0x17
    1dca:	88 8d       	ldd	r24, Y+24	; 0x18
    1dcc:	99 8d       	ldd	r25, Y+25	; 0x19
    1dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	9d 8b       	std	Y+21, r25	; 0x15
    1dd8:	8c 8b       	std	Y+20, r24	; 0x14
    1dda:	8c 89       	ldd	r24, Y+20	; 0x14
    1ddc:	9d 89       	ldd	r25, Y+21	; 0x15
    1dde:	99 8b       	std	Y+17, r25	; 0x11
    1de0:	88 8b       	std	Y+16, r24	; 0x10
    1de2:	88 89       	ldd	r24, Y+16	; 0x10
    1de4:	99 89       	ldd	r25, Y+17	; 0x11
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <LCD_VoidInit+0x456>
    1dea:	99 8b       	std	Y+17, r25	; 0x11
    1dec:	88 8b       	std	Y+16, r24	; 0x10
    1dee:	0f c0       	rjmp	.+30     	; 0x1e0e <LCD_VoidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1df0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1df2:	78 a1       	ldd	r23, Y+32	; 0x20
    1df4:	89 a1       	ldd	r24, Y+33	; 0x21
    1df6:	9a a1       	ldd	r25, Y+34	; 0x22
    1df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	8e 8f       	std	Y+30, r24	; 0x1e
    1e02:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e04:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e08:	8a 95       	dec	r24
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <LCD_VoidInit+0x478>
    1e0c:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00000001);
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_CheckStatusSendCmnd>
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	a0 e0       	ldi	r26, 0x00	; 0
    1e1a:	b0 e4       	ldi	r27, 0x40	; 64
    1e1c:	8b 87       	std	Y+11, r24	; 0x0b
    1e1e:	9c 87       	std	Y+12, r25	; 0x0c
    1e20:	ad 87       	std	Y+13, r26	; 0x0d
    1e22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	4a ef       	ldi	r20, 0xFA	; 250
    1e32:	54 e4       	ldi	r21, 0x44	; 68
    1e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	8f 83       	std	Y+7, r24	; 0x07
    1e3e:	98 87       	std	Y+8, r25	; 0x08
    1e40:	a9 87       	std	Y+9, r26	; 0x09
    1e42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e44:	6f 81       	ldd	r22, Y+7	; 0x07
    1e46:	78 85       	ldd	r23, Y+8	; 0x08
    1e48:	89 85       	ldd	r24, Y+9	; 0x09
    1e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e8       	ldi	r20, 0x80	; 128
    1e52:	5f e3       	ldi	r21, 0x3F	; 63
    1e54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e58:	88 23       	and	r24, r24
    1e5a:	2c f4       	brge	.+10     	; 0x1e66 <LCD_VoidInit+0x4d6>
		__ticks = 1;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	9e 83       	std	Y+6, r25	; 0x06
    1e62:	8d 83       	std	Y+5, r24	; 0x05
    1e64:	3f c0       	rjmp	.+126    	; 0x1ee4 <LCD_VoidInit+0x554>
	else if (__tmp > 65535)
    1e66:	6f 81       	ldd	r22, Y+7	; 0x07
    1e68:	78 85       	ldd	r23, Y+8	; 0x08
    1e6a:	89 85       	ldd	r24, Y+9	; 0x09
    1e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	3f ef       	ldi	r19, 0xFF	; 255
    1e72:	4f e7       	ldi	r20, 0x7F	; 127
    1e74:	57 e4       	ldi	r21, 0x47	; 71
    1e76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e7a:	18 16       	cp	r1, r24
    1e7c:	4c f5       	brge	.+82     	; 0x1ed0 <LCD_VoidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e2       	ldi	r20, 0x20	; 32
    1e8c:	51 e4       	ldi	r21, 0x41	; 65
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	9e 83       	std	Y+6, r25	; 0x06
    1ea4:	8d 83       	std	Y+5, r24	; 0x05
    1ea6:	0f c0       	rjmp	.+30     	; 0x1ec6 <LCD_VoidInit+0x536>
    1ea8:	88 ec       	ldi	r24, 0xC8	; 200
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	9c 83       	std	Y+4, r25	; 0x04
    1eae:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <LCD_VoidInit+0x524>
    1eb8:	9c 83       	std	Y+4, r25	; 0x04
    1eba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	9e 83       	std	Y+6, r25	; 0x06
    1ec4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	69 f7       	brne	.-38     	; 0x1ea8 <LCD_VoidInit+0x518>
    1ece:	14 c0       	rjmp	.+40     	; 0x1ef8 <LCD_VoidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed2:	78 85       	ldd	r23, Y+8	; 0x08
    1ed4:	89 85       	ldd	r24, Y+9	; 0x09
    1ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	9e 83       	std	Y+6, r25	; 0x06
    1ee2:	8d 83       	std	Y+5, r24	; 0x05
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee8:	9a 83       	std	Y+2, r25	; 0x02
    1eea:	89 83       	std	Y+1, r24	; 0x01
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <LCD_VoidInit+0x560>
    1ef4:	9a 83       	std	Y+2, r25	; 0x02
    1ef6:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
        LCD_CheckStatusSendCmnd(0b00000110);
    1ef8:	86 e0       	ldi	r24, 0x06	; 6
    1efa:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_CheckStatusSendCmnd>
}
    1efe:	c4 5b       	subi	r28, 0xB4	; 180
    1f00:	df 4f       	sbci	r29, 0xFF	; 255
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	1f 91       	pop	r17
    1f12:	0f 91       	pop	r16
    1f14:	08 95       	ret

00001f16 <LCD_CheckStatusSendCmnd>:
CheckStatus LCD_CheckStatusSendCmnd(_uint8 Copy__Uint8Cmnd)
{
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	e2 97       	sbiw	r28, 0x32	; 50
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	8a ab       	std	Y+50, r24	; 0x32
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    1f2c:	19 aa       	std	Y+49, r1	; 0x31
         3-Send CMND byte  to the Data Pins of LCD
         4-PULSE of Enable E = 1 ,E = 0
        */
        if (Copy__Uint8Cmnd <= 255)
        {
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_LOW);
    1f2e:	82 e0       	ldi	r24, 0x02	; 2
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	40 e0       	ldi	r20, 0x00	; 0
    1f34:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    1f38:	82 e0       	ldi	r24, 0x02	; 2
    1f3a:	61 e0       	ldi	r22, 0x01	; 1
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, Copy__Uint8Cmnd);
    1f42:	83 e0       	ldi	r24, 0x03	; 3
    1f44:	6a a9       	ldd	r22, Y+50	; 0x32
    1f46:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    1f4a:	82 e0       	ldi	r24, 0x02	; 2
    1f4c:	62 e0       	ldi	r22, 0x02	; 2
    1f4e:	41 e0       	ldi	r20, 0x01	; 1
    1f50:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	a0 e8       	ldi	r26, 0x80	; 128
    1f5a:	bf e3       	ldi	r27, 0x3F	; 63
    1f5c:	8d a7       	std	Y+45, r24	; 0x2d
    1f5e:	9e a7       	std	Y+46, r25	; 0x2e
    1f60:	af a7       	std	Y+47, r26	; 0x2f
    1f62:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f64:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f66:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f6c:	2b ea       	ldi	r18, 0xAB	; 171
    1f6e:	3a ea       	ldi	r19, 0xAA	; 170
    1f70:	4a e2       	ldi	r20, 0x2A	; 42
    1f72:	50 e4       	ldi	r21, 0x40	; 64
    1f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	89 a7       	std	Y+41, r24	; 0x29
    1f7e:	9a a7       	std	Y+42, r25	; 0x2a
    1f80:	ab a7       	std	Y+43, r26	; 0x2b
    1f82:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1f84:	69 a5       	ldd	r22, Y+41	; 0x29
    1f86:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f88:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e8       	ldi	r20, 0x80	; 128
    1f92:	5f e3       	ldi	r21, 0x3F	; 63
    1f94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f98:	88 23       	and	r24, r24
    1f9a:	1c f4       	brge	.+6      	; 0x1fa2 <LCD_CheckStatusSendCmnd+0x8c>
		__ticks = 1;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	88 a7       	std	Y+40, r24	; 0x28
    1fa0:	91 c0       	rjmp	.+290    	; 0x20c4 <LCD_CheckStatusSendCmnd+0x1ae>
	else if (__tmp > 255)
    1fa2:	69 a5       	ldd	r22, Y+41	; 0x29
    1fa4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fa6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fa8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	4f e7       	ldi	r20, 0x7F	; 127
    1fb0:	53 e4       	ldi	r21, 0x43	; 67
    1fb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fb6:	18 16       	cp	r1, r24
    1fb8:	0c f0       	brlt	.+2      	; 0x1fbc <LCD_CheckStatusSendCmnd+0xa6>
    1fba:	7b c0       	rjmp	.+246    	; 0x20b2 <LCD_CheckStatusSendCmnd+0x19c>
	{
		_delay_ms(__us / 1000.0);
    1fbc:	6d a5       	ldd	r22, Y+45	; 0x2d
    1fbe:	7e a5       	ldd	r23, Y+46	; 0x2e
    1fc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fc2:	98 a9       	ldd	r25, Y+48	; 0x30
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	4a e7       	ldi	r20, 0x7A	; 122
    1fca:	54 e4       	ldi	r21, 0x44	; 68
    1fcc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	8c a3       	std	Y+36, r24	; 0x24
    1fd6:	9d a3       	std	Y+37, r25	; 0x25
    1fd8:	ae a3       	std	Y+38, r26	; 0x26
    1fda:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fdc:	6c a1       	ldd	r22, Y+36	; 0x24
    1fde:	7d a1       	ldd	r23, Y+37	; 0x25
    1fe0:	8e a1       	ldd	r24, Y+38	; 0x26
    1fe2:	9f a1       	ldd	r25, Y+39	; 0x27
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	4a ef       	ldi	r20, 0xFA	; 250
    1fea:	54 e4       	ldi	r21, 0x44	; 68
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	88 a3       	std	Y+32, r24	; 0x20
    1ff6:	99 a3       	std	Y+33, r25	; 0x21
    1ff8:	aa a3       	std	Y+34, r26	; 0x22
    1ffa:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1ffc:	68 a1       	ldd	r22, Y+32	; 0x20
    1ffe:	79 a1       	ldd	r23, Y+33	; 0x21
    2000:	8a a1       	ldd	r24, Y+34	; 0x22
    2002:	9b a1       	ldd	r25, Y+35	; 0x23
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2010:	88 23       	and	r24, r24
    2012:	2c f4       	brge	.+10     	; 0x201e <LCD_CheckStatusSendCmnd+0x108>
		__ticks = 1;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	9f 8f       	std	Y+31, r25	; 0x1f
    201a:	8e 8f       	std	Y+30, r24	; 0x1e
    201c:	3f c0       	rjmp	.+126    	; 0x209c <LCD_CheckStatusSendCmnd+0x186>
	else if (__tmp > 65535)
    201e:	68 a1       	ldd	r22, Y+32	; 0x20
    2020:	79 a1       	ldd	r23, Y+33	; 0x21
    2022:	8a a1       	ldd	r24, Y+34	; 0x22
    2024:	9b a1       	ldd	r25, Y+35	; 0x23
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    202a:	4f e7       	ldi	r20, 0x7F	; 127
    202c:	57 e4       	ldi	r21, 0x47	; 71
    202e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2032:	18 16       	cp	r1, r24
    2034:	4c f5       	brge	.+82     	; 0x2088 <LCD_CheckStatusSendCmnd+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2036:	6c a1       	ldd	r22, Y+36	; 0x24
    2038:	7d a1       	ldd	r23, Y+37	; 0x25
    203a:	8e a1       	ldd	r24, Y+38	; 0x26
    203c:	9f a1       	ldd	r25, Y+39	; 0x27
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9f 8f       	std	Y+31, r25	; 0x1f
    205c:	8e 8f       	std	Y+30, r24	; 0x1e
    205e:	0f c0       	rjmp	.+30     	; 0x207e <LCD_CheckStatusSendCmnd+0x168>
    2060:	88 ec       	ldi	r24, 0xC8	; 200
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9d 8f       	std	Y+29, r25	; 0x1d
    2066:	8c 8f       	std	Y+28, r24	; 0x1c
    2068:	8c 8d       	ldd	r24, Y+28	; 0x1c
    206a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <LCD_CheckStatusSendCmnd+0x156>
    2070:	9d 8f       	std	Y+29, r25	; 0x1d
    2072:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2074:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2076:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	9f 8f       	std	Y+31, r25	; 0x1f
    207c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2080:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	69 f7       	brne	.-38     	; 0x2060 <LCD_CheckStatusSendCmnd+0x14a>
    2086:	24 c0       	rjmp	.+72     	; 0x20d0 <LCD_CheckStatusSendCmnd+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	68 a1       	ldd	r22, Y+32	; 0x20
    208a:	79 a1       	ldd	r23, Y+33	; 0x21
    208c:	8a a1       	ldd	r24, Y+34	; 0x22
    208e:	9b a1       	ldd	r25, Y+35	; 0x23
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	9f 8f       	std	Y+31, r25	; 0x1f
    209a:	8e 8f       	std	Y+30, r24	; 0x1e
    209c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    209e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20a0:	9b 8f       	std	Y+27, r25	; 0x1b
    20a2:	8a 8f       	std	Y+26, r24	; 0x1a
    20a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20a6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <LCD_CheckStatusSendCmnd+0x192>
    20ac:	9b 8f       	std	Y+27, r25	; 0x1b
    20ae:	8a 8f       	std	Y+26, r24	; 0x1a
    20b0:	0f c0       	rjmp	.+30     	; 0x20d0 <LCD_CheckStatusSendCmnd+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20b2:	69 a5       	ldd	r22, Y+41	; 0x29
    20b4:	7a a5       	ldd	r23, Y+42	; 0x2a
    20b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    20ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	88 a7       	std	Y+40, r24	; 0x28
    20c4:	88 a5       	ldd	r24, Y+40	; 0x28
    20c6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20c8:	89 8d       	ldd	r24, Y+25	; 0x19
    20ca:	8a 95       	dec	r24
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <LCD_CheckStatusSendCmnd+0x1b4>
    20ce:	89 8f       	std	Y+25, r24	; 0x19
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    20d0:	82 e0       	ldi	r24, 0x02	; 2
    20d2:	62 e0       	ldi	r22, 0x02	; 2
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	a0 e8       	ldi	r26, 0x80	; 128
    20e0:	bf e3       	ldi	r27, 0x3F	; 63
    20e2:	8d 8b       	std	Y+21, r24	; 0x15
    20e4:	9e 8b       	std	Y+22, r25	; 0x16
    20e6:	af 8b       	std	Y+23, r26	; 0x17
    20e8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20ea:	6d 89       	ldd	r22, Y+21	; 0x15
    20ec:	7e 89       	ldd	r23, Y+22	; 0x16
    20ee:	8f 89       	ldd	r24, Y+23	; 0x17
    20f0:	98 8d       	ldd	r25, Y+24	; 0x18
    20f2:	2b ea       	ldi	r18, 0xAB	; 171
    20f4:	3a ea       	ldi	r19, 0xAA	; 170
    20f6:	4a e2       	ldi	r20, 0x2A	; 42
    20f8:	50 e4       	ldi	r21, 0x40	; 64
    20fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	89 8b       	std	Y+17, r24	; 0x11
    2104:	9a 8b       	std	Y+18, r25	; 0x12
    2106:	ab 8b       	std	Y+19, r26	; 0x13
    2108:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    210a:	69 89       	ldd	r22, Y+17	; 0x11
    210c:	7a 89       	ldd	r23, Y+18	; 0x12
    210e:	8b 89       	ldd	r24, Y+19	; 0x13
    2110:	9c 89       	ldd	r25, Y+20	; 0x14
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e8       	ldi	r20, 0x80	; 128
    2118:	5f e3       	ldi	r21, 0x3F	; 63
    211a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    211e:	88 23       	and	r24, r24
    2120:	1c f4       	brge	.+6      	; 0x2128 <LCD_CheckStatusSendCmnd+0x212>
		__ticks = 1;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	88 8b       	std	Y+16, r24	; 0x10
    2126:	91 c0       	rjmp	.+290    	; 0x224a <LCD_CheckStatusSendCmnd+0x334>
	else if (__tmp > 255)
    2128:	69 89       	ldd	r22, Y+17	; 0x11
    212a:	7a 89       	ldd	r23, Y+18	; 0x12
    212c:	8b 89       	ldd	r24, Y+19	; 0x13
    212e:	9c 89       	ldd	r25, Y+20	; 0x14
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	4f e7       	ldi	r20, 0x7F	; 127
    2136:	53 e4       	ldi	r21, 0x43	; 67
    2138:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    213c:	18 16       	cp	r1, r24
    213e:	0c f0       	brlt	.+2      	; 0x2142 <LCD_CheckStatusSendCmnd+0x22c>
    2140:	7b c0       	rjmp	.+246    	; 0x2238 <LCD_CheckStatusSendCmnd+0x322>
	{
		_delay_ms(__us / 1000.0);
    2142:	6d 89       	ldd	r22, Y+21	; 0x15
    2144:	7e 89       	ldd	r23, Y+22	; 0x16
    2146:	8f 89       	ldd	r24, Y+23	; 0x17
    2148:	98 8d       	ldd	r25, Y+24	; 0x18
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	4a e7       	ldi	r20, 0x7A	; 122
    2150:	54 e4       	ldi	r21, 0x44	; 68
    2152:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	8c 87       	std	Y+12, r24	; 0x0c
    215c:	9d 87       	std	Y+13, r25	; 0x0d
    215e:	ae 87       	std	Y+14, r26	; 0x0e
    2160:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2162:	6c 85       	ldd	r22, Y+12	; 0x0c
    2164:	7d 85       	ldd	r23, Y+13	; 0x0d
    2166:	8e 85       	ldd	r24, Y+14	; 0x0e
    2168:	9f 85       	ldd	r25, Y+15	; 0x0f
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	4a ef       	ldi	r20, 0xFA	; 250
    2170:	54 e4       	ldi	r21, 0x44	; 68
    2172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	88 87       	std	Y+8, r24	; 0x08
    217c:	99 87       	std	Y+9, r25	; 0x09
    217e:	aa 87       	std	Y+10, r26	; 0x0a
    2180:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2182:	68 85       	ldd	r22, Y+8	; 0x08
    2184:	79 85       	ldd	r23, Y+9	; 0x09
    2186:	8a 85       	ldd	r24, Y+10	; 0x0a
    2188:	9b 85       	ldd	r25, Y+11	; 0x0b
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e8       	ldi	r20, 0x80	; 128
    2190:	5f e3       	ldi	r21, 0x3F	; 63
    2192:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2196:	88 23       	and	r24, r24
    2198:	2c f4       	brge	.+10     	; 0x21a4 <LCD_CheckStatusSendCmnd+0x28e>
		__ticks = 1;
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	9f 83       	std	Y+7, r25	; 0x07
    21a0:	8e 83       	std	Y+6, r24	; 0x06
    21a2:	3f c0       	rjmp	.+126    	; 0x2222 <LCD_CheckStatusSendCmnd+0x30c>
	else if (__tmp > 65535)
    21a4:	68 85       	ldd	r22, Y+8	; 0x08
    21a6:	79 85       	ldd	r23, Y+9	; 0x09
    21a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    21aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	3f ef       	ldi	r19, 0xFF	; 255
    21b0:	4f e7       	ldi	r20, 0x7F	; 127
    21b2:	57 e4       	ldi	r21, 0x47	; 71
    21b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21b8:	18 16       	cp	r1, r24
    21ba:	4c f5       	brge	.+82     	; 0x220e <LCD_CheckStatusSendCmnd+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21bc:	6c 85       	ldd	r22, Y+12	; 0x0c
    21be:	7d 85       	ldd	r23, Y+13	; 0x0d
    21c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    21c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e2       	ldi	r20, 0x20	; 32
    21ca:	51 e4       	ldi	r21, 0x41	; 65
    21cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	bc 01       	movw	r22, r24
    21d6:	cd 01       	movw	r24, r26
    21d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	9f 83       	std	Y+7, r25	; 0x07
    21e2:	8e 83       	std	Y+6, r24	; 0x06
    21e4:	0f c0       	rjmp	.+30     	; 0x2204 <LCD_CheckStatusSendCmnd+0x2ee>
    21e6:	88 ec       	ldi	r24, 0xC8	; 200
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	9d 83       	std	Y+5, r25	; 0x05
    21ec:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21ee:	8c 81       	ldd	r24, Y+4	; 0x04
    21f0:	9d 81       	ldd	r25, Y+5	; 0x05
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	f1 f7       	brne	.-4      	; 0x21f2 <LCD_CheckStatusSendCmnd+0x2dc>
    21f6:	9d 83       	std	Y+5, r25	; 0x05
    21f8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fa:	8e 81       	ldd	r24, Y+6	; 0x06
    21fc:	9f 81       	ldd	r25, Y+7	; 0x07
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	9f 83       	std	Y+7, r25	; 0x07
    2202:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2204:	8e 81       	ldd	r24, Y+6	; 0x06
    2206:	9f 81       	ldd	r25, Y+7	; 0x07
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	69 f7       	brne	.-38     	; 0x21e6 <LCD_CheckStatusSendCmnd+0x2d0>
    220c:	24 c0       	rjmp	.+72     	; 0x2256 <LCD_CheckStatusSendCmnd+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220e:	68 85       	ldd	r22, Y+8	; 0x08
    2210:	79 85       	ldd	r23, Y+9	; 0x09
    2212:	8a 85       	ldd	r24, Y+10	; 0x0a
    2214:	9b 85       	ldd	r25, Y+11	; 0x0b
    2216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	9f 83       	std	Y+7, r25	; 0x07
    2220:	8e 83       	std	Y+6, r24	; 0x06
    2222:	8e 81       	ldd	r24, Y+6	; 0x06
    2224:	9f 81       	ldd	r25, Y+7	; 0x07
    2226:	9b 83       	std	Y+3, r25	; 0x03
    2228:	8a 83       	std	Y+2, r24	; 0x02
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	9b 81       	ldd	r25, Y+3	; 0x03
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	f1 f7       	brne	.-4      	; 0x222e <LCD_CheckStatusSendCmnd+0x318>
    2232:	9b 83       	std	Y+3, r25	; 0x03
    2234:	8a 83       	std	Y+2, r24	; 0x02
    2236:	0f c0       	rjmp	.+30     	; 0x2256 <LCD_CheckStatusSendCmnd+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2238:	69 89       	ldd	r22, Y+17	; 0x11
    223a:	7a 89       	ldd	r23, Y+18	; 0x12
    223c:	8b 89       	ldd	r24, Y+19	; 0x13
    223e:	9c 89       	ldd	r25, Y+20	; 0x14
    2240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	88 8b       	std	Y+16, r24	; 0x10
    224a:	88 89       	ldd	r24, Y+16	; 0x10
    224c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	8a 95       	dec	r24
    2252:	f1 f7       	brne	.-4      	; 0x2250 <LCD_CheckStatusSendCmnd+0x33a>
    2254:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    2256:	89 a9       	ldd	r24, Y+49	; 0x31
}
    2258:	e2 96       	adiw	r28, 0x32	; 50
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	f8 94       	cli
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <LCD_CheckStatusSendChar>:
CheckStatus LCD_CheckStatusSendChar(_uint8 Copy__Uint8Char)
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	e2 97       	sbiw	r28, 0x32	; 50
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	de bf       	out	0x3e, r29	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	cd bf       	out	0x3d, r28	; 61
    227e:	8a ab       	std	Y+50, r24	; 0x32
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2280:	19 aa       	std	Y+49, r1	; 0x31
         3-Send CMND byte  to the Data Pins of LCD
         4-PULSE of Enable E = 1 ,E = 0
        */
        if (Copy__Uint8Char <= 255)
        {
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_HIGH);
    2282:	82 e0       	ldi	r24, 0x02	; 2
    2284:	60 e0       	ldi	r22, 0x00	; 0
    2286:	41 e0       	ldi	r20, 0x01	; 1
    2288:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    228c:	82 e0       	ldi	r24, 0x02	; 2
    228e:	61 e0       	ldi	r22, 0x01	; 1
    2290:	40 e0       	ldi	r20, 0x00	; 0
    2292:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, Copy__Uint8Char);
    2296:	83 e0       	ldi	r24, 0x03	; 3
    2298:	6a a9       	ldd	r22, Y+50	; 0x32
    229a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    229e:	82 e0       	ldi	r24, 0x02	; 2
    22a0:	62 e0       	ldi	r22, 0x02	; 2
    22a2:	41 e0       	ldi	r20, 0x01	; 1
    22a4:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	a0 e8       	ldi	r26, 0x80	; 128
    22ae:	bf e3       	ldi	r27, 0x3F	; 63
    22b0:	8d a7       	std	Y+45, r24	; 0x2d
    22b2:	9e a7       	std	Y+46, r25	; 0x2e
    22b4:	af a7       	std	Y+47, r26	; 0x2f
    22b6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22b8:	6d a5       	ldd	r22, Y+45	; 0x2d
    22ba:	7e a5       	ldd	r23, Y+46	; 0x2e
    22bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    22be:	98 a9       	ldd	r25, Y+48	; 0x30
    22c0:	2b ea       	ldi	r18, 0xAB	; 171
    22c2:	3a ea       	ldi	r19, 0xAA	; 170
    22c4:	4a e2       	ldi	r20, 0x2A	; 42
    22c6:	50 e4       	ldi	r21, 0x40	; 64
    22c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	89 a7       	std	Y+41, r24	; 0x29
    22d2:	9a a7       	std	Y+42, r25	; 0x2a
    22d4:	ab a7       	std	Y+43, r26	; 0x2b
    22d6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    22d8:	69 a5       	ldd	r22, Y+41	; 0x29
    22da:	7a a5       	ldd	r23, Y+42	; 0x2a
    22dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    22de:	9c a5       	ldd	r25, Y+44	; 0x2c
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e8       	ldi	r20, 0x80	; 128
    22e6:	5f e3       	ldi	r21, 0x3F	; 63
    22e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22ec:	88 23       	and	r24, r24
    22ee:	1c f4       	brge	.+6      	; 0x22f6 <LCD_CheckStatusSendChar+0x8c>
		__ticks = 1;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	88 a7       	std	Y+40, r24	; 0x28
    22f4:	91 c0       	rjmp	.+290    	; 0x2418 <LCD_CheckStatusSendChar+0x1ae>
	else if (__tmp > 255)
    22f6:	69 a5       	ldd	r22, Y+41	; 0x29
    22f8:	7a a5       	ldd	r23, Y+42	; 0x2a
    22fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    22fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	4f e7       	ldi	r20, 0x7F	; 127
    2304:	53 e4       	ldi	r21, 0x43	; 67
    2306:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    230a:	18 16       	cp	r1, r24
    230c:	0c f0       	brlt	.+2      	; 0x2310 <LCD_CheckStatusSendChar+0xa6>
    230e:	7b c0       	rjmp	.+246    	; 0x2406 <LCD_CheckStatusSendChar+0x19c>
	{
		_delay_ms(__us / 1000.0);
    2310:	6d a5       	ldd	r22, Y+45	; 0x2d
    2312:	7e a5       	ldd	r23, Y+46	; 0x2e
    2314:	8f a5       	ldd	r24, Y+47	; 0x2f
    2316:	98 a9       	ldd	r25, Y+48	; 0x30
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	4a e7       	ldi	r20, 0x7A	; 122
    231e:	54 e4       	ldi	r21, 0x44	; 68
    2320:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	8c a3       	std	Y+36, r24	; 0x24
    232a:	9d a3       	std	Y+37, r25	; 0x25
    232c:	ae a3       	std	Y+38, r26	; 0x26
    232e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2330:	6c a1       	ldd	r22, Y+36	; 0x24
    2332:	7d a1       	ldd	r23, Y+37	; 0x25
    2334:	8e a1       	ldd	r24, Y+38	; 0x26
    2336:	9f a1       	ldd	r25, Y+39	; 0x27
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	4a ef       	ldi	r20, 0xFA	; 250
    233e:	54 e4       	ldi	r21, 0x44	; 68
    2340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	88 a3       	std	Y+32, r24	; 0x20
    234a:	99 a3       	std	Y+33, r25	; 0x21
    234c:	aa a3       	std	Y+34, r26	; 0x22
    234e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2350:	68 a1       	ldd	r22, Y+32	; 0x20
    2352:	79 a1       	ldd	r23, Y+33	; 0x21
    2354:	8a a1       	ldd	r24, Y+34	; 0x22
    2356:	9b a1       	ldd	r25, Y+35	; 0x23
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e8       	ldi	r20, 0x80	; 128
    235e:	5f e3       	ldi	r21, 0x3F	; 63
    2360:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2364:	88 23       	and	r24, r24
    2366:	2c f4       	brge	.+10     	; 0x2372 <LCD_CheckStatusSendChar+0x108>
		__ticks = 1;
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	9f 8f       	std	Y+31, r25	; 0x1f
    236e:	8e 8f       	std	Y+30, r24	; 0x1e
    2370:	3f c0       	rjmp	.+126    	; 0x23f0 <LCD_CheckStatusSendChar+0x186>
	else if (__tmp > 65535)
    2372:	68 a1       	ldd	r22, Y+32	; 0x20
    2374:	79 a1       	ldd	r23, Y+33	; 0x21
    2376:	8a a1       	ldd	r24, Y+34	; 0x22
    2378:	9b a1       	ldd	r25, Y+35	; 0x23
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	3f ef       	ldi	r19, 0xFF	; 255
    237e:	4f e7       	ldi	r20, 0x7F	; 127
    2380:	57 e4       	ldi	r21, 0x47	; 71
    2382:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2386:	18 16       	cp	r1, r24
    2388:	4c f5       	brge	.+82     	; 0x23dc <LCD_CheckStatusSendChar+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238a:	6c a1       	ldd	r22, Y+36	; 0x24
    238c:	7d a1       	ldd	r23, Y+37	; 0x25
    238e:	8e a1       	ldd	r24, Y+38	; 0x26
    2390:	9f a1       	ldd	r25, Y+39	; 0x27
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e2       	ldi	r20, 0x20	; 32
    2398:	51 e4       	ldi	r21, 0x41	; 65
    239a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	bc 01       	movw	r22, r24
    23a4:	cd 01       	movw	r24, r26
    23a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	9f 8f       	std	Y+31, r25	; 0x1f
    23b0:	8e 8f       	std	Y+30, r24	; 0x1e
    23b2:	0f c0       	rjmp	.+30     	; 0x23d2 <LCD_CheckStatusSendChar+0x168>
    23b4:	88 ec       	ldi	r24, 0xC8	; 200
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	9d 8f       	std	Y+29, r25	; 0x1d
    23ba:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23be:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <LCD_CheckStatusSendChar+0x156>
    23c4:	9d 8f       	std	Y+29, r25	; 0x1d
    23c6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	9f 8f       	std	Y+31, r25	; 0x1f
    23d0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23d6:	00 97       	sbiw	r24, 0x00	; 0
    23d8:	69 f7       	brne	.-38     	; 0x23b4 <LCD_CheckStatusSendChar+0x14a>
    23da:	24 c0       	rjmp	.+72     	; 0x2424 <LCD_CheckStatusSendChar+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23dc:	68 a1       	ldd	r22, Y+32	; 0x20
    23de:	79 a1       	ldd	r23, Y+33	; 0x21
    23e0:	8a a1       	ldd	r24, Y+34	; 0x22
    23e2:	9b a1       	ldd	r25, Y+35	; 0x23
    23e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	9f 8f       	std	Y+31, r25	; 0x1f
    23ee:	8e 8f       	std	Y+30, r24	; 0x1e
    23f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23f2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23f4:	9b 8f       	std	Y+27, r25	; 0x1b
    23f6:	8a 8f       	std	Y+26, r24	; 0x1a
    23f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	f1 f7       	brne	.-4      	; 0x23fc <LCD_CheckStatusSendChar+0x192>
    2400:	9b 8f       	std	Y+27, r25	; 0x1b
    2402:	8a 8f       	std	Y+26, r24	; 0x1a
    2404:	0f c0       	rjmp	.+30     	; 0x2424 <LCD_CheckStatusSendChar+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2406:	69 a5       	ldd	r22, Y+41	; 0x29
    2408:	7a a5       	ldd	r23, Y+42	; 0x2a
    240a:	8b a5       	ldd	r24, Y+43	; 0x2b
    240c:	9c a5       	ldd	r25, Y+44	; 0x2c
    240e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	88 a7       	std	Y+40, r24	; 0x28
    2418:	88 a5       	ldd	r24, Y+40	; 0x28
    241a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    241c:	89 8d       	ldd	r24, Y+25	; 0x19
    241e:	8a 95       	dec	r24
    2420:	f1 f7       	brne	.-4      	; 0x241e <LCD_CheckStatusSendChar+0x1b4>
    2422:	89 8f       	std	Y+25, r24	; 0x19
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    2424:	82 e0       	ldi	r24, 0x02	; 2
    2426:	62 e0       	ldi	r22, 0x02	; 2
    2428:	40 e0       	ldi	r20, 0x00	; 0
    242a:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	a0 e8       	ldi	r26, 0x80	; 128
    2434:	bf e3       	ldi	r27, 0x3F	; 63
    2436:	8d 8b       	std	Y+21, r24	; 0x15
    2438:	9e 8b       	std	Y+22, r25	; 0x16
    243a:	af 8b       	std	Y+23, r26	; 0x17
    243c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    243e:	6d 89       	ldd	r22, Y+21	; 0x15
    2440:	7e 89       	ldd	r23, Y+22	; 0x16
    2442:	8f 89       	ldd	r24, Y+23	; 0x17
    2444:	98 8d       	ldd	r25, Y+24	; 0x18
    2446:	2b ea       	ldi	r18, 0xAB	; 171
    2448:	3a ea       	ldi	r19, 0xAA	; 170
    244a:	4a e2       	ldi	r20, 0x2A	; 42
    244c:	50 e4       	ldi	r21, 0x40	; 64
    244e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	89 8b       	std	Y+17, r24	; 0x11
    2458:	9a 8b       	std	Y+18, r25	; 0x12
    245a:	ab 8b       	std	Y+19, r26	; 0x13
    245c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    245e:	69 89       	ldd	r22, Y+17	; 0x11
    2460:	7a 89       	ldd	r23, Y+18	; 0x12
    2462:	8b 89       	ldd	r24, Y+19	; 0x13
    2464:	9c 89       	ldd	r25, Y+20	; 0x14
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e8       	ldi	r20, 0x80	; 128
    246c:	5f e3       	ldi	r21, 0x3F	; 63
    246e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2472:	88 23       	and	r24, r24
    2474:	1c f4       	brge	.+6      	; 0x247c <LCD_CheckStatusSendChar+0x212>
		__ticks = 1;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	88 8b       	std	Y+16, r24	; 0x10
    247a:	91 c0       	rjmp	.+290    	; 0x259e <LCD_CheckStatusSendChar+0x334>
	else if (__tmp > 255)
    247c:	69 89       	ldd	r22, Y+17	; 0x11
    247e:	7a 89       	ldd	r23, Y+18	; 0x12
    2480:	8b 89       	ldd	r24, Y+19	; 0x13
    2482:	9c 89       	ldd	r25, Y+20	; 0x14
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	4f e7       	ldi	r20, 0x7F	; 127
    248a:	53 e4       	ldi	r21, 0x43	; 67
    248c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2490:	18 16       	cp	r1, r24
    2492:	0c f0       	brlt	.+2      	; 0x2496 <LCD_CheckStatusSendChar+0x22c>
    2494:	7b c0       	rjmp	.+246    	; 0x258c <LCD_CheckStatusSendChar+0x322>
	{
		_delay_ms(__us / 1000.0);
    2496:	6d 89       	ldd	r22, Y+21	; 0x15
    2498:	7e 89       	ldd	r23, Y+22	; 0x16
    249a:	8f 89       	ldd	r24, Y+23	; 0x17
    249c:	98 8d       	ldd	r25, Y+24	; 0x18
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	4a e7       	ldi	r20, 0x7A	; 122
    24a4:	54 e4       	ldi	r21, 0x44	; 68
    24a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	8c 87       	std	Y+12, r24	; 0x0c
    24b0:	9d 87       	std	Y+13, r25	; 0x0d
    24b2:	ae 87       	std	Y+14, r26	; 0x0e
    24b4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b6:	6c 85       	ldd	r22, Y+12	; 0x0c
    24b8:	7d 85       	ldd	r23, Y+13	; 0x0d
    24ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    24bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	4a ef       	ldi	r20, 0xFA	; 250
    24c4:	54 e4       	ldi	r21, 0x44	; 68
    24c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	88 87       	std	Y+8, r24	; 0x08
    24d0:	99 87       	std	Y+9, r25	; 0x09
    24d2:	aa 87       	std	Y+10, r26	; 0x0a
    24d4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    24d6:	68 85       	ldd	r22, Y+8	; 0x08
    24d8:	79 85       	ldd	r23, Y+9	; 0x09
    24da:	8a 85       	ldd	r24, Y+10	; 0x0a
    24dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e8       	ldi	r20, 0x80	; 128
    24e4:	5f e3       	ldi	r21, 0x3F	; 63
    24e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ea:	88 23       	and	r24, r24
    24ec:	2c f4       	brge	.+10     	; 0x24f8 <LCD_CheckStatusSendChar+0x28e>
		__ticks = 1;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9f 83       	std	Y+7, r25	; 0x07
    24f4:	8e 83       	std	Y+6, r24	; 0x06
    24f6:	3f c0       	rjmp	.+126    	; 0x2576 <LCD_CheckStatusSendChar+0x30c>
	else if (__tmp > 65535)
    24f8:	68 85       	ldd	r22, Y+8	; 0x08
    24fa:	79 85       	ldd	r23, Y+9	; 0x09
    24fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    24fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	3f ef       	ldi	r19, 0xFF	; 255
    2504:	4f e7       	ldi	r20, 0x7F	; 127
    2506:	57 e4       	ldi	r21, 0x47	; 71
    2508:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    250c:	18 16       	cp	r1, r24
    250e:	4c f5       	brge	.+82     	; 0x2562 <LCD_CheckStatusSendChar+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2510:	6c 85       	ldd	r22, Y+12	; 0x0c
    2512:	7d 85       	ldd	r23, Y+13	; 0x0d
    2514:	8e 85       	ldd	r24, Y+14	; 0x0e
    2516:	9f 85       	ldd	r25, Y+15	; 0x0f
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e2       	ldi	r20, 0x20	; 32
    251e:	51 e4       	ldi	r21, 0x41	; 65
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	bc 01       	movw	r22, r24
    252a:	cd 01       	movw	r24, r26
    252c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9f 83       	std	Y+7, r25	; 0x07
    2536:	8e 83       	std	Y+6, r24	; 0x06
    2538:	0f c0       	rjmp	.+30     	; 0x2558 <LCD_CheckStatusSendChar+0x2ee>
    253a:	88 ec       	ldi	r24, 0xC8	; 200
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9d 83       	std	Y+5, r25	; 0x05
    2540:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2542:	8c 81       	ldd	r24, Y+4	; 0x04
    2544:	9d 81       	ldd	r25, Y+5	; 0x05
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <LCD_CheckStatusSendChar+0x2dc>
    254a:	9d 83       	std	Y+5, r25	; 0x05
    254c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254e:	8e 81       	ldd	r24, Y+6	; 0x06
    2550:	9f 81       	ldd	r25, Y+7	; 0x07
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	9f 83       	std	Y+7, r25	; 0x07
    2556:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2558:	8e 81       	ldd	r24, Y+6	; 0x06
    255a:	9f 81       	ldd	r25, Y+7	; 0x07
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	69 f7       	brne	.-38     	; 0x253a <LCD_CheckStatusSendChar+0x2d0>
    2560:	24 c0       	rjmp	.+72     	; 0x25aa <LCD_CheckStatusSendChar+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2562:	68 85       	ldd	r22, Y+8	; 0x08
    2564:	79 85       	ldd	r23, Y+9	; 0x09
    2566:	8a 85       	ldd	r24, Y+10	; 0x0a
    2568:	9b 85       	ldd	r25, Y+11	; 0x0b
    256a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9f 83       	std	Y+7, r25	; 0x07
    2574:	8e 83       	std	Y+6, r24	; 0x06
    2576:	8e 81       	ldd	r24, Y+6	; 0x06
    2578:	9f 81       	ldd	r25, Y+7	; 0x07
    257a:	9b 83       	std	Y+3, r25	; 0x03
    257c:	8a 83       	std	Y+2, r24	; 0x02
    257e:	8a 81       	ldd	r24, Y+2	; 0x02
    2580:	9b 81       	ldd	r25, Y+3	; 0x03
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <LCD_CheckStatusSendChar+0x318>
    2586:	9b 83       	std	Y+3, r25	; 0x03
    2588:	8a 83       	std	Y+2, r24	; 0x02
    258a:	0f c0       	rjmp	.+30     	; 0x25aa <LCD_CheckStatusSendChar+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    258c:	69 89       	ldd	r22, Y+17	; 0x11
    258e:	7a 89       	ldd	r23, Y+18	; 0x12
    2590:	8b 89       	ldd	r24, Y+19	; 0x13
    2592:	9c 89       	ldd	r25, Y+20	; 0x14
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	88 8b       	std	Y+16, r24	; 0x10
    259e:	88 89       	ldd	r24, Y+16	; 0x10
    25a0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25a2:	89 81       	ldd	r24, Y+1	; 0x01
    25a4:	8a 95       	dec	r24
    25a6:	f1 f7       	brne	.-4      	; 0x25a4 <LCD_CheckStatusSendChar+0x33a>
    25a8:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    25aa:	89 a9       	ldd	r24, Y+49	; 0x31
}
    25ac:	e2 96       	adiw	r28, 0x32	; 50
    25ae:	0f b6       	in	r0, 0x3f	; 63
    25b0:	f8 94       	cli
    25b2:	de bf       	out	0x3e, r29	; 62
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	cd bf       	out	0x3d, r28	; 61
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	08 95       	ret

000025be <LCD_CheckStatusWriteString>:

CheckStatus LCD_CheckStatusWriteString(_uint8 *Copy_p__Uint8String)
{
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	00 d0       	rcall	.+0      	; 0x25c4 <LCD_CheckStatusWriteString+0x6>
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <LCD_CheckStatusWriteString+0x8>
    25c6:	0f 92       	push	r0
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	9c 83       	std	Y+4, r25	; 0x04
    25ce:	8b 83       	std	Y+3, r24	; 0x03
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    25d0:	1a 82       	std	Y+2, r1	; 0x02
        _uint8 Local__Uint8Index = DIO__UINT8_LOW;
    25d2:	19 82       	std	Y+1, r1	; 0x01

        if (Copy_p__Uint8String != NULL)
    25d4:	8b 81       	ldd	r24, Y+3	; 0x03
    25d6:	9c 81       	ldd	r25, Y+4	; 0x04
    25d8:	00 97       	sbiw	r24, 0x00	; 0
    25da:	f1 f0       	breq	.+60     	; 0x2618 <LCD_CheckStatusWriteString+0x5a>
        {
                for (Local__Uint8Index = DIO__UINT8_LOW; *(Copy_p__Uint8String + Local__Uint8Index) != '\0'; ++Local__Uint8Index)
    25dc:	19 82       	std	Y+1, r1	; 0x01
    25de:	0e c0       	rjmp	.+28     	; 0x25fc <LCD_CheckStatusWriteString+0x3e>
                {
                        LCD_CheckStatusSendChar4bit(*(Copy_p__Uint8String + Local__Uint8Index));
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	28 2f       	mov	r18, r24
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ea:	fc 01       	movw	r30, r24
    25ec:	e2 0f       	add	r30, r18
    25ee:	f3 1f       	adc	r31, r19
    25f0:	80 81       	ld	r24, Z
    25f2:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
        _uint8 Local__Uint8Index = DIO__UINT8_LOW;

        if (Copy_p__Uint8String != NULL)
        {
                for (Local__Uint8Index = DIO__UINT8_LOW; *(Copy_p__Uint8String + Local__Uint8Index) != '\0'; ++Local__Uint8Index)
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	8f 5f       	subi	r24, 0xFF	; 255
    25fa:	89 83       	std	Y+1, r24	; 0x01
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	28 2f       	mov	r18, r24
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	9c 81       	ldd	r25, Y+4	; 0x04
    2606:	fc 01       	movw	r30, r24
    2608:	e2 0f       	add	r30, r18
    260a:	f3 1f       	adc	r31, r19
    260c:	80 81       	ld	r24, Z
    260e:	88 23       	and	r24, r24
    2610:	39 f7       	brne	.-50     	; 0x25e0 <LCD_CheckStatusWriteString+0x22>
                {
                        LCD_CheckStatusSendChar4bit(*(Copy_p__Uint8String + Local__Uint8Index));
                }

                return Local_CheckStausReturnValue;
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	8d 83       	std	Y+5, r24	; 0x05
    2616:	04 c0       	rjmp	.+8      	; 0x2620 <LCD_CheckStatusWriteString+0x62>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	8a 83       	std	Y+2, r24	; 0x02
                return Local_CheckStausReturnValue;
    261c:	8a 81       	ldd	r24, Y+2	; 0x02
    261e:	8d 83       	std	Y+5, r24	; 0x05
    2620:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	08 95       	ret

00002632 <LCD_CheckStatusGoToXY>:
CheckStatus LCD_CheckStatusGoToXY(_uint8 Copy__Uint8LineNumber, _uint8 Copy__Uint8LocationNumber)
{
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	00 d0       	rcall	.+0      	; 0x2638 <LCD_CheckStatusGoToXY+0x6>
    2638:	00 d0       	rcall	.+0      	; 0x263a <LCD_CheckStatusGoToXY+0x8>
    263a:	00 d0       	rcall	.+0      	; 0x263c <LCD_CheckStatusGoToXY+0xa>
    263c:	cd b7       	in	r28, 0x3d	; 61
    263e:	de b7       	in	r29, 0x3e	; 62
    2640:	8a 83       	std	Y+2, r24	; 0x02
    2642:	6b 83       	std	Y+3, r22	; 0x03

        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2644:	19 82       	std	Y+1, r1	; 0x01

        if ((Copy__Uint8LineNumber <= 1) && (Copy__Uint8LocationNumber <= 39))
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	82 30       	cpi	r24, 0x02	; 2
    264a:	f0 f4       	brcc	.+60     	; 0x2688 <LCD_CheckStatusGoToXY+0x56>
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	88 32       	cpi	r24, 0x28	; 40
    2650:	d8 f4       	brcc	.+54     	; 0x2688 <LCD_CheckStatusGoToXY+0x56>
        {

                switch (Copy__Uint8LineNumber)
    2652:	8a 81       	ldd	r24, Y+2	; 0x02
    2654:	28 2f       	mov	r18, r24
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	3e 83       	std	Y+6, r19	; 0x06
    265a:	2d 83       	std	Y+5, r18	; 0x05
    265c:	8d 81       	ldd	r24, Y+5	; 0x05
    265e:	9e 81       	ldd	r25, Y+6	; 0x06
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	31 f0       	breq	.+12     	; 0x2670 <LCD_CheckStatusGoToXY+0x3e>
    2664:	2d 81       	ldd	r18, Y+5	; 0x05
    2666:	3e 81       	ldd	r19, Y+6	; 0x06
    2668:	21 30       	cpi	r18, 0x01	; 1
    266a:	31 05       	cpc	r19, r1
    266c:	31 f0       	breq	.+12     	; 0x267a <LCD_CheckStatusGoToXY+0x48>
    266e:	09 c0       	rjmp	.+18     	; 0x2682 <LCD_CheckStatusGoToXY+0x50>
                {
                case LCD__UINT8_LINE1:
                        LCD_CheckStatusSendCmnd4bit(0x80 + Copy__Uint8LocationNumber); //BASE +OFFSET
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	80 58       	subi	r24, 0x80	; 128
    2674:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <LCD_CheckStatusSendCmnd4bit>
    2678:	04 c0       	rjmp	.+8      	; 0x2682 <LCD_CheckStatusGoToXY+0x50>
                        break;
                case LCD__UINT8_LINE2:
                        LCD_CheckStatusSendCmnd4bit(0xc0 + Copy__Uint8LocationNumber);
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	80 54       	subi	r24, 0x40	; 64
    267e:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <LCD_CheckStatusSendCmnd4bit>
                        break;
                default:
                        break;
                }
                return Local_CheckStausReturnValue;
    2682:	39 81       	ldd	r19, Y+1	; 0x01
    2684:	3c 83       	std	Y+4, r19	; 0x04
    2686:	04 c0       	rjmp	.+8      	; 0x2690 <LCD_CheckStatusGoToXY+0x5e>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStausReturnValue;
    268c:	89 81       	ldd	r24, Y+1	; 0x01
    268e:	8c 83       	std	Y+4, r24	; 0x04
    2690:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    2692:	26 96       	adiw	r28, 0x06	; 6
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	de bf       	out	0x3e, r29	; 62
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	cd bf       	out	0x3d, r28	; 61
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <LCD_VoidClearDisplay>:

Void LCD_VoidClearDisplay(Void)
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
    26ac:	2e 97       	sbiw	r28, 0x0e	; 14
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	de bf       	out	0x3e, r29	; 62
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	cd bf       	out	0x3d, r28	; 61
        LCD_CheckStatusSendCmnd4bit(0x01);
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <LCD_CheckStatusSendCmnd4bit>
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	a0 e0       	ldi	r26, 0x00	; 0
    26c4:	b0 e4       	ldi	r27, 0x40	; 64
    26c6:	8b 87       	std	Y+11, r24	; 0x0b
    26c8:	9c 87       	std	Y+12, r25	; 0x0c
    26ca:	ad 87       	std	Y+13, r26	; 0x0d
    26cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	4a ef       	ldi	r20, 0xFA	; 250
    26dc:	54 e4       	ldi	r21, 0x44	; 68
    26de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	8f 83       	std	Y+7, r24	; 0x07
    26e8:	98 87       	std	Y+8, r25	; 0x08
    26ea:	a9 87       	std	Y+9, r26	; 0x09
    26ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26ee:	6f 81       	ldd	r22, Y+7	; 0x07
    26f0:	78 85       	ldd	r23, Y+8	; 0x08
    26f2:	89 85       	ldd	r24, Y+9	; 0x09
    26f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	40 e8       	ldi	r20, 0x80	; 128
    26fc:	5f e3       	ldi	r21, 0x3F	; 63
    26fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2702:	88 23       	and	r24, r24
    2704:	2c f4       	brge	.+10     	; 0x2710 <LCD_VoidClearDisplay+0x6c>
		__ticks = 1;
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	9e 83       	std	Y+6, r25	; 0x06
    270c:	8d 83       	std	Y+5, r24	; 0x05
    270e:	3f c0       	rjmp	.+126    	; 0x278e <LCD_VoidClearDisplay+0xea>
	else if (__tmp > 65535)
    2710:	6f 81       	ldd	r22, Y+7	; 0x07
    2712:	78 85       	ldd	r23, Y+8	; 0x08
    2714:	89 85       	ldd	r24, Y+9	; 0x09
    2716:	9a 85       	ldd	r25, Y+10	; 0x0a
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	3f ef       	ldi	r19, 0xFF	; 255
    271c:	4f e7       	ldi	r20, 0x7F	; 127
    271e:	57 e4       	ldi	r21, 0x47	; 71
    2720:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2724:	18 16       	cp	r1, r24
    2726:	4c f5       	brge	.+82     	; 0x277a <LCD_VoidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2728:	6b 85       	ldd	r22, Y+11	; 0x0b
    272a:	7c 85       	ldd	r23, Y+12	; 0x0c
    272c:	8d 85       	ldd	r24, Y+13	; 0x0d
    272e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	40 e2       	ldi	r20, 0x20	; 32
    2736:	51 e4       	ldi	r21, 0x41	; 65
    2738:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	bc 01       	movw	r22, r24
    2742:	cd 01       	movw	r24, r26
    2744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	9e 83       	std	Y+6, r25	; 0x06
    274e:	8d 83       	std	Y+5, r24	; 0x05
    2750:	0f c0       	rjmp	.+30     	; 0x2770 <LCD_VoidClearDisplay+0xcc>
    2752:	88 ec       	ldi	r24, 0xC8	; 200
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	9c 83       	std	Y+4, r25	; 0x04
    2758:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	9c 81       	ldd	r25, Y+4	; 0x04
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	f1 f7       	brne	.-4      	; 0x275e <LCD_VoidClearDisplay+0xba>
    2762:	9c 83       	std	Y+4, r25	; 0x04
    2764:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2766:	8d 81       	ldd	r24, Y+5	; 0x05
    2768:	9e 81       	ldd	r25, Y+6	; 0x06
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	9e 83       	std	Y+6, r25	; 0x06
    276e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2770:	8d 81       	ldd	r24, Y+5	; 0x05
    2772:	9e 81       	ldd	r25, Y+6	; 0x06
    2774:	00 97       	sbiw	r24, 0x00	; 0
    2776:	69 f7       	brne	.-38     	; 0x2752 <LCD_VoidClearDisplay+0xae>
    2778:	14 c0       	rjmp	.+40     	; 0x27a2 <LCD_VoidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277a:	6f 81       	ldd	r22, Y+7	; 0x07
    277c:	78 85       	ldd	r23, Y+8	; 0x08
    277e:	89 85       	ldd	r24, Y+9	; 0x09
    2780:	9a 85       	ldd	r25, Y+10	; 0x0a
    2782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	9e 83       	std	Y+6, r25	; 0x06
    278c:	8d 83       	std	Y+5, r24	; 0x05
    278e:	8d 81       	ldd	r24, Y+5	; 0x05
    2790:	9e 81       	ldd	r25, Y+6	; 0x06
    2792:	9a 83       	std	Y+2, r25	; 0x02
    2794:	89 83       	std	Y+1, r24	; 0x01
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	9a 81       	ldd	r25, Y+2	; 0x02
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	f1 f7       	brne	.-4      	; 0x279a <LCD_VoidClearDisplay+0xf6>
    279e:	9a 83       	std	Y+2, r25	; 0x02
    27a0:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
}
    27a2:	2e 96       	adiw	r28, 0x0e	; 14
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	de bf       	out	0x3e, r29	; 62
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	cd bf       	out	0x3d, r28	; 61
    27ae:	cf 91       	pop	r28
    27b0:	df 91       	pop	r29
    27b2:	08 95       	ret

000027b4 <LCD_CheckStatusSendNumber>:
CheckStatus LCD_CheckStatusSendNumber(_uint32 Copy__Uint32Number)
{
    27b4:	df 93       	push	r29
    27b6:	cf 93       	push	r28
    27b8:	cd b7       	in	r28, 0x3d	; 61
    27ba:	de b7       	in	r29, 0x3e	; 62
    27bc:	2d 97       	sbiw	r28, 0x0d	; 13
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	f8 94       	cli
    27c2:	de bf       	out	0x3e, r29	; 62
    27c4:	0f be       	out	0x3f, r0	; 63
    27c6:	cd bf       	out	0x3d, r28	; 61
    27c8:	68 87       	std	Y+8, r22	; 0x08
    27ca:	79 87       	std	Y+9, r23	; 0x09
    27cc:	8a 87       	std	Y+10, r24	; 0x0a
    27ce:	9b 87       	std	Y+11, r25	; 0x0b
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    27d0:	1f 82       	std	Y+7, r1	; 0x07

        _uint8 Local__Uint8Remendier = 0x00;
    27d2:	1e 82       	std	Y+6, r1	; 0x06
        _uint8 Local__Uint8Counter = 0x00;
    27d4:	1d 82       	std	Y+5, r1	; 0x05
        _uint32 Local__Uint32Temporary = 0;
    27d6:	19 82       	std	Y+1, r1	; 0x01
    27d8:	1a 82       	std	Y+2, r1	; 0x02
    27da:	1b 82       	std	Y+3, r1	; 0x03
    27dc:	1c 82       	std	Y+4, r1	; 0x04
    27de:	40 c0       	rjmp	.+128    	; 0x2860 <LCD_CheckStatusSendNumber+0xac>
        if (Copy__Uint32Number <= 4294967296)
        {
                while (Copy__Uint32Number != 0)
                {
                        Local__Uint32Temporary = Local__Uint32Temporary * 0x0A;
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	9a 81       	ldd	r25, Y+2	; 0x02
    27e4:	ab 81       	ldd	r26, Y+3	; 0x03
    27e6:	bc 81       	ldd	r27, Y+4	; 0x04
    27e8:	2a e0       	ldi	r18, 0x0A	; 10
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	40 e0       	ldi	r20, 0x00	; 0
    27ee:	50 e0       	ldi	r21, 0x00	; 0
    27f0:	bc 01       	movw	r22, r24
    27f2:	cd 01       	movw	r24, r26
    27f4:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsi3>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	89 83       	std	Y+1, r24	; 0x01
    27fe:	9a 83       	std	Y+2, r25	; 0x02
    2800:	ab 83       	std	Y+3, r26	; 0x03
    2802:	bc 83       	std	Y+4, r27	; 0x04
                        Local__Uint32Temporary = Local__Uint32Temporary + Copy__Uint32Number % 0x0A;
    2804:	88 85       	ldd	r24, Y+8	; 0x08
    2806:	99 85       	ldd	r25, Y+9	; 0x09
    2808:	aa 85       	ldd	r26, Y+10	; 0x0a
    280a:	bb 85       	ldd	r27, Y+11	; 0x0b
    280c:	2a e0       	ldi	r18, 0x0A	; 10
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	50 e0       	ldi	r21, 0x00	; 0
    2814:	bc 01       	movw	r22, r24
    2816:	cd 01       	movw	r24, r26
    2818:	0e 94 16 23 	call	0x462c	; 0x462c <__udivmodsi4>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	9c 01       	movw	r18, r24
    2822:	ad 01       	movw	r20, r26
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	9a 81       	ldd	r25, Y+2	; 0x02
    2828:	ab 81       	ldd	r26, Y+3	; 0x03
    282a:	bc 81       	ldd	r27, Y+4	; 0x04
    282c:	82 0f       	add	r24, r18
    282e:	93 1f       	adc	r25, r19
    2830:	a4 1f       	adc	r26, r20
    2832:	b5 1f       	adc	r27, r21
    2834:	89 83       	std	Y+1, r24	; 0x01
    2836:	9a 83       	std	Y+2, r25	; 0x02
    2838:	ab 83       	std	Y+3, r26	; 0x03
    283a:	bc 83       	std	Y+4, r27	; 0x04
                        Copy__Uint32Number = Copy__Uint32Number / 0x0A;
    283c:	88 85       	ldd	r24, Y+8	; 0x08
    283e:	99 85       	ldd	r25, Y+9	; 0x09
    2840:	aa 85       	ldd	r26, Y+10	; 0x0a
    2842:	bb 85       	ldd	r27, Y+11	; 0x0b
    2844:	2a e0       	ldi	r18, 0x0A	; 10
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e0       	ldi	r20, 0x00	; 0
    284a:	50 e0       	ldi	r21, 0x00	; 0
    284c:	bc 01       	movw	r22, r24
    284e:	cd 01       	movw	r24, r26
    2850:	0e 94 16 23 	call	0x462c	; 0x462c <__udivmodsi4>
    2854:	da 01       	movw	r26, r20
    2856:	c9 01       	movw	r24, r18
    2858:	88 87       	std	Y+8, r24	; 0x08
    285a:	99 87       	std	Y+9, r25	; 0x09
    285c:	aa 87       	std	Y+10, r26	; 0x0a
    285e:	bb 87       	std	Y+11, r27	; 0x0b
        _uint8 Local__Uint8Remendier = 0x00;
        _uint8 Local__Uint8Counter = 0x00;
        _uint32 Local__Uint32Temporary = 0;
        if (Copy__Uint32Number <= 4294967296)
        {
                while (Copy__Uint32Number != 0)
    2860:	88 85       	ldd	r24, Y+8	; 0x08
    2862:	99 85       	ldd	r25, Y+9	; 0x09
    2864:	aa 85       	ldd	r26, Y+10	; 0x0a
    2866:	bb 85       	ldd	r27, Y+11	; 0x0b
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	a1 05       	cpc	r26, r1
    286c:	b1 05       	cpc	r27, r1
    286e:	09 f0       	breq	.+2      	; 0x2872 <LCD_CheckStatusSendNumber+0xbe>
    2870:	b7 cf       	rjmp	.-146    	; 0x27e0 <LCD_CheckStatusSendNumber+0x2c>
                        Local__Uint32Temporary = Local__Uint32Temporary * 0x0A;
                        Local__Uint32Temporary = Local__Uint32Temporary + Copy__Uint32Number % 0x0A;
                        Copy__Uint32Number = Copy__Uint32Number / 0x0A;
                }

                for (Local__Uint8Counter = 0; Local__Uint32Temporary != 0; ++Local__Uint8Counter)
    2872:	1d 82       	std	Y+5, r1	; 0x05
    2874:	95 c0       	rjmp	.+298    	; 0x29a0 <LCD_CheckStatusSendNumber+0x1ec>
                {
                        Local__Uint8Remendier = Local__Uint32Temporary % 0x0A;
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	9a 81       	ldd	r25, Y+2	; 0x02
    287a:	ab 81       	ldd	r26, Y+3	; 0x03
    287c:	bc 81       	ldd	r27, Y+4	; 0x04
    287e:	2a e0       	ldi	r18, 0x0A	; 10
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e0       	ldi	r20, 0x00	; 0
    2884:	50 e0       	ldi	r21, 0x00	; 0
    2886:	bc 01       	movw	r22, r24
    2888:	cd 01       	movw	r24, r26
    288a:	0e 94 16 23 	call	0x462c	; 0x462c <__udivmodsi4>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	8e 83       	std	Y+6, r24	; 0x06
                        Local__Uint32Temporary = Local__Uint32Temporary / 0x0A;
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	ab 81       	ldd	r26, Y+3	; 0x03
    289a:	bc 81       	ldd	r27, Y+4	; 0x04
    289c:	2a e0       	ldi	r18, 0x0A	; 10
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	50 e0       	ldi	r21, 0x00	; 0
    28a4:	bc 01       	movw	r22, r24
    28a6:	cd 01       	movw	r24, r26
    28a8:	0e 94 16 23 	call	0x462c	; 0x462c <__udivmodsi4>
    28ac:	da 01       	movw	r26, r20
    28ae:	c9 01       	movw	r24, r18
    28b0:	89 83       	std	Y+1, r24	; 0x01
    28b2:	9a 83       	std	Y+2, r25	; 0x02
    28b4:	ab 83       	std	Y+3, r26	; 0x03
    28b6:	bc 83       	std	Y+4, r27	; 0x04
                        switch (Local__Uint8Remendier)
    28b8:	8e 81       	ldd	r24, Y+6	; 0x06
    28ba:	28 2f       	mov	r18, r24
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	3d 87       	std	Y+13, r19	; 0x0d
    28c0:	2c 87       	std	Y+12, r18	; 0x0c
    28c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    28c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    28c6:	84 30       	cpi	r24, 0x04	; 4
    28c8:	91 05       	cpc	r25, r1
    28ca:	09 f4       	brne	.+2      	; 0x28ce <LCD_CheckStatusSendNumber+0x11a>
    28cc:	4f c0       	rjmp	.+158    	; 0x296c <LCD_CheckStatusSendNumber+0x1b8>
    28ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    28d0:	3d 85       	ldd	r19, Y+13	; 0x0d
    28d2:	25 30       	cpi	r18, 0x05	; 5
    28d4:	31 05       	cpc	r19, r1
    28d6:	d4 f4       	brge	.+52     	; 0x290c <LCD_CheckStatusSendNumber+0x158>
    28d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    28da:	9d 85       	ldd	r25, Y+13	; 0x0d
    28dc:	81 30       	cpi	r24, 0x01	; 1
    28de:	91 05       	cpc	r25, r1
    28e0:	c9 f1       	breq	.+114    	; 0x2954 <LCD_CheckStatusSendNumber+0x1a0>
    28e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    28e4:	3d 85       	ldd	r19, Y+13	; 0x0d
    28e6:	22 30       	cpi	r18, 0x02	; 2
    28e8:	31 05       	cpc	r19, r1
    28ea:	2c f4       	brge	.+10     	; 0x28f6 <LCD_CheckStatusSendNumber+0x142>
    28ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    28ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    28f0:	00 97       	sbiw	r24, 0x00	; 0
    28f2:	61 f1       	breq	.+88     	; 0x294c <LCD_CheckStatusSendNumber+0x198>
    28f4:	52 c0       	rjmp	.+164    	; 0x299a <LCD_CheckStatusSendNumber+0x1e6>
    28f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    28f8:	3d 85       	ldd	r19, Y+13	; 0x0d
    28fa:	22 30       	cpi	r18, 0x02	; 2
    28fc:	31 05       	cpc	r19, r1
    28fe:	71 f1       	breq	.+92     	; 0x295c <LCD_CheckStatusSendNumber+0x1a8>
    2900:	8c 85       	ldd	r24, Y+12	; 0x0c
    2902:	9d 85       	ldd	r25, Y+13	; 0x0d
    2904:	83 30       	cpi	r24, 0x03	; 3
    2906:	91 05       	cpc	r25, r1
    2908:	69 f1       	breq	.+90     	; 0x2964 <LCD_CheckStatusSendNumber+0x1b0>
    290a:	47 c0       	rjmp	.+142    	; 0x299a <LCD_CheckStatusSendNumber+0x1e6>
    290c:	2c 85       	ldd	r18, Y+12	; 0x0c
    290e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2910:	27 30       	cpi	r18, 0x07	; 7
    2912:	31 05       	cpc	r19, r1
    2914:	b9 f1       	breq	.+110    	; 0x2984 <LCD_CheckStatusSendNumber+0x1d0>
    2916:	8c 85       	ldd	r24, Y+12	; 0x0c
    2918:	9d 85       	ldd	r25, Y+13	; 0x0d
    291a:	88 30       	cpi	r24, 0x08	; 8
    291c:	91 05       	cpc	r25, r1
    291e:	5c f4       	brge	.+22     	; 0x2936 <LCD_CheckStatusSendNumber+0x182>
    2920:	2c 85       	ldd	r18, Y+12	; 0x0c
    2922:	3d 85       	ldd	r19, Y+13	; 0x0d
    2924:	25 30       	cpi	r18, 0x05	; 5
    2926:	31 05       	cpc	r19, r1
    2928:	29 f1       	breq	.+74     	; 0x2974 <LCD_CheckStatusSendNumber+0x1c0>
    292a:	8c 85       	ldd	r24, Y+12	; 0x0c
    292c:	9d 85       	ldd	r25, Y+13	; 0x0d
    292e:	86 30       	cpi	r24, 0x06	; 6
    2930:	91 05       	cpc	r25, r1
    2932:	21 f1       	breq	.+72     	; 0x297c <LCD_CheckStatusSendNumber+0x1c8>
    2934:	32 c0       	rjmp	.+100    	; 0x299a <LCD_CheckStatusSendNumber+0x1e6>
    2936:	2c 85       	ldd	r18, Y+12	; 0x0c
    2938:	3d 85       	ldd	r19, Y+13	; 0x0d
    293a:	28 30       	cpi	r18, 0x08	; 8
    293c:	31 05       	cpc	r19, r1
    293e:	31 f1       	breq	.+76     	; 0x298c <LCD_CheckStatusSendNumber+0x1d8>
    2940:	8c 85       	ldd	r24, Y+12	; 0x0c
    2942:	9d 85       	ldd	r25, Y+13	; 0x0d
    2944:	89 30       	cpi	r24, 0x09	; 9
    2946:	91 05       	cpc	r25, r1
    2948:	29 f1       	breq	.+74     	; 0x2994 <LCD_CheckStatusSendNumber+0x1e0>
    294a:	27 c0       	rjmp	.+78     	; 0x299a <LCD_CheckStatusSendNumber+0x1e6>
                        {
                        case 0:
                                LCD_CheckStatusSendChar4bit('0');
    294c:	80 e3       	ldi	r24, 0x30	; 48
    294e:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
    2952:	23 c0       	rjmp	.+70     	; 0x299a <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 1:
                                LCD_CheckStatusSendChar4bit('1');
    2954:	81 e3       	ldi	r24, 0x31	; 49
    2956:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
    295a:	1f c0       	rjmp	.+62     	; 0x299a <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 2:
                                LCD_CheckStatusSendChar4bit('2');
    295c:	82 e3       	ldi	r24, 0x32	; 50
    295e:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
    2962:	1b c0       	rjmp	.+54     	; 0x299a <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 3:
                                LCD_CheckStatusSendChar4bit('3');
    2964:	83 e3       	ldi	r24, 0x33	; 51
    2966:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
    296a:	17 c0       	rjmp	.+46     	; 0x299a <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 4:
                                LCD_CheckStatusSendChar4bit('4');
    296c:	84 e3       	ldi	r24, 0x34	; 52
    296e:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
    2972:	13 c0       	rjmp	.+38     	; 0x299a <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 5:
                                LCD_CheckStatusSendChar4bit('5');
    2974:	85 e3       	ldi	r24, 0x35	; 53
    2976:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
    297a:	0f c0       	rjmp	.+30     	; 0x299a <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 6:
                                LCD_CheckStatusSendChar4bit('6');
    297c:	86 e3       	ldi	r24, 0x36	; 54
    297e:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
    2982:	0b c0       	rjmp	.+22     	; 0x299a <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 7:
                                LCD_CheckStatusSendChar4bit('7');
    2984:	87 e3       	ldi	r24, 0x37	; 55
    2986:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
    298a:	07 c0       	rjmp	.+14     	; 0x299a <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 8:
                                LCD_CheckStatusSendChar4bit('8');
    298c:	88 e3       	ldi	r24, 0x38	; 56
    298e:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
    2992:	03 c0       	rjmp	.+6      	; 0x299a <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 9:
                                LCD_CheckStatusSendChar4bit('9');
    2994:	89 e3       	ldi	r24, 0x39	; 57
    2996:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
                        Local__Uint32Temporary = Local__Uint32Temporary * 0x0A;
                        Local__Uint32Temporary = Local__Uint32Temporary + Copy__Uint32Number % 0x0A;
                        Copy__Uint32Number = Copy__Uint32Number / 0x0A;
                }

                for (Local__Uint8Counter = 0; Local__Uint32Temporary != 0; ++Local__Uint8Counter)
    299a:	8d 81       	ldd	r24, Y+5	; 0x05
    299c:	8f 5f       	subi	r24, 0xFF	; 255
    299e:	8d 83       	std	Y+5, r24	; 0x05
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	9a 81       	ldd	r25, Y+2	; 0x02
    29a4:	ab 81       	ldd	r26, Y+3	; 0x03
    29a6:	bc 81       	ldd	r27, Y+4	; 0x04
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	a1 05       	cpc	r26, r1
    29ac:	b1 05       	cpc	r27, r1
    29ae:	09 f0       	breq	.+2      	; 0x29b2 <LCD_CheckStatusSendNumber+0x1fe>
    29b0:	62 cf       	rjmp	.-316    	; 0x2876 <LCD_CheckStatusSendNumber+0xc2>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    29b2:	8f 81       	ldd	r24, Y+7	; 0x07
}
    29b4:	2d 96       	adiw	r28, 0x0d	; 13
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	cf 91       	pop	r28
    29c2:	df 91       	pop	r29
    29c4:	08 95       	ret

000029c6 <LCD_CheckStatusSpecialChar>:

CheckStatus LCD_CheckStatusSpecialChar(_uint8 Copy__Uint8CGRamLocation, _uint8 Copy__Uint8LCDLine, _uint8 Copy__Uint8DDRamLocation)
{
    29c6:	df 93       	push	r29
    29c8:	cf 93       	push	r28
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
    29ce:	27 97       	sbiw	r28, 0x07	; 7
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	cd bf       	out	0x3d, r28	; 61
    29da:	8b 83       	std	Y+3, r24	; 0x03
    29dc:	6c 83       	std	Y+4, r22	; 0x04
    29de:	4d 83       	std	Y+5, r20	; 0x05
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    29e0:	1a 82       	std	Y+2, r1	; 0x02

        _uint8 Local__Uint8CounterJ = 0x00;
    29e2:	19 82       	std	Y+1, r1	; 0x01
        if ((Copy__Uint8CGRamLocation <= LCD__UINT8_CG_RAMLOCATION7) && (Copy__Uint8DDRamLocation <= LCD__UINT8_LOCATION_NUMBER39))
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	88 30       	cpi	r24, 0x08	; 8
    29e8:	08 f0       	brcs	.+2      	; 0x29ec <LCD_CheckStatusSpecialChar+0x26>
    29ea:	0b c1       	rjmp	.+534    	; 0x2c02 <LCD_CheckStatusSpecialChar+0x23c>
    29ec:	8d 81       	ldd	r24, Y+5	; 0x05
    29ee:	88 32       	cpi	r24, 0x28	; 40
    29f0:	08 f0       	brcs	.+2      	; 0x29f4 <LCD_CheckStatusSpecialChar+0x2e>
    29f2:	07 c1       	rjmp	.+526    	; 0x2c02 <LCD_CheckStatusSpecialChar+0x23c>
        {

                switch (Copy__Uint8CGRamLocation)
    29f4:	8b 81       	ldd	r24, Y+3	; 0x03
    29f6:	28 2f       	mov	r18, r24
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	3f 83       	std	Y+7, r19	; 0x07
    29fc:	2e 83       	std	Y+6, r18	; 0x06
    29fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2a00:	9f 81       	ldd	r25, Y+7	; 0x07
    2a02:	84 30       	cpi	r24, 0x04	; 4
    2a04:	91 05       	cpc	r25, r1
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <LCD_CheckStatusSpecialChar+0x44>
    2a08:	7b c0       	rjmp	.+246    	; 0x2b00 <LCD_CheckStatusSpecialChar+0x13a>
    2a0a:	2e 81       	ldd	r18, Y+6	; 0x06
    2a0c:	3f 81       	ldd	r19, Y+7	; 0x07
    2a0e:	25 30       	cpi	r18, 0x05	; 5
    2a10:	31 05       	cpc	r19, r1
    2a12:	94 f4       	brge	.+36     	; 0x2a38 <LCD_CheckStatusSpecialChar+0x72>
    2a14:	8e 81       	ldd	r24, Y+6	; 0x06
    2a16:	9f 81       	ldd	r25, Y+7	; 0x07
    2a18:	82 30       	cpi	r24, 0x02	; 2
    2a1a:	91 05       	cpc	r25, r1
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <LCD_CheckStatusSpecialChar+0x5a>
    2a1e:	3e c0       	rjmp	.+124    	; 0x2a9c <LCD_CheckStatusSpecialChar+0xd6>
    2a20:	2e 81       	ldd	r18, Y+6	; 0x06
    2a22:	3f 81       	ldd	r19, Y+7	; 0x07
    2a24:	23 30       	cpi	r18, 0x03	; 3
    2a26:	31 05       	cpc	r19, r1
    2a28:	0c f0       	brlt	.+2      	; 0x2a2c <LCD_CheckStatusSpecialChar+0x66>
    2a2a:	51 c0       	rjmp	.+162    	; 0x2ace <LCD_CheckStatusSpecialChar+0x108>
    2a2c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a2e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a30:	81 30       	cpi	r24, 0x01	; 1
    2a32:	91 05       	cpc	r25, r1
    2a34:	d1 f0       	breq	.+52     	; 0x2a6a <LCD_CheckStatusSpecialChar+0xa4>
    2a36:	e0 c0       	rjmp	.+448    	; 0x2bf8 <LCD_CheckStatusSpecialChar+0x232>
    2a38:	2e 81       	ldd	r18, Y+6	; 0x06
    2a3a:	3f 81       	ldd	r19, Y+7	; 0x07
    2a3c:	26 30       	cpi	r18, 0x06	; 6
    2a3e:	31 05       	cpc	r19, r1
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <LCD_CheckStatusSpecialChar+0x7e>
    2a42:	90 c0       	rjmp	.+288    	; 0x2b64 <LCD_CheckStatusSpecialChar+0x19e>
    2a44:	8e 81       	ldd	r24, Y+6	; 0x06
    2a46:	9f 81       	ldd	r25, Y+7	; 0x07
    2a48:	86 30       	cpi	r24, 0x06	; 6
    2a4a:	91 05       	cpc	r25, r1
    2a4c:	0c f4       	brge	.+2      	; 0x2a50 <LCD_CheckStatusSpecialChar+0x8a>
    2a4e:	71 c0       	rjmp	.+226    	; 0x2b32 <LCD_CheckStatusSpecialChar+0x16c>
    2a50:	2e 81       	ldd	r18, Y+6	; 0x06
    2a52:	3f 81       	ldd	r19, Y+7	; 0x07
    2a54:	27 30       	cpi	r18, 0x07	; 7
    2a56:	31 05       	cpc	r19, r1
    2a58:	09 f4       	brne	.+2      	; 0x2a5c <LCD_CheckStatusSpecialChar+0x96>
    2a5a:	9d c0       	rjmp	.+314    	; 0x2b96 <LCD_CheckStatusSpecialChar+0x1d0>
    2a5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a5e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a60:	88 30       	cpi	r24, 0x08	; 8
    2a62:	91 05       	cpc	r25, r1
    2a64:	09 f4       	brne	.+2      	; 0x2a68 <LCD_CheckStatusSpecialChar+0xa2>
    2a66:	b0 c0       	rjmp	.+352    	; 0x2bc8 <LCD_CheckStatusSpecialChar+0x202>
    2a68:	c7 c0       	rjmp	.+398    	; 0x2bf8 <LCD_CheckStatusSpecialChar+0x232>
                {

                case 1:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE0);
    2a6a:	80 e4       	ldi	r24, 0x40	; 64
    2a6c:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2a70:	19 82       	std	Y+1, r1	; 0x01
    2a72:	10 c0       	rjmp	.+32     	; 0x2a94 <LCD_CheckStatusSpecialChar+0xce>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[0][Local__Uint8CounterJ]);
    2a74:	20 91 a6 01 	lds	r18, 0x01A6
    2a78:	30 91 a7 01 	lds	r19, 0x01A7
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	88 2f       	mov	r24, r24
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	f9 01       	movw	r30, r18
    2a84:	e8 0f       	add	r30, r24
    2a86:	f9 1f       	adc	r31, r25
    2a88:	80 81       	ld	r24, Z
    2a8a:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
                switch (Copy__Uint8CGRamLocation)
                {

                case 1:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE0);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	8f 5f       	subi	r24, 0xFF	; 255
    2a92:	89 83       	std	Y+1, r24	; 0x01
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	88 30       	cpi	r24, 0x08	; 8
    2a98:	68 f3       	brcs	.-38     	; 0x2a74 <LCD_CheckStatusSpecialChar+0xae>
    2a9a:	ae c0       	rjmp	.+348    	; 0x2bf8 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[0][Local__Uint8CounterJ]);
                        }
                        break;
                case 2:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE1);
    2a9c:	88 e4       	ldi	r24, 0x48	; 72
    2a9e:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2aa2:	19 82       	std	Y+1, r1	; 0x01
    2aa4:	10 c0       	rjmp	.+32     	; 0x2ac6 <LCD_CheckStatusSpecialChar+0x100>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[1][Local__Uint8CounterJ]);
    2aa6:	20 91 a8 01 	lds	r18, 0x01A8
    2aaa:	30 91 a9 01 	lds	r19, 0x01A9
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	88 2f       	mov	r24, r24
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	f9 01       	movw	r30, r18
    2ab6:	e8 0f       	add	r30, r24
    2ab8:	f9 1f       	adc	r31, r25
    2aba:	80 81       	ld	r24, Z
    2abc:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[0][Local__Uint8CounterJ]);
                        }
                        break;
                case 2:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE1);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	8f 5f       	subi	r24, 0xFF	; 255
    2ac4:	89 83       	std	Y+1, r24	; 0x01
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	88 30       	cpi	r24, 0x08	; 8
    2aca:	68 f3       	brcs	.-38     	; 0x2aa6 <LCD_CheckStatusSpecialChar+0xe0>
    2acc:	95 c0       	rjmp	.+298    	; 0x2bf8 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[1][Local__Uint8CounterJ]);
                        }
                        break;
                case 3:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE2);
    2ace:	80 e5       	ldi	r24, 0x50	; 80
    2ad0:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2ad4:	19 82       	std	Y+1, r1	; 0x01
    2ad6:	10 c0       	rjmp	.+32     	; 0x2af8 <LCD_CheckStatusSpecialChar+0x132>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[2][Local__Uint8CounterJ]);
    2ad8:	20 91 aa 01 	lds	r18, 0x01AA
    2adc:	30 91 ab 01 	lds	r19, 0x01AB
    2ae0:	89 81       	ldd	r24, Y+1	; 0x01
    2ae2:	88 2f       	mov	r24, r24
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	f9 01       	movw	r30, r18
    2ae8:	e8 0f       	add	r30, r24
    2aea:	f9 1f       	adc	r31, r25
    2aec:	80 81       	ld	r24, Z
    2aee:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[1][Local__Uint8CounterJ]);
                        }
                        break;
                case 3:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE2);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
    2af4:	8f 5f       	subi	r24, 0xFF	; 255
    2af6:	89 83       	std	Y+1, r24	; 0x01
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	88 30       	cpi	r24, 0x08	; 8
    2afc:	68 f3       	brcs	.-38     	; 0x2ad8 <LCD_CheckStatusSpecialChar+0x112>
    2afe:	7c c0       	rjmp	.+248    	; 0x2bf8 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[2][Local__Uint8CounterJ]);
                        }
                        break;
                case 4:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE3);
    2b00:	88 e5       	ldi	r24, 0x58	; 88
    2b02:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2b06:	19 82       	std	Y+1, r1	; 0x01
    2b08:	10 c0       	rjmp	.+32     	; 0x2b2a <LCD_CheckStatusSpecialChar+0x164>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[3][Local__Uint8CounterJ]);
    2b0a:	20 91 ac 01 	lds	r18, 0x01AC
    2b0e:	30 91 ad 01 	lds	r19, 0x01AD
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	88 2f       	mov	r24, r24
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	f9 01       	movw	r30, r18
    2b1a:	e8 0f       	add	r30, r24
    2b1c:	f9 1f       	adc	r31, r25
    2b1e:	80 81       	ld	r24, Z
    2b20:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[2][Local__Uint8CounterJ]);
                        }
                        break;
                case 4:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE3);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	8f 5f       	subi	r24, 0xFF	; 255
    2b28:	89 83       	std	Y+1, r24	; 0x01
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	88 30       	cpi	r24, 0x08	; 8
    2b2e:	68 f3       	brcs	.-38     	; 0x2b0a <LCD_CheckStatusSpecialChar+0x144>
    2b30:	63 c0       	rjmp	.+198    	; 0x2bf8 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[3][Local__Uint8CounterJ]);
                        }
                        break;
                case 5:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE4);
    2b32:	80 e6       	ldi	r24, 0x60	; 96
    2b34:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2b38:	19 82       	std	Y+1, r1	; 0x01
    2b3a:	10 c0       	rjmp	.+32     	; 0x2b5c <LCD_CheckStatusSpecialChar+0x196>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[4][Local__Uint8CounterJ]);
    2b3c:	20 91 ae 01 	lds	r18, 0x01AE
    2b40:	30 91 af 01 	lds	r19, 0x01AF
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	88 2f       	mov	r24, r24
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	f9 01       	movw	r30, r18
    2b4c:	e8 0f       	add	r30, r24
    2b4e:	f9 1f       	adc	r31, r25
    2b50:	80 81       	ld	r24, Z
    2b52:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[3][Local__Uint8CounterJ]);
                        }
                        break;
                case 5:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE4);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	8f 5f       	subi	r24, 0xFF	; 255
    2b5a:	89 83       	std	Y+1, r24	; 0x01
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	88 30       	cpi	r24, 0x08	; 8
    2b60:	68 f3       	brcs	.-38     	; 0x2b3c <LCD_CheckStatusSpecialChar+0x176>
    2b62:	4a c0       	rjmp	.+148    	; 0x2bf8 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[4][Local__Uint8CounterJ]);
                        }
                        break;
                case 6:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE5);
    2b64:	88 e6       	ldi	r24, 0x68	; 104
    2b66:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2b6a:	19 82       	std	Y+1, r1	; 0x01
    2b6c:	10 c0       	rjmp	.+32     	; 0x2b8e <LCD_CheckStatusSpecialChar+0x1c8>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[5][Local__Uint8CounterJ]);
    2b6e:	20 91 b0 01 	lds	r18, 0x01B0
    2b72:	30 91 b1 01 	lds	r19, 0x01B1
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	88 2f       	mov	r24, r24
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	f9 01       	movw	r30, r18
    2b7e:	e8 0f       	add	r30, r24
    2b80:	f9 1f       	adc	r31, r25
    2b82:	80 81       	ld	r24, Z
    2b84:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[4][Local__Uint8CounterJ]);
                        }
                        break;
                case 6:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE5);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	8f 5f       	subi	r24, 0xFF	; 255
    2b8c:	89 83       	std	Y+1, r24	; 0x01
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	88 30       	cpi	r24, 0x08	; 8
    2b92:	68 f3       	brcs	.-38     	; 0x2b6e <LCD_CheckStatusSpecialChar+0x1a8>
    2b94:	31 c0       	rjmp	.+98     	; 0x2bf8 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[5][Local__Uint8CounterJ]);
                        }
                        break;
                case 7:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE6);
    2b96:	80 e7       	ldi	r24, 0x70	; 112
    2b98:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2b9c:	19 82       	std	Y+1, r1	; 0x01
    2b9e:	10 c0       	rjmp	.+32     	; 0x2bc0 <LCD_CheckStatusSpecialChar+0x1fa>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[6][Local__Uint8CounterJ]);
    2ba0:	20 91 b2 01 	lds	r18, 0x01B2
    2ba4:	30 91 b3 01 	lds	r19, 0x01B3
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
    2baa:	88 2f       	mov	r24, r24
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	f9 01       	movw	r30, r18
    2bb0:	e8 0f       	add	r30, r24
    2bb2:	f9 1f       	adc	r31, r25
    2bb4:	80 81       	ld	r24, Z
    2bb6:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[5][Local__Uint8CounterJ]);
                        }
                        break;
                case 7:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE6);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	8f 5f       	subi	r24, 0xFF	; 255
    2bbe:	89 83       	std	Y+1, r24	; 0x01
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
    2bc2:	88 30       	cpi	r24, 0x08	; 8
    2bc4:	68 f3       	brcs	.-38     	; 0x2ba0 <LCD_CheckStatusSpecialChar+0x1da>
    2bc6:	18 c0       	rjmp	.+48     	; 0x2bf8 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[6][Local__Uint8CounterJ]);
                        }
                        break;
                case 8:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE7);
    2bc8:	88 e7       	ldi	r24, 0x78	; 120
    2bca:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2bce:	19 82       	std	Y+1, r1	; 0x01
    2bd0:	10 c0       	rjmp	.+32     	; 0x2bf2 <LCD_CheckStatusSpecialChar+0x22c>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[8][Local__Uint8CounterJ]);
    2bd2:	20 91 b6 01 	lds	r18, 0x01B6
    2bd6:	30 91 b7 01 	lds	r19, 0x01B7
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	88 2f       	mov	r24, r24
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	f9 01       	movw	r30, r18
    2be2:	e8 0f       	add	r30, r24
    2be4:	f9 1f       	adc	r31, r25
    2be6:	80 81       	ld	r24, Z
    2be8:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[6][Local__Uint8CounterJ]);
                        }
                        break;
                case 8:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE7);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2bec:	89 81       	ldd	r24, Y+1	; 0x01
    2bee:	8f 5f       	subi	r24, 0xFF	; 255
    2bf0:	89 83       	std	Y+1, r24	; 0x01
    2bf2:	89 81       	ldd	r24, Y+1	; 0x01
    2bf4:	88 30       	cpi	r24, 0x08	; 8
    2bf6:	68 f3       	brcs	.-38     	; 0x2bd2 <LCD_CheckStatusSpecialChar+0x20c>
                        break;
                default:
                        break;
                }

                LCD_CheckStatusGoToXY(Copy__Uint8LCDLine, Copy__Uint8DDRamLocation);
    2bf8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bfa:	6d 81       	ldd	r22, Y+5	; 0x05
    2bfc:	0e 94 19 13 	call	0x2632	; 0x2632 <LCD_CheckStatusGoToXY>
    2c00:	02 c0       	rjmp	.+4      	; 0x2c06 <LCD_CheckStatusSpecialChar+0x240>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	8a 83       	std	Y+2, r24	; 0x02
        }
        return Local_CheckStausReturnValue;
    2c06:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2c08:	27 96       	adiw	r28, 0x07	; 7
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	f8 94       	cli
    2c0e:	de bf       	out	0x3e, r29	; 62
    2c10:	0f be       	out	0x3f, r0	; 63
    2c12:	cd bf       	out	0x3d, r28	; 61
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	08 95       	ret

00002c1a <LCD_VoidShiftRight>:
Void LCD_VoidShiftRight(_uint8 Copy__Uint8PositionValue, _uint32 Copy__Uint32DelayValue)
{
    2c1a:	df 93       	push	r29
    2c1c:	cf 93       	push	r28
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
    2c22:	64 97       	sbiw	r28, 0x14	; 20
    2c24:	0f b6       	in	r0, 0x3f	; 63
    2c26:	f8 94       	cli
    2c28:	de bf       	out	0x3e, r29	; 62
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	cd bf       	out	0x3d, r28	; 61
    2c2e:	88 8b       	std	Y+16, r24	; 0x10
    2c30:	49 8b       	std	Y+17, r20	; 0x11
    2c32:	5a 8b       	std	Y+18, r21	; 0x12
    2c34:	6b 8b       	std	Y+19, r22	; 0x13
    2c36:	7c 8b       	std	Y+20, r23	; 0x14
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    2c38:	1f 86       	std	Y+15, r1	; 0x0f
    2c3a:	7c c0       	rjmp	.+248    	; 0x2d34 <LCD_VoidShiftRight+0x11a>
        {
                LCD_CheckStatusSendCmnd4bit(0b00011100);
    2c3c:	8c e1       	ldi	r24, 0x1C	; 28
    2c3e:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <LCD_CheckStatusSendCmnd4bit>
                _delay_ms(Copy__Uint32DelayValue);
    2c42:	69 89       	ldd	r22, Y+17	; 0x11
    2c44:	7a 89       	ldd	r23, Y+18	; 0x12
    2c46:	8b 89       	ldd	r24, Y+19	; 0x13
    2c48:	9c 89       	ldd	r25, Y+20	; 0x14
    2c4a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	8b 87       	std	Y+11, r24	; 0x0b
    2c54:	9c 87       	std	Y+12, r25	; 0x0c
    2c56:	ad 87       	std	Y+13, r26	; 0x0d
    2c58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	4a ef       	ldi	r20, 0xFA	; 250
    2c68:	54 e4       	ldi	r21, 0x44	; 68
    2c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	8f 83       	std	Y+7, r24	; 0x07
    2c74:	98 87       	std	Y+8, r25	; 0x08
    2c76:	a9 87       	std	Y+9, r26	; 0x09
    2c78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7c:	78 85       	ldd	r23, Y+8	; 0x08
    2c7e:	89 85       	ldd	r24, Y+9	; 0x09
    2c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e8       	ldi	r20, 0x80	; 128
    2c88:	5f e3       	ldi	r21, 0x3F	; 63
    2c8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c8e:	88 23       	and	r24, r24
    2c90:	2c f4       	brge	.+10     	; 0x2c9c <LCD_VoidShiftRight+0x82>
		__ticks = 1;
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	9e 83       	std	Y+6, r25	; 0x06
    2c98:	8d 83       	std	Y+5, r24	; 0x05
    2c9a:	3f c0       	rjmp	.+126    	; 0x2d1a <LCD_VoidShiftRight+0x100>
	else if (__tmp > 65535)
    2c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9e:	78 85       	ldd	r23, Y+8	; 0x08
    2ca0:	89 85       	ldd	r24, Y+9	; 0x09
    2ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	3f ef       	ldi	r19, 0xFF	; 255
    2ca8:	4f e7       	ldi	r20, 0x7F	; 127
    2caa:	57 e4       	ldi	r21, 0x47	; 71
    2cac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cb0:	18 16       	cp	r1, r24
    2cb2:	4c f5       	brge	.+82     	; 0x2d06 <LCD_VoidShiftRight+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	40 e2       	ldi	r20, 0x20	; 32
    2cc2:	51 e4       	ldi	r21, 0x41	; 65
    2cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	bc 01       	movw	r22, r24
    2cce:	cd 01       	movw	r24, r26
    2cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	9e 83       	std	Y+6, r25	; 0x06
    2cda:	8d 83       	std	Y+5, r24	; 0x05
    2cdc:	0f c0       	rjmp	.+30     	; 0x2cfc <LCD_VoidShiftRight+0xe2>
    2cde:	88 ec       	ldi	r24, 0xC8	; 200
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	9c 83       	std	Y+4, r25	; 0x04
    2ce4:	8b 83       	std	Y+3, r24	; 0x03
    2ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	f1 f7       	brne	.-4      	; 0x2cea <LCD_VoidShiftRight+0xd0>
    2cee:	9c 83       	std	Y+4, r25	; 0x04
    2cf0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	9e 83       	std	Y+6, r25	; 0x06
    2cfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2d00:	00 97       	sbiw	r24, 0x00	; 0
    2d02:	69 f7       	brne	.-38     	; 0x2cde <LCD_VoidShiftRight+0xc4>
    2d04:	14 c0       	rjmp	.+40     	; 0x2d2e <LCD_VoidShiftRight+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d06:	6f 81       	ldd	r22, Y+7	; 0x07
    2d08:	78 85       	ldd	r23, Y+8	; 0x08
    2d0a:	89 85       	ldd	r24, Y+9	; 0x09
    2d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	9e 83       	std	Y+6, r25	; 0x06
    2d18:	8d 83       	std	Y+5, r24	; 0x05
    2d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d1e:	9a 83       	std	Y+2, r25	; 0x02
    2d20:	89 83       	std	Y+1, r24	; 0x01
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	9a 81       	ldd	r25, Y+2	; 0x02
    2d26:	01 97       	sbiw	r24, 0x01	; 1
    2d28:	f1 f7       	brne	.-4      	; 0x2d26 <LCD_VoidShiftRight+0x10c>
    2d2a:	9a 83       	std	Y+2, r25	; 0x02
    2d2c:	89 83       	std	Y+1, r24	; 0x01
        return Local_CheckStausReturnValue;
}
Void LCD_VoidShiftRight(_uint8 Copy__Uint8PositionValue, _uint32 Copy__Uint32DelayValue)
{
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    2d2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d30:	8f 5f       	subi	r24, 0xFF	; 255
    2d32:	8f 87       	std	Y+15, r24	; 0x0f
    2d34:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d36:	88 89       	ldd	r24, Y+16	; 0x10
    2d38:	98 17       	cp	r25, r24
    2d3a:	08 f4       	brcc	.+2      	; 0x2d3e <LCD_VoidShiftRight+0x124>
    2d3c:	7f cf       	rjmp	.-258    	; 0x2c3c <LCD_VoidShiftRight+0x22>
        {
                LCD_CheckStatusSendCmnd4bit(0b00011100);
                _delay_ms(Copy__Uint32DelayValue);
        }
}
    2d3e:	64 96       	adiw	r28, 0x14	; 20
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	f8 94       	cli
    2d44:	de bf       	out	0x3e, r29	; 62
    2d46:	0f be       	out	0x3f, r0	; 63
    2d48:	cd bf       	out	0x3d, r28	; 61
    2d4a:	cf 91       	pop	r28
    2d4c:	df 91       	pop	r29
    2d4e:	08 95       	ret

00002d50 <LCD_CheckStatusShiftRightOrLeft>:
CheckStatus LCD_CheckStatusShiftRightOrLeft(_uint32 Copy__Uint32DelayValue)
{
    2d50:	df 93       	push	r29
    2d52:	cf 93       	push	r28
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
    2d58:	63 97       	sbiw	r28, 0x13	; 19
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	f8 94       	cli
    2d5e:	de bf       	out	0x3e, r29	; 62
    2d60:	0f be       	out	0x3f, r0	; 63
    2d62:	cd bf       	out	0x3d, r28	; 61
    2d64:	68 8b       	std	Y+16, r22	; 0x10
    2d66:	79 8b       	std	Y+17, r23	; 0x11
    2d68:	8a 8b       	std	Y+18, r24	; 0x12
    2d6a:	9b 8b       	std	Y+19, r25	; 0x13
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2d6c:	1f 86       	std	Y+15, r1	; 0x0f
        {

                if (LCD__UINT8_SHIFT_ACTIVATE == 0)
                {
                        //right
                        LCD_CheckStatusSendCmnd4bit(0b00011100);
    2d6e:	8c e1       	ldi	r24, 0x1C	; 28
    2d70:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <LCD_CheckStatusSendCmnd4bit>
                        _delay_ms(Copy__Uint32DelayValue);
    2d74:	68 89       	ldd	r22, Y+16	; 0x10
    2d76:	79 89       	ldd	r23, Y+17	; 0x11
    2d78:	8a 89       	ldd	r24, Y+18	; 0x12
    2d7a:	9b 89       	ldd	r25, Y+19	; 0x13
    2d7c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	8b 87       	std	Y+11, r24	; 0x0b
    2d86:	9c 87       	std	Y+12, r25	; 0x0c
    2d88:	ad 87       	std	Y+13, r26	; 0x0d
    2d8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	4a ef       	ldi	r20, 0xFA	; 250
    2d9a:	54 e4       	ldi	r21, 0x44	; 68
    2d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	8f 83       	std	Y+7, r24	; 0x07
    2da6:	98 87       	std	Y+8, r25	; 0x08
    2da8:	a9 87       	std	Y+9, r26	; 0x09
    2daa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dac:	6f 81       	ldd	r22, Y+7	; 0x07
    2dae:	78 85       	ldd	r23, Y+8	; 0x08
    2db0:	89 85       	ldd	r24, Y+9	; 0x09
    2db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	40 e8       	ldi	r20, 0x80	; 128
    2dba:	5f e3       	ldi	r21, 0x3F	; 63
    2dbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dc0:	88 23       	and	r24, r24
    2dc2:	2c f4       	brge	.+10     	; 0x2dce <LCD_CheckStatusShiftRightOrLeft+0x7e>
		__ticks = 1;
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	9e 83       	std	Y+6, r25	; 0x06
    2dca:	8d 83       	std	Y+5, r24	; 0x05
    2dcc:	3f c0       	rjmp	.+126    	; 0x2e4c <LCD_CheckStatusShiftRightOrLeft+0xfc>
	else if (__tmp > 65535)
    2dce:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd0:	78 85       	ldd	r23, Y+8	; 0x08
    2dd2:	89 85       	ldd	r24, Y+9	; 0x09
    2dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	3f ef       	ldi	r19, 0xFF	; 255
    2dda:	4f e7       	ldi	r20, 0x7F	; 127
    2ddc:	57 e4       	ldi	r21, 0x47	; 71
    2dde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2de2:	18 16       	cp	r1, r24
    2de4:	4c f5       	brge	.+82     	; 0x2e38 <LCD_CheckStatusShiftRightOrLeft+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2de8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	40 e2       	ldi	r20, 0x20	; 32
    2df4:	51 e4       	ldi	r21, 0x41	; 65
    2df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	bc 01       	movw	r22, r24
    2e00:	cd 01       	movw	r24, r26
    2e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	9e 83       	std	Y+6, r25	; 0x06
    2e0c:	8d 83       	std	Y+5, r24	; 0x05
    2e0e:	0f c0       	rjmp	.+30     	; 0x2e2e <LCD_CheckStatusShiftRightOrLeft+0xde>
    2e10:	88 ec       	ldi	r24, 0xC8	; 200
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	9c 83       	std	Y+4, r25	; 0x04
    2e16:	8b 83       	std	Y+3, r24	; 0x03
    2e18:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1c:	01 97       	sbiw	r24, 0x01	; 1
    2e1e:	f1 f7       	brne	.-4      	; 0x2e1c <LCD_CheckStatusShiftRightOrLeft+0xcc>
    2e20:	9c 83       	std	Y+4, r25	; 0x04
    2e22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e24:	8d 81       	ldd	r24, Y+5	; 0x05
    2e26:	9e 81       	ldd	r25, Y+6	; 0x06
    2e28:	01 97       	sbiw	r24, 0x01	; 1
    2e2a:	9e 83       	std	Y+6, r25	; 0x06
    2e2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e30:	9e 81       	ldd	r25, Y+6	; 0x06
    2e32:	00 97       	sbiw	r24, 0x00	; 0
    2e34:	69 f7       	brne	.-38     	; 0x2e10 <LCD_CheckStatusShiftRightOrLeft+0xc0>
    2e36:	14 c0       	rjmp	.+40     	; 0x2e60 <LCD_CheckStatusShiftRightOrLeft+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e38:	6f 81       	ldd	r22, Y+7	; 0x07
    2e3a:	78 85       	ldd	r23, Y+8	; 0x08
    2e3c:	89 85       	ldd	r24, Y+9	; 0x09
    2e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	9e 83       	std	Y+6, r25	; 0x06
    2e4a:	8d 83       	std	Y+5, r24	; 0x05
    2e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e50:	9a 83       	std	Y+2, r25	; 0x02
    2e52:	89 83       	std	Y+1, r24	; 0x01
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	9a 81       	ldd	r25, Y+2	; 0x02
    2e58:	01 97       	sbiw	r24, 0x01	; 1
    2e5a:	f1 f7       	brne	.-4      	; 0x2e58 <LCD_CheckStatusShiftRightOrLeft+0x108>
    2e5c:	9a 83       	std	Y+2, r25	; 0x02
    2e5e:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    2e60:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2e62:	63 96       	adiw	r28, 0x13	; 19
    2e64:	0f b6       	in	r0, 0x3f	; 63
    2e66:	f8 94       	cli
    2e68:	de bf       	out	0x3e, r29	; 62
    2e6a:	0f be       	out	0x3f, r0	; 63
    2e6c:	cd bf       	out	0x3d, r28	; 61
    2e6e:	cf 91       	pop	r28
    2e70:	df 91       	pop	r29
    2e72:	08 95       	ret

00002e74 <LCD_VoidShiftLeft>:
Void LCD_VoidShiftLeft(_uint8 Copy__Uint8PositionValue, _uint32 Copy__Uint32DelayValue)
{
    2e74:	df 93       	push	r29
    2e76:	cf 93       	push	r28
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
    2e7c:	64 97       	sbiw	r28, 0x14	; 20
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	f8 94       	cli
    2e82:	de bf       	out	0x3e, r29	; 62
    2e84:	0f be       	out	0x3f, r0	; 63
    2e86:	cd bf       	out	0x3d, r28	; 61
    2e88:	88 8b       	std	Y+16, r24	; 0x10
    2e8a:	49 8b       	std	Y+17, r20	; 0x11
    2e8c:	5a 8b       	std	Y+18, r21	; 0x12
    2e8e:	6b 8b       	std	Y+19, r22	; 0x13
    2e90:	7c 8b       	std	Y+20, r23	; 0x14
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    2e92:	1f 86       	std	Y+15, r1	; 0x0f
    2e94:	7c c0       	rjmp	.+248    	; 0x2f8e <LCD_VoidShiftLeft+0x11a>
        {
                LCD_CheckStatusSendCmnd4bit(0b00011000);
    2e96:	88 e1       	ldi	r24, 0x18	; 24
    2e98:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <LCD_CheckStatusSendCmnd4bit>
                _delay_ms(Copy__Uint32DelayValue);
    2e9c:	69 89       	ldd	r22, Y+17	; 0x11
    2e9e:	7a 89       	ldd	r23, Y+18	; 0x12
    2ea0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ea4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	8b 87       	std	Y+11, r24	; 0x0b
    2eae:	9c 87       	std	Y+12, r25	; 0x0c
    2eb0:	ad 87       	std	Y+13, r26	; 0x0d
    2eb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	4a ef       	ldi	r20, 0xFA	; 250
    2ec2:	54 e4       	ldi	r21, 0x44	; 68
    2ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	8f 83       	std	Y+7, r24	; 0x07
    2ece:	98 87       	std	Y+8, r25	; 0x08
    2ed0:	a9 87       	std	Y+9, r26	; 0x09
    2ed2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed6:	78 85       	ldd	r23, Y+8	; 0x08
    2ed8:	89 85       	ldd	r24, Y+9	; 0x09
    2eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 e8       	ldi	r20, 0x80	; 128
    2ee2:	5f e3       	ldi	r21, 0x3F	; 63
    2ee4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ee8:	88 23       	and	r24, r24
    2eea:	2c f4       	brge	.+10     	; 0x2ef6 <LCD_VoidShiftLeft+0x82>
		__ticks = 1;
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	9e 83       	std	Y+6, r25	; 0x06
    2ef2:	8d 83       	std	Y+5, r24	; 0x05
    2ef4:	3f c0       	rjmp	.+126    	; 0x2f74 <LCD_VoidShiftLeft+0x100>
	else if (__tmp > 65535)
    2ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef8:	78 85       	ldd	r23, Y+8	; 0x08
    2efa:	89 85       	ldd	r24, Y+9	; 0x09
    2efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efe:	20 e0       	ldi	r18, 0x00	; 0
    2f00:	3f ef       	ldi	r19, 0xFF	; 255
    2f02:	4f e7       	ldi	r20, 0x7F	; 127
    2f04:	57 e4       	ldi	r21, 0x47	; 71
    2f06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f0a:	18 16       	cp	r1, r24
    2f0c:	4c f5       	brge	.+82     	; 0x2f60 <LCD_VoidShiftLeft+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f10:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	40 e2       	ldi	r20, 0x20	; 32
    2f1c:	51 e4       	ldi	r21, 0x41	; 65
    2f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	bc 01       	movw	r22, r24
    2f28:	cd 01       	movw	r24, r26
    2f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	9e 83       	std	Y+6, r25	; 0x06
    2f34:	8d 83       	std	Y+5, r24	; 0x05
    2f36:	0f c0       	rjmp	.+30     	; 0x2f56 <LCD_VoidShiftLeft+0xe2>
    2f38:	88 ec       	ldi	r24, 0xC8	; 200
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	9c 83       	std	Y+4, r25	; 0x04
    2f3e:	8b 83       	std	Y+3, r24	; 0x03
    2f40:	8b 81       	ldd	r24, Y+3	; 0x03
    2f42:	9c 81       	ldd	r25, Y+4	; 0x04
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	f1 f7       	brne	.-4      	; 0x2f44 <LCD_VoidShiftLeft+0xd0>
    2f48:	9c 83       	std	Y+4, r25	; 0x04
    2f4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f50:	01 97       	sbiw	r24, 0x01	; 1
    2f52:	9e 83       	std	Y+6, r25	; 0x06
    2f54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f56:	8d 81       	ldd	r24, Y+5	; 0x05
    2f58:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5a:	00 97       	sbiw	r24, 0x00	; 0
    2f5c:	69 f7       	brne	.-38     	; 0x2f38 <LCD_VoidShiftLeft+0xc4>
    2f5e:	14 c0       	rjmp	.+40     	; 0x2f88 <LCD_VoidShiftLeft+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f60:	6f 81       	ldd	r22, Y+7	; 0x07
    2f62:	78 85       	ldd	r23, Y+8	; 0x08
    2f64:	89 85       	ldd	r24, Y+9	; 0x09
    2f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	9e 83       	std	Y+6, r25	; 0x06
    2f72:	8d 83       	std	Y+5, r24	; 0x05
    2f74:	8d 81       	ldd	r24, Y+5	; 0x05
    2f76:	9e 81       	ldd	r25, Y+6	; 0x06
    2f78:	9a 83       	std	Y+2, r25	; 0x02
    2f7a:	89 83       	std	Y+1, r24	; 0x01
    2f7c:	89 81       	ldd	r24, Y+1	; 0x01
    2f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f80:	01 97       	sbiw	r24, 0x01	; 1
    2f82:	f1 f7       	brne	.-4      	; 0x2f80 <LCD_VoidShiftLeft+0x10c>
    2f84:	9a 83       	std	Y+2, r25	; 0x02
    2f86:	89 83       	std	Y+1, r24	; 0x01
        return Local_CheckStausReturnValue;
}
Void LCD_VoidShiftLeft(_uint8 Copy__Uint8PositionValue, _uint32 Copy__Uint32DelayValue)
{
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    2f88:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f8a:	8f 5f       	subi	r24, 0xFF	; 255
    2f8c:	8f 87       	std	Y+15, r24	; 0x0f
    2f8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f90:	88 89       	ldd	r24, Y+16	; 0x10
    2f92:	98 17       	cp	r25, r24
    2f94:	08 f4       	brcc	.+2      	; 0x2f98 <LCD_VoidShiftLeft+0x124>
    2f96:	7f cf       	rjmp	.-258    	; 0x2e96 <LCD_VoidShiftLeft+0x22>
        {
                LCD_CheckStatusSendCmnd4bit(0b00011000);
                _delay_ms(Copy__Uint32DelayValue);
        }
}
    2f98:	64 96       	adiw	r28, 0x14	; 20
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	de bf       	out	0x3e, r29	; 62
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	cd bf       	out	0x3d, r28	; 61
    2fa4:	cf 91       	pop	r28
    2fa6:	df 91       	pop	r29
    2fa8:	08 95       	ret

00002faa <LCD_CheckStatusDisplaySpecialChar>:
CheckStatus LCD_CheckStatusDisplaySpecialChar(_uint8 Copy__Uint8Char)
{
    2faa:	df 93       	push	r29
    2fac:	cf 93       	push	r28
    2fae:	00 d0       	rcall	.+0      	; 0x2fb0 <LCD_CheckStatusDisplaySpecialChar+0x6>
    2fb0:	00 d0       	rcall	.+0      	; 0x2fb2 <LCD_CheckStatusDisplaySpecialChar+0x8>
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    2fb6:	8a 83       	std	Y+2, r24	; 0x02
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2fb8:	19 82       	std	Y+1, r1	; 0x01
        if (Copy__Uint8Char <= 8)
    2fba:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbc:	89 30       	cpi	r24, 0x09	; 9
    2fbe:	08 f0       	brcs	.+2      	; 0x2fc2 <LCD_CheckStatusDisplaySpecialChar+0x18>
    2fc0:	54 c0       	rjmp	.+168    	; 0x306a <LCD_CheckStatusDisplaySpecialChar+0xc0>
        {
                switch (Copy__Uint8Char)
    2fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc4:	28 2f       	mov	r18, r24
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	3c 83       	std	Y+4, r19	; 0x04
    2fca:	2b 83       	std	Y+3, r18	; 0x03
    2fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fce:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd0:	84 30       	cpi	r24, 0x04	; 4
    2fd2:	91 05       	cpc	r25, r1
    2fd4:	b1 f1       	breq	.+108    	; 0x3042 <LCD_CheckStatusDisplaySpecialChar+0x98>
    2fd6:	2b 81       	ldd	r18, Y+3	; 0x03
    2fd8:	3c 81       	ldd	r19, Y+4	; 0x04
    2fda:	25 30       	cpi	r18, 0x05	; 5
    2fdc:	31 05       	cpc	r19, r1
    2fde:	84 f4       	brge	.+32     	; 0x3000 <LCD_CheckStatusDisplaySpecialChar+0x56>
    2fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe4:	82 30       	cpi	r24, 0x02	; 2
    2fe6:	91 05       	cpc	r25, r1
    2fe8:	21 f1       	breq	.+72     	; 0x3032 <LCD_CheckStatusDisplaySpecialChar+0x88>
    2fea:	2b 81       	ldd	r18, Y+3	; 0x03
    2fec:	3c 81       	ldd	r19, Y+4	; 0x04
    2fee:	23 30       	cpi	r18, 0x03	; 3
    2ff0:	31 05       	cpc	r19, r1
    2ff2:	1c f5       	brge	.+70     	; 0x303a <LCD_CheckStatusDisplaySpecialChar+0x90>
    2ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff8:	81 30       	cpi	r24, 0x01	; 1
    2ffa:	91 05       	cpc	r25, r1
    2ffc:	b1 f0       	breq	.+44     	; 0x302a <LCD_CheckStatusDisplaySpecialChar+0x80>
    2ffe:	37 c0       	rjmp	.+110    	; 0x306e <LCD_CheckStatusDisplaySpecialChar+0xc4>
    3000:	2b 81       	ldd	r18, Y+3	; 0x03
    3002:	3c 81       	ldd	r19, Y+4	; 0x04
    3004:	26 30       	cpi	r18, 0x06	; 6
    3006:	31 05       	cpc	r19, r1
    3008:	21 f1       	breq	.+72     	; 0x3052 <LCD_CheckStatusDisplaySpecialChar+0xa8>
    300a:	8b 81       	ldd	r24, Y+3	; 0x03
    300c:	9c 81       	ldd	r25, Y+4	; 0x04
    300e:	86 30       	cpi	r24, 0x06	; 6
    3010:	91 05       	cpc	r25, r1
    3012:	dc f0       	brlt	.+54     	; 0x304a <LCD_CheckStatusDisplaySpecialChar+0xa0>
    3014:	2b 81       	ldd	r18, Y+3	; 0x03
    3016:	3c 81       	ldd	r19, Y+4	; 0x04
    3018:	27 30       	cpi	r18, 0x07	; 7
    301a:	31 05       	cpc	r19, r1
    301c:	f1 f0       	breq	.+60     	; 0x305a <LCD_CheckStatusDisplaySpecialChar+0xb0>
    301e:	8b 81       	ldd	r24, Y+3	; 0x03
    3020:	9c 81       	ldd	r25, Y+4	; 0x04
    3022:	88 30       	cpi	r24, 0x08	; 8
    3024:	91 05       	cpc	r25, r1
    3026:	e9 f0       	breq	.+58     	; 0x3062 <LCD_CheckStatusDisplaySpecialChar+0xb8>
    3028:	22 c0       	rjmp	.+68     	; 0x306e <LCD_CheckStatusDisplaySpecialChar+0xc4>
                {

                case 1:
                        LCD_CheckStatusSendChar4bit(0);
    302a:	80 e0       	ldi	r24, 0x00	; 0
    302c:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
    3030:	1e c0       	rjmp	.+60     	; 0x306e <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 2:
                        LCD_CheckStatusSendChar4bit(1);
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
    3038:	1a c0       	rjmp	.+52     	; 0x306e <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 3:
                        LCD_CheckStatusSendChar4bit(2);
    303a:	82 e0       	ldi	r24, 0x02	; 2
    303c:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
    3040:	16 c0       	rjmp	.+44     	; 0x306e <LCD_CheckStatusDisplaySpecialChar+0xc4>

                        break;
                case 4:
                        LCD_CheckStatusSendChar4bit(3);
    3042:	83 e0       	ldi	r24, 0x03	; 3
    3044:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
    3048:	12 c0       	rjmp	.+36     	; 0x306e <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 5:
                        LCD_CheckStatusSendChar4bit(4);
    304a:	84 e0       	ldi	r24, 0x04	; 4
    304c:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
    3050:	0e c0       	rjmp	.+28     	; 0x306e <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 6:
                        LCD_CheckStatusSendChar4bit(5);
    3052:	85 e0       	ldi	r24, 0x05	; 5
    3054:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
    3058:	0a c0       	rjmp	.+20     	; 0x306e <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 7:
                        LCD_CheckStatusSendChar4bit(6);
    305a:	86 e0       	ldi	r24, 0x06	; 6
    305c:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
    3060:	06 c0       	rjmp	.+12     	; 0x306e <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 8:
                        LCD_CheckStatusSendChar4bit(7);
    3062:	87 e0       	ldi	r24, 0x07	; 7
    3064:	0e 94 11 1b 	call	0x3622	; 0x3622 <LCD_CheckStatusSendChar4bit>
    3068:	02 c0       	rjmp	.+4      	; 0x306e <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                }
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	89 83       	std	Y+1, r24	; 0x01
        }
        return Local_CheckStausReturnValue;
    306e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3070:	0f 90       	pop	r0
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	cf 91       	pop	r28
    307a:	df 91       	pop	r29
    307c:	08 95       	ret

0000307e <LCD_VoidInit4bit>:
Void LCD_VoidInit4bit(Void)
{
    307e:	0f 93       	push	r16
    3080:	1f 93       	push	r17
    3082:	df 93       	push	r29
    3084:	cf 93       	push	r28
    3086:	cd b7       	in	r28, 0x3d	; 61
    3088:	de b7       	in	r29, 0x3e	; 62
    308a:	cc 54       	subi	r28, 0x4C	; 76
    308c:	d0 40       	sbci	r29, 0x00	; 0
    308e:	0f b6       	in	r0, 0x3f	; 63
    3090:	f8 94       	cli
    3092:	de bf       	out	0x3e, r29	; 62
    3094:	0f be       	out	0x3f, r0	; 63
    3096:	cd bf       	out	0x3d, r28	; 61
    3098:	fe 01       	movw	r30, r28
    309a:	e7 5b       	subi	r30, 0xB7	; 183
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	ac e0       	ldi	r26, 0x0C	; 12
    30a4:	b2 e4       	ldi	r27, 0x42	; 66
    30a6:	80 83       	st	Z, r24
    30a8:	91 83       	std	Z+1, r25	; 0x01
    30aa:	a2 83       	std	Z+2, r26	; 0x02
    30ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ae:	8e 01       	movw	r16, r28
    30b0:	0b 5b       	subi	r16, 0xBB	; 187
    30b2:	1f 4f       	sbci	r17, 0xFF	; 255
    30b4:	fe 01       	movw	r30, r28
    30b6:	e7 5b       	subi	r30, 0xB7	; 183
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	60 81       	ld	r22, Z
    30bc:	71 81       	ldd	r23, Z+1	; 0x01
    30be:	82 81       	ldd	r24, Z+2	; 0x02
    30c0:	93 81       	ldd	r25, Z+3	; 0x03
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	4a ef       	ldi	r20, 0xFA	; 250
    30c8:	54 e4       	ldi	r21, 0x44	; 68
    30ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	f8 01       	movw	r30, r16
    30d4:	80 83       	st	Z, r24
    30d6:	91 83       	std	Z+1, r25	; 0x01
    30d8:	a2 83       	std	Z+2, r26	; 0x02
    30da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30dc:	fe 01       	movw	r30, r28
    30de:	eb 5b       	subi	r30, 0xBB	; 187
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	60 81       	ld	r22, Z
    30e4:	71 81       	ldd	r23, Z+1	; 0x01
    30e6:	82 81       	ldd	r24, Z+2	; 0x02
    30e8:	93 81       	ldd	r25, Z+3	; 0x03
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	40 e8       	ldi	r20, 0x80	; 128
    30f0:	5f e3       	ldi	r21, 0x3F	; 63
    30f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30f6:	88 23       	and	r24, r24
    30f8:	44 f4       	brge	.+16     	; 0x310a <LCD_VoidInit4bit+0x8c>
		__ticks = 1;
    30fa:	fe 01       	movw	r30, r28
    30fc:	ed 5b       	subi	r30, 0xBD	; 189
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	91 83       	std	Z+1, r25	; 0x01
    3106:	80 83       	st	Z, r24
    3108:	64 c0       	rjmp	.+200    	; 0x31d2 <LCD_VoidInit4bit+0x154>
	else if (__tmp > 65535)
    310a:	fe 01       	movw	r30, r28
    310c:	eb 5b       	subi	r30, 0xBB	; 187
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	60 81       	ld	r22, Z
    3112:	71 81       	ldd	r23, Z+1	; 0x01
    3114:	82 81       	ldd	r24, Z+2	; 0x02
    3116:	93 81       	ldd	r25, Z+3	; 0x03
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	3f ef       	ldi	r19, 0xFF	; 255
    311c:	4f e7       	ldi	r20, 0x7F	; 127
    311e:	57 e4       	ldi	r21, 0x47	; 71
    3120:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3124:	18 16       	cp	r1, r24
    3126:	0c f0       	brlt	.+2      	; 0x312a <LCD_VoidInit4bit+0xac>
    3128:	43 c0       	rjmp	.+134    	; 0x31b0 <LCD_VoidInit4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    312a:	fe 01       	movw	r30, r28
    312c:	e7 5b       	subi	r30, 0xB7	; 183
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	60 81       	ld	r22, Z
    3132:	71 81       	ldd	r23, Z+1	; 0x01
    3134:	82 81       	ldd	r24, Z+2	; 0x02
    3136:	93 81       	ldd	r25, Z+3	; 0x03
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	40 e2       	ldi	r20, 0x20	; 32
    313e:	51 e4       	ldi	r21, 0x41	; 65
    3140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3144:	dc 01       	movw	r26, r24
    3146:	cb 01       	movw	r24, r22
    3148:	8e 01       	movw	r16, r28
    314a:	0d 5b       	subi	r16, 0xBD	; 189
    314c:	1f 4f       	sbci	r17, 0xFF	; 255
    314e:	bc 01       	movw	r22, r24
    3150:	cd 01       	movw	r24, r26
    3152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	f8 01       	movw	r30, r16
    315c:	91 83       	std	Z+1, r25	; 0x01
    315e:	80 83       	st	Z, r24
    3160:	1f c0       	rjmp	.+62     	; 0x31a0 <LCD_VoidInit4bit+0x122>
    3162:	fe 01       	movw	r30, r28
    3164:	ef 5b       	subi	r30, 0xBF	; 191
    3166:	ff 4f       	sbci	r31, 0xFF	; 255
    3168:	88 ec       	ldi	r24, 0xC8	; 200
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	91 83       	std	Z+1, r25	; 0x01
    316e:	80 83       	st	Z, r24
    3170:	fe 01       	movw	r30, r28
    3172:	ef 5b       	subi	r30, 0xBF	; 191
    3174:	ff 4f       	sbci	r31, 0xFF	; 255
    3176:	80 81       	ld	r24, Z
    3178:	91 81       	ldd	r25, Z+1	; 0x01
    317a:	01 97       	sbiw	r24, 0x01	; 1
    317c:	f1 f7       	brne	.-4      	; 0x317a <LCD_VoidInit4bit+0xfc>
    317e:	fe 01       	movw	r30, r28
    3180:	ef 5b       	subi	r30, 0xBF	; 191
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	91 83       	std	Z+1, r25	; 0x01
    3186:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3188:	de 01       	movw	r26, r28
    318a:	ad 5b       	subi	r26, 0xBD	; 189
    318c:	bf 4f       	sbci	r27, 0xFF	; 255
    318e:	fe 01       	movw	r30, r28
    3190:	ed 5b       	subi	r30, 0xBD	; 189
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	80 81       	ld	r24, Z
    3196:	91 81       	ldd	r25, Z+1	; 0x01
    3198:	01 97       	sbiw	r24, 0x01	; 1
    319a:	11 96       	adiw	r26, 0x01	; 1
    319c:	9c 93       	st	X, r25
    319e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a0:	fe 01       	movw	r30, r28
    31a2:	ed 5b       	subi	r30, 0xBD	; 189
    31a4:	ff 4f       	sbci	r31, 0xFF	; 255
    31a6:	80 81       	ld	r24, Z
    31a8:	91 81       	ldd	r25, Z+1	; 0x01
    31aa:	00 97       	sbiw	r24, 0x00	; 0
    31ac:	d1 f6       	brne	.-76     	; 0x3162 <LCD_VoidInit4bit+0xe4>
    31ae:	24 c0       	rjmp	.+72     	; 0x31f8 <LCD_VoidInit4bit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b0:	8e 01       	movw	r16, r28
    31b2:	0d 5b       	subi	r16, 0xBD	; 189
    31b4:	1f 4f       	sbci	r17, 0xFF	; 255
    31b6:	fe 01       	movw	r30, r28
    31b8:	eb 5b       	subi	r30, 0xBB	; 187
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	60 81       	ld	r22, Z
    31be:	71 81       	ldd	r23, Z+1	; 0x01
    31c0:	82 81       	ldd	r24, Z+2	; 0x02
    31c2:	93 81       	ldd	r25, Z+3	; 0x03
    31c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	f8 01       	movw	r30, r16
    31ce:	91 83       	std	Z+1, r25	; 0x01
    31d0:	80 83       	st	Z, r24
    31d2:	fe 01       	movw	r30, r28
    31d4:	ed 5b       	subi	r30, 0xBD	; 189
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	80 81       	ld	r24, Z
    31da:	91 81       	ldd	r25, Z+1	; 0x01
    31dc:	fe 01       	movw	r30, r28
    31de:	ff 96       	adiw	r30, 0x3f	; 63
    31e0:	91 83       	std	Z+1, r25	; 0x01
    31e2:	80 83       	st	Z, r24
    31e4:	fe 01       	movw	r30, r28
    31e6:	ff 96       	adiw	r30, 0x3f	; 63
    31e8:	80 81       	ld	r24, Z
    31ea:	91 81       	ldd	r25, Z+1	; 0x01
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <LCD_VoidInit4bit+0x16e>
    31f0:	fe 01       	movw	r30, r28
    31f2:	ff 96       	adiw	r30, 0x3f	; 63
    31f4:	91 83       	std	Z+1, r25	; 0x01
    31f6:	80 83       	st	Z, r24
        _delay_ms(35);
        LCD_CheckStatusSendCmnd(0b00100000);
    31f8:	80 e2       	ldi	r24, 0x20	; 32
    31fa:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b00100000);
    31fe:	80 e2       	ldi	r24, 0x20	; 32
    3200:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b11000000);
    3204:	80 ec       	ldi	r24, 0xC0	; 192
    3206:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_CheckStatusSendCmnd>
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	a0 e2       	ldi	r26, 0x20	; 32
    3210:	b2 e4       	ldi	r27, 0x42	; 66
    3212:	8b af       	std	Y+59, r24	; 0x3b
    3214:	9c af       	std	Y+60, r25	; 0x3c
    3216:	ad af       	std	Y+61, r26	; 0x3d
    3218:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    321a:	6b ad       	ldd	r22, Y+59	; 0x3b
    321c:	7c ad       	ldd	r23, Y+60	; 0x3c
    321e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3220:	9e ad       	ldd	r25, Y+62	; 0x3e
    3222:	2b ea       	ldi	r18, 0xAB	; 171
    3224:	3a ea       	ldi	r19, 0xAA	; 170
    3226:	4a e2       	ldi	r20, 0x2A	; 42
    3228:	50 e4       	ldi	r21, 0x40	; 64
    322a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	8f ab       	std	Y+55, r24	; 0x37
    3234:	98 af       	std	Y+56, r25	; 0x38
    3236:	a9 af       	std	Y+57, r26	; 0x39
    3238:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    323a:	6f a9       	ldd	r22, Y+55	; 0x37
    323c:	78 ad       	ldd	r23, Y+56	; 0x38
    323e:	89 ad       	ldd	r24, Y+57	; 0x39
    3240:	9a ad       	ldd	r25, Y+58	; 0x3a
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	40 e8       	ldi	r20, 0x80	; 128
    3248:	5f e3       	ldi	r21, 0x3F	; 63
    324a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    324e:	88 23       	and	r24, r24
    3250:	1c f4       	brge	.+6      	; 0x3258 <LCD_VoidInit4bit+0x1da>
		__ticks = 1;
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	8e ab       	std	Y+54, r24	; 0x36
    3256:	91 c0       	rjmp	.+290    	; 0x337a <LCD_VoidInit4bit+0x2fc>
	else if (__tmp > 255)
    3258:	6f a9       	ldd	r22, Y+55	; 0x37
    325a:	78 ad       	ldd	r23, Y+56	; 0x38
    325c:	89 ad       	ldd	r24, Y+57	; 0x39
    325e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	4f e7       	ldi	r20, 0x7F	; 127
    3266:	53 e4       	ldi	r21, 0x43	; 67
    3268:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    326c:	18 16       	cp	r1, r24
    326e:	0c f0       	brlt	.+2      	; 0x3272 <LCD_VoidInit4bit+0x1f4>
    3270:	7b c0       	rjmp	.+246    	; 0x3368 <LCD_VoidInit4bit+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    3272:	6b ad       	ldd	r22, Y+59	; 0x3b
    3274:	7c ad       	ldd	r23, Y+60	; 0x3c
    3276:	8d ad       	ldd	r24, Y+61	; 0x3d
    3278:	9e ad       	ldd	r25, Y+62	; 0x3e
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	4a e7       	ldi	r20, 0x7A	; 122
    3280:	54 e4       	ldi	r21, 0x44	; 68
    3282:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	8a ab       	std	Y+50, r24	; 0x32
    328c:	9b ab       	std	Y+51, r25	; 0x33
    328e:	ac ab       	std	Y+52, r26	; 0x34
    3290:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3292:	6a a9       	ldd	r22, Y+50	; 0x32
    3294:	7b a9       	ldd	r23, Y+51	; 0x33
    3296:	8c a9       	ldd	r24, Y+52	; 0x34
    3298:	9d a9       	ldd	r25, Y+53	; 0x35
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	4a ef       	ldi	r20, 0xFA	; 250
    32a0:	54 e4       	ldi	r21, 0x44	; 68
    32a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a6:	dc 01       	movw	r26, r24
    32a8:	cb 01       	movw	r24, r22
    32aa:	8e a7       	std	Y+46, r24	; 0x2e
    32ac:	9f a7       	std	Y+47, r25	; 0x2f
    32ae:	a8 ab       	std	Y+48, r26	; 0x30
    32b0:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    32b2:	6e a5       	ldd	r22, Y+46	; 0x2e
    32b4:	7f a5       	ldd	r23, Y+47	; 0x2f
    32b6:	88 a9       	ldd	r24, Y+48	; 0x30
    32b8:	99 a9       	ldd	r25, Y+49	; 0x31
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	40 e8       	ldi	r20, 0x80	; 128
    32c0:	5f e3       	ldi	r21, 0x3F	; 63
    32c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32c6:	88 23       	and	r24, r24
    32c8:	2c f4       	brge	.+10     	; 0x32d4 <LCD_VoidInit4bit+0x256>
		__ticks = 1;
    32ca:	81 e0       	ldi	r24, 0x01	; 1
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	9d a7       	std	Y+45, r25	; 0x2d
    32d0:	8c a7       	std	Y+44, r24	; 0x2c
    32d2:	3f c0       	rjmp	.+126    	; 0x3352 <LCD_VoidInit4bit+0x2d4>
	else if (__tmp > 65535)
    32d4:	6e a5       	ldd	r22, Y+46	; 0x2e
    32d6:	7f a5       	ldd	r23, Y+47	; 0x2f
    32d8:	88 a9       	ldd	r24, Y+48	; 0x30
    32da:	99 a9       	ldd	r25, Y+49	; 0x31
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	3f ef       	ldi	r19, 0xFF	; 255
    32e0:	4f e7       	ldi	r20, 0x7F	; 127
    32e2:	57 e4       	ldi	r21, 0x47	; 71
    32e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32e8:	18 16       	cp	r1, r24
    32ea:	4c f5       	brge	.+82     	; 0x333e <LCD_VoidInit4bit+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ec:	6a a9       	ldd	r22, Y+50	; 0x32
    32ee:	7b a9       	ldd	r23, Y+51	; 0x33
    32f0:	8c a9       	ldd	r24, Y+52	; 0x34
    32f2:	9d a9       	ldd	r25, Y+53	; 0x35
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	40 e2       	ldi	r20, 0x20	; 32
    32fa:	51 e4       	ldi	r21, 0x41	; 65
    32fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	bc 01       	movw	r22, r24
    3306:	cd 01       	movw	r24, r26
    3308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330c:	dc 01       	movw	r26, r24
    330e:	cb 01       	movw	r24, r22
    3310:	9d a7       	std	Y+45, r25	; 0x2d
    3312:	8c a7       	std	Y+44, r24	; 0x2c
    3314:	0f c0       	rjmp	.+30     	; 0x3334 <LCD_VoidInit4bit+0x2b6>
    3316:	88 ec       	ldi	r24, 0xC8	; 200
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	9b a7       	std	Y+43, r25	; 0x2b
    331c:	8a a7       	std	Y+42, r24	; 0x2a
    331e:	8a a5       	ldd	r24, Y+42	; 0x2a
    3320:	9b a5       	ldd	r25, Y+43	; 0x2b
    3322:	01 97       	sbiw	r24, 0x01	; 1
    3324:	f1 f7       	brne	.-4      	; 0x3322 <LCD_VoidInit4bit+0x2a4>
    3326:	9b a7       	std	Y+43, r25	; 0x2b
    3328:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    332a:	8c a5       	ldd	r24, Y+44	; 0x2c
    332c:	9d a5       	ldd	r25, Y+45	; 0x2d
    332e:	01 97       	sbiw	r24, 0x01	; 1
    3330:	9d a7       	std	Y+45, r25	; 0x2d
    3332:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3334:	8c a5       	ldd	r24, Y+44	; 0x2c
    3336:	9d a5       	ldd	r25, Y+45	; 0x2d
    3338:	00 97       	sbiw	r24, 0x00	; 0
    333a:	69 f7       	brne	.-38     	; 0x3316 <LCD_VoidInit4bit+0x298>
    333c:	24 c0       	rjmp	.+72     	; 0x3386 <LCD_VoidInit4bit+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    333e:	6e a5       	ldd	r22, Y+46	; 0x2e
    3340:	7f a5       	ldd	r23, Y+47	; 0x2f
    3342:	88 a9       	ldd	r24, Y+48	; 0x30
    3344:	99 a9       	ldd	r25, Y+49	; 0x31
    3346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	9d a7       	std	Y+45, r25	; 0x2d
    3350:	8c a7       	std	Y+44, r24	; 0x2c
    3352:	8c a5       	ldd	r24, Y+44	; 0x2c
    3354:	9d a5       	ldd	r25, Y+45	; 0x2d
    3356:	99 a7       	std	Y+41, r25	; 0x29
    3358:	88 a7       	std	Y+40, r24	; 0x28
    335a:	88 a5       	ldd	r24, Y+40	; 0x28
    335c:	99 a5       	ldd	r25, Y+41	; 0x29
    335e:	01 97       	sbiw	r24, 0x01	; 1
    3360:	f1 f7       	brne	.-4      	; 0x335e <LCD_VoidInit4bit+0x2e0>
    3362:	99 a7       	std	Y+41, r25	; 0x29
    3364:	88 a7       	std	Y+40, r24	; 0x28
    3366:	0f c0       	rjmp	.+30     	; 0x3386 <LCD_VoidInit4bit+0x308>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3368:	6f a9       	ldd	r22, Y+55	; 0x37
    336a:	78 ad       	ldd	r23, Y+56	; 0x38
    336c:	89 ad       	ldd	r24, Y+57	; 0x39
    336e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	8e ab       	std	Y+54, r24	; 0x36
    337a:	8e a9       	ldd	r24, Y+54	; 0x36
    337c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    337e:	8f a1       	ldd	r24, Y+39	; 0x27
    3380:	8a 95       	dec	r24
    3382:	f1 f7       	brne	.-4      	; 0x3380 <LCD_VoidInit4bit+0x302>
    3384:	8f a3       	std	Y+39, r24	; 0x27
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00000000);
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b11110000);
    338c:	80 ef       	ldi	r24, 0xF0	; 240
    338e:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_CheckStatusSendCmnd>
    3392:	80 e0       	ldi	r24, 0x00	; 0
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	a0 e2       	ldi	r26, 0x20	; 32
    3398:	b2 e4       	ldi	r27, 0x42	; 66
    339a:	8b a3       	std	Y+35, r24	; 0x23
    339c:	9c a3       	std	Y+36, r25	; 0x24
    339e:	ad a3       	std	Y+37, r26	; 0x25
    33a0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    33a2:	6b a1       	ldd	r22, Y+35	; 0x23
    33a4:	7c a1       	ldd	r23, Y+36	; 0x24
    33a6:	8d a1       	ldd	r24, Y+37	; 0x25
    33a8:	9e a1       	ldd	r25, Y+38	; 0x26
    33aa:	2b ea       	ldi	r18, 0xAB	; 171
    33ac:	3a ea       	ldi	r19, 0xAA	; 170
    33ae:	4a e2       	ldi	r20, 0x2A	; 42
    33b0:	50 e4       	ldi	r21, 0x40	; 64
    33b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	8f 8f       	std	Y+31, r24	; 0x1f
    33bc:	98 a3       	std	Y+32, r25	; 0x20
    33be:	a9 a3       	std	Y+33, r26	; 0x21
    33c0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    33c2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    33c4:	78 a1       	ldd	r23, Y+32	; 0x20
    33c6:	89 a1       	ldd	r24, Y+33	; 0x21
    33c8:	9a a1       	ldd	r25, Y+34	; 0x22
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	40 e8       	ldi	r20, 0x80	; 128
    33d0:	5f e3       	ldi	r21, 0x3F	; 63
    33d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33d6:	88 23       	and	r24, r24
    33d8:	1c f4       	brge	.+6      	; 0x33e0 <LCD_VoidInit4bit+0x362>
		__ticks = 1;
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	8e 8f       	std	Y+30, r24	; 0x1e
    33de:	91 c0       	rjmp	.+290    	; 0x3502 <LCD_VoidInit4bit+0x484>
	else if (__tmp > 255)
    33e0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    33e2:	78 a1       	ldd	r23, Y+32	; 0x20
    33e4:	89 a1       	ldd	r24, Y+33	; 0x21
    33e6:	9a a1       	ldd	r25, Y+34	; 0x22
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	4f e7       	ldi	r20, 0x7F	; 127
    33ee:	53 e4       	ldi	r21, 0x43	; 67
    33f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33f4:	18 16       	cp	r1, r24
    33f6:	0c f0       	brlt	.+2      	; 0x33fa <LCD_VoidInit4bit+0x37c>
    33f8:	7b c0       	rjmp	.+246    	; 0x34f0 <LCD_VoidInit4bit+0x472>
	{
		_delay_ms(__us / 1000.0);
    33fa:	6b a1       	ldd	r22, Y+35	; 0x23
    33fc:	7c a1       	ldd	r23, Y+36	; 0x24
    33fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3400:	9e a1       	ldd	r25, Y+38	; 0x26
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	4a e7       	ldi	r20, 0x7A	; 122
    3408:	54 e4       	ldi	r21, 0x44	; 68
    340a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	8a 8f       	std	Y+26, r24	; 0x1a
    3414:	9b 8f       	std	Y+27, r25	; 0x1b
    3416:	ac 8f       	std	Y+28, r26	; 0x1c
    3418:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    341a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    341c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    341e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3420:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	4a ef       	ldi	r20, 0xFA	; 250
    3428:	54 e4       	ldi	r21, 0x44	; 68
    342a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	8e 8b       	std	Y+22, r24	; 0x16
    3434:	9f 8b       	std	Y+23, r25	; 0x17
    3436:	a8 8f       	std	Y+24, r26	; 0x18
    3438:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    343a:	6e 89       	ldd	r22, Y+22	; 0x16
    343c:	7f 89       	ldd	r23, Y+23	; 0x17
    343e:	88 8d       	ldd	r24, Y+24	; 0x18
    3440:	99 8d       	ldd	r25, Y+25	; 0x19
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	40 e8       	ldi	r20, 0x80	; 128
    3448:	5f e3       	ldi	r21, 0x3F	; 63
    344a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    344e:	88 23       	and	r24, r24
    3450:	2c f4       	brge	.+10     	; 0x345c <LCD_VoidInit4bit+0x3de>
		__ticks = 1;
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	9d 8b       	std	Y+21, r25	; 0x15
    3458:	8c 8b       	std	Y+20, r24	; 0x14
    345a:	3f c0       	rjmp	.+126    	; 0x34da <LCD_VoidInit4bit+0x45c>
	else if (__tmp > 65535)
    345c:	6e 89       	ldd	r22, Y+22	; 0x16
    345e:	7f 89       	ldd	r23, Y+23	; 0x17
    3460:	88 8d       	ldd	r24, Y+24	; 0x18
    3462:	99 8d       	ldd	r25, Y+25	; 0x19
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	3f ef       	ldi	r19, 0xFF	; 255
    3468:	4f e7       	ldi	r20, 0x7F	; 127
    346a:	57 e4       	ldi	r21, 0x47	; 71
    346c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3470:	18 16       	cp	r1, r24
    3472:	4c f5       	brge	.+82     	; 0x34c6 <LCD_VoidInit4bit+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3474:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3476:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3478:	8c 8d       	ldd	r24, Y+28	; 0x1c
    347a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	40 e2       	ldi	r20, 0x20	; 32
    3482:	51 e4       	ldi	r21, 0x41	; 65
    3484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	bc 01       	movw	r22, r24
    348e:	cd 01       	movw	r24, r26
    3490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	9d 8b       	std	Y+21, r25	; 0x15
    349a:	8c 8b       	std	Y+20, r24	; 0x14
    349c:	0f c0       	rjmp	.+30     	; 0x34bc <LCD_VoidInit4bit+0x43e>
    349e:	88 ec       	ldi	r24, 0xC8	; 200
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	9b 8b       	std	Y+19, r25	; 0x13
    34a4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34a6:	8a 89       	ldd	r24, Y+18	; 0x12
    34a8:	9b 89       	ldd	r25, Y+19	; 0x13
    34aa:	01 97       	sbiw	r24, 0x01	; 1
    34ac:	f1 f7       	brne	.-4      	; 0x34aa <LCD_VoidInit4bit+0x42c>
    34ae:	9b 8b       	std	Y+19, r25	; 0x13
    34b0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b2:	8c 89       	ldd	r24, Y+20	; 0x14
    34b4:	9d 89       	ldd	r25, Y+21	; 0x15
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	9d 8b       	std	Y+21, r25	; 0x15
    34ba:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34bc:	8c 89       	ldd	r24, Y+20	; 0x14
    34be:	9d 89       	ldd	r25, Y+21	; 0x15
    34c0:	00 97       	sbiw	r24, 0x00	; 0
    34c2:	69 f7       	brne	.-38     	; 0x349e <LCD_VoidInit4bit+0x420>
    34c4:	24 c0       	rjmp	.+72     	; 0x350e <LCD_VoidInit4bit+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c6:	6e 89       	ldd	r22, Y+22	; 0x16
    34c8:	7f 89       	ldd	r23, Y+23	; 0x17
    34ca:	88 8d       	ldd	r24, Y+24	; 0x18
    34cc:	99 8d       	ldd	r25, Y+25	; 0x19
    34ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d2:	dc 01       	movw	r26, r24
    34d4:	cb 01       	movw	r24, r22
    34d6:	9d 8b       	std	Y+21, r25	; 0x15
    34d8:	8c 8b       	std	Y+20, r24	; 0x14
    34da:	8c 89       	ldd	r24, Y+20	; 0x14
    34dc:	9d 89       	ldd	r25, Y+21	; 0x15
    34de:	99 8b       	std	Y+17, r25	; 0x11
    34e0:	88 8b       	std	Y+16, r24	; 0x10
    34e2:	88 89       	ldd	r24, Y+16	; 0x10
    34e4:	99 89       	ldd	r25, Y+17	; 0x11
    34e6:	01 97       	sbiw	r24, 0x01	; 1
    34e8:	f1 f7       	brne	.-4      	; 0x34e6 <LCD_VoidInit4bit+0x468>
    34ea:	99 8b       	std	Y+17, r25	; 0x11
    34ec:	88 8b       	std	Y+16, r24	; 0x10
    34ee:	0f c0       	rjmp	.+30     	; 0x350e <LCD_VoidInit4bit+0x490>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    34f0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    34f2:	78 a1       	ldd	r23, Y+32	; 0x20
    34f4:	89 a1       	ldd	r24, Y+33	; 0x21
    34f6:	9a a1       	ldd	r25, Y+34	; 0x22
    34f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	8e 8f       	std	Y+30, r24	; 0x1e
    3502:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3504:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3506:	8f 85       	ldd	r24, Y+15	; 0x0f
    3508:	8a 95       	dec	r24
    350a:	f1 f7       	brne	.-4      	; 0x3508 <LCD_VoidInit4bit+0x48a>
    350c:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00000000);
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b00010000);
    3514:	80 e1       	ldi	r24, 0x10	; 16
    3516:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_CheckStatusSendCmnd>
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	a0 e0       	ldi	r26, 0x00	; 0
    3520:	b0 e4       	ldi	r27, 0x40	; 64
    3522:	8b 87       	std	Y+11, r24	; 0x0b
    3524:	9c 87       	std	Y+12, r25	; 0x0c
    3526:	ad 87       	std	Y+13, r26	; 0x0d
    3528:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    352a:	6b 85       	ldd	r22, Y+11	; 0x0b
    352c:	7c 85       	ldd	r23, Y+12	; 0x0c
    352e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3530:	9e 85       	ldd	r25, Y+14	; 0x0e
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	4a ef       	ldi	r20, 0xFA	; 250
    3538:	54 e4       	ldi	r21, 0x44	; 68
    353a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	8f 83       	std	Y+7, r24	; 0x07
    3544:	98 87       	std	Y+8, r25	; 0x08
    3546:	a9 87       	std	Y+9, r26	; 0x09
    3548:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    354a:	6f 81       	ldd	r22, Y+7	; 0x07
    354c:	78 85       	ldd	r23, Y+8	; 0x08
    354e:	89 85       	ldd	r24, Y+9	; 0x09
    3550:	9a 85       	ldd	r25, Y+10	; 0x0a
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	40 e8       	ldi	r20, 0x80	; 128
    3558:	5f e3       	ldi	r21, 0x3F	; 63
    355a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    355e:	88 23       	and	r24, r24
    3560:	2c f4       	brge	.+10     	; 0x356c <LCD_VoidInit4bit+0x4ee>
		__ticks = 1;
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	9e 83       	std	Y+6, r25	; 0x06
    3568:	8d 83       	std	Y+5, r24	; 0x05
    356a:	3f c0       	rjmp	.+126    	; 0x35ea <LCD_VoidInit4bit+0x56c>
	else if (__tmp > 65535)
    356c:	6f 81       	ldd	r22, Y+7	; 0x07
    356e:	78 85       	ldd	r23, Y+8	; 0x08
    3570:	89 85       	ldd	r24, Y+9	; 0x09
    3572:	9a 85       	ldd	r25, Y+10	; 0x0a
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	3f ef       	ldi	r19, 0xFF	; 255
    3578:	4f e7       	ldi	r20, 0x7F	; 127
    357a:	57 e4       	ldi	r21, 0x47	; 71
    357c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3580:	18 16       	cp	r1, r24
    3582:	4c f5       	brge	.+82     	; 0x35d6 <LCD_VoidInit4bit+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3584:	6b 85       	ldd	r22, Y+11	; 0x0b
    3586:	7c 85       	ldd	r23, Y+12	; 0x0c
    3588:	8d 85       	ldd	r24, Y+13	; 0x0d
    358a:	9e 85       	ldd	r25, Y+14	; 0x0e
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	40 e2       	ldi	r20, 0x20	; 32
    3592:	51 e4       	ldi	r21, 0x41	; 65
    3594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3598:	dc 01       	movw	r26, r24
    359a:	cb 01       	movw	r24, r22
    359c:	bc 01       	movw	r22, r24
    359e:	cd 01       	movw	r24, r26
    35a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a4:	dc 01       	movw	r26, r24
    35a6:	cb 01       	movw	r24, r22
    35a8:	9e 83       	std	Y+6, r25	; 0x06
    35aa:	8d 83       	std	Y+5, r24	; 0x05
    35ac:	0f c0       	rjmp	.+30     	; 0x35cc <LCD_VoidInit4bit+0x54e>
    35ae:	88 ec       	ldi	r24, 0xC8	; 200
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	9c 83       	std	Y+4, r25	; 0x04
    35b4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35b6:	8b 81       	ldd	r24, Y+3	; 0x03
    35b8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	f1 f7       	brne	.-4      	; 0x35ba <LCD_VoidInit4bit+0x53c>
    35be:	9c 83       	std	Y+4, r25	; 0x04
    35c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c2:	8d 81       	ldd	r24, Y+5	; 0x05
    35c4:	9e 81       	ldd	r25, Y+6	; 0x06
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	9e 83       	std	Y+6, r25	; 0x06
    35ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35cc:	8d 81       	ldd	r24, Y+5	; 0x05
    35ce:	9e 81       	ldd	r25, Y+6	; 0x06
    35d0:	00 97       	sbiw	r24, 0x00	; 0
    35d2:	69 f7       	brne	.-38     	; 0x35ae <LCD_VoidInit4bit+0x530>
    35d4:	14 c0       	rjmp	.+40     	; 0x35fe <LCD_VoidInit4bit+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d6:	6f 81       	ldd	r22, Y+7	; 0x07
    35d8:	78 85       	ldd	r23, Y+8	; 0x08
    35da:	89 85       	ldd	r24, Y+9	; 0x09
    35dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e2:	dc 01       	movw	r26, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	9e 83       	std	Y+6, r25	; 0x06
    35e8:	8d 83       	std	Y+5, r24	; 0x05
    35ea:	8d 81       	ldd	r24, Y+5	; 0x05
    35ec:	9e 81       	ldd	r25, Y+6	; 0x06
    35ee:	9a 83       	std	Y+2, r25	; 0x02
    35f0:	89 83       	std	Y+1, r24	; 0x01
    35f2:	89 81       	ldd	r24, Y+1	; 0x01
    35f4:	9a 81       	ldd	r25, Y+2	; 0x02
    35f6:	01 97       	sbiw	r24, 0x01	; 1
    35f8:	f1 f7       	brne	.-4      	; 0x35f6 <LCD_VoidInit4bit+0x578>
    35fa:	9a 83       	std	Y+2, r25	; 0x02
    35fc:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
        LCD_CheckStatusSendCmnd(0b00000000);
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b01100000);
    3604:	80 e6       	ldi	r24, 0x60	; 96
    3606:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_CheckStatusSendCmnd>
}
    360a:	c4 5b       	subi	r28, 0xB4	; 180
    360c:	df 4f       	sbci	r29, 0xFF	; 255
    360e:	0f b6       	in	r0, 0x3f	; 63
    3610:	f8 94       	cli
    3612:	de bf       	out	0x3e, r29	; 62
    3614:	0f be       	out	0x3f, r0	; 63
    3616:	cd bf       	out	0x3d, r28	; 61
    3618:	cf 91       	pop	r28
    361a:	df 91       	pop	r29
    361c:	1f 91       	pop	r17
    361e:	0f 91       	pop	r16
    3620:	08 95       	ret

00003622 <LCD_CheckStatusSendChar4bit>:

CheckStatus LCD_CheckStatusSendChar4bit(_uint8 Copy__Uint8Char)
{
    3622:	0f 93       	push	r16
    3624:	1f 93       	push	r17
    3626:	df 93       	push	r29
    3628:	cf 93       	push	r28
    362a:	cd b7       	in	r28, 0x3d	; 61
    362c:	de b7       	in	r29, 0x3e	; 62
    362e:	c2 56       	subi	r28, 0x62	; 98
    3630:	d0 40       	sbci	r29, 0x00	; 0
    3632:	0f b6       	in	r0, 0x3f	; 63
    3634:	f8 94       	cli
    3636:	de bf       	out	0x3e, r29	; 62
    3638:	0f be       	out	0x3f, r0	; 63
    363a:	cd bf       	out	0x3d, r28	; 61
    363c:	fe 01       	movw	r30, r28
    363e:	ee 59       	subi	r30, 0x9E	; 158
    3640:	ff 4f       	sbci	r31, 0xFF	; 255
    3642:	80 83       	st	Z, r24
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    3644:	fe 01       	movw	r30, r28
    3646:	ef 59       	subi	r30, 0x9F	; 159
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	10 82       	st	Z, r1
	         3-Send CHAR byte  to the Data Pins of LCD
	         4-PULSE of Enable E = 1 ,E = 0
	        */
        if (Copy__Uint8Char <= 255)
        {
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_HIGH);
    364c:	82 e0       	ldi	r24, 0x02	; 2
    364e:	60 e0       	ldi	r22, 0x00	; 0
    3650:	41 e0       	ldi	r20, 0x01	; 1
    3652:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    3656:	82 e0       	ldi	r24, 0x02	; 2
    3658:	61 e0       	ldi	r22, 0x01	; 1
    365a:	40 e0       	ldi	r20, 0x00	; 0
    365c:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, Copy__Uint8Char & LCD__UINT8_DATA_PINS);
    3660:	fe 01       	movw	r30, r28
    3662:	ee 59       	subi	r30, 0x9E	; 158
    3664:	ff 4f       	sbci	r31, 0xFF	; 255
    3666:	80 81       	ld	r24, Z
    3668:	98 2f       	mov	r25, r24
    366a:	90 7f       	andi	r25, 0xF0	; 240
    366c:	83 e0       	ldi	r24, 0x03	; 3
    366e:	69 2f       	mov	r22, r25
    3670:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    3674:	82 e0       	ldi	r24, 0x02	; 2
    3676:	62 e0       	ldi	r22, 0x02	; 2
    3678:	41 e0       	ldi	r20, 0x01	; 1
    367a:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>
    367e:	fe 01       	movw	r30, r28
    3680:	e3 5a       	subi	r30, 0xA3	; 163
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	a0 e8       	ldi	r26, 0x80	; 128
    368a:	bf e3       	ldi	r27, 0x3F	; 63
    368c:	80 83       	st	Z, r24
    368e:	91 83       	std	Z+1, r25	; 0x01
    3690:	a2 83       	std	Z+2, r26	; 0x02
    3692:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3694:	8e 01       	movw	r16, r28
    3696:	07 5a       	subi	r16, 0xA7	; 167
    3698:	1f 4f       	sbci	r17, 0xFF	; 255
    369a:	fe 01       	movw	r30, r28
    369c:	e3 5a       	subi	r30, 0xA3	; 163
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	60 81       	ld	r22, Z
    36a2:	71 81       	ldd	r23, Z+1	; 0x01
    36a4:	82 81       	ldd	r24, Z+2	; 0x02
    36a6:	93 81       	ldd	r25, Z+3	; 0x03
    36a8:	2b ea       	ldi	r18, 0xAB	; 171
    36aa:	3a ea       	ldi	r19, 0xAA	; 170
    36ac:	4a e2       	ldi	r20, 0x2A	; 42
    36ae:	50 e4       	ldi	r21, 0x40	; 64
    36b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	f8 01       	movw	r30, r16
    36ba:	80 83       	st	Z, r24
    36bc:	91 83       	std	Z+1, r25	; 0x01
    36be:	a2 83       	std	Z+2, r26	; 0x02
    36c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36c2:	fe 01       	movw	r30, r28
    36c4:	e7 5a       	subi	r30, 0xA7	; 167
    36c6:	ff 4f       	sbci	r31, 0xFF	; 255
    36c8:	60 81       	ld	r22, Z
    36ca:	71 81       	ldd	r23, Z+1	; 0x01
    36cc:	82 81       	ldd	r24, Z+2	; 0x02
    36ce:	93 81       	ldd	r25, Z+3	; 0x03
    36d0:	20 e0       	ldi	r18, 0x00	; 0
    36d2:	30 e0       	ldi	r19, 0x00	; 0
    36d4:	40 e8       	ldi	r20, 0x80	; 128
    36d6:	5f e3       	ldi	r21, 0x3F	; 63
    36d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36dc:	88 23       	and	r24, r24
    36de:	34 f4       	brge	.+12     	; 0x36ec <LCD_CheckStatusSendChar4bit+0xca>
		__ticks = 1;
    36e0:	fe 01       	movw	r30, r28
    36e2:	e8 5a       	subi	r30, 0xA8	; 168
    36e4:	ff 4f       	sbci	r31, 0xFF	; 255
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	80 83       	st	Z, r24
    36ea:	e0 c0       	rjmp	.+448    	; 0x38ac <LCD_CheckStatusSendChar4bit+0x28a>
	else if (__tmp > 255)
    36ec:	fe 01       	movw	r30, r28
    36ee:	e7 5a       	subi	r30, 0xA7	; 167
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	60 81       	ld	r22, Z
    36f4:	71 81       	ldd	r23, Z+1	; 0x01
    36f6:	82 81       	ldd	r24, Z+2	; 0x02
    36f8:	93 81       	ldd	r25, Z+3	; 0x03
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	4f e7       	ldi	r20, 0x7F	; 127
    3700:	53 e4       	ldi	r21, 0x43	; 67
    3702:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3706:	18 16       	cp	r1, r24
    3708:	0c f0       	brlt	.+2      	; 0x370c <LCD_CheckStatusSendChar4bit+0xea>
    370a:	c0 c0       	rjmp	.+384    	; 0x388c <LCD_CheckStatusSendChar4bit+0x26a>
	{
		_delay_ms(__us / 1000.0);
    370c:	fe 01       	movw	r30, r28
    370e:	e3 5a       	subi	r30, 0xA3	; 163
    3710:	ff 4f       	sbci	r31, 0xFF	; 255
    3712:	60 81       	ld	r22, Z
    3714:	71 81       	ldd	r23, Z+1	; 0x01
    3716:	82 81       	ldd	r24, Z+2	; 0x02
    3718:	93 81       	ldd	r25, Z+3	; 0x03
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	4a e7       	ldi	r20, 0x7A	; 122
    3720:	54 e4       	ldi	r21, 0x44	; 68
    3722:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	fe 01       	movw	r30, r28
    372c:	ec 5a       	subi	r30, 0xAC	; 172
    372e:	ff 4f       	sbci	r31, 0xFF	; 255
    3730:	80 83       	st	Z, r24
    3732:	91 83       	std	Z+1, r25	; 0x01
    3734:	a2 83       	std	Z+2, r26	; 0x02
    3736:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3738:	8e 01       	movw	r16, r28
    373a:	00 5b       	subi	r16, 0xB0	; 176
    373c:	1f 4f       	sbci	r17, 0xFF	; 255
    373e:	fe 01       	movw	r30, r28
    3740:	ec 5a       	subi	r30, 0xAC	; 172
    3742:	ff 4f       	sbci	r31, 0xFF	; 255
    3744:	60 81       	ld	r22, Z
    3746:	71 81       	ldd	r23, Z+1	; 0x01
    3748:	82 81       	ldd	r24, Z+2	; 0x02
    374a:	93 81       	ldd	r25, Z+3	; 0x03
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	4a ef       	ldi	r20, 0xFA	; 250
    3752:	54 e4       	ldi	r21, 0x44	; 68
    3754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	f8 01       	movw	r30, r16
    375e:	80 83       	st	Z, r24
    3760:	91 83       	std	Z+1, r25	; 0x01
    3762:	a2 83       	std	Z+2, r26	; 0x02
    3764:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3766:	fe 01       	movw	r30, r28
    3768:	e0 5b       	subi	r30, 0xB0	; 176
    376a:	ff 4f       	sbci	r31, 0xFF	; 255
    376c:	60 81       	ld	r22, Z
    376e:	71 81       	ldd	r23, Z+1	; 0x01
    3770:	82 81       	ldd	r24, Z+2	; 0x02
    3772:	93 81       	ldd	r25, Z+3	; 0x03
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	40 e8       	ldi	r20, 0x80	; 128
    377a:	5f e3       	ldi	r21, 0x3F	; 63
    377c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3780:	88 23       	and	r24, r24
    3782:	44 f4       	brge	.+16     	; 0x3794 <LCD_CheckStatusSendChar4bit+0x172>
		__ticks = 1;
    3784:	fe 01       	movw	r30, r28
    3786:	e2 5b       	subi	r30, 0xB2	; 178
    3788:	ff 4f       	sbci	r31, 0xFF	; 255
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	91 83       	std	Z+1, r25	; 0x01
    3790:	80 83       	st	Z, r24
    3792:	64 c0       	rjmp	.+200    	; 0x385c <LCD_CheckStatusSendChar4bit+0x23a>
	else if (__tmp > 65535)
    3794:	fe 01       	movw	r30, r28
    3796:	e0 5b       	subi	r30, 0xB0	; 176
    3798:	ff 4f       	sbci	r31, 0xFF	; 255
    379a:	60 81       	ld	r22, Z
    379c:	71 81       	ldd	r23, Z+1	; 0x01
    379e:	82 81       	ldd	r24, Z+2	; 0x02
    37a0:	93 81       	ldd	r25, Z+3	; 0x03
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	3f ef       	ldi	r19, 0xFF	; 255
    37a6:	4f e7       	ldi	r20, 0x7F	; 127
    37a8:	57 e4       	ldi	r21, 0x47	; 71
    37aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37ae:	18 16       	cp	r1, r24
    37b0:	0c f0       	brlt	.+2      	; 0x37b4 <LCD_CheckStatusSendChar4bit+0x192>
    37b2:	43 c0       	rjmp	.+134    	; 0x383a <LCD_CheckStatusSendChar4bit+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b4:	fe 01       	movw	r30, r28
    37b6:	ec 5a       	subi	r30, 0xAC	; 172
    37b8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ba:	60 81       	ld	r22, Z
    37bc:	71 81       	ldd	r23, Z+1	; 0x01
    37be:	82 81       	ldd	r24, Z+2	; 0x02
    37c0:	93 81       	ldd	r25, Z+3	; 0x03
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	40 e2       	ldi	r20, 0x20	; 32
    37c8:	51 e4       	ldi	r21, 0x41	; 65
    37ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	8e 01       	movw	r16, r28
    37d4:	02 5b       	subi	r16, 0xB2	; 178
    37d6:	1f 4f       	sbci	r17, 0xFF	; 255
    37d8:	bc 01       	movw	r22, r24
    37da:	cd 01       	movw	r24, r26
    37dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e0:	dc 01       	movw	r26, r24
    37e2:	cb 01       	movw	r24, r22
    37e4:	f8 01       	movw	r30, r16
    37e6:	91 83       	std	Z+1, r25	; 0x01
    37e8:	80 83       	st	Z, r24
    37ea:	1f c0       	rjmp	.+62     	; 0x382a <LCD_CheckStatusSendChar4bit+0x208>
    37ec:	fe 01       	movw	r30, r28
    37ee:	e4 5b       	subi	r30, 0xB4	; 180
    37f0:	ff 4f       	sbci	r31, 0xFF	; 255
    37f2:	88 ec       	ldi	r24, 0xC8	; 200
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	91 83       	std	Z+1, r25	; 0x01
    37f8:	80 83       	st	Z, r24
    37fa:	fe 01       	movw	r30, r28
    37fc:	e4 5b       	subi	r30, 0xB4	; 180
    37fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3800:	80 81       	ld	r24, Z
    3802:	91 81       	ldd	r25, Z+1	; 0x01
    3804:	01 97       	sbiw	r24, 0x01	; 1
    3806:	f1 f7       	brne	.-4      	; 0x3804 <LCD_CheckStatusSendChar4bit+0x1e2>
    3808:	fe 01       	movw	r30, r28
    380a:	e4 5b       	subi	r30, 0xB4	; 180
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	91 83       	std	Z+1, r25	; 0x01
    3810:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3812:	de 01       	movw	r26, r28
    3814:	a2 5b       	subi	r26, 0xB2	; 178
    3816:	bf 4f       	sbci	r27, 0xFF	; 255
    3818:	fe 01       	movw	r30, r28
    381a:	e2 5b       	subi	r30, 0xB2	; 178
    381c:	ff 4f       	sbci	r31, 0xFF	; 255
    381e:	80 81       	ld	r24, Z
    3820:	91 81       	ldd	r25, Z+1	; 0x01
    3822:	01 97       	sbiw	r24, 0x01	; 1
    3824:	11 96       	adiw	r26, 0x01	; 1
    3826:	9c 93       	st	X, r25
    3828:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    382a:	fe 01       	movw	r30, r28
    382c:	e2 5b       	subi	r30, 0xB2	; 178
    382e:	ff 4f       	sbci	r31, 0xFF	; 255
    3830:	80 81       	ld	r24, Z
    3832:	91 81       	ldd	r25, Z+1	; 0x01
    3834:	00 97       	sbiw	r24, 0x00	; 0
    3836:	d1 f6       	brne	.-76     	; 0x37ec <LCD_CheckStatusSendChar4bit+0x1ca>
    3838:	4b c0       	rjmp	.+150    	; 0x38d0 <LCD_CheckStatusSendChar4bit+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    383a:	8e 01       	movw	r16, r28
    383c:	02 5b       	subi	r16, 0xB2	; 178
    383e:	1f 4f       	sbci	r17, 0xFF	; 255
    3840:	fe 01       	movw	r30, r28
    3842:	e0 5b       	subi	r30, 0xB0	; 176
    3844:	ff 4f       	sbci	r31, 0xFF	; 255
    3846:	60 81       	ld	r22, Z
    3848:	71 81       	ldd	r23, Z+1	; 0x01
    384a:	82 81       	ldd	r24, Z+2	; 0x02
    384c:	93 81       	ldd	r25, Z+3	; 0x03
    384e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	f8 01       	movw	r30, r16
    3858:	91 83       	std	Z+1, r25	; 0x01
    385a:	80 83       	st	Z, r24
    385c:	de 01       	movw	r26, r28
    385e:	a6 5b       	subi	r26, 0xB6	; 182
    3860:	bf 4f       	sbci	r27, 0xFF	; 255
    3862:	fe 01       	movw	r30, r28
    3864:	e2 5b       	subi	r30, 0xB2	; 178
    3866:	ff 4f       	sbci	r31, 0xFF	; 255
    3868:	80 81       	ld	r24, Z
    386a:	91 81       	ldd	r25, Z+1	; 0x01
    386c:	11 96       	adiw	r26, 0x01	; 1
    386e:	9c 93       	st	X, r25
    3870:	8e 93       	st	-X, r24
    3872:	fe 01       	movw	r30, r28
    3874:	e6 5b       	subi	r30, 0xB6	; 182
    3876:	ff 4f       	sbci	r31, 0xFF	; 255
    3878:	80 81       	ld	r24, Z
    387a:	91 81       	ldd	r25, Z+1	; 0x01
    387c:	01 97       	sbiw	r24, 0x01	; 1
    387e:	f1 f7       	brne	.-4      	; 0x387c <LCD_CheckStatusSendChar4bit+0x25a>
    3880:	fe 01       	movw	r30, r28
    3882:	e6 5b       	subi	r30, 0xB6	; 182
    3884:	ff 4f       	sbci	r31, 0xFF	; 255
    3886:	91 83       	std	Z+1, r25	; 0x01
    3888:	80 83       	st	Z, r24
    388a:	22 c0       	rjmp	.+68     	; 0x38d0 <LCD_CheckStatusSendChar4bit+0x2ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    388c:	8e 01       	movw	r16, r28
    388e:	08 5a       	subi	r16, 0xA8	; 168
    3890:	1f 4f       	sbci	r17, 0xFF	; 255
    3892:	fe 01       	movw	r30, r28
    3894:	e7 5a       	subi	r30, 0xA7	; 167
    3896:	ff 4f       	sbci	r31, 0xFF	; 255
    3898:	60 81       	ld	r22, Z
    389a:	71 81       	ldd	r23, Z+1	; 0x01
    389c:	82 81       	ldd	r24, Z+2	; 0x02
    389e:	93 81       	ldd	r25, Z+3	; 0x03
    38a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a4:	dc 01       	movw	r26, r24
    38a6:	cb 01       	movw	r24, r22
    38a8:	f8 01       	movw	r30, r16
    38aa:	80 83       	st	Z, r24
    38ac:	de 01       	movw	r26, r28
    38ae:	a7 5b       	subi	r26, 0xB7	; 183
    38b0:	bf 4f       	sbci	r27, 0xFF	; 255
    38b2:	fe 01       	movw	r30, r28
    38b4:	e8 5a       	subi	r30, 0xA8	; 168
    38b6:	ff 4f       	sbci	r31, 0xFF	; 255
    38b8:	80 81       	ld	r24, Z
    38ba:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    38bc:	fe 01       	movw	r30, r28
    38be:	e7 5b       	subi	r30, 0xB7	; 183
    38c0:	ff 4f       	sbci	r31, 0xFF	; 255
    38c2:	80 81       	ld	r24, Z
    38c4:	8a 95       	dec	r24
    38c6:	f1 f7       	brne	.-4      	; 0x38c4 <LCD_CheckStatusSendChar4bit+0x2a2>
    38c8:	fe 01       	movw	r30, r28
    38ca:	e7 5b       	subi	r30, 0xB7	; 183
    38cc:	ff 4f       	sbci	r31, 0xFF	; 255
    38ce:	80 83       	st	Z, r24
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    38d0:	82 e0       	ldi	r24, 0x02	; 2
    38d2:	62 e0       	ldi	r22, 0x02	; 2
    38d4:	40 e0       	ldi	r20, 0x00	; 0
    38d6:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>
    38da:	fe 01       	movw	r30, r28
    38dc:	eb 5b       	subi	r30, 0xBB	; 187
    38de:	ff 4f       	sbci	r31, 0xFF	; 255
    38e0:	80 e0       	ldi	r24, 0x00	; 0
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	a0 e8       	ldi	r26, 0x80	; 128
    38e6:	bf e3       	ldi	r27, 0x3F	; 63
    38e8:	80 83       	st	Z, r24
    38ea:	91 83       	std	Z+1, r25	; 0x01
    38ec:	a2 83       	std	Z+2, r26	; 0x02
    38ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    38f0:	8e 01       	movw	r16, r28
    38f2:	0f 5b       	subi	r16, 0xBF	; 191
    38f4:	1f 4f       	sbci	r17, 0xFF	; 255
    38f6:	fe 01       	movw	r30, r28
    38f8:	eb 5b       	subi	r30, 0xBB	; 187
    38fa:	ff 4f       	sbci	r31, 0xFF	; 255
    38fc:	60 81       	ld	r22, Z
    38fe:	71 81       	ldd	r23, Z+1	; 0x01
    3900:	82 81       	ldd	r24, Z+2	; 0x02
    3902:	93 81       	ldd	r25, Z+3	; 0x03
    3904:	2b ea       	ldi	r18, 0xAB	; 171
    3906:	3a ea       	ldi	r19, 0xAA	; 170
    3908:	4a e2       	ldi	r20, 0x2A	; 42
    390a:	50 e4       	ldi	r21, 0x40	; 64
    390c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	f8 01       	movw	r30, r16
    3916:	80 83       	st	Z, r24
    3918:	91 83       	std	Z+1, r25	; 0x01
    391a:	a2 83       	std	Z+2, r26	; 0x02
    391c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    391e:	fe 01       	movw	r30, r28
    3920:	ef 5b       	subi	r30, 0xBF	; 191
    3922:	ff 4f       	sbci	r31, 0xFF	; 255
    3924:	60 81       	ld	r22, Z
    3926:	71 81       	ldd	r23, Z+1	; 0x01
    3928:	82 81       	ldd	r24, Z+2	; 0x02
    392a:	93 81       	ldd	r25, Z+3	; 0x03
    392c:	20 e0       	ldi	r18, 0x00	; 0
    392e:	30 e0       	ldi	r19, 0x00	; 0
    3930:	40 e8       	ldi	r20, 0x80	; 128
    3932:	5f e3       	ldi	r21, 0x3F	; 63
    3934:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3938:	88 23       	and	r24, r24
    393a:	34 f4       	brge	.+12     	; 0x3948 <LCD_CheckStatusSendChar4bit+0x326>
		__ticks = 1;
    393c:	81 e0       	ldi	r24, 0x01	; 1
    393e:	fe 01       	movw	r30, r28
    3940:	e0 5c       	subi	r30, 0xC0	; 192
    3942:	ff 4f       	sbci	r31, 0xFF	; 255
    3944:	80 83       	st	Z, r24
    3946:	9d c0       	rjmp	.+314    	; 0x3a82 <LCD_CheckStatusSendChar4bit+0x460>
	else if (__tmp > 255)
    3948:	fe 01       	movw	r30, r28
    394a:	ef 5b       	subi	r30, 0xBF	; 191
    394c:	ff 4f       	sbci	r31, 0xFF	; 255
    394e:	60 81       	ld	r22, Z
    3950:	71 81       	ldd	r23, Z+1	; 0x01
    3952:	82 81       	ldd	r24, Z+2	; 0x02
    3954:	93 81       	ldd	r25, Z+3	; 0x03
    3956:	20 e0       	ldi	r18, 0x00	; 0
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	4f e7       	ldi	r20, 0x7F	; 127
    395c:	53 e4       	ldi	r21, 0x43	; 67
    395e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3962:	18 16       	cp	r1, r24
    3964:	0c f0       	brlt	.+2      	; 0x3968 <LCD_CheckStatusSendChar4bit+0x346>
    3966:	7e c0       	rjmp	.+252    	; 0x3a64 <LCD_CheckStatusSendChar4bit+0x442>
	{
		_delay_ms(__us / 1000.0);
    3968:	fe 01       	movw	r30, r28
    396a:	eb 5b       	subi	r30, 0xBB	; 187
    396c:	ff 4f       	sbci	r31, 0xFF	; 255
    396e:	60 81       	ld	r22, Z
    3970:	71 81       	ldd	r23, Z+1	; 0x01
    3972:	82 81       	ldd	r24, Z+2	; 0x02
    3974:	93 81       	ldd	r25, Z+3	; 0x03
    3976:	20 e0       	ldi	r18, 0x00	; 0
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	4a e7       	ldi	r20, 0x7A	; 122
    397c:	54 e4       	ldi	r21, 0x44	; 68
    397e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3982:	dc 01       	movw	r26, r24
    3984:	cb 01       	movw	r24, r22
    3986:	8c af       	std	Y+60, r24	; 0x3c
    3988:	9d af       	std	Y+61, r25	; 0x3d
    398a:	ae af       	std	Y+62, r26	; 0x3e
    398c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    398e:	6c ad       	ldd	r22, Y+60	; 0x3c
    3990:	7d ad       	ldd	r23, Y+61	; 0x3d
    3992:	8e ad       	ldd	r24, Y+62	; 0x3e
    3994:	9f ad       	ldd	r25, Y+63	; 0x3f
    3996:	20 e0       	ldi	r18, 0x00	; 0
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	4a ef       	ldi	r20, 0xFA	; 250
    399c:	54 e4       	ldi	r21, 0x44	; 68
    399e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a2:	dc 01       	movw	r26, r24
    39a4:	cb 01       	movw	r24, r22
    39a6:	88 af       	std	Y+56, r24	; 0x38
    39a8:	99 af       	std	Y+57, r25	; 0x39
    39aa:	aa af       	std	Y+58, r26	; 0x3a
    39ac:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    39ae:	68 ad       	ldd	r22, Y+56	; 0x38
    39b0:	79 ad       	ldd	r23, Y+57	; 0x39
    39b2:	8a ad       	ldd	r24, Y+58	; 0x3a
    39b4:	9b ad       	ldd	r25, Y+59	; 0x3b
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	40 e8       	ldi	r20, 0x80	; 128
    39bc:	5f e3       	ldi	r21, 0x3F	; 63
    39be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39c2:	88 23       	and	r24, r24
    39c4:	2c f4       	brge	.+10     	; 0x39d0 <LCD_CheckStatusSendChar4bit+0x3ae>
		__ticks = 1;
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	9f ab       	std	Y+55, r25	; 0x37
    39cc:	8e ab       	std	Y+54, r24	; 0x36
    39ce:	3f c0       	rjmp	.+126    	; 0x3a4e <LCD_CheckStatusSendChar4bit+0x42c>
	else if (__tmp > 65535)
    39d0:	68 ad       	ldd	r22, Y+56	; 0x38
    39d2:	79 ad       	ldd	r23, Y+57	; 0x39
    39d4:	8a ad       	ldd	r24, Y+58	; 0x3a
    39d6:	9b ad       	ldd	r25, Y+59	; 0x3b
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	3f ef       	ldi	r19, 0xFF	; 255
    39dc:	4f e7       	ldi	r20, 0x7F	; 127
    39de:	57 e4       	ldi	r21, 0x47	; 71
    39e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39e4:	18 16       	cp	r1, r24
    39e6:	4c f5       	brge	.+82     	; 0x3a3a <LCD_CheckStatusSendChar4bit+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39e8:	6c ad       	ldd	r22, Y+60	; 0x3c
    39ea:	7d ad       	ldd	r23, Y+61	; 0x3d
    39ec:	8e ad       	ldd	r24, Y+62	; 0x3e
    39ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	40 e2       	ldi	r20, 0x20	; 32
    39f6:	51 e4       	ldi	r21, 0x41	; 65
    39f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	bc 01       	movw	r22, r24
    3a02:	cd 01       	movw	r24, r26
    3a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	9f ab       	std	Y+55, r25	; 0x37
    3a0e:	8e ab       	std	Y+54, r24	; 0x36
    3a10:	0f c0       	rjmp	.+30     	; 0x3a30 <LCD_CheckStatusSendChar4bit+0x40e>
    3a12:	88 ec       	ldi	r24, 0xC8	; 200
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	9d ab       	std	Y+53, r25	; 0x35
    3a18:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a1a:	8c a9       	ldd	r24, Y+52	; 0x34
    3a1c:	9d a9       	ldd	r25, Y+53	; 0x35
    3a1e:	01 97       	sbiw	r24, 0x01	; 1
    3a20:	f1 f7       	brne	.-4      	; 0x3a1e <LCD_CheckStatusSendChar4bit+0x3fc>
    3a22:	9d ab       	std	Y+53, r25	; 0x35
    3a24:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a26:	8e a9       	ldd	r24, Y+54	; 0x36
    3a28:	9f a9       	ldd	r25, Y+55	; 0x37
    3a2a:	01 97       	sbiw	r24, 0x01	; 1
    3a2c:	9f ab       	std	Y+55, r25	; 0x37
    3a2e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a30:	8e a9       	ldd	r24, Y+54	; 0x36
    3a32:	9f a9       	ldd	r25, Y+55	; 0x37
    3a34:	00 97       	sbiw	r24, 0x00	; 0
    3a36:	69 f7       	brne	.-38     	; 0x3a12 <LCD_CheckStatusSendChar4bit+0x3f0>
    3a38:	2d c0       	rjmp	.+90     	; 0x3a94 <LCD_CheckStatusSendChar4bit+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a3a:	68 ad       	ldd	r22, Y+56	; 0x38
    3a3c:	79 ad       	ldd	r23, Y+57	; 0x39
    3a3e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a40:	9b ad       	ldd	r25, Y+59	; 0x3b
    3a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	9f ab       	std	Y+55, r25	; 0x37
    3a4c:	8e ab       	std	Y+54, r24	; 0x36
    3a4e:	8e a9       	ldd	r24, Y+54	; 0x36
    3a50:	9f a9       	ldd	r25, Y+55	; 0x37
    3a52:	9b ab       	std	Y+51, r25	; 0x33
    3a54:	8a ab       	std	Y+50, r24	; 0x32
    3a56:	8a a9       	ldd	r24, Y+50	; 0x32
    3a58:	9b a9       	ldd	r25, Y+51	; 0x33
    3a5a:	01 97       	sbiw	r24, 0x01	; 1
    3a5c:	f1 f7       	brne	.-4      	; 0x3a5a <LCD_CheckStatusSendChar4bit+0x438>
    3a5e:	9b ab       	std	Y+51, r25	; 0x33
    3a60:	8a ab       	std	Y+50, r24	; 0x32
    3a62:	18 c0       	rjmp	.+48     	; 0x3a94 <LCD_CheckStatusSendChar4bit+0x472>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a64:	fe 01       	movw	r30, r28
    3a66:	ef 5b       	subi	r30, 0xBF	; 191
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	60 81       	ld	r22, Z
    3a6c:	71 81       	ldd	r23, Z+1	; 0x01
    3a6e:	82 81       	ldd	r24, Z+2	; 0x02
    3a70:	93 81       	ldd	r25, Z+3	; 0x03
    3a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a76:	dc 01       	movw	r26, r24
    3a78:	cb 01       	movw	r24, r22
    3a7a:	fe 01       	movw	r30, r28
    3a7c:	e0 5c       	subi	r30, 0xC0	; 192
    3a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a80:	80 83       	st	Z, r24
    3a82:	fe 01       	movw	r30, r28
    3a84:	e0 5c       	subi	r30, 0xC0	; 192
    3a86:	ff 4f       	sbci	r31, 0xFF	; 255
    3a88:	80 81       	ld	r24, Z
    3a8a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a8c:	89 a9       	ldd	r24, Y+49	; 0x31
    3a8e:	8a 95       	dec	r24
    3a90:	f1 f7       	brne	.-4      	; 0x3a8e <LCD_CheckStatusSendChar4bit+0x46c>
    3a92:	89 ab       	std	Y+49, r24	; 0x31
                _delay_us(1);

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_HIGH);
    3a94:	82 e0       	ldi	r24, 0x02	; 2
    3a96:	60 e0       	ldi	r22, 0x00	; 0
    3a98:	41 e0       	ldi	r20, 0x01	; 1
    3a9a:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    3a9e:	82 e0       	ldi	r24, 0x02	; 2
    3aa0:	61 e0       	ldi	r22, 0x01	; 1
    3aa2:	40 e0       	ldi	r20, 0x00	; 0
    3aa4:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, (Copy__Uint8Char << 4) & LCD__UINT8_DATA_PINS);
    3aa8:	fe 01       	movw	r30, r28
    3aaa:	ee 59       	subi	r30, 0x9E	; 158
    3aac:	ff 4f       	sbci	r31, 0xFF	; 255
    3aae:	80 81       	ld	r24, Z
    3ab0:	88 2f       	mov	r24, r24
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	82 95       	swap	r24
    3ab6:	92 95       	swap	r25
    3ab8:	90 7f       	andi	r25, 0xF0	; 240
    3aba:	98 27       	eor	r25, r24
    3abc:	80 7f       	andi	r24, 0xF0	; 240
    3abe:	98 27       	eor	r25, r24
    3ac0:	98 2f       	mov	r25, r24
    3ac2:	83 e0       	ldi	r24, 0x03	; 3
    3ac4:	69 2f       	mov	r22, r25
    3ac6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    3aca:	82 e0       	ldi	r24, 0x02	; 2
    3acc:	62 e0       	ldi	r22, 0x02	; 2
    3ace:	41 e0       	ldi	r20, 0x01	; 1
    3ad0:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>
    3ad4:	80 e0       	ldi	r24, 0x00	; 0
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	a0 e8       	ldi	r26, 0x80	; 128
    3ada:	bf e3       	ldi	r27, 0x3F	; 63
    3adc:	8d a7       	std	Y+45, r24	; 0x2d
    3ade:	9e a7       	std	Y+46, r25	; 0x2e
    3ae0:	af a7       	std	Y+47, r26	; 0x2f
    3ae2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3ae4:	6d a5       	ldd	r22, Y+45	; 0x2d
    3ae6:	7e a5       	ldd	r23, Y+46	; 0x2e
    3ae8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3aea:	98 a9       	ldd	r25, Y+48	; 0x30
    3aec:	2b ea       	ldi	r18, 0xAB	; 171
    3aee:	3a ea       	ldi	r19, 0xAA	; 170
    3af0:	4a e2       	ldi	r20, 0x2A	; 42
    3af2:	50 e4       	ldi	r21, 0x40	; 64
    3af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af8:	dc 01       	movw	r26, r24
    3afa:	cb 01       	movw	r24, r22
    3afc:	89 a7       	std	Y+41, r24	; 0x29
    3afe:	9a a7       	std	Y+42, r25	; 0x2a
    3b00:	ab a7       	std	Y+43, r26	; 0x2b
    3b02:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3b04:	69 a5       	ldd	r22, Y+41	; 0x29
    3b06:	7a a5       	ldd	r23, Y+42	; 0x2a
    3b08:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b0a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	40 e8       	ldi	r20, 0x80	; 128
    3b12:	5f e3       	ldi	r21, 0x3F	; 63
    3b14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b18:	88 23       	and	r24, r24
    3b1a:	1c f4       	brge	.+6      	; 0x3b22 <LCD_CheckStatusSendChar4bit+0x500>
		__ticks = 1;
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	88 a7       	std	Y+40, r24	; 0x28
    3b20:	91 c0       	rjmp	.+290    	; 0x3c44 <LCD_CheckStatusSendChar4bit+0x622>
	else if (__tmp > 255)
    3b22:	69 a5       	ldd	r22, Y+41	; 0x29
    3b24:	7a a5       	ldd	r23, Y+42	; 0x2a
    3b26:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b28:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b2a:	20 e0       	ldi	r18, 0x00	; 0
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	4f e7       	ldi	r20, 0x7F	; 127
    3b30:	53 e4       	ldi	r21, 0x43	; 67
    3b32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b36:	18 16       	cp	r1, r24
    3b38:	0c f0       	brlt	.+2      	; 0x3b3c <LCD_CheckStatusSendChar4bit+0x51a>
    3b3a:	7b c0       	rjmp	.+246    	; 0x3c32 <LCD_CheckStatusSendChar4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    3b3c:	6d a5       	ldd	r22, Y+45	; 0x2d
    3b3e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3b40:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b42:	98 a9       	ldd	r25, Y+48	; 0x30
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	4a e7       	ldi	r20, 0x7A	; 122
    3b4a:	54 e4       	ldi	r21, 0x44	; 68
    3b4c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b50:	dc 01       	movw	r26, r24
    3b52:	cb 01       	movw	r24, r22
    3b54:	8c a3       	std	Y+36, r24	; 0x24
    3b56:	9d a3       	std	Y+37, r25	; 0x25
    3b58:	ae a3       	std	Y+38, r26	; 0x26
    3b5a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b5c:	6c a1       	ldd	r22, Y+36	; 0x24
    3b5e:	7d a1       	ldd	r23, Y+37	; 0x25
    3b60:	8e a1       	ldd	r24, Y+38	; 0x26
    3b62:	9f a1       	ldd	r25, Y+39	; 0x27
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	4a ef       	ldi	r20, 0xFA	; 250
    3b6a:	54 e4       	ldi	r21, 0x44	; 68
    3b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b70:	dc 01       	movw	r26, r24
    3b72:	cb 01       	movw	r24, r22
    3b74:	88 a3       	std	Y+32, r24	; 0x20
    3b76:	99 a3       	std	Y+33, r25	; 0x21
    3b78:	aa a3       	std	Y+34, r26	; 0x22
    3b7a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3b7c:	68 a1       	ldd	r22, Y+32	; 0x20
    3b7e:	79 a1       	ldd	r23, Y+33	; 0x21
    3b80:	8a a1       	ldd	r24, Y+34	; 0x22
    3b82:	9b a1       	ldd	r25, Y+35	; 0x23
    3b84:	20 e0       	ldi	r18, 0x00	; 0
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	40 e8       	ldi	r20, 0x80	; 128
    3b8a:	5f e3       	ldi	r21, 0x3F	; 63
    3b8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b90:	88 23       	and	r24, r24
    3b92:	2c f4       	brge	.+10     	; 0x3b9e <LCD_CheckStatusSendChar4bit+0x57c>
		__ticks = 1;
    3b94:	81 e0       	ldi	r24, 0x01	; 1
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	9f 8f       	std	Y+31, r25	; 0x1f
    3b9a:	8e 8f       	std	Y+30, r24	; 0x1e
    3b9c:	3f c0       	rjmp	.+126    	; 0x3c1c <LCD_CheckStatusSendChar4bit+0x5fa>
	else if (__tmp > 65535)
    3b9e:	68 a1       	ldd	r22, Y+32	; 0x20
    3ba0:	79 a1       	ldd	r23, Y+33	; 0x21
    3ba2:	8a a1       	ldd	r24, Y+34	; 0x22
    3ba4:	9b a1       	ldd	r25, Y+35	; 0x23
    3ba6:	20 e0       	ldi	r18, 0x00	; 0
    3ba8:	3f ef       	ldi	r19, 0xFF	; 255
    3baa:	4f e7       	ldi	r20, 0x7F	; 127
    3bac:	57 e4       	ldi	r21, 0x47	; 71
    3bae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bb2:	18 16       	cp	r1, r24
    3bb4:	4c f5       	brge	.+82     	; 0x3c08 <LCD_CheckStatusSendChar4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bb6:	6c a1       	ldd	r22, Y+36	; 0x24
    3bb8:	7d a1       	ldd	r23, Y+37	; 0x25
    3bba:	8e a1       	ldd	r24, Y+38	; 0x26
    3bbc:	9f a1       	ldd	r25, Y+39	; 0x27
    3bbe:	20 e0       	ldi	r18, 0x00	; 0
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	40 e2       	ldi	r20, 0x20	; 32
    3bc4:	51 e4       	ldi	r21, 0x41	; 65
    3bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bca:	dc 01       	movw	r26, r24
    3bcc:	cb 01       	movw	r24, r22
    3bce:	bc 01       	movw	r22, r24
    3bd0:	cd 01       	movw	r24, r26
    3bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	cb 01       	movw	r24, r22
    3bda:	9f 8f       	std	Y+31, r25	; 0x1f
    3bdc:	8e 8f       	std	Y+30, r24	; 0x1e
    3bde:	0f c0       	rjmp	.+30     	; 0x3bfe <LCD_CheckStatusSendChar4bit+0x5dc>
    3be0:	88 ec       	ldi	r24, 0xC8	; 200
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	9d 8f       	std	Y+29, r25	; 0x1d
    3be6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3be8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3bea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3bec:	01 97       	sbiw	r24, 0x01	; 1
    3bee:	f1 f7       	brne	.-4      	; 0x3bec <LCD_CheckStatusSendChar4bit+0x5ca>
    3bf0:	9d 8f       	std	Y+29, r25	; 0x1d
    3bf2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bf4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3bf6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3bf8:	01 97       	sbiw	r24, 0x01	; 1
    3bfa:	9f 8f       	std	Y+31, r25	; 0x1f
    3bfc:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bfe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c00:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c02:	00 97       	sbiw	r24, 0x00	; 0
    3c04:	69 f7       	brne	.-38     	; 0x3be0 <LCD_CheckStatusSendChar4bit+0x5be>
    3c06:	24 c0       	rjmp	.+72     	; 0x3c50 <LCD_CheckStatusSendChar4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c08:	68 a1       	ldd	r22, Y+32	; 0x20
    3c0a:	79 a1       	ldd	r23, Y+33	; 0x21
    3c0c:	8a a1       	ldd	r24, Y+34	; 0x22
    3c0e:	9b a1       	ldd	r25, Y+35	; 0x23
    3c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c14:	dc 01       	movw	r26, r24
    3c16:	cb 01       	movw	r24, r22
    3c18:	9f 8f       	std	Y+31, r25	; 0x1f
    3c1a:	8e 8f       	std	Y+30, r24	; 0x1e
    3c1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c1e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c20:	9b 8f       	std	Y+27, r25	; 0x1b
    3c22:	8a 8f       	std	Y+26, r24	; 0x1a
    3c24:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3c26:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3c28:	01 97       	sbiw	r24, 0x01	; 1
    3c2a:	f1 f7       	brne	.-4      	; 0x3c28 <LCD_CheckStatusSendChar4bit+0x606>
    3c2c:	9b 8f       	std	Y+27, r25	; 0x1b
    3c2e:	8a 8f       	std	Y+26, r24	; 0x1a
    3c30:	0f c0       	rjmp	.+30     	; 0x3c50 <LCD_CheckStatusSendChar4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3c32:	69 a5       	ldd	r22, Y+41	; 0x29
    3c34:	7a a5       	ldd	r23, Y+42	; 0x2a
    3c36:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c38:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c3e:	dc 01       	movw	r26, r24
    3c40:	cb 01       	movw	r24, r22
    3c42:	88 a7       	std	Y+40, r24	; 0x28
    3c44:	88 a5       	ldd	r24, Y+40	; 0x28
    3c46:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c48:	89 8d       	ldd	r24, Y+25	; 0x19
    3c4a:	8a 95       	dec	r24
    3c4c:	f1 f7       	brne	.-4      	; 0x3c4a <LCD_CheckStatusSendChar4bit+0x628>
    3c4e:	89 8f       	std	Y+25, r24	; 0x19
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    3c50:	82 e0       	ldi	r24, 0x02	; 2
    3c52:	62 e0       	ldi	r22, 0x02	; 2
    3c54:	40 e0       	ldi	r20, 0x00	; 0
    3c56:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>
    3c5a:	80 e0       	ldi	r24, 0x00	; 0
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	a0 e8       	ldi	r26, 0x80	; 128
    3c60:	bf e3       	ldi	r27, 0x3F	; 63
    3c62:	8d 8b       	std	Y+21, r24	; 0x15
    3c64:	9e 8b       	std	Y+22, r25	; 0x16
    3c66:	af 8b       	std	Y+23, r26	; 0x17
    3c68:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c6a:	6d 89       	ldd	r22, Y+21	; 0x15
    3c6c:	7e 89       	ldd	r23, Y+22	; 0x16
    3c6e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c70:	98 8d       	ldd	r25, Y+24	; 0x18
    3c72:	2b ea       	ldi	r18, 0xAB	; 171
    3c74:	3a ea       	ldi	r19, 0xAA	; 170
    3c76:	4a e2       	ldi	r20, 0x2A	; 42
    3c78:	50 e4       	ldi	r21, 0x40	; 64
    3c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c7e:	dc 01       	movw	r26, r24
    3c80:	cb 01       	movw	r24, r22
    3c82:	89 8b       	std	Y+17, r24	; 0x11
    3c84:	9a 8b       	std	Y+18, r25	; 0x12
    3c86:	ab 8b       	std	Y+19, r26	; 0x13
    3c88:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3c8a:	69 89       	ldd	r22, Y+17	; 0x11
    3c8c:	7a 89       	ldd	r23, Y+18	; 0x12
    3c8e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c90:	9c 89       	ldd	r25, Y+20	; 0x14
    3c92:	20 e0       	ldi	r18, 0x00	; 0
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	40 e8       	ldi	r20, 0x80	; 128
    3c98:	5f e3       	ldi	r21, 0x3F	; 63
    3c9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c9e:	88 23       	and	r24, r24
    3ca0:	1c f4       	brge	.+6      	; 0x3ca8 <LCD_CheckStatusSendChar4bit+0x686>
		__ticks = 1;
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
    3ca4:	88 8b       	std	Y+16, r24	; 0x10
    3ca6:	91 c0       	rjmp	.+290    	; 0x3dca <LCD_CheckStatusSendChar4bit+0x7a8>
	else if (__tmp > 255)
    3ca8:	69 89       	ldd	r22, Y+17	; 0x11
    3caa:	7a 89       	ldd	r23, Y+18	; 0x12
    3cac:	8b 89       	ldd	r24, Y+19	; 0x13
    3cae:	9c 89       	ldd	r25, Y+20	; 0x14
    3cb0:	20 e0       	ldi	r18, 0x00	; 0
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	4f e7       	ldi	r20, 0x7F	; 127
    3cb6:	53 e4       	ldi	r21, 0x43	; 67
    3cb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cbc:	18 16       	cp	r1, r24
    3cbe:	0c f0       	brlt	.+2      	; 0x3cc2 <LCD_CheckStatusSendChar4bit+0x6a0>
    3cc0:	7b c0       	rjmp	.+246    	; 0x3db8 <LCD_CheckStatusSendChar4bit+0x796>
	{
		_delay_ms(__us / 1000.0);
    3cc2:	6d 89       	ldd	r22, Y+21	; 0x15
    3cc4:	7e 89       	ldd	r23, Y+22	; 0x16
    3cc6:	8f 89       	ldd	r24, Y+23	; 0x17
    3cc8:	98 8d       	ldd	r25, Y+24	; 0x18
    3cca:	20 e0       	ldi	r18, 0x00	; 0
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	4a e7       	ldi	r20, 0x7A	; 122
    3cd0:	54 e4       	ldi	r21, 0x44	; 68
    3cd2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3cd6:	dc 01       	movw	r26, r24
    3cd8:	cb 01       	movw	r24, r22
    3cda:	8c 87       	std	Y+12, r24	; 0x0c
    3cdc:	9d 87       	std	Y+13, r25	; 0x0d
    3cde:	ae 87       	std	Y+14, r26	; 0x0e
    3ce0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ce2:	6c 85       	ldd	r22, Y+12	; 0x0c
    3ce4:	7d 85       	ldd	r23, Y+13	; 0x0d
    3ce6:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ce8:	9f 85       	ldd	r25, Y+15	; 0x0f
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	4a ef       	ldi	r20, 0xFA	; 250
    3cf0:	54 e4       	ldi	r21, 0x44	; 68
    3cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf6:	dc 01       	movw	r26, r24
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	88 87       	std	Y+8, r24	; 0x08
    3cfc:	99 87       	std	Y+9, r25	; 0x09
    3cfe:	aa 87       	std	Y+10, r26	; 0x0a
    3d00:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3d02:	68 85       	ldd	r22, Y+8	; 0x08
    3d04:	79 85       	ldd	r23, Y+9	; 0x09
    3d06:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d08:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	40 e8       	ldi	r20, 0x80	; 128
    3d10:	5f e3       	ldi	r21, 0x3F	; 63
    3d12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d16:	88 23       	and	r24, r24
    3d18:	2c f4       	brge	.+10     	; 0x3d24 <LCD_CheckStatusSendChar4bit+0x702>
		__ticks = 1;
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	9f 83       	std	Y+7, r25	; 0x07
    3d20:	8e 83       	std	Y+6, r24	; 0x06
    3d22:	3f c0       	rjmp	.+126    	; 0x3da2 <LCD_CheckStatusSendChar4bit+0x780>
	else if (__tmp > 65535)
    3d24:	68 85       	ldd	r22, Y+8	; 0x08
    3d26:	79 85       	ldd	r23, Y+9	; 0x09
    3d28:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d2a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d2c:	20 e0       	ldi	r18, 0x00	; 0
    3d2e:	3f ef       	ldi	r19, 0xFF	; 255
    3d30:	4f e7       	ldi	r20, 0x7F	; 127
    3d32:	57 e4       	ldi	r21, 0x47	; 71
    3d34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d38:	18 16       	cp	r1, r24
    3d3a:	4c f5       	brge	.+82     	; 0x3d8e <LCD_CheckStatusSendChar4bit+0x76c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d3c:	6c 85       	ldd	r22, Y+12	; 0x0c
    3d3e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3d40:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d42:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d44:	20 e0       	ldi	r18, 0x00	; 0
    3d46:	30 e0       	ldi	r19, 0x00	; 0
    3d48:	40 e2       	ldi	r20, 0x20	; 32
    3d4a:	51 e4       	ldi	r21, 0x41	; 65
    3d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	bc 01       	movw	r22, r24
    3d56:	cd 01       	movw	r24, r26
    3d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	9f 83       	std	Y+7, r25	; 0x07
    3d62:	8e 83       	std	Y+6, r24	; 0x06
    3d64:	0f c0       	rjmp	.+30     	; 0x3d84 <LCD_CheckStatusSendChar4bit+0x762>
    3d66:	88 ec       	ldi	r24, 0xC8	; 200
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	9d 83       	std	Y+5, r25	; 0x05
    3d6c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d70:	9d 81       	ldd	r25, Y+5	; 0x05
    3d72:	01 97       	sbiw	r24, 0x01	; 1
    3d74:	f1 f7       	brne	.-4      	; 0x3d72 <LCD_CheckStatusSendChar4bit+0x750>
    3d76:	9d 83       	std	Y+5, r25	; 0x05
    3d78:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d7a:	8e 81       	ldd	r24, Y+6	; 0x06
    3d7c:	9f 81       	ldd	r25, Y+7	; 0x07
    3d7e:	01 97       	sbiw	r24, 0x01	; 1
    3d80:	9f 83       	std	Y+7, r25	; 0x07
    3d82:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d84:	8e 81       	ldd	r24, Y+6	; 0x06
    3d86:	9f 81       	ldd	r25, Y+7	; 0x07
    3d88:	00 97       	sbiw	r24, 0x00	; 0
    3d8a:	69 f7       	brne	.-38     	; 0x3d66 <LCD_CheckStatusSendChar4bit+0x744>
    3d8c:	24 c0       	rjmp	.+72     	; 0x3dd6 <LCD_CheckStatusSendChar4bit+0x7b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d8e:	68 85       	ldd	r22, Y+8	; 0x08
    3d90:	79 85       	ldd	r23, Y+9	; 0x09
    3d92:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d94:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	9f 83       	std	Y+7, r25	; 0x07
    3da0:	8e 83       	std	Y+6, r24	; 0x06
    3da2:	8e 81       	ldd	r24, Y+6	; 0x06
    3da4:	9f 81       	ldd	r25, Y+7	; 0x07
    3da6:	9b 83       	std	Y+3, r25	; 0x03
    3da8:	8a 83       	std	Y+2, r24	; 0x02
    3daa:	8a 81       	ldd	r24, Y+2	; 0x02
    3dac:	9b 81       	ldd	r25, Y+3	; 0x03
    3dae:	01 97       	sbiw	r24, 0x01	; 1
    3db0:	f1 f7       	brne	.-4      	; 0x3dae <LCD_CheckStatusSendChar4bit+0x78c>
    3db2:	9b 83       	std	Y+3, r25	; 0x03
    3db4:	8a 83       	std	Y+2, r24	; 0x02
    3db6:	0f c0       	rjmp	.+30     	; 0x3dd6 <LCD_CheckStatusSendChar4bit+0x7b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3db8:	69 89       	ldd	r22, Y+17	; 0x11
    3dba:	7a 89       	ldd	r23, Y+18	; 0x12
    3dbc:	8b 89       	ldd	r24, Y+19	; 0x13
    3dbe:	9c 89       	ldd	r25, Y+20	; 0x14
    3dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc4:	dc 01       	movw	r26, r24
    3dc6:	cb 01       	movw	r24, r22
    3dc8:	88 8b       	std	Y+16, r24	; 0x10
    3dca:	88 89       	ldd	r24, Y+16	; 0x10
    3dcc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3dce:	89 81       	ldd	r24, Y+1	; 0x01
    3dd0:	8a 95       	dec	r24
    3dd2:	f1 f7       	brne	.-4      	; 0x3dd0 <LCD_CheckStatusSendChar4bit+0x7ae>
    3dd4:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    3dd6:	fe 01       	movw	r30, r28
    3dd8:	ef 59       	subi	r30, 0x9F	; 159
    3dda:	ff 4f       	sbci	r31, 0xFF	; 255
    3ddc:	80 81       	ld	r24, Z
}
    3dde:	ce 59       	subi	r28, 0x9E	; 158
    3de0:	df 4f       	sbci	r29, 0xFF	; 255
    3de2:	0f b6       	in	r0, 0x3f	; 63
    3de4:	f8 94       	cli
    3de6:	de bf       	out	0x3e, r29	; 62
    3de8:	0f be       	out	0x3f, r0	; 63
    3dea:	cd bf       	out	0x3d, r28	; 61
    3dec:	cf 91       	pop	r28
    3dee:	df 91       	pop	r29
    3df0:	1f 91       	pop	r17
    3df2:	0f 91       	pop	r16
    3df4:	08 95       	ret

00003df6 <LCD_CheckStatusSendCmnd4bit>:
CheckStatus LCD_CheckStatusSendCmnd4bit(_uint8 Copy__Uint8Cmnd)
{
    3df6:	0f 93       	push	r16
    3df8:	1f 93       	push	r17
    3dfa:	df 93       	push	r29
    3dfc:	cf 93       	push	r28
    3dfe:	cd b7       	in	r28, 0x3d	; 61
    3e00:	de b7       	in	r29, 0x3e	; 62
    3e02:	c2 56       	subi	r28, 0x62	; 98
    3e04:	d0 40       	sbci	r29, 0x00	; 0
    3e06:	0f b6       	in	r0, 0x3f	; 63
    3e08:	f8 94       	cli
    3e0a:	de bf       	out	0x3e, r29	; 62
    3e0c:	0f be       	out	0x3f, r0	; 63
    3e0e:	cd bf       	out	0x3d, r28	; 61
    3e10:	fe 01       	movw	r30, r28
    3e12:	ee 59       	subi	r30, 0x9E	; 158
    3e14:	ff 4f       	sbci	r31, 0xFF	; 255
    3e16:	80 83       	st	Z, r24
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    3e18:	fe 01       	movw	r30, r28
    3e1a:	ef 59       	subi	r30, 0x9F	; 159
    3e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1e:	10 82       	st	Z, r1
         3-Send CMND byte  to the Data Pins of LCD
         4-PULSE of Enable E = 1 ,E = 0
        */
        if (Copy__Uint8Cmnd <= 255)
        {
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_LOW);
    3e20:	82 e0       	ldi	r24, 0x02	; 2
    3e22:	60 e0       	ldi	r22, 0x00	; 0
    3e24:	40 e0       	ldi	r20, 0x00	; 0
    3e26:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    3e2a:	82 e0       	ldi	r24, 0x02	; 2
    3e2c:	61 e0       	ldi	r22, 0x01	; 1
    3e2e:	40 e0       	ldi	r20, 0x00	; 0
    3e30:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT,( Copy__Uint8Cmnd & LCD__UINT8_DATA_PINS));
    3e34:	fe 01       	movw	r30, r28
    3e36:	ee 59       	subi	r30, 0x9E	; 158
    3e38:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3a:	80 81       	ld	r24, Z
    3e3c:	98 2f       	mov	r25, r24
    3e3e:	90 7f       	andi	r25, 0xF0	; 240
    3e40:	83 e0       	ldi	r24, 0x03	; 3
    3e42:	69 2f       	mov	r22, r25
    3e44:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    3e48:	82 e0       	ldi	r24, 0x02	; 2
    3e4a:	62 e0       	ldi	r22, 0x02	; 2
    3e4c:	41 e0       	ldi	r20, 0x01	; 1
    3e4e:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>
    3e52:	fe 01       	movw	r30, r28
    3e54:	e3 5a       	subi	r30, 0xA3	; 163
    3e56:	ff 4f       	sbci	r31, 0xFF	; 255
    3e58:	80 e0       	ldi	r24, 0x00	; 0
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	a0 e8       	ldi	r26, 0x80	; 128
    3e5e:	bf e3       	ldi	r27, 0x3F	; 63
    3e60:	80 83       	st	Z, r24
    3e62:	91 83       	std	Z+1, r25	; 0x01
    3e64:	a2 83       	std	Z+2, r26	; 0x02
    3e66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3e68:	8e 01       	movw	r16, r28
    3e6a:	07 5a       	subi	r16, 0xA7	; 167
    3e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e6e:	fe 01       	movw	r30, r28
    3e70:	e3 5a       	subi	r30, 0xA3	; 163
    3e72:	ff 4f       	sbci	r31, 0xFF	; 255
    3e74:	60 81       	ld	r22, Z
    3e76:	71 81       	ldd	r23, Z+1	; 0x01
    3e78:	82 81       	ldd	r24, Z+2	; 0x02
    3e7a:	93 81       	ldd	r25, Z+3	; 0x03
    3e7c:	2b ea       	ldi	r18, 0xAB	; 171
    3e7e:	3a ea       	ldi	r19, 0xAA	; 170
    3e80:	4a e2       	ldi	r20, 0x2A	; 42
    3e82:	50 e4       	ldi	r21, 0x40	; 64
    3e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e88:	dc 01       	movw	r26, r24
    3e8a:	cb 01       	movw	r24, r22
    3e8c:	f8 01       	movw	r30, r16
    3e8e:	80 83       	st	Z, r24
    3e90:	91 83       	std	Z+1, r25	; 0x01
    3e92:	a2 83       	std	Z+2, r26	; 0x02
    3e94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e96:	fe 01       	movw	r30, r28
    3e98:	e7 5a       	subi	r30, 0xA7	; 167
    3e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9c:	60 81       	ld	r22, Z
    3e9e:	71 81       	ldd	r23, Z+1	; 0x01
    3ea0:	82 81       	ldd	r24, Z+2	; 0x02
    3ea2:	93 81       	ldd	r25, Z+3	; 0x03
    3ea4:	20 e0       	ldi	r18, 0x00	; 0
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	40 e8       	ldi	r20, 0x80	; 128
    3eaa:	5f e3       	ldi	r21, 0x3F	; 63
    3eac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3eb0:	88 23       	and	r24, r24
    3eb2:	34 f4       	brge	.+12     	; 0x3ec0 <LCD_CheckStatusSendCmnd4bit+0xca>
		__ticks = 1;
    3eb4:	fe 01       	movw	r30, r28
    3eb6:	e8 5a       	subi	r30, 0xA8	; 168
    3eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eba:	81 e0       	ldi	r24, 0x01	; 1
    3ebc:	80 83       	st	Z, r24
    3ebe:	e0 c0       	rjmp	.+448    	; 0x4080 <LCD_CheckStatusSendCmnd4bit+0x28a>
	else if (__tmp > 255)
    3ec0:	fe 01       	movw	r30, r28
    3ec2:	e7 5a       	subi	r30, 0xA7	; 167
    3ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec6:	60 81       	ld	r22, Z
    3ec8:	71 81       	ldd	r23, Z+1	; 0x01
    3eca:	82 81       	ldd	r24, Z+2	; 0x02
    3ecc:	93 81       	ldd	r25, Z+3	; 0x03
    3ece:	20 e0       	ldi	r18, 0x00	; 0
    3ed0:	30 e0       	ldi	r19, 0x00	; 0
    3ed2:	4f e7       	ldi	r20, 0x7F	; 127
    3ed4:	53 e4       	ldi	r21, 0x43	; 67
    3ed6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eda:	18 16       	cp	r1, r24
    3edc:	0c f0       	brlt	.+2      	; 0x3ee0 <LCD_CheckStatusSendCmnd4bit+0xea>
    3ede:	c0 c0       	rjmp	.+384    	; 0x4060 <LCD_CheckStatusSendCmnd4bit+0x26a>
	{
		_delay_ms(__us / 1000.0);
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	e3 5a       	subi	r30, 0xA3	; 163
    3ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee6:	60 81       	ld	r22, Z
    3ee8:	71 81       	ldd	r23, Z+1	; 0x01
    3eea:	82 81       	ldd	r24, Z+2	; 0x02
    3eec:	93 81       	ldd	r25, Z+3	; 0x03
    3eee:	20 e0       	ldi	r18, 0x00	; 0
    3ef0:	30 e0       	ldi	r19, 0x00	; 0
    3ef2:	4a e7       	ldi	r20, 0x7A	; 122
    3ef4:	54 e4       	ldi	r21, 0x44	; 68
    3ef6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3efa:	dc 01       	movw	r26, r24
    3efc:	cb 01       	movw	r24, r22
    3efe:	fe 01       	movw	r30, r28
    3f00:	ec 5a       	subi	r30, 0xAC	; 172
    3f02:	ff 4f       	sbci	r31, 0xFF	; 255
    3f04:	80 83       	st	Z, r24
    3f06:	91 83       	std	Z+1, r25	; 0x01
    3f08:	a2 83       	std	Z+2, r26	; 0x02
    3f0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f0c:	8e 01       	movw	r16, r28
    3f0e:	00 5b       	subi	r16, 0xB0	; 176
    3f10:	1f 4f       	sbci	r17, 0xFF	; 255
    3f12:	fe 01       	movw	r30, r28
    3f14:	ec 5a       	subi	r30, 0xAC	; 172
    3f16:	ff 4f       	sbci	r31, 0xFF	; 255
    3f18:	60 81       	ld	r22, Z
    3f1a:	71 81       	ldd	r23, Z+1	; 0x01
    3f1c:	82 81       	ldd	r24, Z+2	; 0x02
    3f1e:	93 81       	ldd	r25, Z+3	; 0x03
    3f20:	20 e0       	ldi	r18, 0x00	; 0
    3f22:	30 e0       	ldi	r19, 0x00	; 0
    3f24:	4a ef       	ldi	r20, 0xFA	; 250
    3f26:	54 e4       	ldi	r21, 0x44	; 68
    3f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f2c:	dc 01       	movw	r26, r24
    3f2e:	cb 01       	movw	r24, r22
    3f30:	f8 01       	movw	r30, r16
    3f32:	80 83       	st	Z, r24
    3f34:	91 83       	std	Z+1, r25	; 0x01
    3f36:	a2 83       	std	Z+2, r26	; 0x02
    3f38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f3a:	fe 01       	movw	r30, r28
    3f3c:	e0 5b       	subi	r30, 0xB0	; 176
    3f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f40:	60 81       	ld	r22, Z
    3f42:	71 81       	ldd	r23, Z+1	; 0x01
    3f44:	82 81       	ldd	r24, Z+2	; 0x02
    3f46:	93 81       	ldd	r25, Z+3	; 0x03
    3f48:	20 e0       	ldi	r18, 0x00	; 0
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	40 e8       	ldi	r20, 0x80	; 128
    3f4e:	5f e3       	ldi	r21, 0x3F	; 63
    3f50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f54:	88 23       	and	r24, r24
    3f56:	44 f4       	brge	.+16     	; 0x3f68 <LCD_CheckStatusSendCmnd4bit+0x172>
		__ticks = 1;
    3f58:	fe 01       	movw	r30, r28
    3f5a:	e2 5b       	subi	r30, 0xB2	; 178
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	91 83       	std	Z+1, r25	; 0x01
    3f64:	80 83       	st	Z, r24
    3f66:	64 c0       	rjmp	.+200    	; 0x4030 <LCD_CheckStatusSendCmnd4bit+0x23a>
	else if (__tmp > 65535)
    3f68:	fe 01       	movw	r30, r28
    3f6a:	e0 5b       	subi	r30, 0xB0	; 176
    3f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6e:	60 81       	ld	r22, Z
    3f70:	71 81       	ldd	r23, Z+1	; 0x01
    3f72:	82 81       	ldd	r24, Z+2	; 0x02
    3f74:	93 81       	ldd	r25, Z+3	; 0x03
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	3f ef       	ldi	r19, 0xFF	; 255
    3f7a:	4f e7       	ldi	r20, 0x7F	; 127
    3f7c:	57 e4       	ldi	r21, 0x47	; 71
    3f7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f82:	18 16       	cp	r1, r24
    3f84:	0c f0       	brlt	.+2      	; 0x3f88 <LCD_CheckStatusSendCmnd4bit+0x192>
    3f86:	43 c0       	rjmp	.+134    	; 0x400e <LCD_CheckStatusSendCmnd4bit+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f88:	fe 01       	movw	r30, r28
    3f8a:	ec 5a       	subi	r30, 0xAC	; 172
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	60 81       	ld	r22, Z
    3f90:	71 81       	ldd	r23, Z+1	; 0x01
    3f92:	82 81       	ldd	r24, Z+2	; 0x02
    3f94:	93 81       	ldd	r25, Z+3	; 0x03
    3f96:	20 e0       	ldi	r18, 0x00	; 0
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	40 e2       	ldi	r20, 0x20	; 32
    3f9c:	51 e4       	ldi	r21, 0x41	; 65
    3f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa2:	dc 01       	movw	r26, r24
    3fa4:	cb 01       	movw	r24, r22
    3fa6:	8e 01       	movw	r16, r28
    3fa8:	02 5b       	subi	r16, 0xB2	; 178
    3faa:	1f 4f       	sbci	r17, 0xFF	; 255
    3fac:	bc 01       	movw	r22, r24
    3fae:	cd 01       	movw	r24, r26
    3fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb4:	dc 01       	movw	r26, r24
    3fb6:	cb 01       	movw	r24, r22
    3fb8:	f8 01       	movw	r30, r16
    3fba:	91 83       	std	Z+1, r25	; 0x01
    3fbc:	80 83       	st	Z, r24
    3fbe:	1f c0       	rjmp	.+62     	; 0x3ffe <LCD_CheckStatusSendCmnd4bit+0x208>
    3fc0:	fe 01       	movw	r30, r28
    3fc2:	e4 5b       	subi	r30, 0xB4	; 180
    3fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc6:	88 ec       	ldi	r24, 0xC8	; 200
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	91 83       	std	Z+1, r25	; 0x01
    3fcc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3fce:	fe 01       	movw	r30, r28
    3fd0:	e4 5b       	subi	r30, 0xB4	; 180
    3fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd4:	80 81       	ld	r24, Z
    3fd6:	91 81       	ldd	r25, Z+1	; 0x01
    3fd8:	01 97       	sbiw	r24, 0x01	; 1
    3fda:	f1 f7       	brne	.-4      	; 0x3fd8 <LCD_CheckStatusSendCmnd4bit+0x1e2>
    3fdc:	fe 01       	movw	r30, r28
    3fde:	e4 5b       	subi	r30, 0xB4	; 180
    3fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe2:	91 83       	std	Z+1, r25	; 0x01
    3fe4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fe6:	de 01       	movw	r26, r28
    3fe8:	a2 5b       	subi	r26, 0xB2	; 178
    3fea:	bf 4f       	sbci	r27, 0xFF	; 255
    3fec:	fe 01       	movw	r30, r28
    3fee:	e2 5b       	subi	r30, 0xB2	; 178
    3ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff2:	80 81       	ld	r24, Z
    3ff4:	91 81       	ldd	r25, Z+1	; 0x01
    3ff6:	01 97       	sbiw	r24, 0x01	; 1
    3ff8:	11 96       	adiw	r26, 0x01	; 1
    3ffa:	9c 93       	st	X, r25
    3ffc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ffe:	fe 01       	movw	r30, r28
    4000:	e2 5b       	subi	r30, 0xB2	; 178
    4002:	ff 4f       	sbci	r31, 0xFF	; 255
    4004:	80 81       	ld	r24, Z
    4006:	91 81       	ldd	r25, Z+1	; 0x01
    4008:	00 97       	sbiw	r24, 0x00	; 0
    400a:	d1 f6       	brne	.-76     	; 0x3fc0 <LCD_CheckStatusSendCmnd4bit+0x1ca>
    400c:	4b c0       	rjmp	.+150    	; 0x40a4 <LCD_CheckStatusSendCmnd4bit+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    400e:	8e 01       	movw	r16, r28
    4010:	02 5b       	subi	r16, 0xB2	; 178
    4012:	1f 4f       	sbci	r17, 0xFF	; 255
    4014:	fe 01       	movw	r30, r28
    4016:	e0 5b       	subi	r30, 0xB0	; 176
    4018:	ff 4f       	sbci	r31, 0xFF	; 255
    401a:	60 81       	ld	r22, Z
    401c:	71 81       	ldd	r23, Z+1	; 0x01
    401e:	82 81       	ldd	r24, Z+2	; 0x02
    4020:	93 81       	ldd	r25, Z+3	; 0x03
    4022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4026:	dc 01       	movw	r26, r24
    4028:	cb 01       	movw	r24, r22
    402a:	f8 01       	movw	r30, r16
    402c:	91 83       	std	Z+1, r25	; 0x01
    402e:	80 83       	st	Z, r24
    4030:	de 01       	movw	r26, r28
    4032:	a6 5b       	subi	r26, 0xB6	; 182
    4034:	bf 4f       	sbci	r27, 0xFF	; 255
    4036:	fe 01       	movw	r30, r28
    4038:	e2 5b       	subi	r30, 0xB2	; 178
    403a:	ff 4f       	sbci	r31, 0xFF	; 255
    403c:	80 81       	ld	r24, Z
    403e:	91 81       	ldd	r25, Z+1	; 0x01
    4040:	11 96       	adiw	r26, 0x01	; 1
    4042:	9c 93       	st	X, r25
    4044:	8e 93       	st	-X, r24
    4046:	fe 01       	movw	r30, r28
    4048:	e6 5b       	subi	r30, 0xB6	; 182
    404a:	ff 4f       	sbci	r31, 0xFF	; 255
    404c:	80 81       	ld	r24, Z
    404e:	91 81       	ldd	r25, Z+1	; 0x01
    4050:	01 97       	sbiw	r24, 0x01	; 1
    4052:	f1 f7       	brne	.-4      	; 0x4050 <LCD_CheckStatusSendCmnd4bit+0x25a>
    4054:	fe 01       	movw	r30, r28
    4056:	e6 5b       	subi	r30, 0xB6	; 182
    4058:	ff 4f       	sbci	r31, 0xFF	; 255
    405a:	91 83       	std	Z+1, r25	; 0x01
    405c:	80 83       	st	Z, r24
    405e:	22 c0       	rjmp	.+68     	; 0x40a4 <LCD_CheckStatusSendCmnd4bit+0x2ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4060:	8e 01       	movw	r16, r28
    4062:	08 5a       	subi	r16, 0xA8	; 168
    4064:	1f 4f       	sbci	r17, 0xFF	; 255
    4066:	fe 01       	movw	r30, r28
    4068:	e7 5a       	subi	r30, 0xA7	; 167
    406a:	ff 4f       	sbci	r31, 0xFF	; 255
    406c:	60 81       	ld	r22, Z
    406e:	71 81       	ldd	r23, Z+1	; 0x01
    4070:	82 81       	ldd	r24, Z+2	; 0x02
    4072:	93 81       	ldd	r25, Z+3	; 0x03
    4074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4078:	dc 01       	movw	r26, r24
    407a:	cb 01       	movw	r24, r22
    407c:	f8 01       	movw	r30, r16
    407e:	80 83       	st	Z, r24
    4080:	de 01       	movw	r26, r28
    4082:	a7 5b       	subi	r26, 0xB7	; 183
    4084:	bf 4f       	sbci	r27, 0xFF	; 255
    4086:	fe 01       	movw	r30, r28
    4088:	e8 5a       	subi	r30, 0xA8	; 168
    408a:	ff 4f       	sbci	r31, 0xFF	; 255
    408c:	80 81       	ld	r24, Z
    408e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4090:	fe 01       	movw	r30, r28
    4092:	e7 5b       	subi	r30, 0xB7	; 183
    4094:	ff 4f       	sbci	r31, 0xFF	; 255
    4096:	80 81       	ld	r24, Z
    4098:	8a 95       	dec	r24
    409a:	f1 f7       	brne	.-4      	; 0x4098 <LCD_CheckStatusSendCmnd4bit+0x2a2>
    409c:	fe 01       	movw	r30, r28
    409e:	e7 5b       	subi	r30, 0xB7	; 183
    40a0:	ff 4f       	sbci	r31, 0xFF	; 255
    40a2:	80 83       	st	Z, r24
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    40a4:	82 e0       	ldi	r24, 0x02	; 2
    40a6:	62 e0       	ldi	r22, 0x02	; 2
    40a8:	40 e0       	ldi	r20, 0x00	; 0
    40aa:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>
    40ae:	fe 01       	movw	r30, r28
    40b0:	eb 5b       	subi	r30, 0xBB	; 187
    40b2:	ff 4f       	sbci	r31, 0xFF	; 255
    40b4:	80 e0       	ldi	r24, 0x00	; 0
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	a0 e8       	ldi	r26, 0x80	; 128
    40ba:	bf e3       	ldi	r27, 0x3F	; 63
    40bc:	80 83       	st	Z, r24
    40be:	91 83       	std	Z+1, r25	; 0x01
    40c0:	a2 83       	std	Z+2, r26	; 0x02
    40c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    40c4:	8e 01       	movw	r16, r28
    40c6:	0f 5b       	subi	r16, 0xBF	; 191
    40c8:	1f 4f       	sbci	r17, 0xFF	; 255
    40ca:	fe 01       	movw	r30, r28
    40cc:	eb 5b       	subi	r30, 0xBB	; 187
    40ce:	ff 4f       	sbci	r31, 0xFF	; 255
    40d0:	60 81       	ld	r22, Z
    40d2:	71 81       	ldd	r23, Z+1	; 0x01
    40d4:	82 81       	ldd	r24, Z+2	; 0x02
    40d6:	93 81       	ldd	r25, Z+3	; 0x03
    40d8:	2b ea       	ldi	r18, 0xAB	; 171
    40da:	3a ea       	ldi	r19, 0xAA	; 170
    40dc:	4a e2       	ldi	r20, 0x2A	; 42
    40de:	50 e4       	ldi	r21, 0x40	; 64
    40e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40e4:	dc 01       	movw	r26, r24
    40e6:	cb 01       	movw	r24, r22
    40e8:	f8 01       	movw	r30, r16
    40ea:	80 83       	st	Z, r24
    40ec:	91 83       	std	Z+1, r25	; 0x01
    40ee:	a2 83       	std	Z+2, r26	; 0x02
    40f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40f2:	fe 01       	movw	r30, r28
    40f4:	ef 5b       	subi	r30, 0xBF	; 191
    40f6:	ff 4f       	sbci	r31, 0xFF	; 255
    40f8:	60 81       	ld	r22, Z
    40fa:	71 81       	ldd	r23, Z+1	; 0x01
    40fc:	82 81       	ldd	r24, Z+2	; 0x02
    40fe:	93 81       	ldd	r25, Z+3	; 0x03
    4100:	20 e0       	ldi	r18, 0x00	; 0
    4102:	30 e0       	ldi	r19, 0x00	; 0
    4104:	40 e8       	ldi	r20, 0x80	; 128
    4106:	5f e3       	ldi	r21, 0x3F	; 63
    4108:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    410c:	88 23       	and	r24, r24
    410e:	34 f4       	brge	.+12     	; 0x411c <LCD_CheckStatusSendCmnd4bit+0x326>
		__ticks = 1;
    4110:	81 e0       	ldi	r24, 0x01	; 1
    4112:	fe 01       	movw	r30, r28
    4114:	e0 5c       	subi	r30, 0xC0	; 192
    4116:	ff 4f       	sbci	r31, 0xFF	; 255
    4118:	80 83       	st	Z, r24
    411a:	9d c0       	rjmp	.+314    	; 0x4256 <LCD_CheckStatusSendCmnd4bit+0x460>
	else if (__tmp > 255)
    411c:	fe 01       	movw	r30, r28
    411e:	ef 5b       	subi	r30, 0xBF	; 191
    4120:	ff 4f       	sbci	r31, 0xFF	; 255
    4122:	60 81       	ld	r22, Z
    4124:	71 81       	ldd	r23, Z+1	; 0x01
    4126:	82 81       	ldd	r24, Z+2	; 0x02
    4128:	93 81       	ldd	r25, Z+3	; 0x03
    412a:	20 e0       	ldi	r18, 0x00	; 0
    412c:	30 e0       	ldi	r19, 0x00	; 0
    412e:	4f e7       	ldi	r20, 0x7F	; 127
    4130:	53 e4       	ldi	r21, 0x43	; 67
    4132:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4136:	18 16       	cp	r1, r24
    4138:	0c f0       	brlt	.+2      	; 0x413c <LCD_CheckStatusSendCmnd4bit+0x346>
    413a:	7e c0       	rjmp	.+252    	; 0x4238 <LCD_CheckStatusSendCmnd4bit+0x442>
	{
		_delay_ms(__us / 1000.0);
    413c:	fe 01       	movw	r30, r28
    413e:	eb 5b       	subi	r30, 0xBB	; 187
    4140:	ff 4f       	sbci	r31, 0xFF	; 255
    4142:	60 81       	ld	r22, Z
    4144:	71 81       	ldd	r23, Z+1	; 0x01
    4146:	82 81       	ldd	r24, Z+2	; 0x02
    4148:	93 81       	ldd	r25, Z+3	; 0x03
    414a:	20 e0       	ldi	r18, 0x00	; 0
    414c:	30 e0       	ldi	r19, 0x00	; 0
    414e:	4a e7       	ldi	r20, 0x7A	; 122
    4150:	54 e4       	ldi	r21, 0x44	; 68
    4152:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4156:	dc 01       	movw	r26, r24
    4158:	cb 01       	movw	r24, r22
    415a:	8c af       	std	Y+60, r24	; 0x3c
    415c:	9d af       	std	Y+61, r25	; 0x3d
    415e:	ae af       	std	Y+62, r26	; 0x3e
    4160:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4162:	6c ad       	ldd	r22, Y+60	; 0x3c
    4164:	7d ad       	ldd	r23, Y+61	; 0x3d
    4166:	8e ad       	ldd	r24, Y+62	; 0x3e
    4168:	9f ad       	ldd	r25, Y+63	; 0x3f
    416a:	20 e0       	ldi	r18, 0x00	; 0
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	4a ef       	ldi	r20, 0xFA	; 250
    4170:	54 e4       	ldi	r21, 0x44	; 68
    4172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	88 af       	std	Y+56, r24	; 0x38
    417c:	99 af       	std	Y+57, r25	; 0x39
    417e:	aa af       	std	Y+58, r26	; 0x3a
    4180:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    4182:	68 ad       	ldd	r22, Y+56	; 0x38
    4184:	79 ad       	ldd	r23, Y+57	; 0x39
    4186:	8a ad       	ldd	r24, Y+58	; 0x3a
    4188:	9b ad       	ldd	r25, Y+59	; 0x3b
    418a:	20 e0       	ldi	r18, 0x00	; 0
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	40 e8       	ldi	r20, 0x80	; 128
    4190:	5f e3       	ldi	r21, 0x3F	; 63
    4192:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4196:	88 23       	and	r24, r24
    4198:	2c f4       	brge	.+10     	; 0x41a4 <LCD_CheckStatusSendCmnd4bit+0x3ae>
		__ticks = 1;
    419a:	81 e0       	ldi	r24, 0x01	; 1
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	9f ab       	std	Y+55, r25	; 0x37
    41a0:	8e ab       	std	Y+54, r24	; 0x36
    41a2:	3f c0       	rjmp	.+126    	; 0x4222 <LCD_CheckStatusSendCmnd4bit+0x42c>
	else if (__tmp > 65535)
    41a4:	68 ad       	ldd	r22, Y+56	; 0x38
    41a6:	79 ad       	ldd	r23, Y+57	; 0x39
    41a8:	8a ad       	ldd	r24, Y+58	; 0x3a
    41aa:	9b ad       	ldd	r25, Y+59	; 0x3b
    41ac:	20 e0       	ldi	r18, 0x00	; 0
    41ae:	3f ef       	ldi	r19, 0xFF	; 255
    41b0:	4f e7       	ldi	r20, 0x7F	; 127
    41b2:	57 e4       	ldi	r21, 0x47	; 71
    41b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41b8:	18 16       	cp	r1, r24
    41ba:	4c f5       	brge	.+82     	; 0x420e <LCD_CheckStatusSendCmnd4bit+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41bc:	6c ad       	ldd	r22, Y+60	; 0x3c
    41be:	7d ad       	ldd	r23, Y+61	; 0x3d
    41c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    41c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    41c4:	20 e0       	ldi	r18, 0x00	; 0
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	40 e2       	ldi	r20, 0x20	; 32
    41ca:	51 e4       	ldi	r21, 0x41	; 65
    41cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41d0:	dc 01       	movw	r26, r24
    41d2:	cb 01       	movw	r24, r22
    41d4:	bc 01       	movw	r22, r24
    41d6:	cd 01       	movw	r24, r26
    41d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41dc:	dc 01       	movw	r26, r24
    41de:	cb 01       	movw	r24, r22
    41e0:	9f ab       	std	Y+55, r25	; 0x37
    41e2:	8e ab       	std	Y+54, r24	; 0x36
    41e4:	0f c0       	rjmp	.+30     	; 0x4204 <LCD_CheckStatusSendCmnd4bit+0x40e>
    41e6:	88 ec       	ldi	r24, 0xC8	; 200
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	9d ab       	std	Y+53, r25	; 0x35
    41ec:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    41ee:	8c a9       	ldd	r24, Y+52	; 0x34
    41f0:	9d a9       	ldd	r25, Y+53	; 0x35
    41f2:	01 97       	sbiw	r24, 0x01	; 1
    41f4:	f1 f7       	brne	.-4      	; 0x41f2 <LCD_CheckStatusSendCmnd4bit+0x3fc>
    41f6:	9d ab       	std	Y+53, r25	; 0x35
    41f8:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41fa:	8e a9       	ldd	r24, Y+54	; 0x36
    41fc:	9f a9       	ldd	r25, Y+55	; 0x37
    41fe:	01 97       	sbiw	r24, 0x01	; 1
    4200:	9f ab       	std	Y+55, r25	; 0x37
    4202:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4204:	8e a9       	ldd	r24, Y+54	; 0x36
    4206:	9f a9       	ldd	r25, Y+55	; 0x37
    4208:	00 97       	sbiw	r24, 0x00	; 0
    420a:	69 f7       	brne	.-38     	; 0x41e6 <LCD_CheckStatusSendCmnd4bit+0x3f0>
    420c:	2d c0       	rjmp	.+90     	; 0x4268 <LCD_CheckStatusSendCmnd4bit+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    420e:	68 ad       	ldd	r22, Y+56	; 0x38
    4210:	79 ad       	ldd	r23, Y+57	; 0x39
    4212:	8a ad       	ldd	r24, Y+58	; 0x3a
    4214:	9b ad       	ldd	r25, Y+59	; 0x3b
    4216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    421a:	dc 01       	movw	r26, r24
    421c:	cb 01       	movw	r24, r22
    421e:	9f ab       	std	Y+55, r25	; 0x37
    4220:	8e ab       	std	Y+54, r24	; 0x36
    4222:	8e a9       	ldd	r24, Y+54	; 0x36
    4224:	9f a9       	ldd	r25, Y+55	; 0x37
    4226:	9b ab       	std	Y+51, r25	; 0x33
    4228:	8a ab       	std	Y+50, r24	; 0x32
    422a:	8a a9       	ldd	r24, Y+50	; 0x32
    422c:	9b a9       	ldd	r25, Y+51	; 0x33
    422e:	01 97       	sbiw	r24, 0x01	; 1
    4230:	f1 f7       	brne	.-4      	; 0x422e <LCD_CheckStatusSendCmnd4bit+0x438>
    4232:	9b ab       	std	Y+51, r25	; 0x33
    4234:	8a ab       	std	Y+50, r24	; 0x32
    4236:	18 c0       	rjmp	.+48     	; 0x4268 <LCD_CheckStatusSendCmnd4bit+0x472>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4238:	fe 01       	movw	r30, r28
    423a:	ef 5b       	subi	r30, 0xBF	; 191
    423c:	ff 4f       	sbci	r31, 0xFF	; 255
    423e:	60 81       	ld	r22, Z
    4240:	71 81       	ldd	r23, Z+1	; 0x01
    4242:	82 81       	ldd	r24, Z+2	; 0x02
    4244:	93 81       	ldd	r25, Z+3	; 0x03
    4246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    424a:	dc 01       	movw	r26, r24
    424c:	cb 01       	movw	r24, r22
    424e:	fe 01       	movw	r30, r28
    4250:	e0 5c       	subi	r30, 0xC0	; 192
    4252:	ff 4f       	sbci	r31, 0xFF	; 255
    4254:	80 83       	st	Z, r24
    4256:	fe 01       	movw	r30, r28
    4258:	e0 5c       	subi	r30, 0xC0	; 192
    425a:	ff 4f       	sbci	r31, 0xFF	; 255
    425c:	80 81       	ld	r24, Z
    425e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4260:	89 a9       	ldd	r24, Y+49	; 0x31
    4262:	8a 95       	dec	r24
    4264:	f1 f7       	brne	.-4      	; 0x4262 <LCD_CheckStatusSendCmnd4bit+0x46c>
    4266:	89 ab       	std	Y+49, r24	; 0x31
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_LOW);
    4268:	82 e0       	ldi	r24, 0x02	; 2
    426a:	60 e0       	ldi	r22, 0x00	; 0
    426c:	40 e0       	ldi	r20, 0x00	; 0
    426e:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    4272:	82 e0       	ldi	r24, 0x02	; 2
    4274:	61 e0       	ldi	r22, 0x01	; 1
    4276:	40 e0       	ldi	r20, 0x00	; 0
    4278:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, ((Copy__Uint8Cmnd << 4) & LCD__UINT8_DATA_PINS));
    427c:	fe 01       	movw	r30, r28
    427e:	ee 59       	subi	r30, 0x9E	; 158
    4280:	ff 4f       	sbci	r31, 0xFF	; 255
    4282:	80 81       	ld	r24, Z
    4284:	88 2f       	mov	r24, r24
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	82 95       	swap	r24
    428a:	92 95       	swap	r25
    428c:	90 7f       	andi	r25, 0xF0	; 240
    428e:	98 27       	eor	r25, r24
    4290:	80 7f       	andi	r24, 0xF0	; 240
    4292:	98 27       	eor	r25, r24
    4294:	98 2f       	mov	r25, r24
    4296:	83 e0       	ldi	r24, 0x03	; 3
    4298:	69 2f       	mov	r22, r25
    429a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    429e:	82 e0       	ldi	r24, 0x02	; 2
    42a0:	62 e0       	ldi	r22, 0x02	; 2
    42a2:	41 e0       	ldi	r20, 0x01	; 1
    42a4:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>
    42a8:	80 e0       	ldi	r24, 0x00	; 0
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	a0 e8       	ldi	r26, 0x80	; 128
    42ae:	bf e3       	ldi	r27, 0x3F	; 63
    42b0:	8d a7       	std	Y+45, r24	; 0x2d
    42b2:	9e a7       	std	Y+46, r25	; 0x2e
    42b4:	af a7       	std	Y+47, r26	; 0x2f
    42b6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    42b8:	6d a5       	ldd	r22, Y+45	; 0x2d
    42ba:	7e a5       	ldd	r23, Y+46	; 0x2e
    42bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    42be:	98 a9       	ldd	r25, Y+48	; 0x30
    42c0:	2b ea       	ldi	r18, 0xAB	; 171
    42c2:	3a ea       	ldi	r19, 0xAA	; 170
    42c4:	4a e2       	ldi	r20, 0x2A	; 42
    42c6:	50 e4       	ldi	r21, 0x40	; 64
    42c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42cc:	dc 01       	movw	r26, r24
    42ce:	cb 01       	movw	r24, r22
    42d0:	89 a7       	std	Y+41, r24	; 0x29
    42d2:	9a a7       	std	Y+42, r25	; 0x2a
    42d4:	ab a7       	std	Y+43, r26	; 0x2b
    42d6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    42d8:	69 a5       	ldd	r22, Y+41	; 0x29
    42da:	7a a5       	ldd	r23, Y+42	; 0x2a
    42dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    42de:	9c a5       	ldd	r25, Y+44	; 0x2c
    42e0:	20 e0       	ldi	r18, 0x00	; 0
    42e2:	30 e0       	ldi	r19, 0x00	; 0
    42e4:	40 e8       	ldi	r20, 0x80	; 128
    42e6:	5f e3       	ldi	r21, 0x3F	; 63
    42e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42ec:	88 23       	and	r24, r24
    42ee:	1c f4       	brge	.+6      	; 0x42f6 <LCD_CheckStatusSendCmnd4bit+0x500>
		__ticks = 1;
    42f0:	81 e0       	ldi	r24, 0x01	; 1
    42f2:	88 a7       	std	Y+40, r24	; 0x28
    42f4:	91 c0       	rjmp	.+290    	; 0x4418 <LCD_CheckStatusSendCmnd4bit+0x622>
	else if (__tmp > 255)
    42f6:	69 a5       	ldd	r22, Y+41	; 0x29
    42f8:	7a a5       	ldd	r23, Y+42	; 0x2a
    42fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    42fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    42fe:	20 e0       	ldi	r18, 0x00	; 0
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	4f e7       	ldi	r20, 0x7F	; 127
    4304:	53 e4       	ldi	r21, 0x43	; 67
    4306:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    430a:	18 16       	cp	r1, r24
    430c:	0c f0       	brlt	.+2      	; 0x4310 <LCD_CheckStatusSendCmnd4bit+0x51a>
    430e:	7b c0       	rjmp	.+246    	; 0x4406 <LCD_CheckStatusSendCmnd4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    4310:	6d a5       	ldd	r22, Y+45	; 0x2d
    4312:	7e a5       	ldd	r23, Y+46	; 0x2e
    4314:	8f a5       	ldd	r24, Y+47	; 0x2f
    4316:	98 a9       	ldd	r25, Y+48	; 0x30
    4318:	20 e0       	ldi	r18, 0x00	; 0
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	4a e7       	ldi	r20, 0x7A	; 122
    431e:	54 e4       	ldi	r21, 0x44	; 68
    4320:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4324:	dc 01       	movw	r26, r24
    4326:	cb 01       	movw	r24, r22
    4328:	8c a3       	std	Y+36, r24	; 0x24
    432a:	9d a3       	std	Y+37, r25	; 0x25
    432c:	ae a3       	std	Y+38, r26	; 0x26
    432e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4330:	6c a1       	ldd	r22, Y+36	; 0x24
    4332:	7d a1       	ldd	r23, Y+37	; 0x25
    4334:	8e a1       	ldd	r24, Y+38	; 0x26
    4336:	9f a1       	ldd	r25, Y+39	; 0x27
    4338:	20 e0       	ldi	r18, 0x00	; 0
    433a:	30 e0       	ldi	r19, 0x00	; 0
    433c:	4a ef       	ldi	r20, 0xFA	; 250
    433e:	54 e4       	ldi	r21, 0x44	; 68
    4340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4344:	dc 01       	movw	r26, r24
    4346:	cb 01       	movw	r24, r22
    4348:	88 a3       	std	Y+32, r24	; 0x20
    434a:	99 a3       	std	Y+33, r25	; 0x21
    434c:	aa a3       	std	Y+34, r26	; 0x22
    434e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4350:	68 a1       	ldd	r22, Y+32	; 0x20
    4352:	79 a1       	ldd	r23, Y+33	; 0x21
    4354:	8a a1       	ldd	r24, Y+34	; 0x22
    4356:	9b a1       	ldd	r25, Y+35	; 0x23
    4358:	20 e0       	ldi	r18, 0x00	; 0
    435a:	30 e0       	ldi	r19, 0x00	; 0
    435c:	40 e8       	ldi	r20, 0x80	; 128
    435e:	5f e3       	ldi	r21, 0x3F	; 63
    4360:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4364:	88 23       	and	r24, r24
    4366:	2c f4       	brge	.+10     	; 0x4372 <LCD_CheckStatusSendCmnd4bit+0x57c>
		__ticks = 1;
    4368:	81 e0       	ldi	r24, 0x01	; 1
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	9f 8f       	std	Y+31, r25	; 0x1f
    436e:	8e 8f       	std	Y+30, r24	; 0x1e
    4370:	3f c0       	rjmp	.+126    	; 0x43f0 <LCD_CheckStatusSendCmnd4bit+0x5fa>
	else if (__tmp > 65535)
    4372:	68 a1       	ldd	r22, Y+32	; 0x20
    4374:	79 a1       	ldd	r23, Y+33	; 0x21
    4376:	8a a1       	ldd	r24, Y+34	; 0x22
    4378:	9b a1       	ldd	r25, Y+35	; 0x23
    437a:	20 e0       	ldi	r18, 0x00	; 0
    437c:	3f ef       	ldi	r19, 0xFF	; 255
    437e:	4f e7       	ldi	r20, 0x7F	; 127
    4380:	57 e4       	ldi	r21, 0x47	; 71
    4382:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4386:	18 16       	cp	r1, r24
    4388:	4c f5       	brge	.+82     	; 0x43dc <LCD_CheckStatusSendCmnd4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    438a:	6c a1       	ldd	r22, Y+36	; 0x24
    438c:	7d a1       	ldd	r23, Y+37	; 0x25
    438e:	8e a1       	ldd	r24, Y+38	; 0x26
    4390:	9f a1       	ldd	r25, Y+39	; 0x27
    4392:	20 e0       	ldi	r18, 0x00	; 0
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	40 e2       	ldi	r20, 0x20	; 32
    4398:	51 e4       	ldi	r21, 0x41	; 65
    439a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    439e:	dc 01       	movw	r26, r24
    43a0:	cb 01       	movw	r24, r22
    43a2:	bc 01       	movw	r22, r24
    43a4:	cd 01       	movw	r24, r26
    43a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43aa:	dc 01       	movw	r26, r24
    43ac:	cb 01       	movw	r24, r22
    43ae:	9f 8f       	std	Y+31, r25	; 0x1f
    43b0:	8e 8f       	std	Y+30, r24	; 0x1e
    43b2:	0f c0       	rjmp	.+30     	; 0x43d2 <LCD_CheckStatusSendCmnd4bit+0x5dc>
    43b4:	88 ec       	ldi	r24, 0xC8	; 200
    43b6:	90 e0       	ldi	r25, 0x00	; 0
    43b8:	9d 8f       	std	Y+29, r25	; 0x1d
    43ba:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    43bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    43be:	9d 8d       	ldd	r25, Y+29	; 0x1d
    43c0:	01 97       	sbiw	r24, 0x01	; 1
    43c2:	f1 f7       	brne	.-4      	; 0x43c0 <LCD_CheckStatusSendCmnd4bit+0x5ca>
    43c4:	9d 8f       	std	Y+29, r25	; 0x1d
    43c6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    43ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    43cc:	01 97       	sbiw	r24, 0x01	; 1
    43ce:	9f 8f       	std	Y+31, r25	; 0x1f
    43d0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    43d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    43d6:	00 97       	sbiw	r24, 0x00	; 0
    43d8:	69 f7       	brne	.-38     	; 0x43b4 <LCD_CheckStatusSendCmnd4bit+0x5be>
    43da:	24 c0       	rjmp	.+72     	; 0x4424 <LCD_CheckStatusSendCmnd4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43dc:	68 a1       	ldd	r22, Y+32	; 0x20
    43de:	79 a1       	ldd	r23, Y+33	; 0x21
    43e0:	8a a1       	ldd	r24, Y+34	; 0x22
    43e2:	9b a1       	ldd	r25, Y+35	; 0x23
    43e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43e8:	dc 01       	movw	r26, r24
    43ea:	cb 01       	movw	r24, r22
    43ec:	9f 8f       	std	Y+31, r25	; 0x1f
    43ee:	8e 8f       	std	Y+30, r24	; 0x1e
    43f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    43f2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    43f4:	9b 8f       	std	Y+27, r25	; 0x1b
    43f6:	8a 8f       	std	Y+26, r24	; 0x1a
    43f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    43fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    43fc:	01 97       	sbiw	r24, 0x01	; 1
    43fe:	f1 f7       	brne	.-4      	; 0x43fc <LCD_CheckStatusSendCmnd4bit+0x606>
    4400:	9b 8f       	std	Y+27, r25	; 0x1b
    4402:	8a 8f       	std	Y+26, r24	; 0x1a
    4404:	0f c0       	rjmp	.+30     	; 0x4424 <LCD_CheckStatusSendCmnd4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4406:	69 a5       	ldd	r22, Y+41	; 0x29
    4408:	7a a5       	ldd	r23, Y+42	; 0x2a
    440a:	8b a5       	ldd	r24, Y+43	; 0x2b
    440c:	9c a5       	ldd	r25, Y+44	; 0x2c
    440e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4412:	dc 01       	movw	r26, r24
    4414:	cb 01       	movw	r24, r22
    4416:	88 a7       	std	Y+40, r24	; 0x28
    4418:	88 a5       	ldd	r24, Y+40	; 0x28
    441a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    441c:	89 8d       	ldd	r24, Y+25	; 0x19
    441e:	8a 95       	dec	r24
    4420:	f1 f7       	brne	.-4      	; 0x441e <LCD_CheckStatusSendCmnd4bit+0x628>
    4422:	89 8f       	std	Y+25, r24	; 0x19
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    4424:	82 e0       	ldi	r24, 0x02	; 2
    4426:	62 e0       	ldi	r22, 0x02	; 2
    4428:	40 e0       	ldi	r20, 0x00	; 0
    442a:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO__CheckStatusSetPinValue>
    442e:	80 e0       	ldi	r24, 0x00	; 0
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	a0 e8       	ldi	r26, 0x80	; 128
    4434:	bf e3       	ldi	r27, 0x3F	; 63
    4436:	8d 8b       	std	Y+21, r24	; 0x15
    4438:	9e 8b       	std	Y+22, r25	; 0x16
    443a:	af 8b       	std	Y+23, r26	; 0x17
    443c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    443e:	6d 89       	ldd	r22, Y+21	; 0x15
    4440:	7e 89       	ldd	r23, Y+22	; 0x16
    4442:	8f 89       	ldd	r24, Y+23	; 0x17
    4444:	98 8d       	ldd	r25, Y+24	; 0x18
    4446:	2b ea       	ldi	r18, 0xAB	; 171
    4448:	3a ea       	ldi	r19, 0xAA	; 170
    444a:	4a e2       	ldi	r20, 0x2A	; 42
    444c:	50 e4       	ldi	r21, 0x40	; 64
    444e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4452:	dc 01       	movw	r26, r24
    4454:	cb 01       	movw	r24, r22
    4456:	89 8b       	std	Y+17, r24	; 0x11
    4458:	9a 8b       	std	Y+18, r25	; 0x12
    445a:	ab 8b       	std	Y+19, r26	; 0x13
    445c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    445e:	69 89       	ldd	r22, Y+17	; 0x11
    4460:	7a 89       	ldd	r23, Y+18	; 0x12
    4462:	8b 89       	ldd	r24, Y+19	; 0x13
    4464:	9c 89       	ldd	r25, Y+20	; 0x14
    4466:	20 e0       	ldi	r18, 0x00	; 0
    4468:	30 e0       	ldi	r19, 0x00	; 0
    446a:	40 e8       	ldi	r20, 0x80	; 128
    446c:	5f e3       	ldi	r21, 0x3F	; 63
    446e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4472:	88 23       	and	r24, r24
    4474:	1c f4       	brge	.+6      	; 0x447c <LCD_CheckStatusSendCmnd4bit+0x686>
		__ticks = 1;
    4476:	81 e0       	ldi	r24, 0x01	; 1
    4478:	88 8b       	std	Y+16, r24	; 0x10
    447a:	91 c0       	rjmp	.+290    	; 0x459e <LCD_CheckStatusSendCmnd4bit+0x7a8>
	else if (__tmp > 255)
    447c:	69 89       	ldd	r22, Y+17	; 0x11
    447e:	7a 89       	ldd	r23, Y+18	; 0x12
    4480:	8b 89       	ldd	r24, Y+19	; 0x13
    4482:	9c 89       	ldd	r25, Y+20	; 0x14
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	4f e7       	ldi	r20, 0x7F	; 127
    448a:	53 e4       	ldi	r21, 0x43	; 67
    448c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4490:	18 16       	cp	r1, r24
    4492:	0c f0       	brlt	.+2      	; 0x4496 <LCD_CheckStatusSendCmnd4bit+0x6a0>
    4494:	7b c0       	rjmp	.+246    	; 0x458c <LCD_CheckStatusSendCmnd4bit+0x796>
	{
		_delay_ms(__us / 1000.0);
    4496:	6d 89       	ldd	r22, Y+21	; 0x15
    4498:	7e 89       	ldd	r23, Y+22	; 0x16
    449a:	8f 89       	ldd	r24, Y+23	; 0x17
    449c:	98 8d       	ldd	r25, Y+24	; 0x18
    449e:	20 e0       	ldi	r18, 0x00	; 0
    44a0:	30 e0       	ldi	r19, 0x00	; 0
    44a2:	4a e7       	ldi	r20, 0x7A	; 122
    44a4:	54 e4       	ldi	r21, 0x44	; 68
    44a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    44aa:	dc 01       	movw	r26, r24
    44ac:	cb 01       	movw	r24, r22
    44ae:	8c 87       	std	Y+12, r24	; 0x0c
    44b0:	9d 87       	std	Y+13, r25	; 0x0d
    44b2:	ae 87       	std	Y+14, r26	; 0x0e
    44b4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44b6:	6c 85       	ldd	r22, Y+12	; 0x0c
    44b8:	7d 85       	ldd	r23, Y+13	; 0x0d
    44ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    44bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    44be:	20 e0       	ldi	r18, 0x00	; 0
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	4a ef       	ldi	r20, 0xFA	; 250
    44c4:	54 e4       	ldi	r21, 0x44	; 68
    44c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44ca:	dc 01       	movw	r26, r24
    44cc:	cb 01       	movw	r24, r22
    44ce:	88 87       	std	Y+8, r24	; 0x08
    44d0:	99 87       	std	Y+9, r25	; 0x09
    44d2:	aa 87       	std	Y+10, r26	; 0x0a
    44d4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    44d6:	68 85       	ldd	r22, Y+8	; 0x08
    44d8:	79 85       	ldd	r23, Y+9	; 0x09
    44da:	8a 85       	ldd	r24, Y+10	; 0x0a
    44dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    44de:	20 e0       	ldi	r18, 0x00	; 0
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	40 e8       	ldi	r20, 0x80	; 128
    44e4:	5f e3       	ldi	r21, 0x3F	; 63
    44e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44ea:	88 23       	and	r24, r24
    44ec:	2c f4       	brge	.+10     	; 0x44f8 <LCD_CheckStatusSendCmnd4bit+0x702>
		__ticks = 1;
    44ee:	81 e0       	ldi	r24, 0x01	; 1
    44f0:	90 e0       	ldi	r25, 0x00	; 0
    44f2:	9f 83       	std	Y+7, r25	; 0x07
    44f4:	8e 83       	std	Y+6, r24	; 0x06
    44f6:	3f c0       	rjmp	.+126    	; 0x4576 <LCD_CheckStatusSendCmnd4bit+0x780>
	else if (__tmp > 65535)
    44f8:	68 85       	ldd	r22, Y+8	; 0x08
    44fa:	79 85       	ldd	r23, Y+9	; 0x09
    44fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    44fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    4500:	20 e0       	ldi	r18, 0x00	; 0
    4502:	3f ef       	ldi	r19, 0xFF	; 255
    4504:	4f e7       	ldi	r20, 0x7F	; 127
    4506:	57 e4       	ldi	r21, 0x47	; 71
    4508:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    450c:	18 16       	cp	r1, r24
    450e:	4c f5       	brge	.+82     	; 0x4562 <LCD_CheckStatusSendCmnd4bit+0x76c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4510:	6c 85       	ldd	r22, Y+12	; 0x0c
    4512:	7d 85       	ldd	r23, Y+13	; 0x0d
    4514:	8e 85       	ldd	r24, Y+14	; 0x0e
    4516:	9f 85       	ldd	r25, Y+15	; 0x0f
    4518:	20 e0       	ldi	r18, 0x00	; 0
    451a:	30 e0       	ldi	r19, 0x00	; 0
    451c:	40 e2       	ldi	r20, 0x20	; 32
    451e:	51 e4       	ldi	r21, 0x41	; 65
    4520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4524:	dc 01       	movw	r26, r24
    4526:	cb 01       	movw	r24, r22
    4528:	bc 01       	movw	r22, r24
    452a:	cd 01       	movw	r24, r26
    452c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4530:	dc 01       	movw	r26, r24
    4532:	cb 01       	movw	r24, r22
    4534:	9f 83       	std	Y+7, r25	; 0x07
    4536:	8e 83       	std	Y+6, r24	; 0x06
    4538:	0f c0       	rjmp	.+30     	; 0x4558 <LCD_CheckStatusSendCmnd4bit+0x762>
    453a:	88 ec       	ldi	r24, 0xC8	; 200
    453c:	90 e0       	ldi	r25, 0x00	; 0
    453e:	9d 83       	std	Y+5, r25	; 0x05
    4540:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4542:	8c 81       	ldd	r24, Y+4	; 0x04
    4544:	9d 81       	ldd	r25, Y+5	; 0x05
    4546:	01 97       	sbiw	r24, 0x01	; 1
    4548:	f1 f7       	brne	.-4      	; 0x4546 <LCD_CheckStatusSendCmnd4bit+0x750>
    454a:	9d 83       	std	Y+5, r25	; 0x05
    454c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    454e:	8e 81       	ldd	r24, Y+6	; 0x06
    4550:	9f 81       	ldd	r25, Y+7	; 0x07
    4552:	01 97       	sbiw	r24, 0x01	; 1
    4554:	9f 83       	std	Y+7, r25	; 0x07
    4556:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4558:	8e 81       	ldd	r24, Y+6	; 0x06
    455a:	9f 81       	ldd	r25, Y+7	; 0x07
    455c:	00 97       	sbiw	r24, 0x00	; 0
    455e:	69 f7       	brne	.-38     	; 0x453a <LCD_CheckStatusSendCmnd4bit+0x744>
    4560:	24 c0       	rjmp	.+72     	; 0x45aa <LCD_CheckStatusSendCmnd4bit+0x7b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4562:	68 85       	ldd	r22, Y+8	; 0x08
    4564:	79 85       	ldd	r23, Y+9	; 0x09
    4566:	8a 85       	ldd	r24, Y+10	; 0x0a
    4568:	9b 85       	ldd	r25, Y+11	; 0x0b
    456a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    456e:	dc 01       	movw	r26, r24
    4570:	cb 01       	movw	r24, r22
    4572:	9f 83       	std	Y+7, r25	; 0x07
    4574:	8e 83       	std	Y+6, r24	; 0x06
    4576:	8e 81       	ldd	r24, Y+6	; 0x06
    4578:	9f 81       	ldd	r25, Y+7	; 0x07
    457a:	9b 83       	std	Y+3, r25	; 0x03
    457c:	8a 83       	std	Y+2, r24	; 0x02
    457e:	8a 81       	ldd	r24, Y+2	; 0x02
    4580:	9b 81       	ldd	r25, Y+3	; 0x03
    4582:	01 97       	sbiw	r24, 0x01	; 1
    4584:	f1 f7       	brne	.-4      	; 0x4582 <LCD_CheckStatusSendCmnd4bit+0x78c>
    4586:	9b 83       	std	Y+3, r25	; 0x03
    4588:	8a 83       	std	Y+2, r24	; 0x02
    458a:	0f c0       	rjmp	.+30     	; 0x45aa <LCD_CheckStatusSendCmnd4bit+0x7b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    458c:	69 89       	ldd	r22, Y+17	; 0x11
    458e:	7a 89       	ldd	r23, Y+18	; 0x12
    4590:	8b 89       	ldd	r24, Y+19	; 0x13
    4592:	9c 89       	ldd	r25, Y+20	; 0x14
    4594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4598:	dc 01       	movw	r26, r24
    459a:	cb 01       	movw	r24, r22
    459c:	88 8b       	std	Y+16, r24	; 0x10
    459e:	88 89       	ldd	r24, Y+16	; 0x10
    45a0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    45a2:	89 81       	ldd	r24, Y+1	; 0x01
    45a4:	8a 95       	dec	r24
    45a6:	f1 f7       	brne	.-4      	; 0x45a4 <LCD_CheckStatusSendCmnd4bit+0x7ae>
    45a8:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    45aa:	fe 01       	movw	r30, r28
    45ac:	ef 59       	subi	r30, 0x9F	; 159
    45ae:	ff 4f       	sbci	r31, 0xFF	; 255
    45b0:	80 81       	ld	r24, Z
}
    45b2:	ce 59       	subi	r28, 0x9E	; 158
    45b4:	df 4f       	sbci	r29, 0xFF	; 255
    45b6:	0f b6       	in	r0, 0x3f	; 63
    45b8:	f8 94       	cli
    45ba:	de bf       	out	0x3e, r29	; 62
    45bc:	0f be       	out	0x3f, r0	; 63
    45be:	cd bf       	out	0x3d, r28	; 61
    45c0:	cf 91       	pop	r28
    45c2:	df 91       	pop	r29
    45c4:	1f 91       	pop	r17
    45c6:	0f 91       	pop	r16
    45c8:	08 95       	ret

000045ca <main>:


/*  Hal */
#include"LCD_interface.h"

int main(Void){
    45ca:	df 93       	push	r29
    45cc:	cf 93       	push	r28
    45ce:	00 d0       	rcall	.+0      	; 0x45d0 <main+0x6>
    45d0:	00 d0       	rcall	.+0      	; 0x45d2 <main+0x8>
    45d2:	00 d0       	rcall	.+0      	; 0x45d4 <main+0xa>
    45d4:	cd b7       	in	r28, 0x3d	; 61
    45d6:	de b7       	in	r29, 0x3e	; 62
_uint16 Local_U16DigitValue,Local_U16AnalogValue,Local_Uint16TempValue;

DIO_VoidInit();
    45d8:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_VoidInit>
LCD_VoidInit4bit();
    45dc:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_VoidInit4bit>
ADC_VoidInit();
    45e0:	0e 94 25 07 	call	0xe4a	; 0xe4a <ADC_VoidInit>
LCD_CheckStatusWriteString("Hello");
    45e4:	80 e6       	ldi	r24, 0x60	; 96
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	0e 94 df 12 	call	0x25be	; 0x25be <LCD_CheckStatusWriteString>
    45ec:	ff cf       	rjmp	.-2      	; 0x45ec <main+0x22>

000045ee <__mulsi3>:
    45ee:	62 9f       	mul	r22, r18
    45f0:	d0 01       	movw	r26, r0
    45f2:	73 9f       	mul	r23, r19
    45f4:	f0 01       	movw	r30, r0
    45f6:	82 9f       	mul	r24, r18
    45f8:	e0 0d       	add	r30, r0
    45fa:	f1 1d       	adc	r31, r1
    45fc:	64 9f       	mul	r22, r20
    45fe:	e0 0d       	add	r30, r0
    4600:	f1 1d       	adc	r31, r1
    4602:	92 9f       	mul	r25, r18
    4604:	f0 0d       	add	r31, r0
    4606:	83 9f       	mul	r24, r19
    4608:	f0 0d       	add	r31, r0
    460a:	74 9f       	mul	r23, r20
    460c:	f0 0d       	add	r31, r0
    460e:	65 9f       	mul	r22, r21
    4610:	f0 0d       	add	r31, r0
    4612:	99 27       	eor	r25, r25
    4614:	72 9f       	mul	r23, r18
    4616:	b0 0d       	add	r27, r0
    4618:	e1 1d       	adc	r30, r1
    461a:	f9 1f       	adc	r31, r25
    461c:	63 9f       	mul	r22, r19
    461e:	b0 0d       	add	r27, r0
    4620:	e1 1d       	adc	r30, r1
    4622:	f9 1f       	adc	r31, r25
    4624:	bd 01       	movw	r22, r26
    4626:	cf 01       	movw	r24, r30
    4628:	11 24       	eor	r1, r1
    462a:	08 95       	ret

0000462c <__udivmodsi4>:
    462c:	a1 e2       	ldi	r26, 0x21	; 33
    462e:	1a 2e       	mov	r1, r26
    4630:	aa 1b       	sub	r26, r26
    4632:	bb 1b       	sub	r27, r27
    4634:	fd 01       	movw	r30, r26
    4636:	0d c0       	rjmp	.+26     	; 0x4652 <__udivmodsi4_ep>

00004638 <__udivmodsi4_loop>:
    4638:	aa 1f       	adc	r26, r26
    463a:	bb 1f       	adc	r27, r27
    463c:	ee 1f       	adc	r30, r30
    463e:	ff 1f       	adc	r31, r31
    4640:	a2 17       	cp	r26, r18
    4642:	b3 07       	cpc	r27, r19
    4644:	e4 07       	cpc	r30, r20
    4646:	f5 07       	cpc	r31, r21
    4648:	20 f0       	brcs	.+8      	; 0x4652 <__udivmodsi4_ep>
    464a:	a2 1b       	sub	r26, r18
    464c:	b3 0b       	sbc	r27, r19
    464e:	e4 0b       	sbc	r30, r20
    4650:	f5 0b       	sbc	r31, r21

00004652 <__udivmodsi4_ep>:
    4652:	66 1f       	adc	r22, r22
    4654:	77 1f       	adc	r23, r23
    4656:	88 1f       	adc	r24, r24
    4658:	99 1f       	adc	r25, r25
    465a:	1a 94       	dec	r1
    465c:	69 f7       	brne	.-38     	; 0x4638 <__udivmodsi4_loop>
    465e:	60 95       	com	r22
    4660:	70 95       	com	r23
    4662:	80 95       	com	r24
    4664:	90 95       	com	r25
    4666:	9b 01       	movw	r18, r22
    4668:	ac 01       	movw	r20, r24
    466a:	bd 01       	movw	r22, r26
    466c:	cf 01       	movw	r24, r30
    466e:	08 95       	ret

00004670 <__prologue_saves__>:
    4670:	2f 92       	push	r2
    4672:	3f 92       	push	r3
    4674:	4f 92       	push	r4
    4676:	5f 92       	push	r5
    4678:	6f 92       	push	r6
    467a:	7f 92       	push	r7
    467c:	8f 92       	push	r8
    467e:	9f 92       	push	r9
    4680:	af 92       	push	r10
    4682:	bf 92       	push	r11
    4684:	cf 92       	push	r12
    4686:	df 92       	push	r13
    4688:	ef 92       	push	r14
    468a:	ff 92       	push	r15
    468c:	0f 93       	push	r16
    468e:	1f 93       	push	r17
    4690:	cf 93       	push	r28
    4692:	df 93       	push	r29
    4694:	cd b7       	in	r28, 0x3d	; 61
    4696:	de b7       	in	r29, 0x3e	; 62
    4698:	ca 1b       	sub	r28, r26
    469a:	db 0b       	sbc	r29, r27
    469c:	0f b6       	in	r0, 0x3f	; 63
    469e:	f8 94       	cli
    46a0:	de bf       	out	0x3e, r29	; 62
    46a2:	0f be       	out	0x3f, r0	; 63
    46a4:	cd bf       	out	0x3d, r28	; 61
    46a6:	09 94       	ijmp

000046a8 <__epilogue_restores__>:
    46a8:	2a 88       	ldd	r2, Y+18	; 0x12
    46aa:	39 88       	ldd	r3, Y+17	; 0x11
    46ac:	48 88       	ldd	r4, Y+16	; 0x10
    46ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    46b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    46b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    46b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    46b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    46b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    46ba:	b9 84       	ldd	r11, Y+9	; 0x09
    46bc:	c8 84       	ldd	r12, Y+8	; 0x08
    46be:	df 80       	ldd	r13, Y+7	; 0x07
    46c0:	ee 80       	ldd	r14, Y+6	; 0x06
    46c2:	fd 80       	ldd	r15, Y+5	; 0x05
    46c4:	0c 81       	ldd	r16, Y+4	; 0x04
    46c6:	1b 81       	ldd	r17, Y+3	; 0x03
    46c8:	aa 81       	ldd	r26, Y+2	; 0x02
    46ca:	b9 81       	ldd	r27, Y+1	; 0x01
    46cc:	ce 0f       	add	r28, r30
    46ce:	d1 1d       	adc	r29, r1
    46d0:	0f b6       	in	r0, 0x3f	; 63
    46d2:	f8 94       	cli
    46d4:	de bf       	out	0x3e, r29	; 62
    46d6:	0f be       	out	0x3f, r0	; 63
    46d8:	cd bf       	out	0x3d, r28	; 61
    46da:	ed 01       	movw	r28, r26
    46dc:	08 95       	ret

000046de <_exit>:
    46de:	f8 94       	cli

000046e0 <__stop_program>:
    46e0:	ff cf       	rjmp	.-2      	; 0x46e0 <__stop_program>
