
EXTI_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018a  00800060  00005274  00005308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008001ea  008001ea  00005492  2**0
                  ALLOC
  3 .stab         000041a0  00000000  00000000  00005494  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000132e  00000000  00000000  00009634  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a962  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000ab02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000acf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d0ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000e485  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f65c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000f81c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000fb12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__vector_1>
       8:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__vector_2>
       c:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	f2 e5       	ldi	r31, 0x52	; 82
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ee       	ldi	r26, 0xEA	; 234
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3f       	cpi	r26, 0xFD	; 253
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <main>
      8a:	0c 94 38 29 	jmp	0x5270	; 0x5270 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 01 29 	jmp	0x5202	; 0x5202 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1d 29 	jmp	0x523a	; 0x523a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0d 29 	jmp	0x521a	; 0x521a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 29 29 	jmp	0x5252	; 0x5252 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0d 29 	jmp	0x521a	; 0x521a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 29 29 	jmp	0x5252	; 0x5252 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 01 29 	jmp	0x5202	; 0x5202 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1d 29 	jmp	0x523a	; 0x523a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 09 29 	jmp	0x5212	; 0x5212 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e8       	ldi	r22, 0x82	; 130
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 25 29 	jmp	0x524a	; 0x524a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0d 29 	jmp	0x521a	; 0x521a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 29 29 	jmp	0x5252	; 0x5252 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0d 29 	jmp	0x521a	; 0x521a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 29 29 	jmp	0x5252	; 0x5252 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0d 29 	jmp	0x521a	; 0x521a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 29 29 	jmp	0x5252	; 0x5252 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 11 29 	jmp	0x5222	; 0x5222 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 2d 29 	jmp	0x525a	; 0x525a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 09 29 	jmp	0x5212	; 0x5212 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 25 29 	jmp	0x524a	; 0x524a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e6 57       	subi	r30, 0x76	; 118
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DIO_VoidInit>:

/* HAL */

/* Defination Of Function  */
Void DIO_VoidInit(Void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62

        /* intial direction */

        DDRA__UINT8_REG = CONC(DIO__UINT8_PA7_INITIAL_DIRECTION, DIO__UINT8_PA6_INITIAL_DIRECTION, DIO__UINT8_PA5_INITIAL_DIRECTION, DIO__UINT8_PA4_INITIAL_DIRECTION, DIO__UINT8_PA3_INITIAL_DIRECTION, DIO__UINT8_PA2_INITIAL_DIRECTION, DIO__UINT8_PA1_INITIAL_DIRECTION, DIO__UINT8_PA0_INITIAL_DIRECTION);
     e36:	ea e3       	ldi	r30, 0x3A	; 58
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	8f e7       	ldi	r24, 0x7F	; 127
     e3c:	80 83       	st	Z, r24
        DDRB__UINT8_REG = CONC(DIO__UINT8_PB7_INITIAL_DIRECTION, DIO__UINT8_PB6_INITIAL_DIRECTION, DIO__UINT8_PB5_INITIAL_DIRECTION, DIO__UINT8_PB4_INITIAL_DIRECTION, DIO__UINT8_PB3_INITIAL_DIRECTION, DIO__UINT8_PB2_INITIAL_DIRECTION, DIO__UINT8_PB1_INITIAL_DIRECTION, DIO__UINT8_PB0_INITIAL_DIRECTION);
     e3e:	e7 e3       	ldi	r30, 0x37	; 55
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	8f ef       	ldi	r24, 0xFF	; 255
     e44:	80 83       	st	Z, r24
        DDRC__UINT8_REG = CONC(DIO__UINT8_PC7_INITIAL_DIRECTION, DIO__UINT8_PC6_INITIAL_DIRECTION, DIO__UINT8_PC5_INITIAL_DIRECTION, DIO__UINT8_PC4_INITIAL_DIRECTION, DIO__UINT8_PC3_INITIAL_DIRECTION, DIO__UINT8_PC2_INITIAL_DIRECTION, DIO__UINT8_PC1_INITIAL_DIRECTION, DIO__UINT8_PC0_INITIAL_DIRECTION);
     e46:	e4 e3       	ldi	r30, 0x34	; 52
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 ef       	ldi	r24, 0xF0	; 240
     e4c:	80 83       	st	Z, r24
        DDRD__UINT8_REG = CONC(DIO__UINT8_PD7_INITIAL_DIRECTION, DIO__UINT8_PD6_INITIAL_DIRECTION, DIO__UINT8_PD5_INITIAL_DIRECTION, DIO__UINT8_PD4_INITIAL_DIRECTION, DIO__UINT8_PD3_INITIAL_DIRECTION, DIO__UINT8_PD2_INITIAL_DIRECTION, DIO__UINT8_PD1_INITIAL_DIRECTION, DIO__UINT8_PD0_INITIAL_DIRECTION);
     e4e:	e1 e3       	ldi	r30, 0x31	; 49
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	89 ef       	ldi	r24, 0xF9	; 249
     e54:	80 83       	st	Z, r24

        /* initial Value */

        PORTA__UINT8_REG = CONC(DIO__UINT8_PA7_INITIAL_VALUE, DIO__UINT8_PA6_INITIAL_VALUE, DIO__UINT8_PA5_INITIAL_VALUE, DIO__UINT8_PA4_INITIAL_VALUE, DIO__UINT8_PA3_INITIAL_VALUE, DIO__UINT8_PA2_INITIAL_VALUE, DIO__UINT8_PA1_INITIAL_VALUE, DIO__UINT8_PA0_INITIAL_VALUE);
     e56:	eb e3       	ldi	r30, 0x3B	; 59
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	10 82       	st	Z, r1
        PORTB__UINT8_REG = CONC(DIO__UINT8_PB7_INITIAL_VALUE, DIO__UINT8_PB6_INITIAL_VALUE, DIO__UINT8_PB5_INITIAL_VALUE, DIO__UINT8_PB4_INITIAL_VALUE, DIO__UINT8_PB3_INITIAL_VALUE, DIO__UINT8_PB2_INITIAL_VALUE, DIO__UINT8_PB1_INITIAL_VALUE, DIO__UINT8_PB0_INITIAL_VALUE);
     e5c:	e8 e3       	ldi	r30, 0x38	; 56
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	88 ef       	ldi	r24, 0xF8	; 248
     e62:	80 83       	st	Z, r24
        PORTC__UINT8_REG = CONC(DIO__UINT8_PC7_INITIAL_VALUE, DIO__UINT8_PC6_INITIAL_VALUE, DIO__UINT8_PC5_INITIAL_VALUE, DIO__UINT8_PC4_INITIAL_VALUE, DIO__UINT8_PC3_INITIAL_VALUE, DIO__UINT8_PC2_INITIAL_VALUE, DIO__UINT8_PC1_INITIAL_VALUE, DIO__UINT8_PC0_INITIAL_VALUE);
     e64:	e5 e3       	ldi	r30, 0x35	; 53
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	8f ef       	ldi	r24, 0xFF	; 255
     e6a:	80 83       	st	Z, r24
        PORTD__UINT8_REG = CONC(DIO__UINT8_PD7_INITIAL_VALUE, DIO__UINT8_PD6_INITIAL_VALUE, DIO__UINT8_PD5_INITIAL_VALUE, DIO__UINT8_PD4_INITIAL_VALUE, DIO__UINT8_PD3_INITIAL_VALUE, DIO__UINT8_PD2_INITIAL_VALUE, DIO__UINT8_PD1_INITIAL_VALUE, DIO__UINT8_PD0_INITIAL_VALUE);
     e6c:	e2 e3       	ldi	r30, 0x32	; 50
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	86 e0       	ldi	r24, 0x06	; 6
     e72:	80 83       	st	Z, r24

}
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <DIO__CheckStatusSetPinDirection>:

CheckStatus DIO__CheckStatusSetPinDirection(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 Copy__uint8PinDirection)
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	2f 97       	sbiw	r28, 0x0f	; 15
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	8a 83       	std	Y+2, r24	; 0x02
     e90:	6b 83       	std	Y+3, r22	; 0x03
     e92:	4c 83       	std	Y+4, r20	; 0x04
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
     e94:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pin  Direction
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && ((Copy__uint8PinDirection == DIO__UINT8_OUTPUT) || (Copy__uint8PinDirection == DIO__UINT8_INPUT)))
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	84 30       	cpi	r24, 0x04	; 4
     e9a:	08 f0       	brcs	.+2      	; 0xe9e <DIO__CheckStatusSetPinDirection+0x24>
     e9c:	0e c1       	rjmp	.+540    	; 0x10ba <DIO__CheckStatusSetPinDirection+0x240>
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	88 30       	cpi	r24, 0x08	; 8
     ea2:	08 f0       	brcs	.+2      	; 0xea6 <DIO__CheckStatusSetPinDirection+0x2c>
     ea4:	0a c1       	rjmp	.+532    	; 0x10ba <DIO__CheckStatusSetPinDirection+0x240>
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	21 f0       	breq	.+8      	; 0xeb4 <DIO__CheckStatusSetPinDirection+0x3a>
     eac:	8c 81       	ldd	r24, Y+4	; 0x04
     eae:	88 23       	and	r24, r24
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <DIO__CheckStatusSetPinDirection+0x3a>
     eb2:	03 c1       	rjmp	.+518    	; 0x10ba <DIO__CheckStatusSetPinDirection+0x240>
        {
                switch (Copy__uint8PortId)
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	3f 87       	std	Y+15, r19	; 0x0f
     ebc:	2e 87       	std	Y+14, r18	; 0x0e
     ebe:	8e 85       	ldd	r24, Y+14	; 0x0e
     ec0:	9f 85       	ldd	r25, Y+15	; 0x0f
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	91 05       	cpc	r25, r1
     ec6:	09 f4       	brne	.+2      	; 0xeca <DIO__CheckStatusSetPinDirection+0x50>
     ec8:	4f c0       	rjmp	.+158    	; 0xf68 <DIO__CheckStatusSetPinDirection+0xee>
     eca:	2e 85       	ldd	r18, Y+14	; 0x0e
     ecc:	3f 85       	ldd	r19, Y+15	; 0x0f
     ece:	22 30       	cpi	r18, 0x02	; 2
     ed0:	31 05       	cpc	r19, r1
     ed2:	2c f4       	brge	.+10     	; 0xede <DIO__CheckStatusSetPinDirection+0x64>
     ed4:	8e 85       	ldd	r24, Y+14	; 0x0e
     ed6:	9f 85       	ldd	r25, Y+15	; 0x0f
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	71 f0       	breq	.+28     	; 0xef8 <DIO__CheckStatusSetPinDirection+0x7e>
     edc:	eb c0       	rjmp	.+470    	; 0x10b4 <DIO__CheckStatusSetPinDirection+0x23a>
     ede:	2e 85       	ldd	r18, Y+14	; 0x0e
     ee0:	3f 85       	ldd	r19, Y+15	; 0x0f
     ee2:	22 30       	cpi	r18, 0x02	; 2
     ee4:	31 05       	cpc	r19, r1
     ee6:	09 f4       	brne	.+2      	; 0xeea <DIO__CheckStatusSetPinDirection+0x70>
     ee8:	77 c0       	rjmp	.+238    	; 0xfd8 <DIO__CheckStatusSetPinDirection+0x15e>
     eea:	8e 85       	ldd	r24, Y+14	; 0x0e
     eec:	9f 85       	ldd	r25, Y+15	; 0x0f
     eee:	83 30       	cpi	r24, 0x03	; 3
     ef0:	91 05       	cpc	r25, r1
     ef2:	09 f4       	brne	.+2      	; 0xef6 <DIO__CheckStatusSetPinDirection+0x7c>
     ef4:	a9 c0       	rjmp	.+338    	; 0x1048 <DIO__CheckStatusSetPinDirection+0x1ce>
     ef6:	de c0       	rjmp	.+444    	; 0x10b4 <DIO__CheckStatusSetPinDirection+0x23a>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PinDirection)
     ef8:	8c 81       	ldd	r24, Y+4	; 0x04
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	3d 87       	std	Y+13, r19	; 0x0d
     f00:	2c 87       	std	Y+12, r18	; 0x0c
     f02:	8c 85       	ldd	r24, Y+12	; 0x0c
     f04:	9d 85       	ldd	r25, Y+13	; 0x0d
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	d1 f0       	breq	.+52     	; 0xf3e <DIO__CheckStatusSetPinDirection+0xc4>
     f0a:	2c 85       	ldd	r18, Y+12	; 0x0c
     f0c:	3d 85       	ldd	r19, Y+13	; 0x0d
     f0e:	21 30       	cpi	r18, 0x01	; 1
     f10:	31 05       	cpc	r19, r1
     f12:	09 f0       	breq	.+2      	; 0xf16 <DIO__CheckStatusSetPinDirection+0x9c>
     f14:	cf c0       	rjmp	.+414    	; 0x10b4 <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRA__UINT8_REG, Copy__uint8PinId);
     f16:	aa e3       	ldi	r26, 0x3A	; 58
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ea e3       	ldi	r30, 0x3A	; 58
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO__CheckStatusSetPinDirection+0xba>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO__CheckStatusSetPinDirection+0xb6>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	bb c0       	rjmp	.+374    	; 0x10b4 <DIO__CheckStatusSetPinDirection+0x23a>
                                break;

                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRA__UINT8_REG, Copy__uint8PinId);
     f3e:	aa e3       	ldi	r26, 0x3A	; 58
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	ea e3       	ldi	r30, 0x3A	; 58
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO__CheckStatusSetPinDirection+0xe2>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO__CheckStatusSetPinDirection+0xde>
     f60:	80 95       	com	r24
     f62:	84 23       	and	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	a6 c0       	rjmp	.+332    	; 0x10b4 <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PinDirection)
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	3b 87       	std	Y+11, r19	; 0x0b
     f70:	2a 87       	std	Y+10, r18	; 0x0a
     f72:	8a 85       	ldd	r24, Y+10	; 0x0a
     f74:	9b 85       	ldd	r25, Y+11	; 0x0b
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	d1 f0       	breq	.+52     	; 0xfae <DIO__CheckStatusSetPinDirection+0x134>
     f7a:	2a 85       	ldd	r18, Y+10	; 0x0a
     f7c:	3b 85       	ldd	r19, Y+11	; 0x0b
     f7e:	21 30       	cpi	r18, 0x01	; 1
     f80:	31 05       	cpc	r19, r1
     f82:	09 f0       	breq	.+2      	; 0xf86 <DIO__CheckStatusSetPinDirection+0x10c>
     f84:	97 c0       	rjmp	.+302    	; 0x10b4 <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                           case DIO__UINT8_OUTPUT:
                                   SET_BIT(DDRB__UINT8_REG, Copy__uint8PinId);
     f86:	a7 e3       	ldi	r26, 0x37	; 55
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e7 e3       	ldi	r30, 0x37	; 55
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO__CheckStatusSetPinDirection+0x12a>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO__CheckStatusSetPinDirection+0x126>
     fa8:	84 2b       	or	r24, r20
     faa:	8c 93       	st	X, r24
     fac:	83 c0       	rjmp	.+262    	; 0x10b4 <DIO__CheckStatusSetPinDirection+0x23a>
                                   break;
                           case DIO__UINT8_INPUT:
                                   CLEAR_BIT(DDRB__UINT8_REG, Copy__uint8PinId);
     fae:	a7 e3       	ldi	r26, 0x37	; 55
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e7 e3       	ldi	r30, 0x37	; 55
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO__CheckStatusSetPinDirection+0x152>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO__CheckStatusSetPinDirection+0x14e>
     fd0:	80 95       	com	r24
     fd2:	84 23       	and	r24, r20
     fd4:	8c 93       	st	X, r24
     fd6:	6e c0       	rjmp	.+220    	; 0x10b4 <DIO__CheckStatusSetPinDirection+0x23a>

                                   break;
                        }
                        break;
                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PinDirection)
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	39 87       	std	Y+9, r19	; 0x09
     fe0:	28 87       	std	Y+8, r18	; 0x08
     fe2:	88 85       	ldd	r24, Y+8	; 0x08
     fe4:	99 85       	ldd	r25, Y+9	; 0x09
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	d1 f0       	breq	.+52     	; 0x101e <DIO__CheckStatusSetPinDirection+0x1a4>
     fea:	28 85       	ldd	r18, Y+8	; 0x08
     fec:	39 85       	ldd	r19, Y+9	; 0x09
     fee:	21 30       	cpi	r18, 0x01	; 1
     ff0:	31 05       	cpc	r19, r1
     ff2:	09 f0       	breq	.+2      	; 0xff6 <DIO__CheckStatusSetPinDirection+0x17c>
     ff4:	5f c0       	rjmp	.+190    	; 0x10b4 <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRC__UINT8_REG, Copy__uint8PinId);
     ff6:	a4 e3       	ldi	r26, 0x34	; 52
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e4 e3       	ldi	r30, 0x34	; 52
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO__CheckStatusSetPinDirection+0x19a>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO__CheckStatusSetPinDirection+0x196>
    1018:	84 2b       	or	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	4b c0       	rjmp	.+150    	; 0x10b4 <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRC__UINT8_REG, Copy__uint8PinId);
    101e:	a4 e3       	ldi	r26, 0x34	; 52
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e4 e3       	ldi	r30, 0x34	; 52
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO__CheckStatusSetPinDirection+0x1c2>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO__CheckStatusSetPinDirection+0x1be>
    1040:	80 95       	com	r24
    1042:	84 23       	and	r24, r20
    1044:	8c 93       	st	X, r24
    1046:	36 c0       	rjmp	.+108    	; 0x10b4 <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PinDirection)
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	3f 83       	std	Y+7, r19	; 0x07
    1050:	2e 83       	std	Y+6, r18	; 0x06
    1052:	8e 81       	ldd	r24, Y+6	; 0x06
    1054:	9f 81       	ldd	r25, Y+7	; 0x07
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	c9 f0       	breq	.+50     	; 0x108c <DIO__CheckStatusSetPinDirection+0x212>
    105a:	2e 81       	ldd	r18, Y+6	; 0x06
    105c:	3f 81       	ldd	r19, Y+7	; 0x07
    105e:	21 30       	cpi	r18, 0x01	; 1
    1060:	31 05       	cpc	r19, r1
    1062:	41 f5       	brne	.+80     	; 0x10b4 <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRD__UINT8_REG, Copy__uint8PinId);
    1064:	a1 e3       	ldi	r26, 0x31	; 49
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e1 e3       	ldi	r30, 0x31	; 49
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <DIO__CheckStatusSetPinDirection+0x208>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <DIO__CheckStatusSetPinDirection+0x204>
    1086:	84 2b       	or	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	14 c0       	rjmp	.+40     	; 0x10b4 <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRD__UINT8_REG, Copy__uint8PinId);
    108c:	a1 e3       	ldi	r26, 0x31	; 49
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e1 e3       	ldi	r30, 0x31	; 49
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <DIO__CheckStatusSetPinDirection+0x230>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <DIO__CheckStatusSetPinDirection+0x22c>
    10ae:	80 95       	com	r24
    10b0:	84 23       	and	r24, r20
    10b2:	8c 93       	st	X, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    10b4:	39 81       	ldd	r19, Y+1	; 0x01
    10b6:	3d 83       	std	Y+5, r19	; 0x05
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <DIO__CheckStatusSetPinDirection+0x248>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	8d 83       	std	Y+5, r24	; 0x05
    10c2:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    10c4:	2f 96       	adiw	r28, 0x0f	; 15
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <DIO__CheckStatusSetPinValue>:

CheckStatus DIO__CheckStatusSetPinValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 Copy__uint8PinValue)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	2f 97       	sbiw	r28, 0x0f	; 15
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	8a 83       	std	Y+2, r24	; 0x02
    10ec:	6b 83       	std	Y+3, r22	; 0x03
    10ee:	4c 83       	std	Y+4, r20	; 0x04
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    10f0:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pin  Value 
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && ((Copy__uint8PinValue == DIO__UINT8_HIGH) || (Copy__uint8PinValue == DIO__UINT8_LOW)))
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	84 30       	cpi	r24, 0x04	; 4
    10f6:	08 f0       	brcs	.+2      	; 0x10fa <DIO__CheckStatusSetPinValue+0x24>
    10f8:	0e c1       	rjmp	.+540    	; 0x1316 <DIO__CheckStatusSetPinValue+0x240>
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	88 30       	cpi	r24, 0x08	; 8
    10fe:	08 f0       	brcs	.+2      	; 0x1102 <DIO__CheckStatusSetPinValue+0x2c>
    1100:	0a c1       	rjmp	.+532    	; 0x1316 <DIO__CheckStatusSetPinValue+0x240>
    1102:	8c 81       	ldd	r24, Y+4	; 0x04
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	21 f0       	breq	.+8      	; 0x1110 <DIO__CheckStatusSetPinValue+0x3a>
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	88 23       	and	r24, r24
    110c:	09 f0       	breq	.+2      	; 0x1110 <DIO__CheckStatusSetPinValue+0x3a>
    110e:	03 c1       	rjmp	.+518    	; 0x1316 <DIO__CheckStatusSetPinValue+0x240>
        {
                switch (Copy__uint8PortId)
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	3f 87       	std	Y+15, r19	; 0x0f
    1118:	2e 87       	std	Y+14, r18	; 0x0e
    111a:	8e 85       	ldd	r24, Y+14	; 0x0e
    111c:	9f 85       	ldd	r25, Y+15	; 0x0f
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	91 05       	cpc	r25, r1
    1122:	09 f4       	brne	.+2      	; 0x1126 <DIO__CheckStatusSetPinValue+0x50>
    1124:	4f c0       	rjmp	.+158    	; 0x11c4 <DIO__CheckStatusSetPinValue+0xee>
    1126:	2e 85       	ldd	r18, Y+14	; 0x0e
    1128:	3f 85       	ldd	r19, Y+15	; 0x0f
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	31 05       	cpc	r19, r1
    112e:	2c f4       	brge	.+10     	; 0x113a <DIO__CheckStatusSetPinValue+0x64>
    1130:	8e 85       	ldd	r24, Y+14	; 0x0e
    1132:	9f 85       	ldd	r25, Y+15	; 0x0f
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	71 f0       	breq	.+28     	; 0x1154 <DIO__CheckStatusSetPinValue+0x7e>
    1138:	eb c0       	rjmp	.+470    	; 0x1310 <DIO__CheckStatusSetPinValue+0x23a>
    113a:	2e 85       	ldd	r18, Y+14	; 0x0e
    113c:	3f 85       	ldd	r19, Y+15	; 0x0f
    113e:	22 30       	cpi	r18, 0x02	; 2
    1140:	31 05       	cpc	r19, r1
    1142:	09 f4       	brne	.+2      	; 0x1146 <DIO__CheckStatusSetPinValue+0x70>
    1144:	77 c0       	rjmp	.+238    	; 0x1234 <DIO__CheckStatusSetPinValue+0x15e>
    1146:	8e 85       	ldd	r24, Y+14	; 0x0e
    1148:	9f 85       	ldd	r25, Y+15	; 0x0f
    114a:	83 30       	cpi	r24, 0x03	; 3
    114c:	91 05       	cpc	r25, r1
    114e:	09 f4       	brne	.+2      	; 0x1152 <DIO__CheckStatusSetPinValue+0x7c>
    1150:	a9 c0       	rjmp	.+338    	; 0x12a4 <DIO__CheckStatusSetPinValue+0x1ce>
    1152:	de c0       	rjmp	.+444    	; 0x1310 <DIO__CheckStatusSetPinValue+0x23a>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PinValue)
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	3d 87       	std	Y+13, r19	; 0x0d
    115c:	2c 87       	std	Y+12, r18	; 0x0c
    115e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1160:	9d 85       	ldd	r25, Y+13	; 0x0d
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	d1 f0       	breq	.+52     	; 0x119a <DIO__CheckStatusSetPinValue+0xc4>
    1166:	2c 85       	ldd	r18, Y+12	; 0x0c
    1168:	3d 85       	ldd	r19, Y+13	; 0x0d
    116a:	21 30       	cpi	r18, 0x01	; 1
    116c:	31 05       	cpc	r19, r1
    116e:	09 f0       	breq	.+2      	; 0x1172 <DIO__CheckStatusSetPinValue+0x9c>
    1170:	cf c0       	rjmp	.+414    	; 0x1310 <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTA__UINT8_REG, Copy__uint8PinId);
    1172:	ab e3       	ldi	r26, 0x3B	; 59
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	eb e3       	ldi	r30, 0x3B	; 59
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO__CheckStatusSetPinValue+0xba>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO__CheckStatusSetPinValue+0xb6>
    1194:	84 2b       	or	r24, r20
    1196:	8c 93       	st	X, r24
    1198:	bb c0       	rjmp	.+374    	; 0x1310 <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTA__UINT8_REG, Copy__uint8PinId);
    119a:	ab e3       	ldi	r26, 0x3B	; 59
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	eb e3       	ldi	r30, 0x3B	; 59
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO__CheckStatusSetPinValue+0xe2>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO__CheckStatusSetPinValue+0xde>
    11bc:	80 95       	com	r24
    11be:	84 23       	and	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	a6 c0       	rjmp	.+332    	; 0x1310 <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PinValue)
    11c4:	8c 81       	ldd	r24, Y+4	; 0x04
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	3b 87       	std	Y+11, r19	; 0x0b
    11cc:	2a 87       	std	Y+10, r18	; 0x0a
    11ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    11d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	d1 f0       	breq	.+52     	; 0x120a <DIO__CheckStatusSetPinValue+0x134>
    11d6:	2a 85       	ldd	r18, Y+10	; 0x0a
    11d8:	3b 85       	ldd	r19, Y+11	; 0x0b
    11da:	21 30       	cpi	r18, 0x01	; 1
    11dc:	31 05       	cpc	r19, r1
    11de:	09 f0       	breq	.+2      	; 0x11e2 <DIO__CheckStatusSetPinValue+0x10c>
    11e0:	97 c0       	rjmp	.+302    	; 0x1310 <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTB__UINT8_REG, Copy__uint8PinId);
    11e2:	a8 e3       	ldi	r26, 0x38	; 56
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e8 e3       	ldi	r30, 0x38	; 56
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO__CheckStatusSetPinValue+0x12a>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <DIO__CheckStatusSetPinValue+0x126>
    1204:	84 2b       	or	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	83 c0       	rjmp	.+262    	; 0x1310 <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTB__UINT8_REG, Copy__uint8PinId);
    120a:	a8 e3       	ldi	r26, 0x38	; 56
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e8 e3       	ldi	r30, 0x38	; 56
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO__CheckStatusSetPinValue+0x152>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO__CheckStatusSetPinValue+0x14e>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	6e c0       	rjmp	.+220    	; 0x1310 <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PinValue)
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	39 87       	std	Y+9, r19	; 0x09
    123c:	28 87       	std	Y+8, r18	; 0x08
    123e:	88 85       	ldd	r24, Y+8	; 0x08
    1240:	99 85       	ldd	r25, Y+9	; 0x09
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	d1 f0       	breq	.+52     	; 0x127a <DIO__CheckStatusSetPinValue+0x1a4>
    1246:	28 85       	ldd	r18, Y+8	; 0x08
    1248:	39 85       	ldd	r19, Y+9	; 0x09
    124a:	21 30       	cpi	r18, 0x01	; 1
    124c:	31 05       	cpc	r19, r1
    124e:	09 f0       	breq	.+2      	; 0x1252 <DIO__CheckStatusSetPinValue+0x17c>
    1250:	5f c0       	rjmp	.+190    	; 0x1310 <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTC__UINT8_REG, Copy__uint8PinId);
    1252:	a5 e3       	ldi	r26, 0x35	; 53
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e5 e3       	ldi	r30, 0x35	; 53
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 2e       	mov	r0, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <DIO__CheckStatusSetPinValue+0x19a>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <DIO__CheckStatusSetPinValue+0x196>
    1274:	84 2b       	or	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	4b c0       	rjmp	.+150    	; 0x1310 <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTC__UINT8_REG, Copy__uint8PinId);
    127a:	a5 e3       	ldi	r26, 0x35	; 53
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e5 e3       	ldi	r30, 0x35	; 53
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO__CheckStatusSetPinValue+0x1c2>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO__CheckStatusSetPinValue+0x1be>
    129c:	80 95       	com	r24
    129e:	84 23       	and	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	36 c0       	rjmp	.+108    	; 0x1310 <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PinValue)
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	3f 83       	std	Y+7, r19	; 0x07
    12ac:	2e 83       	std	Y+6, r18	; 0x06
    12ae:	8e 81       	ldd	r24, Y+6	; 0x06
    12b0:	9f 81       	ldd	r25, Y+7	; 0x07
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	c9 f0       	breq	.+50     	; 0x12e8 <DIO__CheckStatusSetPinValue+0x212>
    12b6:	2e 81       	ldd	r18, Y+6	; 0x06
    12b8:	3f 81       	ldd	r19, Y+7	; 0x07
    12ba:	21 30       	cpi	r18, 0x01	; 1
    12bc:	31 05       	cpc	r19, r1
    12be:	41 f5       	brne	.+80     	; 0x1310 <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTD__UINT8_REG, Copy__uint8PinId);
    12c0:	a2 e3       	ldi	r26, 0x32	; 50
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e2 e3       	ldi	r30, 0x32	; 50
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	48 2f       	mov	r20, r24
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	02 2e       	mov	r0, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <DIO__CheckStatusSetPinValue+0x208>
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	0a 94       	dec	r0
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <DIO__CheckStatusSetPinValue+0x204>
    12e2:	84 2b       	or	r24, r20
    12e4:	8c 93       	st	X, r24
    12e6:	14 c0       	rjmp	.+40     	; 0x1310 <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTD__UINT8_REG, Copy__uint8PinId);
    12e8:	a2 e3       	ldi	r26, 0x32	; 50
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e2 e3       	ldi	r30, 0x32	; 50
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO__CheckStatusSetPinValue+0x230>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO__CheckStatusSetPinValue+0x22c>
    130a:	80 95       	com	r24
    130c:	84 23       	and	r24, r20
    130e:	8c 93       	st	X, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1310:	39 81       	ldd	r19, Y+1	; 0x01
    1312:	3d 83       	std	Y+5, r19	; 0x05
    1314:	04 c0       	rjmp	.+8      	; 0x131e <DIO__CheckStatusSetPinValue+0x248>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	8d 83       	std	Y+5, r24	; 0x05
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    1320:	2f 96       	adiw	r28, 0x0f	; 15
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <DIO__CheckStatusGetPinValue>:

CheckStatus DIO__CheckStatusGetPinValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 *Copy_p_uint8ReturnPinValue)
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	28 97       	sbiw	r28, 0x08	; 8
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
    1346:	8a 83       	std	Y+2, r24	; 0x02
    1348:	6b 83       	std	Y+3, r22	; 0x03
    134a:	5d 83       	std	Y+5, r21	; 0x05
    134c:	4c 83       	std	Y+4, r20	; 0x04

        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    134e:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pointer != NULL
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && (Copy_p_uint8ReturnPinValue != NULL))
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	84 30       	cpi	r24, 0x04	; 4
    1354:	08 f0       	brcs	.+2      	; 0x1358 <DIO__CheckStatusGetPinValue+0x26>
    1356:	ec c0       	rjmp	.+472    	; 0x1530 <DIO__CheckStatusGetPinValue+0x1fe>
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	88 30       	cpi	r24, 0x08	; 8
    135c:	08 f0       	brcs	.+2      	; 0x1360 <DIO__CheckStatusGetPinValue+0x2e>
    135e:	e8 c0       	rjmp	.+464    	; 0x1530 <DIO__CheckStatusGetPinValue+0x1fe>
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	9d 81       	ldd	r25, Y+5	; 0x05
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	09 f4       	brne	.+2      	; 0x136a <DIO__CheckStatusGetPinValue+0x38>
    1368:	e3 c0       	rjmp	.+454    	; 0x1530 <DIO__CheckStatusGetPinValue+0x1fe>
        {
                switch (Copy__uint8PortId)
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	38 87       	std	Y+8, r19	; 0x08
    1372:	2f 83       	std	Y+7, r18	; 0x07
    1374:	4f 81       	ldd	r20, Y+7	; 0x07
    1376:	58 85       	ldd	r21, Y+8	; 0x08
    1378:	41 30       	cpi	r20, 0x01	; 1
    137a:	51 05       	cpc	r21, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <DIO__CheckStatusGetPinValue+0x4e>
    137e:	48 c0       	rjmp	.+144    	; 0x1410 <DIO__CheckStatusGetPinValue+0xde>
    1380:	8f 81       	ldd	r24, Y+7	; 0x07
    1382:	98 85       	ldd	r25, Y+8	; 0x08
    1384:	82 30       	cpi	r24, 0x02	; 2
    1386:	91 05       	cpc	r25, r1
    1388:	34 f4       	brge	.+12     	; 0x1396 <DIO__CheckStatusGetPinValue+0x64>
    138a:	2f 81       	ldd	r18, Y+7	; 0x07
    138c:	38 85       	ldd	r19, Y+8	; 0x08
    138e:	21 15       	cp	r18, r1
    1390:	31 05       	cpc	r19, r1
    1392:	71 f0       	breq	.+28     	; 0x13b0 <DIO__CheckStatusGetPinValue+0x7e>
    1394:	ca c0       	rjmp	.+404    	; 0x152a <DIO__CheckStatusGetPinValue+0x1f8>
    1396:	4f 81       	ldd	r20, Y+7	; 0x07
    1398:	58 85       	ldd	r21, Y+8	; 0x08
    139a:	42 30       	cpi	r20, 0x02	; 2
    139c:	51 05       	cpc	r21, r1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <DIO__CheckStatusGetPinValue+0x70>
    13a0:	67 c0       	rjmp	.+206    	; 0x1470 <DIO__CheckStatusGetPinValue+0x13e>
    13a2:	8f 81       	ldd	r24, Y+7	; 0x07
    13a4:	98 85       	ldd	r25, Y+8	; 0x08
    13a6:	83 30       	cpi	r24, 0x03	; 3
    13a8:	91 05       	cpc	r25, r1
    13aa:	09 f4       	brne	.+2      	; 0x13ae <DIO__CheckStatusGetPinValue+0x7c>
    13ac:	90 c0       	rjmp	.+288    	; 0x14ce <DIO__CheckStatusGetPinValue+0x19c>
    13ae:	bd c0       	rjmp	.+378    	; 0x152a <DIO__CheckStatusGetPinValue+0x1f8>
                {
                case DIO__UINT8_PORTA:
                        if (GET_BIT(PINA__UINT8_REG, Copy__uint8PinId) == 0)
    13b0:	e9 e3       	ldi	r30, 0x39	; 57
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	88 2f       	mov	r24, r24
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	a9 01       	movw	r20, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO__CheckStatusGetPinValue+0x96>
    13c4:	55 95       	asr	r21
    13c6:	47 95       	ror	r20
    13c8:	8a 95       	dec	r24
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO__CheckStatusGetPinValue+0x92>
    13cc:	ca 01       	movw	r24, r20
    13ce:	81 70       	andi	r24, 0x01	; 1
    13d0:	90 70       	andi	r25, 0x00	; 0
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	21 f4       	brne	.+8      	; 0x13de <DIO__CheckStatusGetPinValue+0xac>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    13d6:	ec 81       	ldd	r30, Y+4	; 0x04
    13d8:	fd 81       	ldd	r31, Y+5	; 0x05
    13da:	10 82       	st	Z, r1
    13dc:	a6 c0       	rjmp	.+332    	; 0x152a <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINA__UINT8_REG, Copy__uint8PinId) != 0)
    13de:	e9 e3       	ldi	r30, 0x39	; 57
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	88 2f       	mov	r24, r24
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	a9 01       	movw	r20, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <DIO__CheckStatusGetPinValue+0xc4>
    13f2:	55 95       	asr	r21
    13f4:	47 95       	ror	r20
    13f6:	8a 95       	dec	r24
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <DIO__CheckStatusGetPinValue+0xc0>
    13fa:	ca 01       	movw	r24, r20
    13fc:	81 70       	andi	r24, 0x01	; 1
    13fe:	90 70       	andi	r25, 0x00	; 0
    1400:	88 23       	and	r24, r24
    1402:	09 f4       	brne	.+2      	; 0x1406 <DIO__CheckStatusGetPinValue+0xd4>
    1404:	92 c0       	rjmp	.+292    	; 0x152a <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    1406:	ec 81       	ldd	r30, Y+4	; 0x04
    1408:	fd 81       	ldd	r31, Y+5	; 0x05
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	80 83       	st	Z, r24
    140e:	8d c0       	rjmp	.+282    	; 0x152a <DIO__CheckStatusGetPinValue+0x1f8>
                                /* DO NOTHING */
                        }

                        break;
                case DIO__UINT8_PORTB:
                        if (GET_BIT(PINB__UINT8_REG, Copy__uint8PinId) == 0)
    1410:	e6 e3       	ldi	r30, 0x36	; 54
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	a9 01       	movw	r20, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO__CheckStatusGetPinValue+0xf6>
    1424:	55 95       	asr	r21
    1426:	47 95       	ror	r20
    1428:	8a 95       	dec	r24
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <DIO__CheckStatusGetPinValue+0xf2>
    142c:	ca 01       	movw	r24, r20
    142e:	81 70       	andi	r24, 0x01	; 1
    1430:	90 70       	andi	r25, 0x00	; 0
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	21 f4       	brne	.+8      	; 0x143e <DIO__CheckStatusGetPinValue+0x10c>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    1436:	ec 81       	ldd	r30, Y+4	; 0x04
    1438:	fd 81       	ldd	r31, Y+5	; 0x05
    143a:	10 82       	st	Z, r1
    143c:	76 c0       	rjmp	.+236    	; 0x152a <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINB__UINT8_REG, Copy__uint8PinId) != 0)
    143e:	e6 e3       	ldi	r30, 0x36	; 54
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	a9 01       	movw	r20, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO__CheckStatusGetPinValue+0x124>
    1452:	55 95       	asr	r21
    1454:	47 95       	ror	r20
    1456:	8a 95       	dec	r24
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO__CheckStatusGetPinValue+0x120>
    145a:	ca 01       	movw	r24, r20
    145c:	81 70       	andi	r24, 0x01	; 1
    145e:	90 70       	andi	r25, 0x00	; 0
    1460:	88 23       	and	r24, r24
    1462:	09 f4       	brne	.+2      	; 0x1466 <DIO__CheckStatusGetPinValue+0x134>
    1464:	62 c0       	rjmp	.+196    	; 0x152a <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    1466:	ec 81       	ldd	r30, Y+4	; 0x04
    1468:	fd 81       	ldd	r31, Y+5	; 0x05
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	80 83       	st	Z, r24
    146e:	5d c0       	rjmp	.+186    	; 0x152a <DIO__CheckStatusGetPinValue+0x1f8>

                        break;

                case DIO__UINT8_PORTC:

                        if (GET_BIT(PINC__UINT8_REG, Copy__uint8PinId) == 0)
    1470:	e3 e3       	ldi	r30, 0x33	; 51
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	88 2f       	mov	r24, r24
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a9 01       	movw	r20, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO__CheckStatusGetPinValue+0x156>
    1484:	55 95       	asr	r21
    1486:	47 95       	ror	r20
    1488:	8a 95       	dec	r24
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <DIO__CheckStatusGetPinValue+0x152>
    148c:	ca 01       	movw	r24, r20
    148e:	81 70       	andi	r24, 0x01	; 1
    1490:	90 70       	andi	r25, 0x00	; 0
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	21 f4       	brne	.+8      	; 0x149e <DIO__CheckStatusGetPinValue+0x16c>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    1496:	ec 81       	ldd	r30, Y+4	; 0x04
    1498:	fd 81       	ldd	r31, Y+5	; 0x05
    149a:	10 82       	st	Z, r1
    149c:	46 c0       	rjmp	.+140    	; 0x152a <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINC__UINT8_REG, Copy__uint8PinId) != 0)
    149e:	e3 e3       	ldi	r30, 0x33	; 51
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	88 2f       	mov	r24, r24
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	a9 01       	movw	r20, r18
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <DIO__CheckStatusGetPinValue+0x184>
    14b2:	55 95       	asr	r21
    14b4:	47 95       	ror	r20
    14b6:	8a 95       	dec	r24
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <DIO__CheckStatusGetPinValue+0x180>
    14ba:	ca 01       	movw	r24, r20
    14bc:	81 70       	andi	r24, 0x01	; 1
    14be:	90 70       	andi	r25, 0x00	; 0
    14c0:	88 23       	and	r24, r24
    14c2:	99 f1       	breq	.+102    	; 0x152a <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    14c4:	ec 81       	ldd	r30, Y+4	; 0x04
    14c6:	fd 81       	ldd	r31, Y+5	; 0x05
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	80 83       	st	Z, r24
    14cc:	2e c0       	rjmp	.+92     	; 0x152a <DIO__CheckStatusGetPinValue+0x1f8>
                                /* DO NOTHING */
                        }

                        break;
                case DIO__UINT8_PORTD:
                        if (GET_BIT(PIND__UINT8_REG, Copy__uint8PinId) == 0)
    14ce:	e0 e3       	ldi	r30, 0x30	; 48
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	88 2f       	mov	r24, r24
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	a9 01       	movw	r20, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <DIO__CheckStatusGetPinValue+0x1b4>
    14e2:	55 95       	asr	r21
    14e4:	47 95       	ror	r20
    14e6:	8a 95       	dec	r24
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <DIO__CheckStatusGetPinValue+0x1b0>
    14ea:	ca 01       	movw	r24, r20
    14ec:	81 70       	andi	r24, 0x01	; 1
    14ee:	90 70       	andi	r25, 0x00	; 0
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	21 f4       	brne	.+8      	; 0x14fc <DIO__CheckStatusGetPinValue+0x1ca>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    14f4:	ec 81       	ldd	r30, Y+4	; 0x04
    14f6:	fd 81       	ldd	r31, Y+5	; 0x05
    14f8:	10 82       	st	Z, r1
    14fa:	17 c0       	rjmp	.+46     	; 0x152a <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PIND__UINT8_REG, Copy__uint8PinId) != 0)
    14fc:	e0 e3       	ldi	r30, 0x30	; 48
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	88 2f       	mov	r24, r24
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	a9 01       	movw	r20, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DIO__CheckStatusGetPinValue+0x1e2>
    1510:	55 95       	asr	r21
    1512:	47 95       	ror	r20
    1514:	8a 95       	dec	r24
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <DIO__CheckStatusGetPinValue+0x1de>
    1518:	ca 01       	movw	r24, r20
    151a:	81 70       	andi	r24, 0x01	; 1
    151c:	90 70       	andi	r25, 0x00	; 0
    151e:	88 23       	and	r24, r24
    1520:	21 f0       	breq	.+8      	; 0x152a <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    1522:	ec 81       	ldd	r30, Y+4	; 0x04
    1524:	fd 81       	ldd	r31, Y+5	; 0x05
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    152a:	59 81       	ldd	r21, Y+1	; 0x01
    152c:	5e 83       	std	Y+6, r21	; 0x06
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <DIO__CheckStatusGetPinValue+0x206>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	8e 83       	std	Y+6, r24	; 0x06
    1538:	8e 81       	ldd	r24, Y+6	; 0x06
        }
}
    153a:	28 96       	adiw	r28, 0x08	; 8
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	de bf       	out	0x3e, r29	; 62
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	cd bf       	out	0x3d, r28	; 61
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <DIO__CheckStatusSetPortDirection>:

CheckStatus DIO__CheckStatusSetPortDirection(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PortDirection)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	2e 97       	sbiw	r28, 0x0e	; 14
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
    1560:	8a 83       	std	Y+2, r24	; 0x02
    1562:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    1564:	19 82       	std	Y+1, r1	; 0x01
        /* 
        Check 1-Valid Port Id
              2-Valid PORT diraction 
        */

        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && ((Copy__uint8PortDirection == DIO__UINT8_OUTPUT) || (Copy__uint8PortDirection == DIO__UINT8_INPUT)))
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	84 30       	cpi	r24, 0x04	; 4
    156a:	08 f0       	brcs	.+2      	; 0x156e <DIO__CheckStatusSetPortDirection+0x22>
    156c:	89 c0       	rjmp	.+274    	; 0x1680 <DIO__CheckStatusSetPortDirection+0x134>
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	21 f0       	breq	.+8      	; 0x157c <DIO__CheckStatusSetPortDirection+0x30>
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	88 23       	and	r24, r24
    1578:	09 f0       	breq	.+2      	; 0x157c <DIO__CheckStatusSetPortDirection+0x30>
    157a:	82 c0       	rjmp	.+260    	; 0x1680 <DIO__CheckStatusSetPortDirection+0x134>
        {
                switch (Copy__uint8PortId)
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	3e 87       	std	Y+14, r19	; 0x0e
    1584:	2d 87       	std	Y+13, r18	; 0x0d
    1586:	8d 85       	ldd	r24, Y+13	; 0x0d
    1588:	9e 85       	ldd	r25, Y+14	; 0x0e
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	91 05       	cpc	r25, r1
    158e:	71 f1       	breq	.+92     	; 0x15ec <DIO__CheckStatusSetPortDirection+0xa0>
    1590:	2d 85       	ldd	r18, Y+13	; 0x0d
    1592:	3e 85       	ldd	r19, Y+14	; 0x0e
    1594:	22 30       	cpi	r18, 0x02	; 2
    1596:	31 05       	cpc	r19, r1
    1598:	2c f4       	brge	.+10     	; 0x15a4 <DIO__CheckStatusSetPortDirection+0x58>
    159a:	8d 85       	ldd	r24, Y+13	; 0x0d
    159c:	9e 85       	ldd	r25, Y+14	; 0x0e
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	69 f0       	breq	.+26     	; 0x15bc <DIO__CheckStatusSetPortDirection+0x70>
    15a2:	6b c0       	rjmp	.+214    	; 0x167a <DIO__CheckStatusSetPortDirection+0x12e>
    15a4:	2d 85       	ldd	r18, Y+13	; 0x0d
    15a6:	3e 85       	ldd	r19, Y+14	; 0x0e
    15a8:	22 30       	cpi	r18, 0x02	; 2
    15aa:	31 05       	cpc	r19, r1
    15ac:	b9 f1       	breq	.+110    	; 0x161c <DIO__CheckStatusSetPortDirection+0xd0>
    15ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b2:	83 30       	cpi	r24, 0x03	; 3
    15b4:	91 05       	cpc	r25, r1
    15b6:	09 f4       	brne	.+2      	; 0x15ba <DIO__CheckStatusSetPortDirection+0x6e>
    15b8:	49 c0       	rjmp	.+146    	; 0x164c <DIO__CheckStatusSetPortDirection+0x100>
    15ba:	5f c0       	rjmp	.+190    	; 0x167a <DIO__CheckStatusSetPortDirection+0x12e>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PortDirection)
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	3c 87       	std	Y+12, r19	; 0x0c
    15c4:	2b 87       	std	Y+11, r18	; 0x0b
    15c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    15c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	31 f0       	breq	.+12     	; 0x15da <DIO__CheckStatusSetPortDirection+0x8e>
    15ce:	2b 85       	ldd	r18, Y+11	; 0x0b
    15d0:	3c 85       	ldd	r19, Y+12	; 0x0c
    15d2:	21 30       	cpi	r18, 0x01	; 1
    15d4:	31 05       	cpc	r19, r1
    15d6:	29 f0       	breq	.+10     	; 0x15e2 <DIO__CheckStatusSetPortDirection+0x96>
    15d8:	50 c0       	rjmp	.+160    	; 0x167a <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTA__UINT8_REG = 0x00;
    15da:	eb e3       	ldi	r30, 0x3B	; 59
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	10 82       	st	Z, r1
    15e0:	4c c0       	rjmp	.+152    	; 0x167a <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTA__UINT8_REG = 0xFF;
    15e2:	eb e3       	ldi	r30, 0x3B	; 59
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	8f ef       	ldi	r24, 0xFF	; 255
    15e8:	80 83       	st	Z, r24
    15ea:	47 c0       	rjmp	.+142    	; 0x167a <DIO__CheckStatusSetPortDirection+0x12e>
                                /* DO  NOTHING */
                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PortDirection)
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	3a 87       	std	Y+10, r19	; 0x0a
    15f4:	29 87       	std	Y+9, r18	; 0x09
    15f6:	89 85       	ldd	r24, Y+9	; 0x09
    15f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	31 f0       	breq	.+12     	; 0x160a <DIO__CheckStatusSetPortDirection+0xbe>
    15fe:	29 85       	ldd	r18, Y+9	; 0x09
    1600:	3a 85       	ldd	r19, Y+10	; 0x0a
    1602:	21 30       	cpi	r18, 0x01	; 1
    1604:	31 05       	cpc	r19, r1
    1606:	29 f0       	breq	.+10     	; 0x1612 <DIO__CheckStatusSetPortDirection+0xc6>
    1608:	38 c0       	rjmp	.+112    	; 0x167a <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTB__UINT8_REG = 0x00;
    160a:	e8 e3       	ldi	r30, 0x38	; 56
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	10 82       	st	Z, r1
    1610:	34 c0       	rjmp	.+104    	; 0x167a <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTB__UINT8_REG = 0xFF;
    1612:	e8 e3       	ldi	r30, 0x38	; 56
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	8f ef       	ldi	r24, 0xFF	; 255
    1618:	80 83       	st	Z, r24
    161a:	2f c0       	rjmp	.+94     	; 0x167a <DIO__CheckStatusSetPortDirection+0x12e>
                        }

                        break;

                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PortDirection)
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	38 87       	std	Y+8, r19	; 0x08
    1624:	2f 83       	std	Y+7, r18	; 0x07
    1626:	8f 81       	ldd	r24, Y+7	; 0x07
    1628:	98 85       	ldd	r25, Y+8	; 0x08
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	31 f0       	breq	.+12     	; 0x163a <DIO__CheckStatusSetPortDirection+0xee>
    162e:	2f 81       	ldd	r18, Y+7	; 0x07
    1630:	38 85       	ldd	r19, Y+8	; 0x08
    1632:	21 30       	cpi	r18, 0x01	; 1
    1634:	31 05       	cpc	r19, r1
    1636:	29 f0       	breq	.+10     	; 0x1642 <DIO__CheckStatusSetPortDirection+0xf6>
    1638:	20 c0       	rjmp	.+64     	; 0x167a <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTC__UINT8_REG = 0x00;
    163a:	e5 e3       	ldi	r30, 0x35	; 53
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	10 82       	st	Z, r1
    1640:	1c c0       	rjmp	.+56     	; 0x167a <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTC__UINT8_REG = 0xFF;
    1642:	e5 e3       	ldi	r30, 0x35	; 53
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	8f ef       	ldi	r24, 0xFF	; 255
    1648:	80 83       	st	Z, r24
    164a:	17 c0       	rjmp	.+46     	; 0x167a <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        }

                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PortDirection)
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	3e 83       	std	Y+6, r19	; 0x06
    1654:	2d 83       	std	Y+5, r18	; 0x05
    1656:	8d 81       	ldd	r24, Y+5	; 0x05
    1658:	9e 81       	ldd	r25, Y+6	; 0x06
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	31 f0       	breq	.+12     	; 0x166a <DIO__CheckStatusSetPortDirection+0x11e>
    165e:	2d 81       	ldd	r18, Y+5	; 0x05
    1660:	3e 81       	ldd	r19, Y+6	; 0x06
    1662:	21 30       	cpi	r18, 0x01	; 1
    1664:	31 05       	cpc	r19, r1
    1666:	29 f0       	breq	.+10     	; 0x1672 <DIO__CheckStatusSetPortDirection+0x126>
    1668:	08 c0       	rjmp	.+16     	; 0x167a <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTD__UINT8_REG = 0x00;
    166a:	e2 e3       	ldi	r30, 0x32	; 50
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	10 82       	st	Z, r1
    1670:	04 c0       	rjmp	.+8      	; 0x167a <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTD__UINT8_REG = 0xFF;
    1672:	e2 e3       	ldi	r30, 0x32	; 50
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	8f ef       	ldi	r24, 0xFF	; 255
    1678:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    167a:	39 81       	ldd	r19, Y+1	; 0x01
    167c:	3c 83       	std	Y+4, r19	; 0x04
    167e:	04 c0       	rjmp	.+8      	; 0x1688 <DIO__CheckStatusSetPortDirection+0x13c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	8c 83       	std	Y+4, r24	; 0x04
    1688:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    168a:	2e 96       	adiw	r28, 0x0e	; 14
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <DIO__CheckStatusSetPortValue>:

CheckStatus DIO__CheckStatusSetPortValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PortValue)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <DIO__CheckStatusSetPortValue+0x6>
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <DIO__CheckStatusSetPortValue+0x8>
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <DIO__CheckStatusSetPortValue+0xa>
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	8a 83       	std	Y+2, r24	; 0x02
    16ac:	6b 83       	std	Y+3, r22	; 0x03

        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    16ae:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
               
        */
        if (Copy__uint8PortId <= DIO__UINT8_PORTD)
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	84 30       	cpi	r24, 0x04	; 4
    16b4:	a8 f5       	brcc	.+106    	; 0x1720 <DIO__CheckStatusSetPortValue+0x84>
        {
                switch (Copy__uint8PortId)
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	3e 83       	std	Y+6, r19	; 0x06
    16be:	2d 83       	std	Y+5, r18	; 0x05
    16c0:	8d 81       	ldd	r24, Y+5	; 0x05
    16c2:	9e 81       	ldd	r25, Y+6	; 0x06
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	91 05       	cpc	r25, r1
    16c8:	d1 f0       	breq	.+52     	; 0x16fe <DIO__CheckStatusSetPortValue+0x62>
    16ca:	2d 81       	ldd	r18, Y+5	; 0x05
    16cc:	3e 81       	ldd	r19, Y+6	; 0x06
    16ce:	22 30       	cpi	r18, 0x02	; 2
    16d0:	31 05       	cpc	r19, r1
    16d2:	2c f4       	brge	.+10     	; 0x16de <DIO__CheckStatusSetPortValue+0x42>
    16d4:	8d 81       	ldd	r24, Y+5	; 0x05
    16d6:	9e 81       	ldd	r25, Y+6	; 0x06
    16d8:	00 97       	sbiw	r24, 0x00	; 0
    16da:	61 f0       	breq	.+24     	; 0x16f4 <DIO__CheckStatusSetPortValue+0x58>
    16dc:	1e c0       	rjmp	.+60     	; 0x171a <DIO__CheckStatusSetPortValue+0x7e>
    16de:	2d 81       	ldd	r18, Y+5	; 0x05
    16e0:	3e 81       	ldd	r19, Y+6	; 0x06
    16e2:	22 30       	cpi	r18, 0x02	; 2
    16e4:	31 05       	cpc	r19, r1
    16e6:	81 f0       	breq	.+32     	; 0x1708 <DIO__CheckStatusSetPortValue+0x6c>
    16e8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ea:	9e 81       	ldd	r25, Y+6	; 0x06
    16ec:	83 30       	cpi	r24, 0x03	; 3
    16ee:	91 05       	cpc	r25, r1
    16f0:	81 f0       	breq	.+32     	; 0x1712 <DIO__CheckStatusSetPortValue+0x76>
    16f2:	13 c0       	rjmp	.+38     	; 0x171a <DIO__CheckStatusSetPortValue+0x7e>
                {
                case DIO__UINT8_PORTA:
                        PORTA__UINT8_REG = Copy__uint8PortValue;
    16f4:	eb e3       	ldi	r30, 0x3B	; 59
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	80 83       	st	Z, r24
    16fc:	0e c0       	rjmp	.+28     	; 0x171a <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTB:
                        PORTB__UINT8_REG = Copy__uint8PortValue;
    16fe:	e8 e3       	ldi	r30, 0x38	; 56
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	80 83       	st	Z, r24
    1706:	09 c0       	rjmp	.+18     	; 0x171a <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTC:
                        PORTC__UINT8_REG = Copy__uint8PortValue;
    1708:	e5 e3       	ldi	r30, 0x35	; 53
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	80 83       	st	Z, r24
    1710:	04 c0       	rjmp	.+8      	; 0x171a <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTD:
                        PORTD__UINT8_REG = Copy__uint8PortValue;
    1712:	e2 e3       	ldi	r30, 0x32	; 50
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    171a:	99 81       	ldd	r25, Y+1	; 0x01
    171c:	9c 83       	std	Y+4, r25	; 0x04
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <DIO__CheckStatusSetPortValue+0x8c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    1724:	29 81       	ldd	r18, Y+1	; 0x01
    1726:	2c 83       	std	Y+4, r18	; 0x04
    1728:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    172a:	26 96       	adiw	r28, 0x06	; 6
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	08 95       	ret

0000173c <DIO__CheckStatusGetPortValue>:

CheckStatus DIO__CheckStatusGetPortValue(_uint8 Copy__uint8PortId, _uint8 *Copy_p_uint8ReturnPortValue)
{
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	27 97       	sbiw	r28, 0x07	; 7
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	8a 83       	std	Y+2, r24	; 0x02
    1752:	7c 83       	std	Y+4, r23	; 0x04
    1754:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    1756:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid Pointer != NULL
               
        */
        if (Copy_p_uint8ReturnPortValue != NULL)
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	e9 f1       	breq	.+122    	; 0x17da <DIO__CheckStatusGetPortValue+0x9e>
        {
                switch (Copy__uint8PortId)
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	3f 83       	std	Y+7, r19	; 0x07
    1768:	2e 83       	std	Y+6, r18	; 0x06
    176a:	8e 81       	ldd	r24, Y+6	; 0x06
    176c:	9f 81       	ldd	r25, Y+7	; 0x07
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	91 05       	cpc	r25, r1
    1772:	e1 f0       	breq	.+56     	; 0x17ac <DIO__CheckStatusGetPortValue+0x70>
    1774:	2e 81       	ldd	r18, Y+6	; 0x06
    1776:	3f 81       	ldd	r19, Y+7	; 0x07
    1778:	22 30       	cpi	r18, 0x02	; 2
    177a:	31 05       	cpc	r19, r1
    177c:	2c f4       	brge	.+10     	; 0x1788 <DIO__CheckStatusGetPortValue+0x4c>
    177e:	8e 81       	ldd	r24, Y+6	; 0x06
    1780:	9f 81       	ldd	r25, Y+7	; 0x07
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	61 f0       	breq	.+24     	; 0x179e <DIO__CheckStatusGetPortValue+0x62>
    1786:	26 c0       	rjmp	.+76     	; 0x17d4 <DIO__CheckStatusGetPortValue+0x98>
    1788:	2e 81       	ldd	r18, Y+6	; 0x06
    178a:	3f 81       	ldd	r19, Y+7	; 0x07
    178c:	22 30       	cpi	r18, 0x02	; 2
    178e:	31 05       	cpc	r19, r1
    1790:	a1 f0       	breq	.+40     	; 0x17ba <DIO__CheckStatusGetPortValue+0x7e>
    1792:	8e 81       	ldd	r24, Y+6	; 0x06
    1794:	9f 81       	ldd	r25, Y+7	; 0x07
    1796:	83 30       	cpi	r24, 0x03	; 3
    1798:	91 05       	cpc	r25, r1
    179a:	b1 f0       	breq	.+44     	; 0x17c8 <DIO__CheckStatusGetPortValue+0x8c>
    179c:	1b c0       	rjmp	.+54     	; 0x17d4 <DIO__CheckStatusGetPortValue+0x98>
                {
                case DIO__UINT8_PORTA:
                        *Copy_p_uint8ReturnPortValue = PINA__UINT8_REG;
    179e:	e9 e3       	ldi	r30, 0x39	; 57
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	eb 81       	ldd	r30, Y+3	; 0x03
    17a6:	fc 81       	ldd	r31, Y+4	; 0x04
    17a8:	80 83       	st	Z, r24
    17aa:	14 c0       	rjmp	.+40     	; 0x17d4 <DIO__CheckStatusGetPortValue+0x98>
                        break;
                case DIO__UINT8_PORTB:
                        *Copy_p_uint8ReturnPortValue = PINB__UINT8_REG;
    17ac:	e6 e3       	ldi	r30, 0x36	; 54
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	eb 81       	ldd	r30, Y+3	; 0x03
    17b4:	fc 81       	ldd	r31, Y+4	; 0x04
    17b6:	80 83       	st	Z, r24
    17b8:	0d c0       	rjmp	.+26     	; 0x17d4 <DIO__CheckStatusGetPortValue+0x98>

                        break;
                case DIO__UINT8_PORTC:
                        *Copy_p_uint8ReturnPortValue = PINC__UINT8_REG;
    17ba:	e3 e3       	ldi	r30, 0x33	; 51
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	eb 81       	ldd	r30, Y+3	; 0x03
    17c2:	fc 81       	ldd	r31, Y+4	; 0x04
    17c4:	80 83       	st	Z, r24
    17c6:	06 c0       	rjmp	.+12     	; 0x17d4 <DIO__CheckStatusGetPortValue+0x98>
                        break;
                case DIO__UINT8_PORTD:
                        *Copy_p_uint8ReturnPortValue = PIND__UINT8_REG;
    17c8:	e0 e3       	ldi	r30, 0x30	; 48
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	eb 81       	ldd	r30, Y+3	; 0x03
    17d0:	fc 81       	ldd	r31, Y+4	; 0x04
    17d2:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    17d4:	99 81       	ldd	r25, Y+1	; 0x01
    17d6:	9d 83       	std	Y+5, r25	; 0x05
    17d8:	04 c0       	rjmp	.+8      	; 0x17e2 <DIO__CheckStatusGetPortValue+0xa6>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    17de:	29 81       	ldd	r18, Y+1	; 0x01
    17e0:	2d 83       	std	Y+5, r18	; 0x05
    17e2:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    17e4:	27 96       	adiw	r28, 0x07	; 7
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <EXTI_CheckStatusSetCallBackFunc>:
static Void (*EXTI_AP_VoidIsr[3])(Void) = {NULL,NULL,NULL};

/* SET CALL BACK FUNCTION  */

CheckStatus EXTI_CheckStatusSetCallBackFunc(Void (*Copy_VoidPointerToFunction)(Void), _uint8 Copy__Uint8ExtiIndex)
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <EXTI_CheckStatusSetCallBackFunc+0x6>
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <EXTI_CheckStatusSetCallBackFunc+0x8>
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	9b 83       	std	Y+3, r25	; 0x03
    1804:	8a 83       	std	Y+2, r24	; 0x02
    1806:	6c 83       	std	Y+4, r22	; 0x04
        CheckStatus Local_CheckStatusReturnValue = CHECK_SUCCESS;
    1808:	19 82       	std	Y+1, r1	; 0x01

        if (Copy__Uint8ExtiIndex <= INT2 && Copy_VoidPointerToFunction != NULL)
    180a:	8c 81       	ldd	r24, Y+4	; 0x04
    180c:	83 30       	cpi	r24, 0x03	; 3
    180e:	88 f4       	brcc	.+34     	; 0x1832 <EXTI_CheckStatusSetCallBackFunc+0x3c>
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	9b 81       	ldd	r25, Y+3	; 0x03
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	69 f0       	breq	.+26     	; 0x1832 <EXTI_CheckStatusSetCallBackFunc+0x3c>
        {
                EXTI_AP_VoidIsr[Copy__Uint8ExtiIndex] = *Copy_VoidPointerToFunction;
    1818:	8c 81       	ldd	r24, Y+4	; 0x04
    181a:	88 2f       	mov	r24, r24
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	fc 01       	movw	r30, r24
    1824:	e6 51       	subi	r30, 0x16	; 22
    1826:	fe 4f       	sbci	r31, 0xFE	; 254
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	9b 81       	ldd	r25, Y+3	; 0x03
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	80 83       	st	Z, r24
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <EXTI_CheckStatusSetCallBackFunc+0x40>
        }
        else
        {
                Local_CheckStatusReturnValue = CHECK_FAIL;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	89 83       	std	Y+1, r24	; 0x01
        }

        return Local_CheckStatusReturnValue;
    1836:	89 81       	ldd	r24, Y+1	; 0x01
}
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <__vector_1>:
/* ISR Function prototype */
/* EXTINT0 ISR */
void __vector_1(void) __attribute__((signal));

void __vector_1(void)
{
    1846:	1f 92       	push	r1
    1848:	0f 92       	push	r0
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	0f 92       	push	r0
    184e:	11 24       	eor	r1, r1
    1850:	2f 93       	push	r18
    1852:	3f 93       	push	r19
    1854:	4f 93       	push	r20
    1856:	5f 93       	push	r21
    1858:	6f 93       	push	r22
    185a:	7f 93       	push	r23
    185c:	8f 93       	push	r24
    185e:	9f 93       	push	r25
    1860:	af 93       	push	r26
    1862:	bf 93       	push	r27
    1864:	ef 93       	push	r30
    1866:	ff 93       	push	r31
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
        if (EXTI_AP_VoidIsr[INT0] != NULL)
    1870:	80 91 ea 01 	lds	r24, 0x01EA
    1874:	90 91 eb 01 	lds	r25, 0x01EB
    1878:	00 97       	sbiw	r24, 0x00	; 0
    187a:	29 f0       	breq	.+10     	; 0x1886 <__vector_1+0x40>
        {
                EXTI_AP_VoidIsr[INT0]();
    187c:	e0 91 ea 01 	lds	r30, 0x01EA
    1880:	f0 91 eb 01 	lds	r31, 0x01EB
    1884:	09 95       	icall
        else
        {
                /* DO NOTHING */
        }
        
}
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	ff 91       	pop	r31
    188c:	ef 91       	pop	r30
    188e:	bf 91       	pop	r27
    1890:	af 91       	pop	r26
    1892:	9f 91       	pop	r25
    1894:	8f 91       	pop	r24
    1896:	7f 91       	pop	r23
    1898:	6f 91       	pop	r22
    189a:	5f 91       	pop	r21
    189c:	4f 91       	pop	r20
    189e:	3f 91       	pop	r19
    18a0:	2f 91       	pop	r18
    18a2:	0f 90       	pop	r0
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	0f 90       	pop	r0
    18a8:	1f 90       	pop	r1
    18aa:	18 95       	reti

000018ac <__vector_2>:
/* EXTINT1 ISR */

void __vector_2(void) __attribute__((signal));

void __vector_2(void)
{
    18ac:	1f 92       	push	r1
    18ae:	0f 92       	push	r0
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	0f 92       	push	r0
    18b4:	11 24       	eor	r1, r1
    18b6:	2f 93       	push	r18
    18b8:	3f 93       	push	r19
    18ba:	4f 93       	push	r20
    18bc:	5f 93       	push	r21
    18be:	6f 93       	push	r22
    18c0:	7f 93       	push	r23
    18c2:	8f 93       	push	r24
    18c4:	9f 93       	push	r25
    18c6:	af 93       	push	r26
    18c8:	bf 93       	push	r27
    18ca:	ef 93       	push	r30
    18cc:	ff 93       	push	r31
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
        if (EXTI_AP_VoidIsr[INT1] != NULL)
    18d6:	80 91 ec 01 	lds	r24, 0x01EC
    18da:	90 91 ed 01 	lds	r25, 0x01ED
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	29 f0       	breq	.+10     	; 0x18ec <__vector_2+0x40>
        {
                EXTI_AP_VoidIsr[INT1]();
    18e2:	e0 91 ec 01 	lds	r30, 0x01EC
    18e6:	f0 91 ed 01 	lds	r31, 0x01ED
    18ea:	09 95       	icall
        else
        {
                /* DO NOTHING */
        }
        
}
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	ff 91       	pop	r31
    18f2:	ef 91       	pop	r30
    18f4:	bf 91       	pop	r27
    18f6:	af 91       	pop	r26
    18f8:	9f 91       	pop	r25
    18fa:	8f 91       	pop	r24
    18fc:	7f 91       	pop	r23
    18fe:	6f 91       	pop	r22
    1900:	5f 91       	pop	r21
    1902:	4f 91       	pop	r20
    1904:	3f 91       	pop	r19
    1906:	2f 91       	pop	r18
    1908:	0f 90       	pop	r0
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	0f 90       	pop	r0
    190e:	1f 90       	pop	r1
    1910:	18 95       	reti

00001912 <__vector_3>:
/* EXTINT2 ISR */

void __vector_3(void) __attribute__((signal));

void __vector_3(void)
{
    1912:	1f 92       	push	r1
    1914:	0f 92       	push	r0
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	0f 92       	push	r0
    191a:	11 24       	eor	r1, r1
    191c:	2f 93       	push	r18
    191e:	3f 93       	push	r19
    1920:	4f 93       	push	r20
    1922:	5f 93       	push	r21
    1924:	6f 93       	push	r22
    1926:	7f 93       	push	r23
    1928:	8f 93       	push	r24
    192a:	9f 93       	push	r25
    192c:	af 93       	push	r26
    192e:	bf 93       	push	r27
    1930:	ef 93       	push	r30
    1932:	ff 93       	push	r31
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
        if (EXTI_AP_VoidIsr[INT2] != NULL)
    193c:	80 91 ee 01 	lds	r24, 0x01EE
    1940:	90 91 ef 01 	lds	r25, 0x01EF
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	29 f0       	breq	.+10     	; 0x1952 <__vector_3+0x40>
        {
                EXTI_AP_VoidIsr[INT2]();
    1948:	e0 91 ee 01 	lds	r30, 0x01EE
    194c:	f0 91 ef 01 	lds	r31, 0x01EF
    1950:	09 95       	icall
        else
        {
                /* DO NOTHING */
        }
        
}
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	ff 91       	pop	r31
    1958:	ef 91       	pop	r30
    195a:	bf 91       	pop	r27
    195c:	af 91       	pop	r26
    195e:	9f 91       	pop	r25
    1960:	8f 91       	pop	r24
    1962:	7f 91       	pop	r23
    1964:	6f 91       	pop	r22
    1966:	5f 91       	pop	r21
    1968:	4f 91       	pop	r20
    196a:	3f 91       	pop	r19
    196c:	2f 91       	pop	r18
    196e:	0f 90       	pop	r0
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	0f 90       	pop	r0
    1974:	1f 90       	pop	r1
    1976:	18 95       	reti

00001978 <EXIT_CheckStatusExtIntEnable>:



CheckStatus EXIT_CheckStatusExtIntEnable(_uint8 Copy__Uint8ExtIntId, _uint8 Copy__Uint8ExtIntEdge)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	2b 97       	sbiw	r28, 0x0b	; 11
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	8a 83       	std	Y+2, r24	; 0x02
    198e:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnValue = CHECK_SUCCESS;
    1990:	19 82       	std	Y+1, r1	; 0x01
        if (Copy__Uint8ExtIntId <= INT2 && (Copy__Uint8ExtIntEdge <= EXIT_UINT8_LOGICAL_CHANGE_EDGE && Copy__Uint8ExtIntEdge >= EXIT_UINT8_FALLING_EDGE))
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	83 30       	cpi	r24, 0x03	; 3
    1996:	08 f0       	brcs	.+2      	; 0x199a <EXIT_CheckStatusExtIntEnable+0x22>
    1998:	0d c1       	rjmp	.+538    	; 0x1bb4 <EXIT_CheckStatusExtIntEnable+0x23c>
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	85 30       	cpi	r24, 0x05	; 5
    199e:	08 f0       	brcs	.+2      	; 0x19a2 <EXIT_CheckStatusExtIntEnable+0x2a>
    19a0:	09 c1       	rjmp	.+530    	; 0x1bb4 <EXIT_CheckStatusExtIntEnable+0x23c>
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	88 23       	and	r24, r24
    19a6:	09 f4       	brne	.+2      	; 0x19aa <EXIT_CheckStatusExtIntEnable+0x32>
    19a8:	05 c1       	rjmp	.+522    	; 0x1bb4 <EXIT_CheckStatusExtIntEnable+0x23c>
        {
                switch (Copy__Uint8ExtIntId)
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	3b 87       	std	Y+11, r19	; 0x0b
    19b2:	2a 87       	std	Y+10, r18	; 0x0a
    19b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    19b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    19b8:	81 30       	cpi	r24, 0x01	; 1
    19ba:	91 05       	cpc	r25, r1
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <EXIT_CheckStatusExtIntEnable+0x48>
    19be:	6f c0       	rjmp	.+222    	; 0x1a9e <EXIT_CheckStatusExtIntEnable+0x126>
    19c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    19c2:	3b 85       	ldd	r19, Y+11	; 0x0b
    19c4:	22 30       	cpi	r18, 0x02	; 2
    19c6:	31 05       	cpc	r19, r1
    19c8:	09 f4       	brne	.+2      	; 0x19cc <EXIT_CheckStatusExtIntEnable+0x54>
    19ca:	cd c0       	rjmp	.+410    	; 0x1b66 <EXIT_CheckStatusExtIntEnable+0x1ee>
    19cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    19ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <EXIT_CheckStatusExtIntEnable+0x5e>
    19d4:	f1 c0       	rjmp	.+482    	; 0x1bb8 <EXIT_CheckStatusExtIntEnable+0x240>
                {
                case INT0:

                        switch (Copy__Uint8ExtIntEdge)
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	39 87       	std	Y+9, r19	; 0x09
    19de:	28 87       	std	Y+8, r18	; 0x08
    19e0:	88 85       	ldd	r24, Y+8	; 0x08
    19e2:	99 85       	ldd	r25, Y+9	; 0x09
    19e4:	82 30       	cpi	r24, 0x02	; 2
    19e6:	91 05       	cpc	r25, r1
    19e8:	09 f4       	brne	.+2      	; 0x19ec <EXIT_CheckStatusExtIntEnable+0x74>
    19ea:	43 c0       	rjmp	.+134    	; 0x1a72 <EXIT_CheckStatusExtIntEnable+0xfa>
    19ec:	28 85       	ldd	r18, Y+8	; 0x08
    19ee:	39 85       	ldd	r19, Y+9	; 0x09
    19f0:	23 30       	cpi	r18, 0x03	; 3
    19f2:	31 05       	cpc	r19, r1
    19f4:	34 f4       	brge	.+12     	; 0x1a02 <EXIT_CheckStatusExtIntEnable+0x8a>
    19f6:	88 85       	ldd	r24, Y+8	; 0x08
    19f8:	99 85       	ldd	r25, Y+9	; 0x09
    19fa:	81 30       	cpi	r24, 0x01	; 1
    19fc:	91 05       	cpc	r25, r1
    19fe:	51 f1       	breq	.+84     	; 0x1a54 <EXIT_CheckStatusExtIntEnable+0xdc>
    1a00:	46 c0       	rjmp	.+140    	; 0x1a8e <EXIT_CheckStatusExtIntEnable+0x116>
    1a02:	28 85       	ldd	r18, Y+8	; 0x08
    1a04:	39 85       	ldd	r19, Y+9	; 0x09
    1a06:	23 30       	cpi	r18, 0x03	; 3
    1a08:	31 05       	cpc	r19, r1
    1a0a:	31 f0       	breq	.+12     	; 0x1a18 <EXIT_CheckStatusExtIntEnable+0xa0>
    1a0c:	88 85       	ldd	r24, Y+8	; 0x08
    1a0e:	99 85       	ldd	r25, Y+9	; 0x09
    1a10:	84 30       	cpi	r24, 0x04	; 4
    1a12:	91 05       	cpc	r25, r1
    1a14:	81 f0       	breq	.+32     	; 0x1a36 <EXIT_CheckStatusExtIntEnable+0xbe>
    1a16:	3b c0       	rjmp	.+118    	; 0x1a8e <EXIT_CheckStatusExtIntEnable+0x116>
                        {
                        case EXIT_UINT8_LOW_LEVEL_EDGE:
                                CLEAR_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC00);
    1a18:	a5 e5       	ldi	r26, 0x55	; 85
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e5 e5       	ldi	r30, 0x55	; 85
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	8e 7f       	andi	r24, 0xFE	; 254
    1a24:	8c 93       	st	X, r24
                                CLEAR_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC01);
    1a26:	a5 e5       	ldi	r26, 0x55	; 85
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e5 e5       	ldi	r30, 0x55	; 85
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	8d 7f       	andi	r24, 0xFD	; 253
    1a32:	8c 93       	st	X, r24
    1a34:	2c c0       	rjmp	.+88     	; 0x1a8e <EXIT_CheckStatusExtIntEnable+0x116>

                                break;
                        case EXIT_UINT8_LOGICAL_CHANGE_EDGE:
                                /* code */
                                SET_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC00);
    1a36:	a5 e5       	ldi	r26, 0x55	; 85
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e5 e5       	ldi	r30, 0x55	; 85
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	81 60       	ori	r24, 0x01	; 1
    1a42:	8c 93       	st	X, r24
                                CLEAR_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC01);
    1a44:	a5 e5       	ldi	r26, 0x55	; 85
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e5 e5       	ldi	r30, 0x55	; 85
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	8d 7f       	andi	r24, 0xFD	; 253
    1a50:	8c 93       	st	X, r24
    1a52:	1d c0       	rjmp	.+58     	; 0x1a8e <EXIT_CheckStatusExtIntEnable+0x116>
                                break;
                        case EXIT_UINT8_FALLING_EDGE:
                                /* code */
                                CLEAR_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC00);
    1a54:	a5 e5       	ldi	r26, 0x55	; 85
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e5 e5       	ldi	r30, 0x55	; 85
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	8e 7f       	andi	r24, 0xFE	; 254
    1a60:	8c 93       	st	X, r24
                                SET_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC01);
    1a62:	a5 e5       	ldi	r26, 0x55	; 85
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e5 e5       	ldi	r30, 0x55	; 85
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	82 60       	ori	r24, 0x02	; 2
    1a6e:	8c 93       	st	X, r24
    1a70:	0e c0       	rjmp	.+28     	; 0x1a8e <EXIT_CheckStatusExtIntEnable+0x116>
                                break;
                        case EXIT_UINT8_RIASING_EDGE:
                                /* code */
                                SET_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC00);
    1a72:	a5 e5       	ldi	r26, 0x55	; 85
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e5 e5       	ldi	r30, 0x55	; 85
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	81 60       	ori	r24, 0x01	; 1
    1a7e:	8c 93       	st	X, r24
                                SET_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC01);
    1a80:	a5 e5       	ldi	r26, 0x55	; 85
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e5 e5       	ldi	r30, 0x55	; 85
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	82 60       	ori	r24, 0x02	; 2
    1a8c:	8c 93       	st	X, r24
                                break;
                        default:
                                break;
                        }
                        SET_BIT(EXTI__UINT8_GICR_REG, GICR_INT0);
    1a8e:	ab e5       	ldi	r26, 0x5B	; 91
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	eb e5       	ldi	r30, 0x5B	; 91
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	80 64       	ori	r24, 0x40	; 64
    1a9a:	8c 93       	st	X, r24
    1a9c:	8d c0       	rjmp	.+282    	; 0x1bb8 <EXIT_CheckStatusExtIntEnable+0x240>
                        break;
                case INT1:
                        switch (Copy__Uint8ExtIntEdge)
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	3f 83       	std	Y+7, r19	; 0x07
    1aa6:	2e 83       	std	Y+6, r18	; 0x06
    1aa8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aaa:	9f 81       	ldd	r25, Y+7	; 0x07
    1aac:	82 30       	cpi	r24, 0x02	; 2
    1aae:	91 05       	cpc	r25, r1
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <EXIT_CheckStatusExtIntEnable+0x13c>
    1ab2:	43 c0       	rjmp	.+134    	; 0x1b3a <EXIT_CheckStatusExtIntEnable+0x1c2>
    1ab4:	2e 81       	ldd	r18, Y+6	; 0x06
    1ab6:	3f 81       	ldd	r19, Y+7	; 0x07
    1ab8:	23 30       	cpi	r18, 0x03	; 3
    1aba:	31 05       	cpc	r19, r1
    1abc:	34 f4       	brge	.+12     	; 0x1aca <EXIT_CheckStatusExtIntEnable+0x152>
    1abe:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac2:	81 30       	cpi	r24, 0x01	; 1
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	51 f1       	breq	.+84     	; 0x1b1c <EXIT_CheckStatusExtIntEnable+0x1a4>
    1ac8:	46 c0       	rjmp	.+140    	; 0x1b56 <EXIT_CheckStatusExtIntEnable+0x1de>
    1aca:	2e 81       	ldd	r18, Y+6	; 0x06
    1acc:	3f 81       	ldd	r19, Y+7	; 0x07
    1ace:	23 30       	cpi	r18, 0x03	; 3
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	31 f0       	breq	.+12     	; 0x1ae0 <EXIT_CheckStatusExtIntEnable+0x168>
    1ad4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ad8:	84 30       	cpi	r24, 0x04	; 4
    1ada:	91 05       	cpc	r25, r1
    1adc:	81 f0       	breq	.+32     	; 0x1afe <EXIT_CheckStatusExtIntEnable+0x186>
    1ade:	3b c0       	rjmp	.+118    	; 0x1b56 <EXIT_CheckStatusExtIntEnable+0x1de>
                        {
                        case EXIT_UINT8_LOW_LEVEL_EDGE:
                                CLEAR_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC10);
    1ae0:	a5 e5       	ldi	r26, 0x55	; 85
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e5 e5       	ldi	r30, 0x55	; 85
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	8b 7f       	andi	r24, 0xFB	; 251
    1aec:	8c 93       	st	X, r24
                                CLEAR_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC11);
    1aee:	a5 e5       	ldi	r26, 0x55	; 85
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	e5 e5       	ldi	r30, 0x55	; 85
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	87 7f       	andi	r24, 0xF7	; 247
    1afa:	8c 93       	st	X, r24
    1afc:	2c c0       	rjmp	.+88     	; 0x1b56 <EXIT_CheckStatusExtIntEnable+0x1de>

                                break;
                        case EXIT_UINT8_LOGICAL_CHANGE_EDGE:
                                /* code */
                                SET_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC10);
    1afe:	a5 e5       	ldi	r26, 0x55	; 85
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e5 e5       	ldi	r30, 0x55	; 85
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	84 60       	ori	r24, 0x04	; 4
    1b0a:	8c 93       	st	X, r24
                                CLEAR_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC11);
    1b0c:	a5 e5       	ldi	r26, 0x55	; 85
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e5 e5       	ldi	r30, 0x55	; 85
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	87 7f       	andi	r24, 0xF7	; 247
    1b18:	8c 93       	st	X, r24
    1b1a:	1d c0       	rjmp	.+58     	; 0x1b56 <EXIT_CheckStatusExtIntEnable+0x1de>
                                break;
                        case EXIT_UINT8_FALLING_EDGE:
                                /* code */
                                CLEAR_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC10);
    1b1c:	a5 e5       	ldi	r26, 0x55	; 85
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e5 e5       	ldi	r30, 0x55	; 85
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	8b 7f       	andi	r24, 0xFB	; 251
    1b28:	8c 93       	st	X, r24
                                SET_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC11);
    1b2a:	a5 e5       	ldi	r26, 0x55	; 85
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e5 e5       	ldi	r30, 0x55	; 85
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	88 60       	ori	r24, 0x08	; 8
    1b36:	8c 93       	st	X, r24
    1b38:	0e c0       	rjmp	.+28     	; 0x1b56 <EXIT_CheckStatusExtIntEnable+0x1de>
                                break;
                        case EXIT_UINT8_RIASING_EDGE:
                                /* code */
                                SET_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC10);
    1b3a:	a5 e5       	ldi	r26, 0x55	; 85
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e5 e5       	ldi	r30, 0x55	; 85
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	84 60       	ori	r24, 0x04	; 4
    1b46:	8c 93       	st	X, r24
                                SET_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC11);
    1b48:	a5 e5       	ldi	r26, 0x55	; 85
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	e5 e5       	ldi	r30, 0x55	; 85
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	88 60       	ori	r24, 0x08	; 8
    1b54:	8c 93       	st	X, r24
                                break;
                        default:
                                break;
                        }

                        SET_BIT(EXTI__UINT8_GICR_REG, GICR_INT1);
    1b56:	ab e5       	ldi	r26, 0x5B	; 91
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	eb e5       	ldi	r30, 0x5B	; 91
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	80 68       	ori	r24, 0x80	; 128
    1b62:	8c 93       	st	X, r24
    1b64:	29 c0       	rjmp	.+82     	; 0x1bb8 <EXIT_CheckStatusExtIntEnable+0x240>

                        break;
                case INT2:
                        /* code */
                        switch (Copy__Uint8ExtIntEdge)
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	3d 83       	std	Y+5, r19	; 0x05
    1b6e:	2c 83       	std	Y+4, r18	; 0x04
    1b70:	8c 81       	ldd	r24, Y+4	; 0x04
    1b72:	9d 81       	ldd	r25, Y+5	; 0x05
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	91 05       	cpc	r25, r1
    1b78:	31 f0       	breq	.+12     	; 0x1b86 <EXIT_CheckStatusExtIntEnable+0x20e>
    1b7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b7e:	22 30       	cpi	r18, 0x02	; 2
    1b80:	31 05       	cpc	r19, r1
    1b82:	49 f0       	breq	.+18     	; 0x1b96 <EXIT_CheckStatusExtIntEnable+0x21e>
    1b84:	0f c0       	rjmp	.+30     	; 0x1ba4 <EXIT_CheckStatusExtIntEnable+0x22c>
                        {
                        case EXIT_UINT8_FALLING_EDGE:
                                SET_BIT(EXTI__UINT8_MCUCSR_REG, MCUCSR_ISC2);
    1b86:	a4 e5       	ldi	r26, 0x54	; 84
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e4 e5       	ldi	r30, 0x54	; 84
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	80 64       	ori	r24, 0x40	; 64
    1b92:	8c 93       	st	X, r24
    1b94:	07 c0       	rjmp	.+14     	; 0x1ba4 <EXIT_CheckStatusExtIntEnable+0x22c>
                                break;
                        case EXIT_UINT8_RIASING_EDGE:
                                /* code */
                                CLEAR_BIT(EXTI__UINT8_MCUCSR_REG, MCUCSR_ISC2);
    1b96:	a4 e5       	ldi	r26, 0x54	; 84
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e4 e5       	ldi	r30, 0x54	; 84
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	8f 7b       	andi	r24, 0xBF	; 191
    1ba2:	8c 93       	st	X, r24
                                break;
                        default:
                                break;
                        }
                        SET_BIT(EXTI__UINT8_GICR_REG, GICR_INT2);
    1ba4:	ab e5       	ldi	r26, 0x5B	; 91
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	eb e5       	ldi	r30, 0x5B	; 91
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	80 62       	ori	r24, 0x20	; 32
    1bb0:	8c 93       	st	X, r24
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <EXIT_CheckStatusExtIntEnable+0x240>
                        break;
                }
        }
        else
        {
                Local_CheckStatusReturnValue = CHECK_FAIL;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	89 83       	std	Y+1, r24	; 0x01
        }

        return Local_CheckStatusReturnValue;
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bba:	2b 96       	adiw	r28, 0x0b	; 11
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <EXTI_CheckStatusDisable>:

CheckStatus EXTI_CheckStatusDisable(_uint8 Copy__Uint8ExtIntId)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <EXTI_CheckStatusDisable+0x6>
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <EXTI_CheckStatusDisable+0x8>
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	8a 83       	std	Y+2, r24	; 0x02
        CheckStatus Local_CheckStatusReturnValue = CHECK_SUCCESS;
    1bda:	19 82       	std	Y+1, r1	; 0x01
        switch (Copy__Uint8ExtIntId)
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	3c 83       	std	Y+4, r19	; 0x04
    1be4:	2b 83       	std	Y+3, r18	; 0x03
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	91 05       	cpc	r25, r1
    1bee:	89 f0       	breq	.+34     	; 0x1c12 <EXTI_CheckStatusDisable+0x46>
    1bf0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf4:	22 30       	cpi	r18, 0x02	; 2
    1bf6:	31 05       	cpc	r19, r1
    1bf8:	a1 f0       	breq	.+40     	; 0x1c22 <EXTI_CheckStatusDisable+0x56>
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	c1 f4       	brne	.+48     	; 0x1c32 <EXTI_CheckStatusDisable+0x66>
        {
        case INT0:
                CLEAR_BIT(EXTI__UINT8_GICR_REG, GICR_INT0);
    1c02:	ab e5       	ldi	r26, 0x5B	; 91
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	eb e5       	ldi	r30, 0x5B	; 91
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	8f 7b       	andi	r24, 0xBF	; 191
    1c0e:	8c 93       	st	X, r24
    1c10:	12 c0       	rjmp	.+36     	; 0x1c36 <EXTI_CheckStatusDisable+0x6a>
                break;
        case INT1:
                CLEAR_BIT(EXTI__UINT8_GICR_REG, GICR_INT1);
    1c12:	ab e5       	ldi	r26, 0x5B	; 91
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	eb e5       	ldi	r30, 0x5B	; 91
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	8f 77       	andi	r24, 0x7F	; 127
    1c1e:	8c 93       	st	X, r24
    1c20:	0a c0       	rjmp	.+20     	; 0x1c36 <EXTI_CheckStatusDisable+0x6a>
                break;
        case INT2:
                CLEAR_BIT(EXTI__UINT8_GICR_REG, GICR_INT2);
    1c22:	ab e5       	ldi	r26, 0x5B	; 91
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	eb e5       	ldi	r30, 0x5B	; 91
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	8f 7d       	andi	r24, 0xDF	; 223
    1c2e:	8c 93       	st	X, r24
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <EXTI_CheckStatusDisable+0x6a>
                break;
        default:
                Local_CheckStatusReturnValue = CHECK_FAIL;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	89 83       	std	Y+1, r24	; 0x01
                break;
        }
        return Local_CheckStatusReturnValue;
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <GIE_VoidEnable>:
#include"GIE_private.h"
#include"GIE_config.h"


Void  GIE_VoidEnable(Void) 
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
         SET_BIT(GIE_UINT8_STATUS_REG,GIE_GLOBAL_INT_STATE);
    1c4e:	af e5       	ldi	r26, 0x5F	; 95
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	ef e5       	ldi	r30, 0x5F	; 95
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	80 68       	ori	r24, 0x80	; 128
    1c5a:	8c 93       	st	X, r24
}
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <GIE_VoidDisable>:

Void  GIE_VoidDisable(Void)
{
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
        CLEAR_BIT(GIE_UINT8_STATUS_REG,GIE_GLOBAL_INT_STATE);
    1c6a:	af e5       	ldi	r26, 0x5F	; 95
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	ef e5       	ldi	r30, 0x5F	; 95
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	8f 77       	andi	r24, 0x7F	; 127
    1c76:	8c 93       	st	X, r24
}
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <KPAD_CheckStatusGetKey>:
_uint8 KPAD_A_UINT8ROWSPINS[4] = {KPAD__UINT8_ROW1,KPAD__UINT8_ROW2,KPAD__UINT8_ROW3,KPAD__UINT8_ROW4};
_uint8 KPAD_A_UINT8COLSPINS[4] = {KPAD__UINT8_COL1,KPAD__UINT8_COL2,KPAD__UINT8_COL3,KPAD__UINT8_COL4};
_uint8 KPAD_A_UINT8KEYS[4][4] = KPAD_A_UINT8VALUE  ;

CheckStatus KPAD_CheckStatusGetKey(_uint8 *Copy_P_Uint8ReturnValue)
{
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	65 97       	sbiw	r28, 0x15	; 21
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	9d 8b       	std	Y+21, r25	; 0x15
    1c94:	8c 8b       	std	Y+20, r24	; 0x14
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    1c96:	1a 8a       	std	Y+18, r1	; 0x12

        _uint8 Local__Uint8RowsCounter;
        _uint8 Local__Uint8ColsCounter;
        _uint8 Local__Uint8ReturnPinValue;
        _uint8 Local__Uint8Flag = 0;
    1c98:	1f 86       	std	Y+15, r1	; 0x0f

        if (Copy_P_Uint8ReturnValue != NULL)
    1c9a:	8c 89       	ldd	r24, Y+20	; 0x14
    1c9c:	9d 89       	ldd	r25, Y+21	; 0x15
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <KPAD_CheckStatusGetKey+0x26>
    1ca2:	e1 c0       	rjmp	.+450    	; 0x1e66 <KPAD_CheckStatusGetKey+0x1e8>
        {  
               *Copy_P_Uint8ReturnValue= KPAD__UINT8_KEY_NOT_PRESSED;     
    1ca4:	ec 89       	ldd	r30, Y+20	; 0x14
    1ca6:	fd 89       	ldd	r31, Y+21	; 0x15
    1ca8:	8f ef       	ldi	r24, 0xFF	; 255
    1caa:	80 83       	st	Z, r24
                for (Local__Uint8RowsCounter = 0; Local__Uint8RowsCounter <= 3; ++Local__Uint8RowsCounter)
    1cac:	19 8a       	std	Y+17, r1	; 0x11
    1cae:	d6 c0       	rjmp	.+428    	; 0x1e5c <KPAD_CheckStatusGetKey+0x1de>
                {
                        DIO__CheckStatusSetPinValue(KPAD__UINT8_PORT, KPAD_A_UINT8ROWSPINS[Local__Uint8RowsCounter], DIO__UINT8_LOW);
    1cb0:	89 89       	ldd	r24, Y+17	; 0x11
    1cb2:	88 2f       	mov	r24, r24
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	e6 57       	subi	r30, 0x76	; 118
    1cba:	fe 4f       	sbci	r31, 0xFE	; 254
    1cbc:	90 81       	ld	r25, Z
    1cbe:	82 e0       	ldi	r24, 0x02	; 2
    1cc0:	69 2f       	mov	r22, r25
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>
                        for (Local__Uint8ColsCounter = 0; Local__Uint8ColsCounter <= 3; ++Local__Uint8ColsCounter)
    1cc8:	18 8a       	std	Y+16, r1	; 0x10
    1cca:	b2 c0       	rjmp	.+356    	; 0x1e30 <KPAD_CheckStatusGetKey+0x1b2>
                        {

                                DIO__CheckStatusGetPinValue(KPAD__UINT8_PORT, KPAD_A_UINT8COLSPINS[Local__Uint8ColsCounter], &Local__Uint8ReturnPinValue);
    1ccc:	88 89       	ldd	r24, Y+16	; 0x10
    1cce:	88 2f       	mov	r24, r24
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	e2 57       	subi	r30, 0x72	; 114
    1cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd8:	90 81       	ld	r25, Z
    1cda:	9e 01       	movw	r18, r28
    1cdc:	2d 5e       	subi	r18, 0xED	; 237
    1cde:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	69 2f       	mov	r22, r25
    1ce4:	a9 01       	movw	r20, r18
    1ce6:	0e 94 99 09 	call	0x1332	; 0x1332 <DIO__CheckStatusGetPinValue>

                                /*Check if switch is pressed */
                                if (Local__Uint8ReturnPinValue == DIO__UINT8_LOW)
    1cea:	8b 89       	ldd	r24, Y+19	; 0x13
    1cec:	88 23       	and	r24, r24
    1cee:	09 f0       	breq	.+2      	; 0x1cf2 <KPAD_CheckStatusGetKey+0x74>
    1cf0:	9c c0       	rjmp	.+312    	; 0x1e2a <KPAD_CheckStatusGetKey+0x1ac>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a0 ea       	ldi	r26, 0xA0	; 160
    1cf8:	b1 e4       	ldi	r27, 0x41	; 65
    1cfa:	8b 87       	std	Y+11, r24	; 0x0b
    1cfc:	9c 87       	std	Y+12, r25	; 0x0c
    1cfe:	ad 87       	std	Y+13, r26	; 0x0d
    1d00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	4a ef       	ldi	r20, 0xFA	; 250
    1d10:	54 e4       	ldi	r21, 0x44	; 68
    1d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	8f 83       	std	Y+7, r24	; 0x07
    1d1c:	98 87       	std	Y+8, r25	; 0x08
    1d1e:	a9 87       	std	Y+9, r26	; 0x09
    1d20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d22:	6f 81       	ldd	r22, Y+7	; 0x07
    1d24:	78 85       	ldd	r23, Y+8	; 0x08
    1d26:	89 85       	ldd	r24, Y+9	; 0x09
    1d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e8       	ldi	r20, 0x80	; 128
    1d30:	5f e3       	ldi	r21, 0x3F	; 63
    1d32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d36:	88 23       	and	r24, r24
    1d38:	2c f4       	brge	.+10     	; 0x1d44 <KPAD_CheckStatusGetKey+0xc6>
		__ticks = 1;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	9e 83       	std	Y+6, r25	; 0x06
    1d40:	8d 83       	std	Y+5, r24	; 0x05
    1d42:	3f c0       	rjmp	.+126    	; 0x1dc2 <KPAD_CheckStatusGetKey+0x144>
	else if (__tmp > 65535)
    1d44:	6f 81       	ldd	r22, Y+7	; 0x07
    1d46:	78 85       	ldd	r23, Y+8	; 0x08
    1d48:	89 85       	ldd	r24, Y+9	; 0x09
    1d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	3f ef       	ldi	r19, 0xFF	; 255
    1d50:	4f e7       	ldi	r20, 0x7F	; 127
    1d52:	57 e4       	ldi	r21, 0x47	; 71
    1d54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d58:	18 16       	cp	r1, r24
    1d5a:	4c f5       	brge	.+82     	; 0x1dae <KPAD_CheckStatusGetKey+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e2       	ldi	r20, 0x20	; 32
    1d6a:	51 e4       	ldi	r21, 0x41	; 65
    1d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9e 83       	std	Y+6, r25	; 0x06
    1d82:	8d 83       	std	Y+5, r24	; 0x05
    1d84:	0f c0       	rjmp	.+30     	; 0x1da4 <KPAD_CheckStatusGetKey+0x126>
    1d86:	88 ec       	ldi	r24, 0xC8	; 200
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	9c 83       	std	Y+4, r25	; 0x04
    1d8c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <KPAD_CheckStatusGetKey+0x114>
    1d96:	9c 83       	std	Y+4, r25	; 0x04
    1d98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	9e 83       	std	Y+6, r25	; 0x06
    1da2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da4:	8d 81       	ldd	r24, Y+5	; 0x05
    1da6:	9e 81       	ldd	r25, Y+6	; 0x06
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	69 f7       	brne	.-38     	; 0x1d86 <KPAD_CheckStatusGetKey+0x108>
    1dac:	24 c0       	rjmp	.+72     	; 0x1df6 <KPAD_CheckStatusGetKey+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dae:	6f 81       	ldd	r22, Y+7	; 0x07
    1db0:	78 85       	ldd	r23, Y+8	; 0x08
    1db2:	89 85       	ldd	r24, Y+9	; 0x09
    1db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9e 83       	std	Y+6, r25	; 0x06
    1dc0:	8d 83       	std	Y+5, r24	; 0x05
    1dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc6:	9a 83       	std	Y+2, r25	; 0x02
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <KPAD_CheckStatusGetKey+0x150>
    1dd2:	9a 83       	std	Y+2, r25	; 0x02
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	0f c0       	rjmp	.+30     	; 0x1df6 <KPAD_CheckStatusGetKey+0x178>
                                {
                                        /* debouncing */
                                        _delay_ms(20);
                                        while (Local__Uint8ReturnPinValue == DIO__UINT8_LOW)
                                        {
                                                DIO__CheckStatusGetPinValue(KPAD__UINT8_PORT, KPAD_A_UINT8COLSPINS[Local__Uint8ColsCounter], &Local__Uint8ReturnPinValue);
    1dd8:	88 89       	ldd	r24, Y+16	; 0x10
    1dda:	88 2f       	mov	r24, r24
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	fc 01       	movw	r30, r24
    1de0:	e2 57       	subi	r30, 0x72	; 114
    1de2:	fe 4f       	sbci	r31, 0xFE	; 254
    1de4:	90 81       	ld	r25, Z
    1de6:	9e 01       	movw	r18, r28
    1de8:	2d 5e       	subi	r18, 0xED	; 237
    1dea:	3f 4f       	sbci	r19, 0xFF	; 255
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	69 2f       	mov	r22, r25
    1df0:	a9 01       	movw	r20, r18
    1df2:	0e 94 99 09 	call	0x1332	; 0x1332 <DIO__CheckStatusGetPinValue>
                                /*Check if switch is pressed */
                                if (Local__Uint8ReturnPinValue == DIO__UINT8_LOW)
                                {
                                        /* debouncing */
                                        _delay_ms(20);
                                        while (Local__Uint8ReturnPinValue == DIO__UINT8_LOW)
    1df6:	8b 89       	ldd	r24, Y+19	; 0x13
    1df8:	88 23       	and	r24, r24
    1dfa:	71 f3       	breq	.-36     	; 0x1dd8 <KPAD_CheckStatusGetKey+0x15a>
                                        {
                                                DIO__CheckStatusGetPinValue(KPAD__UINT8_PORT, KPAD_A_UINT8COLSPINS[Local__Uint8ColsCounter], &Local__Uint8ReturnPinValue);
                                        }
                                           *Copy_P_Uint8ReturnValue = KPAD_A_UINT8KEYS[Local__Uint8RowsCounter][Local__Uint8ColsCounter];
    1dfc:	89 89       	ldd	r24, Y+17	; 0x11
    1dfe:	48 2f       	mov	r20, r24
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	88 89       	ldd	r24, Y+16	; 0x10
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	ca 01       	movw	r24, r20
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	88 0f       	add	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	82 0f       	add	r24, r18
    1e14:	93 1f       	adc	r25, r19
    1e16:	fc 01       	movw	r30, r24
    1e18:	ee 56       	subi	r30, 0x6E	; 110
    1e1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e1c:	80 81       	ld	r24, Z
    1e1e:	ec 89       	ldd	r30, Y+20	; 0x14
    1e20:	fd 89       	ldd	r31, Y+21	; 0x15
    1e22:	80 83       	st	Z, r24
                                           Local__Uint8Flag = 1;
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	8f 87       	std	Y+15, r24	; 0x0f
    1e28:	07 c0       	rjmp	.+14     	; 0x1e38 <KPAD_CheckStatusGetKey+0x1ba>
        {  
               *Copy_P_Uint8ReturnValue= KPAD__UINT8_KEY_NOT_PRESSED;     
                for (Local__Uint8RowsCounter = 0; Local__Uint8RowsCounter <= 3; ++Local__Uint8RowsCounter)
                {
                        DIO__CheckStatusSetPinValue(KPAD__UINT8_PORT, KPAD_A_UINT8ROWSPINS[Local__Uint8RowsCounter], DIO__UINT8_LOW);
                        for (Local__Uint8ColsCounter = 0; Local__Uint8ColsCounter <= 3; ++Local__Uint8ColsCounter)
    1e2a:	88 89       	ldd	r24, Y+16	; 0x10
    1e2c:	8f 5f       	subi	r24, 0xFF	; 255
    1e2e:	88 8b       	std	Y+16, r24	; 0x10
    1e30:	88 89       	ldd	r24, Y+16	; 0x10
    1e32:	84 30       	cpi	r24, 0x04	; 4
    1e34:	08 f4       	brcc	.+2      	; 0x1e38 <KPAD_CheckStatusGetKey+0x1ba>
    1e36:	4a cf       	rjmp	.-364    	; 0x1ccc <KPAD_CheckStatusGetKey+0x4e>
                                           *Copy_P_Uint8ReturnValue = KPAD_A_UINT8KEYS[Local__Uint8RowsCounter][Local__Uint8ColsCounter];
                                           Local__Uint8Flag = 1;
                                           break;
                                }
                        }
                        DIO__CheckStatusSetPinValue(KPAD__UINT8_PORT, KPAD_A_UINT8ROWSPINS[Local__Uint8RowsCounter], DIO__UINT8_HIGH);
    1e38:	89 89       	ldd	r24, Y+17	; 0x11
    1e3a:	88 2f       	mov	r24, r24
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	fc 01       	movw	r30, r24
    1e40:	e6 57       	subi	r30, 0x76	; 118
    1e42:	fe 4f       	sbci	r31, 0xFE	; 254
    1e44:	90 81       	ld	r25, Z
    1e46:	82 e0       	ldi	r24, 0x02	; 2
    1e48:	69 2f       	mov	r22, r25
    1e4a:	41 e0       	ldi	r20, 0x01	; 1
    1e4c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>
                        if (Local__Uint8Flag == 1)
    1e50:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	51 f0       	breq	.+20     	; 0x1e6a <KPAD_CheckStatusGetKey+0x1ec>
        _uint8 Local__Uint8Flag = 0;

        if (Copy_P_Uint8ReturnValue != NULL)
        {  
               *Copy_P_Uint8ReturnValue= KPAD__UINT8_KEY_NOT_PRESSED;     
                for (Local__Uint8RowsCounter = 0; Local__Uint8RowsCounter <= 3; ++Local__Uint8RowsCounter)
    1e56:	89 89       	ldd	r24, Y+17	; 0x11
    1e58:	8f 5f       	subi	r24, 0xFF	; 255
    1e5a:	89 8b       	std	Y+17, r24	; 0x11
    1e5c:	89 89       	ldd	r24, Y+17	; 0x11
    1e5e:	84 30       	cpi	r24, 0x04	; 4
    1e60:	08 f4       	brcc	.+2      	; 0x1e64 <KPAD_CheckStatusGetKey+0x1e6>
    1e62:	26 cf       	rjmp	.-436    	; 0x1cb0 <KPAD_CheckStatusGetKey+0x32>
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <KPAD_CheckStatusGetKey+0x1ec>
                        }
                }
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	8a 8b       	std	Y+18, r24	; 0x12
        }

        return Local_CheckStausReturnValue;
    1e6a:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1e6c:	65 96       	adiw	r28, 0x15	; 21
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <LCD_VoidInit>:
                                            LCD_A_UINT8CHAR6,
                                            LCD_A_UINT8CHAR7,
                                            LCD_A_UINT8CHAR8};
/* Defination Of Function  */
Void LCD_VoidInit(Void)
{
    1e7e:	0f 93       	push	r16
    1e80:	1f 93       	push	r17
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	cc 54       	subi	r28, 0x4C	; 76
    1e8c:	d0 40       	sbci	r29, 0x00	; 0
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	fe 01       	movw	r30, r28
    1e9a:	e7 5b       	subi	r30, 0xB7	; 183
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	ac e0       	ldi	r26, 0x0C	; 12
    1ea4:	b2 e4       	ldi	r27, 0x42	; 66
    1ea6:	80 83       	st	Z, r24
    1ea8:	91 83       	std	Z+1, r25	; 0x01
    1eaa:	a2 83       	std	Z+2, r26	; 0x02
    1eac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eae:	8e 01       	movw	r16, r28
    1eb0:	0b 5b       	subi	r16, 0xBB	; 187
    1eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e7 5b       	subi	r30, 0xB7	; 183
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	60 81       	ld	r22, Z
    1ebc:	71 81       	ldd	r23, Z+1	; 0x01
    1ebe:	82 81       	ldd	r24, Z+2	; 0x02
    1ec0:	93 81       	ldd	r25, Z+3	; 0x03
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	4a ef       	ldi	r20, 0xFA	; 250
    1ec8:	54 e4       	ldi	r21, 0x44	; 68
    1eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	f8 01       	movw	r30, r16
    1ed4:	80 83       	st	Z, r24
    1ed6:	91 83       	std	Z+1, r25	; 0x01
    1ed8:	a2 83       	std	Z+2, r26	; 0x02
    1eda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1edc:	fe 01       	movw	r30, r28
    1ede:	eb 5b       	subi	r30, 0xBB	; 187
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	60 81       	ld	r22, Z
    1ee4:	71 81       	ldd	r23, Z+1	; 0x01
    1ee6:	82 81       	ldd	r24, Z+2	; 0x02
    1ee8:	93 81       	ldd	r25, Z+3	; 0x03
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e8       	ldi	r20, 0x80	; 128
    1ef0:	5f e3       	ldi	r21, 0x3F	; 63
    1ef2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ef6:	88 23       	and	r24, r24
    1ef8:	44 f4       	brge	.+16     	; 0x1f0a <LCD_VoidInit+0x8c>
		__ticks = 1;
    1efa:	fe 01       	movw	r30, r28
    1efc:	ed 5b       	subi	r30, 0xBD	; 189
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	91 83       	std	Z+1, r25	; 0x01
    1f06:	80 83       	st	Z, r24
    1f08:	64 c0       	rjmp	.+200    	; 0x1fd2 <LCD_VoidInit+0x154>
	else if (__tmp > 65535)
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	eb 5b       	subi	r30, 0xBB	; 187
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	60 81       	ld	r22, Z
    1f12:	71 81       	ldd	r23, Z+1	; 0x01
    1f14:	82 81       	ldd	r24, Z+2	; 0x02
    1f16:	93 81       	ldd	r25, Z+3	; 0x03
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	3f ef       	ldi	r19, 0xFF	; 255
    1f1c:	4f e7       	ldi	r20, 0x7F	; 127
    1f1e:	57 e4       	ldi	r21, 0x47	; 71
    1f20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f24:	18 16       	cp	r1, r24
    1f26:	0c f0       	brlt	.+2      	; 0x1f2a <LCD_VoidInit+0xac>
    1f28:	43 c0       	rjmp	.+134    	; 0x1fb0 <LCD_VoidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	e7 5b       	subi	r30, 0xB7	; 183
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	60 81       	ld	r22, Z
    1f32:	71 81       	ldd	r23, Z+1	; 0x01
    1f34:	82 81       	ldd	r24, Z+2	; 0x02
    1f36:	93 81       	ldd	r25, Z+3	; 0x03
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e2       	ldi	r20, 0x20	; 32
    1f3e:	51 e4       	ldi	r21, 0x41	; 65
    1f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	8e 01       	movw	r16, r28
    1f4a:	0d 5b       	subi	r16, 0xBD	; 189
    1f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	f8 01       	movw	r30, r16
    1f5c:	91 83       	std	Z+1, r25	; 0x01
    1f5e:	80 83       	st	Z, r24
    1f60:	1f c0       	rjmp	.+62     	; 0x1fa0 <LCD_VoidInit+0x122>
    1f62:	fe 01       	movw	r30, r28
    1f64:	ef 5b       	subi	r30, 0xBF	; 191
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	88 ec       	ldi	r24, 0xC8	; 200
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	91 83       	std	Z+1, r25	; 0x01
    1f6e:	80 83       	st	Z, r24
    1f70:	fe 01       	movw	r30, r28
    1f72:	ef 5b       	subi	r30, 0xBF	; 191
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	80 81       	ld	r24, Z
    1f78:	91 81       	ldd	r25, Z+1	; 0x01
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <LCD_VoidInit+0xfc>
    1f7e:	fe 01       	movw	r30, r28
    1f80:	ef 5b       	subi	r30, 0xBF	; 191
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	91 83       	std	Z+1, r25	; 0x01
    1f86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f88:	de 01       	movw	r26, r28
    1f8a:	ad 5b       	subi	r26, 0xBD	; 189
    1f8c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f8e:	fe 01       	movw	r30, r28
    1f90:	ed 5b       	subi	r30, 0xBD	; 189
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	80 81       	ld	r24, Z
    1f96:	91 81       	ldd	r25, Z+1	; 0x01
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	11 96       	adiw	r26, 0x01	; 1
    1f9c:	9c 93       	st	X, r25
    1f9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	ed 5b       	subi	r30, 0xBD	; 189
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	80 81       	ld	r24, Z
    1fa8:	91 81       	ldd	r25, Z+1	; 0x01
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	d1 f6       	brne	.-76     	; 0x1f62 <LCD_VoidInit+0xe4>
    1fae:	24 c0       	rjmp	.+72     	; 0x1ff8 <LCD_VoidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb0:	8e 01       	movw	r16, r28
    1fb2:	0d 5b       	subi	r16, 0xBD	; 189
    1fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	eb 5b       	subi	r30, 0xBB	; 187
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	60 81       	ld	r22, Z
    1fbe:	71 81       	ldd	r23, Z+1	; 0x01
    1fc0:	82 81       	ldd	r24, Z+2	; 0x02
    1fc2:	93 81       	ldd	r25, Z+3	; 0x03
    1fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	f8 01       	movw	r30, r16
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	80 83       	st	Z, r24
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	ed 5b       	subi	r30, 0xBD	; 189
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 81       	ld	r24, Z
    1fda:	91 81       	ldd	r25, Z+1	; 0x01
    1fdc:	fe 01       	movw	r30, r28
    1fde:	ff 96       	adiw	r30, 0x3f	; 63
    1fe0:	91 83       	std	Z+1, r25	; 0x01
    1fe2:	80 83       	st	Z, r24
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	ff 96       	adiw	r30, 0x3f	; 63
    1fe8:	80 81       	ld	r24, Z
    1fea:	91 81       	ldd	r25, Z+1	; 0x01
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <LCD_VoidInit+0x16e>
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	ff 96       	adiw	r30, 0x3f	; 63
    1ff4:	91 83       	std	Z+1, r25	; 0x01
    1ff6:	80 83       	st	Z, r24

        _delay_ms(35);
        /* Function Set Cmnd 0b00111000*/

        LCD_CheckStatusSendCmnd(0b00111000);
    1ff8:	88 e3       	ldi	r24, 0x38	; 56
    1ffa:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_CheckStatusSendCmnd>
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	a0 e2       	ldi	r26, 0x20	; 32
    2004:	b2 e4       	ldi	r27, 0x42	; 66
    2006:	8b af       	std	Y+59, r24	; 0x3b
    2008:	9c af       	std	Y+60, r25	; 0x3c
    200a:	ad af       	std	Y+61, r26	; 0x3d
    200c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    200e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2010:	7c ad       	ldd	r23, Y+60	; 0x3c
    2012:	8d ad       	ldd	r24, Y+61	; 0x3d
    2014:	9e ad       	ldd	r25, Y+62	; 0x3e
    2016:	2b ea       	ldi	r18, 0xAB	; 171
    2018:	3a ea       	ldi	r19, 0xAA	; 170
    201a:	4a e2       	ldi	r20, 0x2A	; 42
    201c:	50 e4       	ldi	r21, 0x40	; 64
    201e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	8f ab       	std	Y+55, r24	; 0x37
    2028:	98 af       	std	Y+56, r25	; 0x38
    202a:	a9 af       	std	Y+57, r26	; 0x39
    202c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    202e:	6f a9       	ldd	r22, Y+55	; 0x37
    2030:	78 ad       	ldd	r23, Y+56	; 0x38
    2032:	89 ad       	ldd	r24, Y+57	; 0x39
    2034:	9a ad       	ldd	r25, Y+58	; 0x3a
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e8       	ldi	r20, 0x80	; 128
    203c:	5f e3       	ldi	r21, 0x3F	; 63
    203e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2042:	88 23       	and	r24, r24
    2044:	1c f4       	brge	.+6      	; 0x204c <LCD_VoidInit+0x1ce>
		__ticks = 1;
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	8e ab       	std	Y+54, r24	; 0x36
    204a:	91 c0       	rjmp	.+290    	; 0x216e <LCD_VoidInit+0x2f0>
	else if (__tmp > 255)
    204c:	6f a9       	ldd	r22, Y+55	; 0x37
    204e:	78 ad       	ldd	r23, Y+56	; 0x38
    2050:	89 ad       	ldd	r24, Y+57	; 0x39
    2052:	9a ad       	ldd	r25, Y+58	; 0x3a
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	4f e7       	ldi	r20, 0x7F	; 127
    205a:	53 e4       	ldi	r21, 0x43	; 67
    205c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2060:	18 16       	cp	r1, r24
    2062:	0c f0       	brlt	.+2      	; 0x2066 <LCD_VoidInit+0x1e8>
    2064:	7b c0       	rjmp	.+246    	; 0x215c <LCD_VoidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    2066:	6b ad       	ldd	r22, Y+59	; 0x3b
    2068:	7c ad       	ldd	r23, Y+60	; 0x3c
    206a:	8d ad       	ldd	r24, Y+61	; 0x3d
    206c:	9e ad       	ldd	r25, Y+62	; 0x3e
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	4a e7       	ldi	r20, 0x7A	; 122
    2074:	54 e4       	ldi	r21, 0x44	; 68
    2076:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	8a ab       	std	Y+50, r24	; 0x32
    2080:	9b ab       	std	Y+51, r25	; 0x33
    2082:	ac ab       	std	Y+52, r26	; 0x34
    2084:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2086:	6a a9       	ldd	r22, Y+50	; 0x32
    2088:	7b a9       	ldd	r23, Y+51	; 0x33
    208a:	8c a9       	ldd	r24, Y+52	; 0x34
    208c:	9d a9       	ldd	r25, Y+53	; 0x35
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	4a ef       	ldi	r20, 0xFA	; 250
    2094:	54 e4       	ldi	r21, 0x44	; 68
    2096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	8e a7       	std	Y+46, r24	; 0x2e
    20a0:	9f a7       	std	Y+47, r25	; 0x2f
    20a2:	a8 ab       	std	Y+48, r26	; 0x30
    20a4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    20a6:	6e a5       	ldd	r22, Y+46	; 0x2e
    20a8:	7f a5       	ldd	r23, Y+47	; 0x2f
    20aa:	88 a9       	ldd	r24, Y+48	; 0x30
    20ac:	99 a9       	ldd	r25, Y+49	; 0x31
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e8       	ldi	r20, 0x80	; 128
    20b4:	5f e3       	ldi	r21, 0x3F	; 63
    20b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ba:	88 23       	and	r24, r24
    20bc:	2c f4       	brge	.+10     	; 0x20c8 <LCD_VoidInit+0x24a>
		__ticks = 1;
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	9d a7       	std	Y+45, r25	; 0x2d
    20c4:	8c a7       	std	Y+44, r24	; 0x2c
    20c6:	3f c0       	rjmp	.+126    	; 0x2146 <LCD_VoidInit+0x2c8>
	else if (__tmp > 65535)
    20c8:	6e a5       	ldd	r22, Y+46	; 0x2e
    20ca:	7f a5       	ldd	r23, Y+47	; 0x2f
    20cc:	88 a9       	ldd	r24, Y+48	; 0x30
    20ce:	99 a9       	ldd	r25, Y+49	; 0x31
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	3f ef       	ldi	r19, 0xFF	; 255
    20d4:	4f e7       	ldi	r20, 0x7F	; 127
    20d6:	57 e4       	ldi	r21, 0x47	; 71
    20d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20dc:	18 16       	cp	r1, r24
    20de:	4c f5       	brge	.+82     	; 0x2132 <LCD_VoidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e0:	6a a9       	ldd	r22, Y+50	; 0x32
    20e2:	7b a9       	ldd	r23, Y+51	; 0x33
    20e4:	8c a9       	ldd	r24, Y+52	; 0x34
    20e6:	9d a9       	ldd	r25, Y+53	; 0x35
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e2       	ldi	r20, 0x20	; 32
    20ee:	51 e4       	ldi	r21, 0x41	; 65
    20f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	bc 01       	movw	r22, r24
    20fa:	cd 01       	movw	r24, r26
    20fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	9d a7       	std	Y+45, r25	; 0x2d
    2106:	8c a7       	std	Y+44, r24	; 0x2c
    2108:	0f c0       	rjmp	.+30     	; 0x2128 <LCD_VoidInit+0x2aa>
    210a:	88 ec       	ldi	r24, 0xC8	; 200
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	9b a7       	std	Y+43, r25	; 0x2b
    2110:	8a a7       	std	Y+42, r24	; 0x2a
    2112:	8a a5       	ldd	r24, Y+42	; 0x2a
    2114:	9b a5       	ldd	r25, Y+43	; 0x2b
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	f1 f7       	brne	.-4      	; 0x2116 <LCD_VoidInit+0x298>
    211a:	9b a7       	std	Y+43, r25	; 0x2b
    211c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2120:	9d a5       	ldd	r25, Y+45	; 0x2d
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	9d a7       	std	Y+45, r25	; 0x2d
    2126:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2128:	8c a5       	ldd	r24, Y+44	; 0x2c
    212a:	9d a5       	ldd	r25, Y+45	; 0x2d
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	69 f7       	brne	.-38     	; 0x210a <LCD_VoidInit+0x28c>
    2130:	24 c0       	rjmp	.+72     	; 0x217a <LCD_VoidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2132:	6e a5       	ldd	r22, Y+46	; 0x2e
    2134:	7f a5       	ldd	r23, Y+47	; 0x2f
    2136:	88 a9       	ldd	r24, Y+48	; 0x30
    2138:	99 a9       	ldd	r25, Y+49	; 0x31
    213a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	9d a7       	std	Y+45, r25	; 0x2d
    2144:	8c a7       	std	Y+44, r24	; 0x2c
    2146:	8c a5       	ldd	r24, Y+44	; 0x2c
    2148:	9d a5       	ldd	r25, Y+45	; 0x2d
    214a:	99 a7       	std	Y+41, r25	; 0x29
    214c:	88 a7       	std	Y+40, r24	; 0x28
    214e:	88 a5       	ldd	r24, Y+40	; 0x28
    2150:	99 a5       	ldd	r25, Y+41	; 0x29
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	f1 f7       	brne	.-4      	; 0x2152 <LCD_VoidInit+0x2d4>
    2156:	99 a7       	std	Y+41, r25	; 0x29
    2158:	88 a7       	std	Y+40, r24	; 0x28
    215a:	0f c0       	rjmp	.+30     	; 0x217a <LCD_VoidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    215c:	6f a9       	ldd	r22, Y+55	; 0x37
    215e:	78 ad       	ldd	r23, Y+56	; 0x38
    2160:	89 ad       	ldd	r24, Y+57	; 0x39
    2162:	9a ad       	ldd	r25, Y+58	; 0x3a
    2164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	8e ab       	std	Y+54, r24	; 0x36
    216e:	8e a9       	ldd	r24, Y+54	; 0x36
    2170:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2172:	8f a1       	ldd	r24, Y+39	; 0x27
    2174:	8a 95       	dec	r24
    2176:	f1 f7       	brne	.-4      	; 0x2174 <LCD_VoidInit+0x2f6>
    2178:	8f a3       	std	Y+39, r24	; 0x27
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00001111);
    217a:	8f e0       	ldi	r24, 0x0F	; 15
    217c:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_CheckStatusSendCmnd>
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	a0 e2       	ldi	r26, 0x20	; 32
    2186:	b2 e4       	ldi	r27, 0x42	; 66
    2188:	8b a3       	std	Y+35, r24	; 0x23
    218a:	9c a3       	std	Y+36, r25	; 0x24
    218c:	ad a3       	std	Y+37, r26	; 0x25
    218e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2190:	6b a1       	ldd	r22, Y+35	; 0x23
    2192:	7c a1       	ldd	r23, Y+36	; 0x24
    2194:	8d a1       	ldd	r24, Y+37	; 0x25
    2196:	9e a1       	ldd	r25, Y+38	; 0x26
    2198:	2b ea       	ldi	r18, 0xAB	; 171
    219a:	3a ea       	ldi	r19, 0xAA	; 170
    219c:	4a e2       	ldi	r20, 0x2A	; 42
    219e:	50 e4       	ldi	r21, 0x40	; 64
    21a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	8f 8f       	std	Y+31, r24	; 0x1f
    21aa:	98 a3       	std	Y+32, r25	; 0x20
    21ac:	a9 a3       	std	Y+33, r26	; 0x21
    21ae:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    21b0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21b2:	78 a1       	ldd	r23, Y+32	; 0x20
    21b4:	89 a1       	ldd	r24, Y+33	; 0x21
    21b6:	9a a1       	ldd	r25, Y+34	; 0x22
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e8       	ldi	r20, 0x80	; 128
    21be:	5f e3       	ldi	r21, 0x3F	; 63
    21c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c4:	88 23       	and	r24, r24
    21c6:	1c f4       	brge	.+6      	; 0x21ce <LCD_VoidInit+0x350>
		__ticks = 1;
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	8e 8f       	std	Y+30, r24	; 0x1e
    21cc:	91 c0       	rjmp	.+290    	; 0x22f0 <LCD_VoidInit+0x472>
	else if (__tmp > 255)
    21ce:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21d0:	78 a1       	ldd	r23, Y+32	; 0x20
    21d2:	89 a1       	ldd	r24, Y+33	; 0x21
    21d4:	9a a1       	ldd	r25, Y+34	; 0x22
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	4f e7       	ldi	r20, 0x7F	; 127
    21dc:	53 e4       	ldi	r21, 0x43	; 67
    21de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21e2:	18 16       	cp	r1, r24
    21e4:	0c f0       	brlt	.+2      	; 0x21e8 <LCD_VoidInit+0x36a>
    21e6:	7b c0       	rjmp	.+246    	; 0x22de <LCD_VoidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    21e8:	6b a1       	ldd	r22, Y+35	; 0x23
    21ea:	7c a1       	ldd	r23, Y+36	; 0x24
    21ec:	8d a1       	ldd	r24, Y+37	; 0x25
    21ee:	9e a1       	ldd	r25, Y+38	; 0x26
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	4a e7       	ldi	r20, 0x7A	; 122
    21f6:	54 e4       	ldi	r21, 0x44	; 68
    21f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	8a 8f       	std	Y+26, r24	; 0x1a
    2202:	9b 8f       	std	Y+27, r25	; 0x1b
    2204:	ac 8f       	std	Y+28, r26	; 0x1c
    2206:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2208:	6a 8d       	ldd	r22, Y+26	; 0x1a
    220a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    220c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    220e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	4a ef       	ldi	r20, 0xFA	; 250
    2216:	54 e4       	ldi	r21, 0x44	; 68
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	8e 8b       	std	Y+22, r24	; 0x16
    2222:	9f 8b       	std	Y+23, r25	; 0x17
    2224:	a8 8f       	std	Y+24, r26	; 0x18
    2226:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2228:	6e 89       	ldd	r22, Y+22	; 0x16
    222a:	7f 89       	ldd	r23, Y+23	; 0x17
    222c:	88 8d       	ldd	r24, Y+24	; 0x18
    222e:	99 8d       	ldd	r25, Y+25	; 0x19
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e8       	ldi	r20, 0x80	; 128
    2236:	5f e3       	ldi	r21, 0x3F	; 63
    2238:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    223c:	88 23       	and	r24, r24
    223e:	2c f4       	brge	.+10     	; 0x224a <LCD_VoidInit+0x3cc>
		__ticks = 1;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	9d 8b       	std	Y+21, r25	; 0x15
    2246:	8c 8b       	std	Y+20, r24	; 0x14
    2248:	3f c0       	rjmp	.+126    	; 0x22c8 <LCD_VoidInit+0x44a>
	else if (__tmp > 65535)
    224a:	6e 89       	ldd	r22, Y+22	; 0x16
    224c:	7f 89       	ldd	r23, Y+23	; 0x17
    224e:	88 8d       	ldd	r24, Y+24	; 0x18
    2250:	99 8d       	ldd	r25, Y+25	; 0x19
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	3f ef       	ldi	r19, 0xFF	; 255
    2256:	4f e7       	ldi	r20, 0x7F	; 127
    2258:	57 e4       	ldi	r21, 0x47	; 71
    225a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    225e:	18 16       	cp	r1, r24
    2260:	4c f5       	brge	.+82     	; 0x22b4 <LCD_VoidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2262:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2264:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2266:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2268:	9d 8d       	ldd	r25, Y+29	; 0x1d
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e2       	ldi	r20, 0x20	; 32
    2270:	51 e4       	ldi	r21, 0x41	; 65
    2272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	bc 01       	movw	r22, r24
    227c:	cd 01       	movw	r24, r26
    227e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	9d 8b       	std	Y+21, r25	; 0x15
    2288:	8c 8b       	std	Y+20, r24	; 0x14
    228a:	0f c0       	rjmp	.+30     	; 0x22aa <LCD_VoidInit+0x42c>
    228c:	88 ec       	ldi	r24, 0xC8	; 200
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	9b 8b       	std	Y+19, r25	; 0x13
    2292:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2294:	8a 89       	ldd	r24, Y+18	; 0x12
    2296:	9b 89       	ldd	r25, Y+19	; 0x13
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	f1 f7       	brne	.-4      	; 0x2298 <LCD_VoidInit+0x41a>
    229c:	9b 8b       	std	Y+19, r25	; 0x13
    229e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a0:	8c 89       	ldd	r24, Y+20	; 0x14
    22a2:	9d 89       	ldd	r25, Y+21	; 0x15
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	9d 8b       	std	Y+21, r25	; 0x15
    22a8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22aa:	8c 89       	ldd	r24, Y+20	; 0x14
    22ac:	9d 89       	ldd	r25, Y+21	; 0x15
    22ae:	00 97       	sbiw	r24, 0x00	; 0
    22b0:	69 f7       	brne	.-38     	; 0x228c <LCD_VoidInit+0x40e>
    22b2:	24 c0       	rjmp	.+72     	; 0x22fc <LCD_VoidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b4:	6e 89       	ldd	r22, Y+22	; 0x16
    22b6:	7f 89       	ldd	r23, Y+23	; 0x17
    22b8:	88 8d       	ldd	r24, Y+24	; 0x18
    22ba:	99 8d       	ldd	r25, Y+25	; 0x19
    22bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	9d 8b       	std	Y+21, r25	; 0x15
    22c6:	8c 8b       	std	Y+20, r24	; 0x14
    22c8:	8c 89       	ldd	r24, Y+20	; 0x14
    22ca:	9d 89       	ldd	r25, Y+21	; 0x15
    22cc:	99 8b       	std	Y+17, r25	; 0x11
    22ce:	88 8b       	std	Y+16, r24	; 0x10
    22d0:	88 89       	ldd	r24, Y+16	; 0x10
    22d2:	99 89       	ldd	r25, Y+17	; 0x11
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <LCD_VoidInit+0x456>
    22d8:	99 8b       	std	Y+17, r25	; 0x11
    22da:	88 8b       	std	Y+16, r24	; 0x10
    22dc:	0f c0       	rjmp	.+30     	; 0x22fc <LCD_VoidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22de:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22e0:	78 a1       	ldd	r23, Y+32	; 0x20
    22e2:	89 a1       	ldd	r24, Y+33	; 0x21
    22e4:	9a a1       	ldd	r25, Y+34	; 0x22
    22e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	8e 8f       	std	Y+30, r24	; 0x1e
    22f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22f2:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22f6:	8a 95       	dec	r24
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <LCD_VoidInit+0x478>
    22fa:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00000001);
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_CheckStatusSendCmnd>
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	a0 e0       	ldi	r26, 0x00	; 0
    2308:	b0 e4       	ldi	r27, 0x40	; 64
    230a:	8b 87       	std	Y+11, r24	; 0x0b
    230c:	9c 87       	std	Y+12, r25	; 0x0c
    230e:	ad 87       	std	Y+13, r26	; 0x0d
    2310:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2312:	6b 85       	ldd	r22, Y+11	; 0x0b
    2314:	7c 85       	ldd	r23, Y+12	; 0x0c
    2316:	8d 85       	ldd	r24, Y+13	; 0x0d
    2318:	9e 85       	ldd	r25, Y+14	; 0x0e
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	4a ef       	ldi	r20, 0xFA	; 250
    2320:	54 e4       	ldi	r21, 0x44	; 68
    2322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	8f 83       	std	Y+7, r24	; 0x07
    232c:	98 87       	std	Y+8, r25	; 0x08
    232e:	a9 87       	std	Y+9, r26	; 0x09
    2330:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2332:	6f 81       	ldd	r22, Y+7	; 0x07
    2334:	78 85       	ldd	r23, Y+8	; 0x08
    2336:	89 85       	ldd	r24, Y+9	; 0x09
    2338:	9a 85       	ldd	r25, Y+10	; 0x0a
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e8       	ldi	r20, 0x80	; 128
    2340:	5f e3       	ldi	r21, 0x3F	; 63
    2342:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2346:	88 23       	and	r24, r24
    2348:	2c f4       	brge	.+10     	; 0x2354 <LCD_VoidInit+0x4d6>
		__ticks = 1;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	9e 83       	std	Y+6, r25	; 0x06
    2350:	8d 83       	std	Y+5, r24	; 0x05
    2352:	3f c0       	rjmp	.+126    	; 0x23d2 <LCD_VoidInit+0x554>
	else if (__tmp > 65535)
    2354:	6f 81       	ldd	r22, Y+7	; 0x07
    2356:	78 85       	ldd	r23, Y+8	; 0x08
    2358:	89 85       	ldd	r24, Y+9	; 0x09
    235a:	9a 85       	ldd	r25, Y+10	; 0x0a
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	3f ef       	ldi	r19, 0xFF	; 255
    2360:	4f e7       	ldi	r20, 0x7F	; 127
    2362:	57 e4       	ldi	r21, 0x47	; 71
    2364:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2368:	18 16       	cp	r1, r24
    236a:	4c f5       	brge	.+82     	; 0x23be <LCD_VoidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236c:	6b 85       	ldd	r22, Y+11	; 0x0b
    236e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2370:	8d 85       	ldd	r24, Y+13	; 0x0d
    2372:	9e 85       	ldd	r25, Y+14	; 0x0e
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e2       	ldi	r20, 0x20	; 32
    237a:	51 e4       	ldi	r21, 0x41	; 65
    237c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	bc 01       	movw	r22, r24
    2386:	cd 01       	movw	r24, r26
    2388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	9e 83       	std	Y+6, r25	; 0x06
    2392:	8d 83       	std	Y+5, r24	; 0x05
    2394:	0f c0       	rjmp	.+30     	; 0x23b4 <LCD_VoidInit+0x536>
    2396:	88 ec       	ldi	r24, 0xC8	; 200
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	9c 83       	std	Y+4, r25	; 0x04
    239c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	9c 81       	ldd	r25, Y+4	; 0x04
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <LCD_VoidInit+0x524>
    23a6:	9c 83       	std	Y+4, r25	; 0x04
    23a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23aa:	8d 81       	ldd	r24, Y+5	; 0x05
    23ac:	9e 81       	ldd	r25, Y+6	; 0x06
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	9e 83       	std	Y+6, r25	; 0x06
    23b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b4:	8d 81       	ldd	r24, Y+5	; 0x05
    23b6:	9e 81       	ldd	r25, Y+6	; 0x06
    23b8:	00 97       	sbiw	r24, 0x00	; 0
    23ba:	69 f7       	brne	.-38     	; 0x2396 <LCD_VoidInit+0x518>
    23bc:	14 c0       	rjmp	.+40     	; 0x23e6 <LCD_VoidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23be:	6f 81       	ldd	r22, Y+7	; 0x07
    23c0:	78 85       	ldd	r23, Y+8	; 0x08
    23c2:	89 85       	ldd	r24, Y+9	; 0x09
    23c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	9e 83       	std	Y+6, r25	; 0x06
    23d0:	8d 83       	std	Y+5, r24	; 0x05
    23d2:	8d 81       	ldd	r24, Y+5	; 0x05
    23d4:	9e 81       	ldd	r25, Y+6	; 0x06
    23d6:	9a 83       	std	Y+2, r25	; 0x02
    23d8:	89 83       	std	Y+1, r24	; 0x01
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	9a 81       	ldd	r25, Y+2	; 0x02
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	f1 f7       	brne	.-4      	; 0x23de <LCD_VoidInit+0x560>
    23e2:	9a 83       	std	Y+2, r25	; 0x02
    23e4:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
        LCD_CheckStatusSendCmnd(0b00000110);
    23e6:	86 e0       	ldi	r24, 0x06	; 6
    23e8:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_CheckStatusSendCmnd>
}
    23ec:	c4 5b       	subi	r28, 0xB4	; 180
    23ee:	df 4f       	sbci	r29, 0xFF	; 255
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	f8 94       	cli
    23f4:	de bf       	out	0x3e, r29	; 62
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	cd bf       	out	0x3d, r28	; 61
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	1f 91       	pop	r17
    2400:	0f 91       	pop	r16
    2402:	08 95       	ret

00002404 <LCD_CheckStatusSendCmnd>:
CheckStatus LCD_CheckStatusSendCmnd(_uint8 Copy__Uint8Cmnd)
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	e2 97       	sbiw	r28, 0x32	; 50
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	8a ab       	std	Y+50, r24	; 0x32
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    241a:	19 aa       	std	Y+49, r1	; 0x31
         3-Send CMND byte  to the Data Pins of LCD
         4-PULSE of Enable E = 1 ,E = 0
        */
        if (Copy__Uint8Cmnd <= 255)
        {
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_LOW);
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	40 e0       	ldi	r20, 0x00	; 0
    2422:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, Copy__Uint8Cmnd);
    2430:	83 e0       	ldi	r24, 0x03	; 3
    2432:	6a a9       	ldd	r22, Y+50	; 0x32
    2434:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	62 e0       	ldi	r22, 0x02	; 2
    243c:	41 e0       	ldi	r20, 0x01	; 1
    243e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	a0 e8       	ldi	r26, 0x80	; 128
    2448:	bf e3       	ldi	r27, 0x3F	; 63
    244a:	8d a7       	std	Y+45, r24	; 0x2d
    244c:	9e a7       	std	Y+46, r25	; 0x2e
    244e:	af a7       	std	Y+47, r26	; 0x2f
    2450:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2452:	6d a5       	ldd	r22, Y+45	; 0x2d
    2454:	7e a5       	ldd	r23, Y+46	; 0x2e
    2456:	8f a5       	ldd	r24, Y+47	; 0x2f
    2458:	98 a9       	ldd	r25, Y+48	; 0x30
    245a:	2b ea       	ldi	r18, 0xAB	; 171
    245c:	3a ea       	ldi	r19, 0xAA	; 170
    245e:	4a e2       	ldi	r20, 0x2A	; 42
    2460:	50 e4       	ldi	r21, 0x40	; 64
    2462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	89 a7       	std	Y+41, r24	; 0x29
    246c:	9a a7       	std	Y+42, r25	; 0x2a
    246e:	ab a7       	std	Y+43, r26	; 0x2b
    2470:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2472:	69 a5       	ldd	r22, Y+41	; 0x29
    2474:	7a a5       	ldd	r23, Y+42	; 0x2a
    2476:	8b a5       	ldd	r24, Y+43	; 0x2b
    2478:	9c a5       	ldd	r25, Y+44	; 0x2c
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e8       	ldi	r20, 0x80	; 128
    2480:	5f e3       	ldi	r21, 0x3F	; 63
    2482:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2486:	88 23       	and	r24, r24
    2488:	1c f4       	brge	.+6      	; 0x2490 <LCD_CheckStatusSendCmnd+0x8c>
		__ticks = 1;
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	88 a7       	std	Y+40, r24	; 0x28
    248e:	91 c0       	rjmp	.+290    	; 0x25b2 <LCD_CheckStatusSendCmnd+0x1ae>
	else if (__tmp > 255)
    2490:	69 a5       	ldd	r22, Y+41	; 0x29
    2492:	7a a5       	ldd	r23, Y+42	; 0x2a
    2494:	8b a5       	ldd	r24, Y+43	; 0x2b
    2496:	9c a5       	ldd	r25, Y+44	; 0x2c
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	4f e7       	ldi	r20, 0x7F	; 127
    249e:	53 e4       	ldi	r21, 0x43	; 67
    24a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24a4:	18 16       	cp	r1, r24
    24a6:	0c f0       	brlt	.+2      	; 0x24aa <LCD_CheckStatusSendCmnd+0xa6>
    24a8:	7b c0       	rjmp	.+246    	; 0x25a0 <LCD_CheckStatusSendCmnd+0x19c>
	{
		_delay_ms(__us / 1000.0);
    24aa:	6d a5       	ldd	r22, Y+45	; 0x2d
    24ac:	7e a5       	ldd	r23, Y+46	; 0x2e
    24ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    24b0:	98 a9       	ldd	r25, Y+48	; 0x30
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	4a e7       	ldi	r20, 0x7A	; 122
    24b8:	54 e4       	ldi	r21, 0x44	; 68
    24ba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	8c a3       	std	Y+36, r24	; 0x24
    24c4:	9d a3       	std	Y+37, r25	; 0x25
    24c6:	ae a3       	std	Y+38, r26	; 0x26
    24c8:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ca:	6c a1       	ldd	r22, Y+36	; 0x24
    24cc:	7d a1       	ldd	r23, Y+37	; 0x25
    24ce:	8e a1       	ldd	r24, Y+38	; 0x26
    24d0:	9f a1       	ldd	r25, Y+39	; 0x27
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	4a ef       	ldi	r20, 0xFA	; 250
    24d8:	54 e4       	ldi	r21, 0x44	; 68
    24da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	88 a3       	std	Y+32, r24	; 0x20
    24e4:	99 a3       	std	Y+33, r25	; 0x21
    24e6:	aa a3       	std	Y+34, r26	; 0x22
    24e8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    24ea:	68 a1       	ldd	r22, Y+32	; 0x20
    24ec:	79 a1       	ldd	r23, Y+33	; 0x21
    24ee:	8a a1       	ldd	r24, Y+34	; 0x22
    24f0:	9b a1       	ldd	r25, Y+35	; 0x23
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e8       	ldi	r20, 0x80	; 128
    24f8:	5f e3       	ldi	r21, 0x3F	; 63
    24fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24fe:	88 23       	and	r24, r24
    2500:	2c f4       	brge	.+10     	; 0x250c <LCD_CheckStatusSendCmnd+0x108>
		__ticks = 1;
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	9f 8f       	std	Y+31, r25	; 0x1f
    2508:	8e 8f       	std	Y+30, r24	; 0x1e
    250a:	3f c0       	rjmp	.+126    	; 0x258a <LCD_CheckStatusSendCmnd+0x186>
	else if (__tmp > 65535)
    250c:	68 a1       	ldd	r22, Y+32	; 0x20
    250e:	79 a1       	ldd	r23, Y+33	; 0x21
    2510:	8a a1       	ldd	r24, Y+34	; 0x22
    2512:	9b a1       	ldd	r25, Y+35	; 0x23
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	3f ef       	ldi	r19, 0xFF	; 255
    2518:	4f e7       	ldi	r20, 0x7F	; 127
    251a:	57 e4       	ldi	r21, 0x47	; 71
    251c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2520:	18 16       	cp	r1, r24
    2522:	4c f5       	brge	.+82     	; 0x2576 <LCD_CheckStatusSendCmnd+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2524:	6c a1       	ldd	r22, Y+36	; 0x24
    2526:	7d a1       	ldd	r23, Y+37	; 0x25
    2528:	8e a1       	ldd	r24, Y+38	; 0x26
    252a:	9f a1       	ldd	r25, Y+39	; 0x27
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	40 e2       	ldi	r20, 0x20	; 32
    2532:	51 e4       	ldi	r21, 0x41	; 65
    2534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	bc 01       	movw	r22, r24
    253e:	cd 01       	movw	r24, r26
    2540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	9f 8f       	std	Y+31, r25	; 0x1f
    254a:	8e 8f       	std	Y+30, r24	; 0x1e
    254c:	0f c0       	rjmp	.+30     	; 0x256c <LCD_CheckStatusSendCmnd+0x168>
    254e:	88 ec       	ldi	r24, 0xC8	; 200
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	9d 8f       	std	Y+29, r25	; 0x1d
    2554:	8c 8f       	std	Y+28, r24	; 0x1c
    2556:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2558:	9d 8d       	ldd	r25, Y+29	; 0x1d
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	f1 f7       	brne	.-4      	; 0x255a <LCD_CheckStatusSendCmnd+0x156>
    255e:	9d 8f       	std	Y+29, r25	; 0x1d
    2560:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2562:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2564:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	9f 8f       	std	Y+31, r25	; 0x1f
    256a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    256c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    256e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	69 f7       	brne	.-38     	; 0x254e <LCD_CheckStatusSendCmnd+0x14a>
    2574:	24 c0       	rjmp	.+72     	; 0x25be <LCD_CheckStatusSendCmnd+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2576:	68 a1       	ldd	r22, Y+32	; 0x20
    2578:	79 a1       	ldd	r23, Y+33	; 0x21
    257a:	8a a1       	ldd	r24, Y+34	; 0x22
    257c:	9b a1       	ldd	r25, Y+35	; 0x23
    257e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	9f 8f       	std	Y+31, r25	; 0x1f
    2588:	8e 8f       	std	Y+30, r24	; 0x1e
    258a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    258c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    258e:	9b 8f       	std	Y+27, r25	; 0x1b
    2590:	8a 8f       	std	Y+26, r24	; 0x1a
    2592:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2594:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <LCD_CheckStatusSendCmnd+0x192>
    259a:	9b 8f       	std	Y+27, r25	; 0x1b
    259c:	8a 8f       	std	Y+26, r24	; 0x1a
    259e:	0f c0       	rjmp	.+30     	; 0x25be <LCD_CheckStatusSendCmnd+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25a0:	69 a5       	ldd	r22, Y+41	; 0x29
    25a2:	7a a5       	ldd	r23, Y+42	; 0x2a
    25a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    25a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    25a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	88 a7       	std	Y+40, r24	; 0x28
    25b2:	88 a5       	ldd	r24, Y+40	; 0x28
    25b4:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25b6:	89 8d       	ldd	r24, Y+25	; 0x19
    25b8:	8a 95       	dec	r24
    25ba:	f1 f7       	brne	.-4      	; 0x25b8 <LCD_CheckStatusSendCmnd+0x1b4>
    25bc:	89 8f       	std	Y+25, r24	; 0x19
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	62 e0       	ldi	r22, 0x02	; 2
    25c2:	40 e0       	ldi	r20, 0x00	; 0
    25c4:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	a0 e8       	ldi	r26, 0x80	; 128
    25ce:	bf e3       	ldi	r27, 0x3F	; 63
    25d0:	8d 8b       	std	Y+21, r24	; 0x15
    25d2:	9e 8b       	std	Y+22, r25	; 0x16
    25d4:	af 8b       	std	Y+23, r26	; 0x17
    25d6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25d8:	6d 89       	ldd	r22, Y+21	; 0x15
    25da:	7e 89       	ldd	r23, Y+22	; 0x16
    25dc:	8f 89       	ldd	r24, Y+23	; 0x17
    25de:	98 8d       	ldd	r25, Y+24	; 0x18
    25e0:	2b ea       	ldi	r18, 0xAB	; 171
    25e2:	3a ea       	ldi	r19, 0xAA	; 170
    25e4:	4a e2       	ldi	r20, 0x2A	; 42
    25e6:	50 e4       	ldi	r21, 0x40	; 64
    25e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	89 8b       	std	Y+17, r24	; 0x11
    25f2:	9a 8b       	std	Y+18, r25	; 0x12
    25f4:	ab 8b       	std	Y+19, r26	; 0x13
    25f6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    25f8:	69 89       	ldd	r22, Y+17	; 0x11
    25fa:	7a 89       	ldd	r23, Y+18	; 0x12
    25fc:	8b 89       	ldd	r24, Y+19	; 0x13
    25fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e8       	ldi	r20, 0x80	; 128
    2606:	5f e3       	ldi	r21, 0x3F	; 63
    2608:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    260c:	88 23       	and	r24, r24
    260e:	1c f4       	brge	.+6      	; 0x2616 <LCD_CheckStatusSendCmnd+0x212>
		__ticks = 1;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	88 8b       	std	Y+16, r24	; 0x10
    2614:	91 c0       	rjmp	.+290    	; 0x2738 <LCD_CheckStatusSendCmnd+0x334>
	else if (__tmp > 255)
    2616:	69 89       	ldd	r22, Y+17	; 0x11
    2618:	7a 89       	ldd	r23, Y+18	; 0x12
    261a:	8b 89       	ldd	r24, Y+19	; 0x13
    261c:	9c 89       	ldd	r25, Y+20	; 0x14
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	4f e7       	ldi	r20, 0x7F	; 127
    2624:	53 e4       	ldi	r21, 0x43	; 67
    2626:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    262a:	18 16       	cp	r1, r24
    262c:	0c f0       	brlt	.+2      	; 0x2630 <LCD_CheckStatusSendCmnd+0x22c>
    262e:	7b c0       	rjmp	.+246    	; 0x2726 <LCD_CheckStatusSendCmnd+0x322>
	{
		_delay_ms(__us / 1000.0);
    2630:	6d 89       	ldd	r22, Y+21	; 0x15
    2632:	7e 89       	ldd	r23, Y+22	; 0x16
    2634:	8f 89       	ldd	r24, Y+23	; 0x17
    2636:	98 8d       	ldd	r25, Y+24	; 0x18
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	4a e7       	ldi	r20, 0x7A	; 122
    263e:	54 e4       	ldi	r21, 0x44	; 68
    2640:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	8c 87       	std	Y+12, r24	; 0x0c
    264a:	9d 87       	std	Y+13, r25	; 0x0d
    264c:	ae 87       	std	Y+14, r26	; 0x0e
    264e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2650:	6c 85       	ldd	r22, Y+12	; 0x0c
    2652:	7d 85       	ldd	r23, Y+13	; 0x0d
    2654:	8e 85       	ldd	r24, Y+14	; 0x0e
    2656:	9f 85       	ldd	r25, Y+15	; 0x0f
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	4a ef       	ldi	r20, 0xFA	; 250
    265e:	54 e4       	ldi	r21, 0x44	; 68
    2660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	88 87       	std	Y+8, r24	; 0x08
    266a:	99 87       	std	Y+9, r25	; 0x09
    266c:	aa 87       	std	Y+10, r26	; 0x0a
    266e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2670:	68 85       	ldd	r22, Y+8	; 0x08
    2672:	79 85       	ldd	r23, Y+9	; 0x09
    2674:	8a 85       	ldd	r24, Y+10	; 0x0a
    2676:	9b 85       	ldd	r25, Y+11	; 0x0b
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e8       	ldi	r20, 0x80	; 128
    267e:	5f e3       	ldi	r21, 0x3F	; 63
    2680:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2684:	88 23       	and	r24, r24
    2686:	2c f4       	brge	.+10     	; 0x2692 <LCD_CheckStatusSendCmnd+0x28e>
		__ticks = 1;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	9f 83       	std	Y+7, r25	; 0x07
    268e:	8e 83       	std	Y+6, r24	; 0x06
    2690:	3f c0       	rjmp	.+126    	; 0x2710 <LCD_CheckStatusSendCmnd+0x30c>
	else if (__tmp > 65535)
    2692:	68 85       	ldd	r22, Y+8	; 0x08
    2694:	79 85       	ldd	r23, Y+9	; 0x09
    2696:	8a 85       	ldd	r24, Y+10	; 0x0a
    2698:	9b 85       	ldd	r25, Y+11	; 0x0b
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	3f ef       	ldi	r19, 0xFF	; 255
    269e:	4f e7       	ldi	r20, 0x7F	; 127
    26a0:	57 e4       	ldi	r21, 0x47	; 71
    26a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26a6:	18 16       	cp	r1, r24
    26a8:	4c f5       	brge	.+82     	; 0x26fc <LCD_CheckStatusSendCmnd+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    26ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    26ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    26b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e2       	ldi	r20, 0x20	; 32
    26b8:	51 e4       	ldi	r21, 0x41	; 65
    26ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	bc 01       	movw	r22, r24
    26c4:	cd 01       	movw	r24, r26
    26c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	9f 83       	std	Y+7, r25	; 0x07
    26d0:	8e 83       	std	Y+6, r24	; 0x06
    26d2:	0f c0       	rjmp	.+30     	; 0x26f2 <LCD_CheckStatusSendCmnd+0x2ee>
    26d4:	88 ec       	ldi	r24, 0xC8	; 200
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	9d 83       	std	Y+5, r25	; 0x05
    26da:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26dc:	8c 81       	ldd	r24, Y+4	; 0x04
    26de:	9d 81       	ldd	r25, Y+5	; 0x05
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <LCD_CheckStatusSendCmnd+0x2dc>
    26e4:	9d 83       	std	Y+5, r25	; 0x05
    26e6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e8:	8e 81       	ldd	r24, Y+6	; 0x06
    26ea:	9f 81       	ldd	r25, Y+7	; 0x07
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	9f 83       	std	Y+7, r25	; 0x07
    26f0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f2:	8e 81       	ldd	r24, Y+6	; 0x06
    26f4:	9f 81       	ldd	r25, Y+7	; 0x07
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	69 f7       	brne	.-38     	; 0x26d4 <LCD_CheckStatusSendCmnd+0x2d0>
    26fa:	24 c0       	rjmp	.+72     	; 0x2744 <LCD_CheckStatusSendCmnd+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fc:	68 85       	ldd	r22, Y+8	; 0x08
    26fe:	79 85       	ldd	r23, Y+9	; 0x09
    2700:	8a 85       	ldd	r24, Y+10	; 0x0a
    2702:	9b 85       	ldd	r25, Y+11	; 0x0b
    2704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	9f 83       	std	Y+7, r25	; 0x07
    270e:	8e 83       	std	Y+6, r24	; 0x06
    2710:	8e 81       	ldd	r24, Y+6	; 0x06
    2712:	9f 81       	ldd	r25, Y+7	; 0x07
    2714:	9b 83       	std	Y+3, r25	; 0x03
    2716:	8a 83       	std	Y+2, r24	; 0x02
    2718:	8a 81       	ldd	r24, Y+2	; 0x02
    271a:	9b 81       	ldd	r25, Y+3	; 0x03
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	f1 f7       	brne	.-4      	; 0x271c <LCD_CheckStatusSendCmnd+0x318>
    2720:	9b 83       	std	Y+3, r25	; 0x03
    2722:	8a 83       	std	Y+2, r24	; 0x02
    2724:	0f c0       	rjmp	.+30     	; 0x2744 <LCD_CheckStatusSendCmnd+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2726:	69 89       	ldd	r22, Y+17	; 0x11
    2728:	7a 89       	ldd	r23, Y+18	; 0x12
    272a:	8b 89       	ldd	r24, Y+19	; 0x13
    272c:	9c 89       	ldd	r25, Y+20	; 0x14
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	88 8b       	std	Y+16, r24	; 0x10
    2738:	88 89       	ldd	r24, Y+16	; 0x10
    273a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	8a 95       	dec	r24
    2740:	f1 f7       	brne	.-4      	; 0x273e <LCD_CheckStatusSendCmnd+0x33a>
    2742:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    2744:	89 a9       	ldd	r24, Y+49	; 0x31
}
    2746:	e2 96       	adiw	r28, 0x32	; 50
    2748:	0f b6       	in	r0, 0x3f	; 63
    274a:	f8 94       	cli
    274c:	de bf       	out	0x3e, r29	; 62
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	cd bf       	out	0x3d, r28	; 61
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	08 95       	ret

00002758 <LCD_CheckStatusSendChar>:
CheckStatus LCD_CheckStatusSendChar(_uint8 Copy__Uint8Char)
{
    2758:	df 93       	push	r29
    275a:	cf 93       	push	r28
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
    2760:	e2 97       	sbiw	r28, 0x32	; 50
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	f8 94       	cli
    2766:	de bf       	out	0x3e, r29	; 62
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	cd bf       	out	0x3d, r28	; 61
    276c:	8a ab       	std	Y+50, r24	; 0x32
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    276e:	19 aa       	std	Y+49, r1	; 0x31
         3-Send CMND byte  to the Data Pins of LCD
         4-PULSE of Enable E = 1 ,E = 0
        */
        if (Copy__Uint8Char <= 255)
        {
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_HIGH);
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	41 e0       	ldi	r20, 0x01	; 1
    2776:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	61 e0       	ldi	r22, 0x01	; 1
    277e:	40 e0       	ldi	r20, 0x00	; 0
    2780:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, Copy__Uint8Char);
    2784:	83 e0       	ldi	r24, 0x03	; 3
    2786:	6a a9       	ldd	r22, Y+50	; 0x32
    2788:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	62 e0       	ldi	r22, 0x02	; 2
    2790:	41 e0       	ldi	r20, 0x01	; 1
    2792:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	a0 e8       	ldi	r26, 0x80	; 128
    279c:	bf e3       	ldi	r27, 0x3F	; 63
    279e:	8d a7       	std	Y+45, r24	; 0x2d
    27a0:	9e a7       	std	Y+46, r25	; 0x2e
    27a2:	af a7       	std	Y+47, r26	; 0x2f
    27a4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27a6:	6d a5       	ldd	r22, Y+45	; 0x2d
    27a8:	7e a5       	ldd	r23, Y+46	; 0x2e
    27aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ac:	98 a9       	ldd	r25, Y+48	; 0x30
    27ae:	2b ea       	ldi	r18, 0xAB	; 171
    27b0:	3a ea       	ldi	r19, 0xAA	; 170
    27b2:	4a e2       	ldi	r20, 0x2A	; 42
    27b4:	50 e4       	ldi	r21, 0x40	; 64
    27b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	89 a7       	std	Y+41, r24	; 0x29
    27c0:	9a a7       	std	Y+42, r25	; 0x2a
    27c2:	ab a7       	std	Y+43, r26	; 0x2b
    27c4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    27c6:	69 a5       	ldd	r22, Y+41	; 0x29
    27c8:	7a a5       	ldd	r23, Y+42	; 0x2a
    27ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    27cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e8       	ldi	r20, 0x80	; 128
    27d4:	5f e3       	ldi	r21, 0x3F	; 63
    27d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27da:	88 23       	and	r24, r24
    27dc:	1c f4       	brge	.+6      	; 0x27e4 <LCD_CheckStatusSendChar+0x8c>
		__ticks = 1;
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	88 a7       	std	Y+40, r24	; 0x28
    27e2:	91 c0       	rjmp	.+290    	; 0x2906 <LCD_CheckStatusSendChar+0x1ae>
	else if (__tmp > 255)
    27e4:	69 a5       	ldd	r22, Y+41	; 0x29
    27e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    27e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    27ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	4f e7       	ldi	r20, 0x7F	; 127
    27f2:	53 e4       	ldi	r21, 0x43	; 67
    27f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27f8:	18 16       	cp	r1, r24
    27fa:	0c f0       	brlt	.+2      	; 0x27fe <LCD_CheckStatusSendChar+0xa6>
    27fc:	7b c0       	rjmp	.+246    	; 0x28f4 <LCD_CheckStatusSendChar+0x19c>
	{
		_delay_ms(__us / 1000.0);
    27fe:	6d a5       	ldd	r22, Y+45	; 0x2d
    2800:	7e a5       	ldd	r23, Y+46	; 0x2e
    2802:	8f a5       	ldd	r24, Y+47	; 0x2f
    2804:	98 a9       	ldd	r25, Y+48	; 0x30
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	4a e7       	ldi	r20, 0x7A	; 122
    280c:	54 e4       	ldi	r21, 0x44	; 68
    280e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	8c a3       	std	Y+36, r24	; 0x24
    2818:	9d a3       	std	Y+37, r25	; 0x25
    281a:	ae a3       	std	Y+38, r26	; 0x26
    281c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281e:	6c a1       	ldd	r22, Y+36	; 0x24
    2820:	7d a1       	ldd	r23, Y+37	; 0x25
    2822:	8e a1       	ldd	r24, Y+38	; 0x26
    2824:	9f a1       	ldd	r25, Y+39	; 0x27
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	4a ef       	ldi	r20, 0xFA	; 250
    282c:	54 e4       	ldi	r21, 0x44	; 68
    282e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	88 a3       	std	Y+32, r24	; 0x20
    2838:	99 a3       	std	Y+33, r25	; 0x21
    283a:	aa a3       	std	Y+34, r26	; 0x22
    283c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    283e:	68 a1       	ldd	r22, Y+32	; 0x20
    2840:	79 a1       	ldd	r23, Y+33	; 0x21
    2842:	8a a1       	ldd	r24, Y+34	; 0x22
    2844:	9b a1       	ldd	r25, Y+35	; 0x23
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	40 e8       	ldi	r20, 0x80	; 128
    284c:	5f e3       	ldi	r21, 0x3F	; 63
    284e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2852:	88 23       	and	r24, r24
    2854:	2c f4       	brge	.+10     	; 0x2860 <LCD_CheckStatusSendChar+0x108>
		__ticks = 1;
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	9f 8f       	std	Y+31, r25	; 0x1f
    285c:	8e 8f       	std	Y+30, r24	; 0x1e
    285e:	3f c0       	rjmp	.+126    	; 0x28de <LCD_CheckStatusSendChar+0x186>
	else if (__tmp > 65535)
    2860:	68 a1       	ldd	r22, Y+32	; 0x20
    2862:	79 a1       	ldd	r23, Y+33	; 0x21
    2864:	8a a1       	ldd	r24, Y+34	; 0x22
    2866:	9b a1       	ldd	r25, Y+35	; 0x23
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	3f ef       	ldi	r19, 0xFF	; 255
    286c:	4f e7       	ldi	r20, 0x7F	; 127
    286e:	57 e4       	ldi	r21, 0x47	; 71
    2870:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2874:	18 16       	cp	r1, r24
    2876:	4c f5       	brge	.+82     	; 0x28ca <LCD_CheckStatusSendChar+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2878:	6c a1       	ldd	r22, Y+36	; 0x24
    287a:	7d a1       	ldd	r23, Y+37	; 0x25
    287c:	8e a1       	ldd	r24, Y+38	; 0x26
    287e:	9f a1       	ldd	r25, Y+39	; 0x27
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	40 e2       	ldi	r20, 0x20	; 32
    2886:	51 e4       	ldi	r21, 0x41	; 65
    2888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	bc 01       	movw	r22, r24
    2892:	cd 01       	movw	r24, r26
    2894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	9f 8f       	std	Y+31, r25	; 0x1f
    289e:	8e 8f       	std	Y+30, r24	; 0x1e
    28a0:	0f c0       	rjmp	.+30     	; 0x28c0 <LCD_CheckStatusSendChar+0x168>
    28a2:	88 ec       	ldi	r24, 0xC8	; 200
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	9d 8f       	std	Y+29, r25	; 0x1d
    28a8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    28ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <LCD_CheckStatusSendChar+0x156>
    28b2:	9d 8f       	std	Y+29, r25	; 0x1d
    28b4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	9f 8f       	std	Y+31, r25	; 0x1f
    28be:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28c2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    28c4:	00 97       	sbiw	r24, 0x00	; 0
    28c6:	69 f7       	brne	.-38     	; 0x28a2 <LCD_CheckStatusSendChar+0x14a>
    28c8:	24 c0       	rjmp	.+72     	; 0x2912 <LCD_CheckStatusSendChar+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ca:	68 a1       	ldd	r22, Y+32	; 0x20
    28cc:	79 a1       	ldd	r23, Y+33	; 0x21
    28ce:	8a a1       	ldd	r24, Y+34	; 0x22
    28d0:	9b a1       	ldd	r25, Y+35	; 0x23
    28d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	9f 8f       	std	Y+31, r25	; 0x1f
    28dc:	8e 8f       	std	Y+30, r24	; 0x1e
    28de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    28e2:	9b 8f       	std	Y+27, r25	; 0x1b
    28e4:	8a 8f       	std	Y+26, r24	; 0x1a
    28e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <LCD_CheckStatusSendChar+0x192>
    28ee:	9b 8f       	std	Y+27, r25	; 0x1b
    28f0:	8a 8f       	std	Y+26, r24	; 0x1a
    28f2:	0f c0       	rjmp	.+30     	; 0x2912 <LCD_CheckStatusSendChar+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28f4:	69 a5       	ldd	r22, Y+41	; 0x29
    28f6:	7a a5       	ldd	r23, Y+42	; 0x2a
    28f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    28fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    28fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	88 a7       	std	Y+40, r24	; 0x28
    2906:	88 a5       	ldd	r24, Y+40	; 0x28
    2908:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    290a:	89 8d       	ldd	r24, Y+25	; 0x19
    290c:	8a 95       	dec	r24
    290e:	f1 f7       	brne	.-4      	; 0x290c <LCD_CheckStatusSendChar+0x1b4>
    2910:	89 8f       	std	Y+25, r24	; 0x19
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	62 e0       	ldi	r22, 0x02	; 2
    2916:	40 e0       	ldi	r20, 0x00	; 0
    2918:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	a0 e8       	ldi	r26, 0x80	; 128
    2922:	bf e3       	ldi	r27, 0x3F	; 63
    2924:	8d 8b       	std	Y+21, r24	; 0x15
    2926:	9e 8b       	std	Y+22, r25	; 0x16
    2928:	af 8b       	std	Y+23, r26	; 0x17
    292a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    292c:	6d 89       	ldd	r22, Y+21	; 0x15
    292e:	7e 89       	ldd	r23, Y+22	; 0x16
    2930:	8f 89       	ldd	r24, Y+23	; 0x17
    2932:	98 8d       	ldd	r25, Y+24	; 0x18
    2934:	2b ea       	ldi	r18, 0xAB	; 171
    2936:	3a ea       	ldi	r19, 0xAA	; 170
    2938:	4a e2       	ldi	r20, 0x2A	; 42
    293a:	50 e4       	ldi	r21, 0x40	; 64
    293c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	89 8b       	std	Y+17, r24	; 0x11
    2946:	9a 8b       	std	Y+18, r25	; 0x12
    2948:	ab 8b       	std	Y+19, r26	; 0x13
    294a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    294c:	69 89       	ldd	r22, Y+17	; 0x11
    294e:	7a 89       	ldd	r23, Y+18	; 0x12
    2950:	8b 89       	ldd	r24, Y+19	; 0x13
    2952:	9c 89       	ldd	r25, Y+20	; 0x14
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e8       	ldi	r20, 0x80	; 128
    295a:	5f e3       	ldi	r21, 0x3F	; 63
    295c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2960:	88 23       	and	r24, r24
    2962:	1c f4       	brge	.+6      	; 0x296a <LCD_CheckStatusSendChar+0x212>
		__ticks = 1;
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	88 8b       	std	Y+16, r24	; 0x10
    2968:	91 c0       	rjmp	.+290    	; 0x2a8c <LCD_CheckStatusSendChar+0x334>
	else if (__tmp > 255)
    296a:	69 89       	ldd	r22, Y+17	; 0x11
    296c:	7a 89       	ldd	r23, Y+18	; 0x12
    296e:	8b 89       	ldd	r24, Y+19	; 0x13
    2970:	9c 89       	ldd	r25, Y+20	; 0x14
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	4f e7       	ldi	r20, 0x7F	; 127
    2978:	53 e4       	ldi	r21, 0x43	; 67
    297a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    297e:	18 16       	cp	r1, r24
    2980:	0c f0       	brlt	.+2      	; 0x2984 <LCD_CheckStatusSendChar+0x22c>
    2982:	7b c0       	rjmp	.+246    	; 0x2a7a <LCD_CheckStatusSendChar+0x322>
	{
		_delay_ms(__us / 1000.0);
    2984:	6d 89       	ldd	r22, Y+21	; 0x15
    2986:	7e 89       	ldd	r23, Y+22	; 0x16
    2988:	8f 89       	ldd	r24, Y+23	; 0x17
    298a:	98 8d       	ldd	r25, Y+24	; 0x18
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	4a e7       	ldi	r20, 0x7A	; 122
    2992:	54 e4       	ldi	r21, 0x44	; 68
    2994:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	8c 87       	std	Y+12, r24	; 0x0c
    299e:	9d 87       	std	Y+13, r25	; 0x0d
    29a0:	ae 87       	std	Y+14, r26	; 0x0e
    29a2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    29a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    29a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    29aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	4a ef       	ldi	r20, 0xFA	; 250
    29b2:	54 e4       	ldi	r21, 0x44	; 68
    29b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	88 87       	std	Y+8, r24	; 0x08
    29be:	99 87       	std	Y+9, r25	; 0x09
    29c0:	aa 87       	std	Y+10, r26	; 0x0a
    29c2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    29c4:	68 85       	ldd	r22, Y+8	; 0x08
    29c6:	79 85       	ldd	r23, Y+9	; 0x09
    29c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    29ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e8       	ldi	r20, 0x80	; 128
    29d2:	5f e3       	ldi	r21, 0x3F	; 63
    29d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29d8:	88 23       	and	r24, r24
    29da:	2c f4       	brge	.+10     	; 0x29e6 <LCD_CheckStatusSendChar+0x28e>
		__ticks = 1;
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	9f 83       	std	Y+7, r25	; 0x07
    29e2:	8e 83       	std	Y+6, r24	; 0x06
    29e4:	3f c0       	rjmp	.+126    	; 0x2a64 <LCD_CheckStatusSendChar+0x30c>
	else if (__tmp > 65535)
    29e6:	68 85       	ldd	r22, Y+8	; 0x08
    29e8:	79 85       	ldd	r23, Y+9	; 0x09
    29ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    29ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	3f ef       	ldi	r19, 0xFF	; 255
    29f2:	4f e7       	ldi	r20, 0x7F	; 127
    29f4:	57 e4       	ldi	r21, 0x47	; 71
    29f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29fa:	18 16       	cp	r1, r24
    29fc:	4c f5       	brge	.+82     	; 0x2a50 <LCD_CheckStatusSendChar+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a00:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a02:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a04:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e2       	ldi	r20, 0x20	; 32
    2a0c:	51 e4       	ldi	r21, 0x41	; 65
    2a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	bc 01       	movw	r22, r24
    2a18:	cd 01       	movw	r24, r26
    2a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	9f 83       	std	Y+7, r25	; 0x07
    2a24:	8e 83       	std	Y+6, r24	; 0x06
    2a26:	0f c0       	rjmp	.+30     	; 0x2a46 <LCD_CheckStatusSendChar+0x2ee>
    2a28:	88 ec       	ldi	r24, 0xC8	; 200
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	9d 83       	std	Y+5, r25	; 0x05
    2a2e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a30:	8c 81       	ldd	r24, Y+4	; 0x04
    2a32:	9d 81       	ldd	r25, Y+5	; 0x05
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <LCD_CheckStatusSendChar+0x2dc>
    2a38:	9d 83       	std	Y+5, r25	; 0x05
    2a3a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a3e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	9f 83       	std	Y+7, r25	; 0x07
    2a44:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a46:	8e 81       	ldd	r24, Y+6	; 0x06
    2a48:	9f 81       	ldd	r25, Y+7	; 0x07
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	69 f7       	brne	.-38     	; 0x2a28 <LCD_CheckStatusSendChar+0x2d0>
    2a4e:	24 c0       	rjmp	.+72     	; 0x2a98 <LCD_CheckStatusSendChar+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a50:	68 85       	ldd	r22, Y+8	; 0x08
    2a52:	79 85       	ldd	r23, Y+9	; 0x09
    2a54:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a56:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	9f 83       	std	Y+7, r25	; 0x07
    2a62:	8e 83       	std	Y+6, r24	; 0x06
    2a64:	8e 81       	ldd	r24, Y+6	; 0x06
    2a66:	9f 81       	ldd	r25, Y+7	; 0x07
    2a68:	9b 83       	std	Y+3, r25	; 0x03
    2a6a:	8a 83       	std	Y+2, r24	; 0x02
    2a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	f1 f7       	brne	.-4      	; 0x2a70 <LCD_CheckStatusSendChar+0x318>
    2a74:	9b 83       	std	Y+3, r25	; 0x03
    2a76:	8a 83       	std	Y+2, r24	; 0x02
    2a78:	0f c0       	rjmp	.+30     	; 0x2a98 <LCD_CheckStatusSendChar+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a7a:	69 89       	ldd	r22, Y+17	; 0x11
    2a7c:	7a 89       	ldd	r23, Y+18	; 0x12
    2a7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a80:	9c 89       	ldd	r25, Y+20	; 0x14
    2a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	88 8b       	std	Y+16, r24	; 0x10
    2a8c:	88 89       	ldd	r24, Y+16	; 0x10
    2a8e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	8a 95       	dec	r24
    2a94:	f1 f7       	brne	.-4      	; 0x2a92 <LCD_CheckStatusSendChar+0x33a>
    2a96:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    2a98:	89 a9       	ldd	r24, Y+49	; 0x31
}
    2a9a:	e2 96       	adiw	r28, 0x32	; 50
    2a9c:	0f b6       	in	r0, 0x3f	; 63
    2a9e:	f8 94       	cli
    2aa0:	de bf       	out	0x3e, r29	; 62
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	cd bf       	out	0x3d, r28	; 61
    2aa6:	cf 91       	pop	r28
    2aa8:	df 91       	pop	r29
    2aaa:	08 95       	ret

00002aac <LCD_CheckStatusWriteString>:

CheckStatus LCD_CheckStatusWriteString(_uint8 *Copy_p__Uint8String)
{
    2aac:	df 93       	push	r29
    2aae:	cf 93       	push	r28
    2ab0:	00 d0       	rcall	.+0      	; 0x2ab2 <LCD_CheckStatusWriteString+0x6>
    2ab2:	00 d0       	rcall	.+0      	; 0x2ab4 <LCD_CheckStatusWriteString+0x8>
    2ab4:	0f 92       	push	r0
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
    2aba:	9c 83       	std	Y+4, r25	; 0x04
    2abc:	8b 83       	std	Y+3, r24	; 0x03
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2abe:	1a 82       	std	Y+2, r1	; 0x02
        _uint8 Local__Uint8Index = DIO__UINT8_LOW;
    2ac0:	19 82       	std	Y+1, r1	; 0x01

        if (Copy_p__Uint8String != NULL)
    2ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac6:	00 97       	sbiw	r24, 0x00	; 0
    2ac8:	f1 f0       	breq	.+60     	; 0x2b06 <LCD_CheckStatusWriteString+0x5a>
        {
                for (Local__Uint8Index = DIO__UINT8_LOW; *(Copy_p__Uint8String + Local__Uint8Index) != '\0'; ++Local__Uint8Index)
    2aca:	19 82       	std	Y+1, r1	; 0x01
    2acc:	0e c0       	rjmp	.+28     	; 0x2aea <LCD_CheckStatusWriteString+0x3e>
                {
                        LCD_CheckStatusSendChar4bit(*(Copy_p__Uint8String + Local__Uint8Index));
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	28 2f       	mov	r18, r24
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad8:	fc 01       	movw	r30, r24
    2ada:	e2 0f       	add	r30, r18
    2adc:	f3 1f       	adc	r31, r19
    2ade:	80 81       	ld	r24, Z
    2ae0:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
        _uint8 Local__Uint8Index = DIO__UINT8_LOW;

        if (Copy_p__Uint8String != NULL)
        {
                for (Local__Uint8Index = DIO__UINT8_LOW; *(Copy_p__Uint8String + Local__Uint8Index) != '\0'; ++Local__Uint8Index)
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	8f 5f       	subi	r24, 0xFF	; 255
    2ae8:	89 83       	std	Y+1, r24	; 0x01
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	28 2f       	mov	r18, r24
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	8b 81       	ldd	r24, Y+3	; 0x03
    2af2:	9c 81       	ldd	r25, Y+4	; 0x04
    2af4:	fc 01       	movw	r30, r24
    2af6:	e2 0f       	add	r30, r18
    2af8:	f3 1f       	adc	r31, r19
    2afa:	80 81       	ld	r24, Z
    2afc:	88 23       	and	r24, r24
    2afe:	39 f7       	brne	.-50     	; 0x2ace <LCD_CheckStatusWriteString+0x22>
                {
                        LCD_CheckStatusSendChar4bit(*(Copy_p__Uint8String + Local__Uint8Index));
                }

                return Local_CheckStausReturnValue;
    2b00:	8a 81       	ldd	r24, Y+2	; 0x02
    2b02:	8d 83       	std	Y+5, r24	; 0x05
    2b04:	04 c0       	rjmp	.+8      	; 0x2b0e <LCD_CheckStatusWriteString+0x62>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	8a 83       	std	Y+2, r24	; 0x02
                return Local_CheckStausReturnValue;
    2b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0c:	8d 83       	std	Y+5, r24	; 0x05
    2b0e:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    2b10:	0f 90       	pop	r0
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	08 95       	ret

00002b20 <LCD_CheckStatusGoToXY>:
CheckStatus LCD_CheckStatusGoToXY(_uint8 Copy__Uint8LineNumber, _uint8 Copy__Uint8LocationNumber)
{
    2b20:	df 93       	push	r29
    2b22:	cf 93       	push	r28
    2b24:	00 d0       	rcall	.+0      	; 0x2b26 <LCD_CheckStatusGoToXY+0x6>
    2b26:	00 d0       	rcall	.+0      	; 0x2b28 <LCD_CheckStatusGoToXY+0x8>
    2b28:	00 d0       	rcall	.+0      	; 0x2b2a <LCD_CheckStatusGoToXY+0xa>
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
    2b2e:	8a 83       	std	Y+2, r24	; 0x02
    2b30:	6b 83       	std	Y+3, r22	; 0x03

        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2b32:	19 82       	std	Y+1, r1	; 0x01

        if ((Copy__Uint8LineNumber <= 1) && (Copy__Uint8LocationNumber <= 39))
    2b34:	8a 81       	ldd	r24, Y+2	; 0x02
    2b36:	82 30       	cpi	r24, 0x02	; 2
    2b38:	f0 f4       	brcc	.+60     	; 0x2b76 <LCD_CheckStatusGoToXY+0x56>
    2b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3c:	88 32       	cpi	r24, 0x28	; 40
    2b3e:	d8 f4       	brcc	.+54     	; 0x2b76 <LCD_CheckStatusGoToXY+0x56>
        {

                switch (Copy__Uint8LineNumber)
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
    2b42:	28 2f       	mov	r18, r24
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	3e 83       	std	Y+6, r19	; 0x06
    2b48:	2d 83       	std	Y+5, r18	; 0x05
    2b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4e:	00 97       	sbiw	r24, 0x00	; 0
    2b50:	31 f0       	breq	.+12     	; 0x2b5e <LCD_CheckStatusGoToXY+0x3e>
    2b52:	2d 81       	ldd	r18, Y+5	; 0x05
    2b54:	3e 81       	ldd	r19, Y+6	; 0x06
    2b56:	21 30       	cpi	r18, 0x01	; 1
    2b58:	31 05       	cpc	r19, r1
    2b5a:	31 f0       	breq	.+12     	; 0x2b68 <LCD_CheckStatusGoToXY+0x48>
    2b5c:	09 c0       	rjmp	.+18     	; 0x2b70 <LCD_CheckStatusGoToXY+0x50>
                {
                case LCD__UINT8_LINE1:
                        LCD_CheckStatusSendCmnd4bit(0x80 + Copy__Uint8LocationNumber); //BASE +OFFSET
    2b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b60:	80 58       	subi	r24, 0x80	; 128
    2b62:	0e 94 72 21 	call	0x42e4	; 0x42e4 <LCD_CheckStatusSendCmnd4bit>
    2b66:	04 c0       	rjmp	.+8      	; 0x2b70 <LCD_CheckStatusGoToXY+0x50>
                        break;
                case LCD__UINT8_LINE2:
                        LCD_CheckStatusSendCmnd4bit(0xc0 + Copy__Uint8LocationNumber);
    2b68:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6a:	80 54       	subi	r24, 0x40	; 64
    2b6c:	0e 94 72 21 	call	0x42e4	; 0x42e4 <LCD_CheckStatusSendCmnd4bit>
                        break;
                default:
                        break;
                }
                return Local_CheckStausReturnValue;
    2b70:	39 81       	ldd	r19, Y+1	; 0x01
    2b72:	3c 83       	std	Y+4, r19	; 0x04
    2b74:	04 c0       	rjmp	.+8      	; 0x2b7e <LCD_CheckStatusGoToXY+0x5e>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStausReturnValue;
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
    2b7c:	8c 83       	std	Y+4, r24	; 0x04
    2b7e:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    2b80:	26 96       	adiw	r28, 0x06	; 6
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	f8 94       	cli
    2b86:	de bf       	out	0x3e, r29	; 62
    2b88:	0f be       	out	0x3f, r0	; 63
    2b8a:	cd bf       	out	0x3d, r28	; 61
    2b8c:	cf 91       	pop	r28
    2b8e:	df 91       	pop	r29
    2b90:	08 95       	ret

00002b92 <LCD_VoidClearDisplay>:

Void LCD_VoidClearDisplay(Void)
{
    2b92:	df 93       	push	r29
    2b94:	cf 93       	push	r28
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
    2b9a:	2e 97       	sbiw	r28, 0x0e	; 14
    2b9c:	0f b6       	in	r0, 0x3f	; 63
    2b9e:	f8 94       	cli
    2ba0:	de bf       	out	0x3e, r29	; 62
    2ba2:	0f be       	out	0x3f, r0	; 63
    2ba4:	cd bf       	out	0x3d, r28	; 61
        LCD_CheckStatusSendCmnd4bit(0x01);
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	0e 94 72 21 	call	0x42e4	; 0x42e4 <LCD_CheckStatusSendCmnd4bit>
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	a0 e0       	ldi	r26, 0x00	; 0
    2bb2:	b0 e4       	ldi	r27, 0x40	; 64
    2bb4:	8b 87       	std	Y+11, r24	; 0x0b
    2bb6:	9c 87       	std	Y+12, r25	; 0x0c
    2bb8:	ad 87       	std	Y+13, r26	; 0x0d
    2bba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	4a ef       	ldi	r20, 0xFA	; 250
    2bca:	54 e4       	ldi	r21, 0x44	; 68
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	8f 83       	std	Y+7, r24	; 0x07
    2bd6:	98 87       	std	Y+8, r25	; 0x08
    2bd8:	a9 87       	std	Y+9, r26	; 0x09
    2bda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bde:	78 85       	ldd	r23, Y+8	; 0x08
    2be0:	89 85       	ldd	r24, Y+9	; 0x09
    2be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e8       	ldi	r20, 0x80	; 128
    2bea:	5f e3       	ldi	r21, 0x3F	; 63
    2bec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bf0:	88 23       	and	r24, r24
    2bf2:	2c f4       	brge	.+10     	; 0x2bfe <LCD_VoidClearDisplay+0x6c>
		__ticks = 1;
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	9e 83       	std	Y+6, r25	; 0x06
    2bfa:	8d 83       	std	Y+5, r24	; 0x05
    2bfc:	3f c0       	rjmp	.+126    	; 0x2c7c <LCD_VoidClearDisplay+0xea>
	else if (__tmp > 65535)
    2bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2c00:	78 85       	ldd	r23, Y+8	; 0x08
    2c02:	89 85       	ldd	r24, Y+9	; 0x09
    2c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	3f ef       	ldi	r19, 0xFF	; 255
    2c0a:	4f e7       	ldi	r20, 0x7F	; 127
    2c0c:	57 e4       	ldi	r21, 0x47	; 71
    2c0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c12:	18 16       	cp	r1, r24
    2c14:	4c f5       	brge	.+82     	; 0x2c68 <LCD_VoidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	40 e2       	ldi	r20, 0x20	; 32
    2c24:	51 e4       	ldi	r21, 0x41	; 65
    2c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	9e 83       	std	Y+6, r25	; 0x06
    2c3c:	8d 83       	std	Y+5, r24	; 0x05
    2c3e:	0f c0       	rjmp	.+30     	; 0x2c5e <LCD_VoidClearDisplay+0xcc>
    2c40:	88 ec       	ldi	r24, 0xC8	; 200
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	9c 83       	std	Y+4, r25	; 0x04
    2c46:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c48:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <LCD_VoidClearDisplay+0xba>
    2c50:	9c 83       	std	Y+4, r25	; 0x04
    2c52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c54:	8d 81       	ldd	r24, Y+5	; 0x05
    2c56:	9e 81       	ldd	r25, Y+6	; 0x06
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	9e 83       	std	Y+6, r25	; 0x06
    2c5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c60:	9e 81       	ldd	r25, Y+6	; 0x06
    2c62:	00 97       	sbiw	r24, 0x00	; 0
    2c64:	69 f7       	brne	.-38     	; 0x2c40 <LCD_VoidClearDisplay+0xae>
    2c66:	14 c0       	rjmp	.+40     	; 0x2c90 <LCD_VoidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c68:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6a:	78 85       	ldd	r23, Y+8	; 0x08
    2c6c:	89 85       	ldd	r24, Y+9	; 0x09
    2c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	9e 83       	std	Y+6, r25	; 0x06
    2c7a:	8d 83       	std	Y+5, r24	; 0x05
    2c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c80:	9a 83       	std	Y+2, r25	; 0x02
    2c82:	89 83       	std	Y+1, r24	; 0x01
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	9a 81       	ldd	r25, Y+2	; 0x02
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	f1 f7       	brne	.-4      	; 0x2c88 <LCD_VoidClearDisplay+0xf6>
    2c8c:	9a 83       	std	Y+2, r25	; 0x02
    2c8e:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
}
    2c90:	2e 96       	adiw	r28, 0x0e	; 14
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	08 95       	ret

00002ca2 <LCD_CheckStatusSendNumber>:
CheckStatus LCD_CheckStatusSendNumber(_uint32 Copy__Uint32Number)
{
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	2d 97       	sbiw	r28, 0x0d	; 13
    2cac:	0f b6       	in	r0, 0x3f	; 63
    2cae:	f8 94       	cli
    2cb0:	de bf       	out	0x3e, r29	; 62
    2cb2:	0f be       	out	0x3f, r0	; 63
    2cb4:	cd bf       	out	0x3d, r28	; 61
    2cb6:	68 87       	std	Y+8, r22	; 0x08
    2cb8:	79 87       	std	Y+9, r23	; 0x09
    2cba:	8a 87       	std	Y+10, r24	; 0x0a
    2cbc:	9b 87       	std	Y+11, r25	; 0x0b
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2cbe:	1f 82       	std	Y+7, r1	; 0x07

        _uint8 Local__Uint8Remendier = 0x00;
    2cc0:	1e 82       	std	Y+6, r1	; 0x06
        _uint8 Local__Uint8Counter = 0x00;
    2cc2:	1d 82       	std	Y+5, r1	; 0x05
        _uint32 Local__Uint32Temporary = 0;
    2cc4:	19 82       	std	Y+1, r1	; 0x01
    2cc6:	1a 82       	std	Y+2, r1	; 0x02
    2cc8:	1b 82       	std	Y+3, r1	; 0x03
    2cca:	1c 82       	std	Y+4, r1	; 0x04
    2ccc:	40 c0       	rjmp	.+128    	; 0x2d4e <LCD_CheckStatusSendNumber+0xac>
        if (Copy__Uint32Number <= 4294967296)
        {
                while (Copy__Uint32Number != 0)
                {
                        Local__Uint32Temporary = Local__Uint32Temporary * 0x0A;
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd2:	ab 81       	ldd	r26, Y+3	; 0x03
    2cd4:	bc 81       	ldd	r27, Y+4	; 0x04
    2cd6:	2a e0       	ldi	r18, 0x0A	; 10
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	40 e0       	ldi	r20, 0x00	; 0
    2cdc:	50 e0       	ldi	r21, 0x00	; 0
    2cde:	bc 01       	movw	r22, r24
    2ce0:	cd 01       	movw	r24, r26
    2ce2:	0e 94 c0 28 	call	0x5180	; 0x5180 <__mulsi3>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	89 83       	std	Y+1, r24	; 0x01
    2cec:	9a 83       	std	Y+2, r25	; 0x02
    2cee:	ab 83       	std	Y+3, r26	; 0x03
    2cf0:	bc 83       	std	Y+4, r27	; 0x04
                        Local__Uint32Temporary = Local__Uint32Temporary + Copy__Uint32Number % 0x0A;
    2cf2:	88 85       	ldd	r24, Y+8	; 0x08
    2cf4:	99 85       	ldd	r25, Y+9	; 0x09
    2cf6:	aa 85       	ldd	r26, Y+10	; 0x0a
    2cf8:	bb 85       	ldd	r27, Y+11	; 0x0b
    2cfa:	2a e0       	ldi	r18, 0x0A	; 10
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	40 e0       	ldi	r20, 0x00	; 0
    2d00:	50 e0       	ldi	r21, 0x00	; 0
    2d02:	bc 01       	movw	r22, r24
    2d04:	cd 01       	movw	r24, r26
    2d06:	0e 94 df 28 	call	0x51be	; 0x51be <__udivmodsi4>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	9c 01       	movw	r18, r24
    2d10:	ad 01       	movw	r20, r26
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	9a 81       	ldd	r25, Y+2	; 0x02
    2d16:	ab 81       	ldd	r26, Y+3	; 0x03
    2d18:	bc 81       	ldd	r27, Y+4	; 0x04
    2d1a:	82 0f       	add	r24, r18
    2d1c:	93 1f       	adc	r25, r19
    2d1e:	a4 1f       	adc	r26, r20
    2d20:	b5 1f       	adc	r27, r21
    2d22:	89 83       	std	Y+1, r24	; 0x01
    2d24:	9a 83       	std	Y+2, r25	; 0x02
    2d26:	ab 83       	std	Y+3, r26	; 0x03
    2d28:	bc 83       	std	Y+4, r27	; 0x04
                        Copy__Uint32Number = Copy__Uint32Number / 0x0A;
    2d2a:	88 85       	ldd	r24, Y+8	; 0x08
    2d2c:	99 85       	ldd	r25, Y+9	; 0x09
    2d2e:	aa 85       	ldd	r26, Y+10	; 0x0a
    2d30:	bb 85       	ldd	r27, Y+11	; 0x0b
    2d32:	2a e0       	ldi	r18, 0x0A	; 10
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e0       	ldi	r20, 0x00	; 0
    2d38:	50 e0       	ldi	r21, 0x00	; 0
    2d3a:	bc 01       	movw	r22, r24
    2d3c:	cd 01       	movw	r24, r26
    2d3e:	0e 94 df 28 	call	0x51be	; 0x51be <__udivmodsi4>
    2d42:	da 01       	movw	r26, r20
    2d44:	c9 01       	movw	r24, r18
    2d46:	88 87       	std	Y+8, r24	; 0x08
    2d48:	99 87       	std	Y+9, r25	; 0x09
    2d4a:	aa 87       	std	Y+10, r26	; 0x0a
    2d4c:	bb 87       	std	Y+11, r27	; 0x0b
        _uint8 Local__Uint8Remendier = 0x00;
        _uint8 Local__Uint8Counter = 0x00;
        _uint32 Local__Uint32Temporary = 0;
        if (Copy__Uint32Number <= 4294967296)
        {
                while (Copy__Uint32Number != 0)
    2d4e:	88 85       	ldd	r24, Y+8	; 0x08
    2d50:	99 85       	ldd	r25, Y+9	; 0x09
    2d52:	aa 85       	ldd	r26, Y+10	; 0x0a
    2d54:	bb 85       	ldd	r27, Y+11	; 0x0b
    2d56:	00 97       	sbiw	r24, 0x00	; 0
    2d58:	a1 05       	cpc	r26, r1
    2d5a:	b1 05       	cpc	r27, r1
    2d5c:	09 f0       	breq	.+2      	; 0x2d60 <LCD_CheckStatusSendNumber+0xbe>
    2d5e:	b7 cf       	rjmp	.-146    	; 0x2cce <LCD_CheckStatusSendNumber+0x2c>
                        Local__Uint32Temporary = Local__Uint32Temporary * 0x0A;
                        Local__Uint32Temporary = Local__Uint32Temporary + Copy__Uint32Number % 0x0A;
                        Copy__Uint32Number = Copy__Uint32Number / 0x0A;
                }

                for (Local__Uint8Counter = 0; Local__Uint32Temporary != 0; ++Local__Uint8Counter)
    2d60:	1d 82       	std	Y+5, r1	; 0x05
    2d62:	95 c0       	rjmp	.+298    	; 0x2e8e <LCD_CheckStatusSendNumber+0x1ec>
                {
                        Local__Uint8Remendier = Local__Uint32Temporary % 0x0A;
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
    2d66:	9a 81       	ldd	r25, Y+2	; 0x02
    2d68:	ab 81       	ldd	r26, Y+3	; 0x03
    2d6a:	bc 81       	ldd	r27, Y+4	; 0x04
    2d6c:	2a e0       	ldi	r18, 0x0A	; 10
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	40 e0       	ldi	r20, 0x00	; 0
    2d72:	50 e0       	ldi	r21, 0x00	; 0
    2d74:	bc 01       	movw	r22, r24
    2d76:	cd 01       	movw	r24, r26
    2d78:	0e 94 df 28 	call	0x51be	; 0x51be <__udivmodsi4>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	8e 83       	std	Y+6, r24	; 0x06
                        Local__Uint32Temporary = Local__Uint32Temporary / 0x0A;
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
    2d86:	ab 81       	ldd	r26, Y+3	; 0x03
    2d88:	bc 81       	ldd	r27, Y+4	; 0x04
    2d8a:	2a e0       	ldi	r18, 0x0A	; 10
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e0       	ldi	r20, 0x00	; 0
    2d90:	50 e0       	ldi	r21, 0x00	; 0
    2d92:	bc 01       	movw	r22, r24
    2d94:	cd 01       	movw	r24, r26
    2d96:	0e 94 df 28 	call	0x51be	; 0x51be <__udivmodsi4>
    2d9a:	da 01       	movw	r26, r20
    2d9c:	c9 01       	movw	r24, r18
    2d9e:	89 83       	std	Y+1, r24	; 0x01
    2da0:	9a 83       	std	Y+2, r25	; 0x02
    2da2:	ab 83       	std	Y+3, r26	; 0x03
    2da4:	bc 83       	std	Y+4, r27	; 0x04
                        switch (Local__Uint8Remendier)
    2da6:	8e 81       	ldd	r24, Y+6	; 0x06
    2da8:	28 2f       	mov	r18, r24
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	3d 87       	std	Y+13, r19	; 0x0d
    2dae:	2c 87       	std	Y+12, r18	; 0x0c
    2db0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2db2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2db4:	84 30       	cpi	r24, 0x04	; 4
    2db6:	91 05       	cpc	r25, r1
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <LCD_CheckStatusSendNumber+0x11a>
    2dba:	4f c0       	rjmp	.+158    	; 0x2e5a <LCD_CheckStatusSendNumber+0x1b8>
    2dbc:	2c 85       	ldd	r18, Y+12	; 0x0c
    2dbe:	3d 85       	ldd	r19, Y+13	; 0x0d
    2dc0:	25 30       	cpi	r18, 0x05	; 5
    2dc2:	31 05       	cpc	r19, r1
    2dc4:	d4 f4       	brge	.+52     	; 0x2dfa <LCD_CheckStatusSendNumber+0x158>
    2dc6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dc8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dca:	81 30       	cpi	r24, 0x01	; 1
    2dcc:	91 05       	cpc	r25, r1
    2dce:	c9 f1       	breq	.+114    	; 0x2e42 <LCD_CheckStatusSendNumber+0x1a0>
    2dd0:	2c 85       	ldd	r18, Y+12	; 0x0c
    2dd2:	3d 85       	ldd	r19, Y+13	; 0x0d
    2dd4:	22 30       	cpi	r18, 0x02	; 2
    2dd6:	31 05       	cpc	r19, r1
    2dd8:	2c f4       	brge	.+10     	; 0x2de4 <LCD_CheckStatusSendNumber+0x142>
    2dda:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ddc:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	61 f1       	breq	.+88     	; 0x2e3a <LCD_CheckStatusSendNumber+0x198>
    2de2:	52 c0       	rjmp	.+164    	; 0x2e88 <LCD_CheckStatusSendNumber+0x1e6>
    2de4:	2c 85       	ldd	r18, Y+12	; 0x0c
    2de6:	3d 85       	ldd	r19, Y+13	; 0x0d
    2de8:	22 30       	cpi	r18, 0x02	; 2
    2dea:	31 05       	cpc	r19, r1
    2dec:	71 f1       	breq	.+92     	; 0x2e4a <LCD_CheckStatusSendNumber+0x1a8>
    2dee:	8c 85       	ldd	r24, Y+12	; 0x0c
    2df0:	9d 85       	ldd	r25, Y+13	; 0x0d
    2df2:	83 30       	cpi	r24, 0x03	; 3
    2df4:	91 05       	cpc	r25, r1
    2df6:	69 f1       	breq	.+90     	; 0x2e52 <LCD_CheckStatusSendNumber+0x1b0>
    2df8:	47 c0       	rjmp	.+142    	; 0x2e88 <LCD_CheckStatusSendNumber+0x1e6>
    2dfa:	2c 85       	ldd	r18, Y+12	; 0x0c
    2dfc:	3d 85       	ldd	r19, Y+13	; 0x0d
    2dfe:	27 30       	cpi	r18, 0x07	; 7
    2e00:	31 05       	cpc	r19, r1
    2e02:	b9 f1       	breq	.+110    	; 0x2e72 <LCD_CheckStatusSendNumber+0x1d0>
    2e04:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e06:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e08:	88 30       	cpi	r24, 0x08	; 8
    2e0a:	91 05       	cpc	r25, r1
    2e0c:	5c f4       	brge	.+22     	; 0x2e24 <LCD_CheckStatusSendNumber+0x182>
    2e0e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e10:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e12:	25 30       	cpi	r18, 0x05	; 5
    2e14:	31 05       	cpc	r19, r1
    2e16:	29 f1       	breq	.+74     	; 0x2e62 <LCD_CheckStatusSendNumber+0x1c0>
    2e18:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e1a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e1c:	86 30       	cpi	r24, 0x06	; 6
    2e1e:	91 05       	cpc	r25, r1
    2e20:	21 f1       	breq	.+72     	; 0x2e6a <LCD_CheckStatusSendNumber+0x1c8>
    2e22:	32 c0       	rjmp	.+100    	; 0x2e88 <LCD_CheckStatusSendNumber+0x1e6>
    2e24:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e26:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e28:	28 30       	cpi	r18, 0x08	; 8
    2e2a:	31 05       	cpc	r19, r1
    2e2c:	31 f1       	breq	.+76     	; 0x2e7a <LCD_CheckStatusSendNumber+0x1d8>
    2e2e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e30:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e32:	89 30       	cpi	r24, 0x09	; 9
    2e34:	91 05       	cpc	r25, r1
    2e36:	29 f1       	breq	.+74     	; 0x2e82 <LCD_CheckStatusSendNumber+0x1e0>
    2e38:	27 c0       	rjmp	.+78     	; 0x2e88 <LCD_CheckStatusSendNumber+0x1e6>
                        {
                        case 0:
                                LCD_CheckStatusSendChar4bit('0');
    2e3a:	80 e3       	ldi	r24, 0x30	; 48
    2e3c:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
    2e40:	23 c0       	rjmp	.+70     	; 0x2e88 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 1:
                                LCD_CheckStatusSendChar4bit('1');
    2e42:	81 e3       	ldi	r24, 0x31	; 49
    2e44:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
    2e48:	1f c0       	rjmp	.+62     	; 0x2e88 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 2:
                                LCD_CheckStatusSendChar4bit('2');
    2e4a:	82 e3       	ldi	r24, 0x32	; 50
    2e4c:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
    2e50:	1b c0       	rjmp	.+54     	; 0x2e88 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 3:
                                LCD_CheckStatusSendChar4bit('3');
    2e52:	83 e3       	ldi	r24, 0x33	; 51
    2e54:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
    2e58:	17 c0       	rjmp	.+46     	; 0x2e88 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 4:
                                LCD_CheckStatusSendChar4bit('4');
    2e5a:	84 e3       	ldi	r24, 0x34	; 52
    2e5c:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
    2e60:	13 c0       	rjmp	.+38     	; 0x2e88 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 5:
                                LCD_CheckStatusSendChar4bit('5');
    2e62:	85 e3       	ldi	r24, 0x35	; 53
    2e64:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
    2e68:	0f c0       	rjmp	.+30     	; 0x2e88 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 6:
                                LCD_CheckStatusSendChar4bit('6');
    2e6a:	86 e3       	ldi	r24, 0x36	; 54
    2e6c:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
    2e70:	0b c0       	rjmp	.+22     	; 0x2e88 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 7:
                                LCD_CheckStatusSendChar4bit('7');
    2e72:	87 e3       	ldi	r24, 0x37	; 55
    2e74:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
    2e78:	07 c0       	rjmp	.+14     	; 0x2e88 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 8:
                                LCD_CheckStatusSendChar4bit('8');
    2e7a:	88 e3       	ldi	r24, 0x38	; 56
    2e7c:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
    2e80:	03 c0       	rjmp	.+6      	; 0x2e88 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 9:
                                LCD_CheckStatusSendChar4bit('9');
    2e82:	89 e3       	ldi	r24, 0x39	; 57
    2e84:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
                        Local__Uint32Temporary = Local__Uint32Temporary * 0x0A;
                        Local__Uint32Temporary = Local__Uint32Temporary + Copy__Uint32Number % 0x0A;
                        Copy__Uint32Number = Copy__Uint32Number / 0x0A;
                }

                for (Local__Uint8Counter = 0; Local__Uint32Temporary != 0; ++Local__Uint8Counter)
    2e88:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8a:	8f 5f       	subi	r24, 0xFF	; 255
    2e8c:	8d 83       	std	Y+5, r24	; 0x05
    2e8e:	89 81       	ldd	r24, Y+1	; 0x01
    2e90:	9a 81       	ldd	r25, Y+2	; 0x02
    2e92:	ab 81       	ldd	r26, Y+3	; 0x03
    2e94:	bc 81       	ldd	r27, Y+4	; 0x04
    2e96:	00 97       	sbiw	r24, 0x00	; 0
    2e98:	a1 05       	cpc	r26, r1
    2e9a:	b1 05       	cpc	r27, r1
    2e9c:	09 f0       	breq	.+2      	; 0x2ea0 <LCD_CheckStatusSendNumber+0x1fe>
    2e9e:	62 cf       	rjmp	.-316    	; 0x2d64 <LCD_CheckStatusSendNumber+0xc2>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    2ea0:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2ea2:	2d 96       	adiw	r28, 0x0d	; 13
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	de bf       	out	0x3e, r29	; 62
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	cf 91       	pop	r28
    2eb0:	df 91       	pop	r29
    2eb2:	08 95       	ret

00002eb4 <LCD_CheckStatusSpecialChar>:

CheckStatus LCD_CheckStatusSpecialChar(_uint8 Copy__Uint8CGRamLocation, _uint8 Copy__Uint8LCDLine, _uint8 Copy__Uint8DDRamLocation)
{
    2eb4:	df 93       	push	r29
    2eb6:	cf 93       	push	r28
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
    2ebc:	27 97       	sbiw	r28, 0x07	; 7
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	8b 83       	std	Y+3, r24	; 0x03
    2eca:	6c 83       	std	Y+4, r22	; 0x04
    2ecc:	4d 83       	std	Y+5, r20	; 0x05
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2ece:	1a 82       	std	Y+2, r1	; 0x02

        _uint8 Local__Uint8CounterJ = 0x00;
    2ed0:	19 82       	std	Y+1, r1	; 0x01
        if ((Copy__Uint8CGRamLocation <= LCD__UINT8_CG_RAMLOCATION7) && (Copy__Uint8DDRamLocation <= LCD__UINT8_LOCATION_NUMBER39))
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	88 30       	cpi	r24, 0x08	; 8
    2ed6:	08 f0       	brcs	.+2      	; 0x2eda <LCD_CheckStatusSpecialChar+0x26>
    2ed8:	0b c1       	rjmp	.+534    	; 0x30f0 <LCD_CheckStatusSpecialChar+0x23c>
    2eda:	8d 81       	ldd	r24, Y+5	; 0x05
    2edc:	88 32       	cpi	r24, 0x28	; 40
    2ede:	08 f0       	brcs	.+2      	; 0x2ee2 <LCD_CheckStatusSpecialChar+0x2e>
    2ee0:	07 c1       	rjmp	.+526    	; 0x30f0 <LCD_CheckStatusSpecialChar+0x23c>
        {

                switch (Copy__Uint8CGRamLocation)
    2ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee4:	28 2f       	mov	r18, r24
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	3f 83       	std	Y+7, r19	; 0x07
    2eea:	2e 83       	std	Y+6, r18	; 0x06
    2eec:	8e 81       	ldd	r24, Y+6	; 0x06
    2eee:	9f 81       	ldd	r25, Y+7	; 0x07
    2ef0:	84 30       	cpi	r24, 0x04	; 4
    2ef2:	91 05       	cpc	r25, r1
    2ef4:	09 f4       	brne	.+2      	; 0x2ef8 <LCD_CheckStatusSpecialChar+0x44>
    2ef6:	7b c0       	rjmp	.+246    	; 0x2fee <LCD_CheckStatusSpecialChar+0x13a>
    2ef8:	2e 81       	ldd	r18, Y+6	; 0x06
    2efa:	3f 81       	ldd	r19, Y+7	; 0x07
    2efc:	25 30       	cpi	r18, 0x05	; 5
    2efe:	31 05       	cpc	r19, r1
    2f00:	94 f4       	brge	.+36     	; 0x2f26 <LCD_CheckStatusSpecialChar+0x72>
    2f02:	8e 81       	ldd	r24, Y+6	; 0x06
    2f04:	9f 81       	ldd	r25, Y+7	; 0x07
    2f06:	82 30       	cpi	r24, 0x02	; 2
    2f08:	91 05       	cpc	r25, r1
    2f0a:	09 f4       	brne	.+2      	; 0x2f0e <LCD_CheckStatusSpecialChar+0x5a>
    2f0c:	3e c0       	rjmp	.+124    	; 0x2f8a <LCD_CheckStatusSpecialChar+0xd6>
    2f0e:	2e 81       	ldd	r18, Y+6	; 0x06
    2f10:	3f 81       	ldd	r19, Y+7	; 0x07
    2f12:	23 30       	cpi	r18, 0x03	; 3
    2f14:	31 05       	cpc	r19, r1
    2f16:	0c f0       	brlt	.+2      	; 0x2f1a <LCD_CheckStatusSpecialChar+0x66>
    2f18:	51 c0       	rjmp	.+162    	; 0x2fbc <LCD_CheckStatusSpecialChar+0x108>
    2f1a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f1c:	9f 81       	ldd	r25, Y+7	; 0x07
    2f1e:	81 30       	cpi	r24, 0x01	; 1
    2f20:	91 05       	cpc	r25, r1
    2f22:	d1 f0       	breq	.+52     	; 0x2f58 <LCD_CheckStatusSpecialChar+0xa4>
    2f24:	e0 c0       	rjmp	.+448    	; 0x30e6 <LCD_CheckStatusSpecialChar+0x232>
    2f26:	2e 81       	ldd	r18, Y+6	; 0x06
    2f28:	3f 81       	ldd	r19, Y+7	; 0x07
    2f2a:	26 30       	cpi	r18, 0x06	; 6
    2f2c:	31 05       	cpc	r19, r1
    2f2e:	09 f4       	brne	.+2      	; 0x2f32 <LCD_CheckStatusSpecialChar+0x7e>
    2f30:	90 c0       	rjmp	.+288    	; 0x3052 <LCD_CheckStatusSpecialChar+0x19e>
    2f32:	8e 81       	ldd	r24, Y+6	; 0x06
    2f34:	9f 81       	ldd	r25, Y+7	; 0x07
    2f36:	86 30       	cpi	r24, 0x06	; 6
    2f38:	91 05       	cpc	r25, r1
    2f3a:	0c f4       	brge	.+2      	; 0x2f3e <LCD_CheckStatusSpecialChar+0x8a>
    2f3c:	71 c0       	rjmp	.+226    	; 0x3020 <LCD_CheckStatusSpecialChar+0x16c>
    2f3e:	2e 81       	ldd	r18, Y+6	; 0x06
    2f40:	3f 81       	ldd	r19, Y+7	; 0x07
    2f42:	27 30       	cpi	r18, 0x07	; 7
    2f44:	31 05       	cpc	r19, r1
    2f46:	09 f4       	brne	.+2      	; 0x2f4a <LCD_CheckStatusSpecialChar+0x96>
    2f48:	9d c0       	rjmp	.+314    	; 0x3084 <LCD_CheckStatusSpecialChar+0x1d0>
    2f4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f4c:	9f 81       	ldd	r25, Y+7	; 0x07
    2f4e:	88 30       	cpi	r24, 0x08	; 8
    2f50:	91 05       	cpc	r25, r1
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <LCD_CheckStatusSpecialChar+0xa2>
    2f54:	b0 c0       	rjmp	.+352    	; 0x30b6 <LCD_CheckStatusSpecialChar+0x202>
    2f56:	c7 c0       	rjmp	.+398    	; 0x30e6 <LCD_CheckStatusSpecialChar+0x232>
                {

                case 1:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE0);
    2f58:	80 e4       	ldi	r24, 0x40	; 64
    2f5a:	0e 94 72 21 	call	0x42e4	; 0x42e4 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2f5e:	19 82       	std	Y+1, r1	; 0x01
    2f60:	10 c0       	rjmp	.+32     	; 0x2f82 <LCD_CheckStatusSpecialChar+0xce>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[0][Local__Uint8CounterJ]);
    2f62:	20 91 da 01 	lds	r18, 0x01DA
    2f66:	30 91 db 01 	lds	r19, 0x01DB
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	88 2f       	mov	r24, r24
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	f9 01       	movw	r30, r18
    2f72:	e8 0f       	add	r30, r24
    2f74:	f9 1f       	adc	r31, r25
    2f76:	80 81       	ld	r24, Z
    2f78:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
                switch (Copy__Uint8CGRamLocation)
                {

                case 1:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE0);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2f7c:	89 81       	ldd	r24, Y+1	; 0x01
    2f7e:	8f 5f       	subi	r24, 0xFF	; 255
    2f80:	89 83       	std	Y+1, r24	; 0x01
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	88 30       	cpi	r24, 0x08	; 8
    2f86:	68 f3       	brcs	.-38     	; 0x2f62 <LCD_CheckStatusSpecialChar+0xae>
    2f88:	ae c0       	rjmp	.+348    	; 0x30e6 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[0][Local__Uint8CounterJ]);
                        }
                        break;
                case 2:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE1);
    2f8a:	88 e4       	ldi	r24, 0x48	; 72
    2f8c:	0e 94 72 21 	call	0x42e4	; 0x42e4 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2f90:	19 82       	std	Y+1, r1	; 0x01
    2f92:	10 c0       	rjmp	.+32     	; 0x2fb4 <LCD_CheckStatusSpecialChar+0x100>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[1][Local__Uint8CounterJ]);
    2f94:	20 91 dc 01 	lds	r18, 0x01DC
    2f98:	30 91 dd 01 	lds	r19, 0x01DD
    2f9c:	89 81       	ldd	r24, Y+1	; 0x01
    2f9e:	88 2f       	mov	r24, r24
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	f9 01       	movw	r30, r18
    2fa4:	e8 0f       	add	r30, r24
    2fa6:	f9 1f       	adc	r31, r25
    2fa8:	80 81       	ld	r24, Z
    2faa:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[0][Local__Uint8CounterJ]);
                        }
                        break;
                case 2:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE1);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2fae:	89 81       	ldd	r24, Y+1	; 0x01
    2fb0:	8f 5f       	subi	r24, 0xFF	; 255
    2fb2:	89 83       	std	Y+1, r24	; 0x01
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	88 30       	cpi	r24, 0x08	; 8
    2fb8:	68 f3       	brcs	.-38     	; 0x2f94 <LCD_CheckStatusSpecialChar+0xe0>
    2fba:	95 c0       	rjmp	.+298    	; 0x30e6 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[1][Local__Uint8CounterJ]);
                        }
                        break;
                case 3:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE2);
    2fbc:	80 e5       	ldi	r24, 0x50	; 80
    2fbe:	0e 94 72 21 	call	0x42e4	; 0x42e4 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2fc2:	19 82       	std	Y+1, r1	; 0x01
    2fc4:	10 c0       	rjmp	.+32     	; 0x2fe6 <LCD_CheckStatusSpecialChar+0x132>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[2][Local__Uint8CounterJ]);
    2fc6:	20 91 de 01 	lds	r18, 0x01DE
    2fca:	30 91 df 01 	lds	r19, 0x01DF
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	88 2f       	mov	r24, r24
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	f9 01       	movw	r30, r18
    2fd6:	e8 0f       	add	r30, r24
    2fd8:	f9 1f       	adc	r31, r25
    2fda:	80 81       	ld	r24, Z
    2fdc:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[1][Local__Uint8CounterJ]);
                        }
                        break;
                case 3:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE2);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	8f 5f       	subi	r24, 0xFF	; 255
    2fe4:	89 83       	std	Y+1, r24	; 0x01
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	88 30       	cpi	r24, 0x08	; 8
    2fea:	68 f3       	brcs	.-38     	; 0x2fc6 <LCD_CheckStatusSpecialChar+0x112>
    2fec:	7c c0       	rjmp	.+248    	; 0x30e6 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[2][Local__Uint8CounterJ]);
                        }
                        break;
                case 4:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE3);
    2fee:	88 e5       	ldi	r24, 0x58	; 88
    2ff0:	0e 94 72 21 	call	0x42e4	; 0x42e4 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2ff4:	19 82       	std	Y+1, r1	; 0x01
    2ff6:	10 c0       	rjmp	.+32     	; 0x3018 <LCD_CheckStatusSpecialChar+0x164>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[3][Local__Uint8CounterJ]);
    2ff8:	20 91 e0 01 	lds	r18, 0x01E0
    2ffc:	30 91 e1 01 	lds	r19, 0x01E1
    3000:	89 81       	ldd	r24, Y+1	; 0x01
    3002:	88 2f       	mov	r24, r24
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	f9 01       	movw	r30, r18
    3008:	e8 0f       	add	r30, r24
    300a:	f9 1f       	adc	r31, r25
    300c:	80 81       	ld	r24, Z
    300e:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[2][Local__Uint8CounterJ]);
                        }
                        break;
                case 4:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE3);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    3012:	89 81       	ldd	r24, Y+1	; 0x01
    3014:	8f 5f       	subi	r24, 0xFF	; 255
    3016:	89 83       	std	Y+1, r24	; 0x01
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	88 30       	cpi	r24, 0x08	; 8
    301c:	68 f3       	brcs	.-38     	; 0x2ff8 <LCD_CheckStatusSpecialChar+0x144>
    301e:	63 c0       	rjmp	.+198    	; 0x30e6 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[3][Local__Uint8CounterJ]);
                        }
                        break;
                case 5:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE4);
    3020:	80 e6       	ldi	r24, 0x60	; 96
    3022:	0e 94 72 21 	call	0x42e4	; 0x42e4 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    3026:	19 82       	std	Y+1, r1	; 0x01
    3028:	10 c0       	rjmp	.+32     	; 0x304a <LCD_CheckStatusSpecialChar+0x196>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[4][Local__Uint8CounterJ]);
    302a:	20 91 e2 01 	lds	r18, 0x01E2
    302e:	30 91 e3 01 	lds	r19, 0x01E3
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	88 2f       	mov	r24, r24
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	f9 01       	movw	r30, r18
    303a:	e8 0f       	add	r30, r24
    303c:	f9 1f       	adc	r31, r25
    303e:	80 81       	ld	r24, Z
    3040:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[3][Local__Uint8CounterJ]);
                        }
                        break;
                case 5:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE4);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    3044:	89 81       	ldd	r24, Y+1	; 0x01
    3046:	8f 5f       	subi	r24, 0xFF	; 255
    3048:	89 83       	std	Y+1, r24	; 0x01
    304a:	89 81       	ldd	r24, Y+1	; 0x01
    304c:	88 30       	cpi	r24, 0x08	; 8
    304e:	68 f3       	brcs	.-38     	; 0x302a <LCD_CheckStatusSpecialChar+0x176>
    3050:	4a c0       	rjmp	.+148    	; 0x30e6 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[4][Local__Uint8CounterJ]);
                        }
                        break;
                case 6:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE5);
    3052:	88 e6       	ldi	r24, 0x68	; 104
    3054:	0e 94 72 21 	call	0x42e4	; 0x42e4 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    3058:	19 82       	std	Y+1, r1	; 0x01
    305a:	10 c0       	rjmp	.+32     	; 0x307c <LCD_CheckStatusSpecialChar+0x1c8>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[5][Local__Uint8CounterJ]);
    305c:	20 91 e4 01 	lds	r18, 0x01E4
    3060:	30 91 e5 01 	lds	r19, 0x01E5
    3064:	89 81       	ldd	r24, Y+1	; 0x01
    3066:	88 2f       	mov	r24, r24
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	f9 01       	movw	r30, r18
    306c:	e8 0f       	add	r30, r24
    306e:	f9 1f       	adc	r31, r25
    3070:	80 81       	ld	r24, Z
    3072:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[4][Local__Uint8CounterJ]);
                        }
                        break;
                case 6:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE5);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	8f 5f       	subi	r24, 0xFF	; 255
    307a:	89 83       	std	Y+1, r24	; 0x01
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	88 30       	cpi	r24, 0x08	; 8
    3080:	68 f3       	brcs	.-38     	; 0x305c <LCD_CheckStatusSpecialChar+0x1a8>
    3082:	31 c0       	rjmp	.+98     	; 0x30e6 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[5][Local__Uint8CounterJ]);
                        }
                        break;
                case 7:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE6);
    3084:	80 e7       	ldi	r24, 0x70	; 112
    3086:	0e 94 72 21 	call	0x42e4	; 0x42e4 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    308a:	19 82       	std	Y+1, r1	; 0x01
    308c:	10 c0       	rjmp	.+32     	; 0x30ae <LCD_CheckStatusSpecialChar+0x1fa>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[6][Local__Uint8CounterJ]);
    308e:	20 91 e6 01 	lds	r18, 0x01E6
    3092:	30 91 e7 01 	lds	r19, 0x01E7
    3096:	89 81       	ldd	r24, Y+1	; 0x01
    3098:	88 2f       	mov	r24, r24
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	f9 01       	movw	r30, r18
    309e:	e8 0f       	add	r30, r24
    30a0:	f9 1f       	adc	r31, r25
    30a2:	80 81       	ld	r24, Z
    30a4:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[5][Local__Uint8CounterJ]);
                        }
                        break;
                case 7:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE6);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	8f 5f       	subi	r24, 0xFF	; 255
    30ac:	89 83       	std	Y+1, r24	; 0x01
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	88 30       	cpi	r24, 0x08	; 8
    30b2:	68 f3       	brcs	.-38     	; 0x308e <LCD_CheckStatusSpecialChar+0x1da>
    30b4:	18 c0       	rjmp	.+48     	; 0x30e6 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[6][Local__Uint8CounterJ]);
                        }
                        break;
                case 8:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE7);
    30b6:	88 e7       	ldi	r24, 0x78	; 120
    30b8:	0e 94 72 21 	call	0x42e4	; 0x42e4 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    30bc:	19 82       	std	Y+1, r1	; 0x01
    30be:	10 c0       	rjmp	.+32     	; 0x30e0 <LCD_CheckStatusSpecialChar+0x22c>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[8][Local__Uint8CounterJ]);
    30c0:	20 91 ea 01 	lds	r18, 0x01EA
    30c4:	30 91 eb 01 	lds	r19, 0x01EB
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	88 2f       	mov	r24, r24
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	f9 01       	movw	r30, r18
    30d0:	e8 0f       	add	r30, r24
    30d2:	f9 1f       	adc	r31, r25
    30d4:	80 81       	ld	r24, Z
    30d6:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[6][Local__Uint8CounterJ]);
                        }
                        break;
                case 8:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE7);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    30da:	89 81       	ldd	r24, Y+1	; 0x01
    30dc:	8f 5f       	subi	r24, 0xFF	; 255
    30de:	89 83       	std	Y+1, r24	; 0x01
    30e0:	89 81       	ldd	r24, Y+1	; 0x01
    30e2:	88 30       	cpi	r24, 0x08	; 8
    30e4:	68 f3       	brcs	.-38     	; 0x30c0 <LCD_CheckStatusSpecialChar+0x20c>
                        break;
                default:
                        break;
                }

                LCD_CheckStatusGoToXY(Copy__Uint8LCDLine, Copy__Uint8DDRamLocation);
    30e6:	8c 81       	ldd	r24, Y+4	; 0x04
    30e8:	6d 81       	ldd	r22, Y+5	; 0x05
    30ea:	0e 94 90 15 	call	0x2b20	; 0x2b20 <LCD_CheckStatusGoToXY>
    30ee:	02 c0       	rjmp	.+4      	; 0x30f4 <LCD_CheckStatusSpecialChar+0x240>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	8a 83       	std	Y+2, r24	; 0x02
        }
        return Local_CheckStausReturnValue;
    30f4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    30f6:	27 96       	adiw	r28, 0x07	; 7
    30f8:	0f b6       	in	r0, 0x3f	; 63
    30fa:	f8 94       	cli
    30fc:	de bf       	out	0x3e, r29	; 62
    30fe:	0f be       	out	0x3f, r0	; 63
    3100:	cd bf       	out	0x3d, r28	; 61
    3102:	cf 91       	pop	r28
    3104:	df 91       	pop	r29
    3106:	08 95       	ret

00003108 <LCD_VoidShiftRight>:
Void LCD_VoidShiftRight(_uint8 Copy__Uint8PositionValue, _uint32 Copy__Uint32DelayValue)
{
    3108:	df 93       	push	r29
    310a:	cf 93       	push	r28
    310c:	cd b7       	in	r28, 0x3d	; 61
    310e:	de b7       	in	r29, 0x3e	; 62
    3110:	64 97       	sbiw	r28, 0x14	; 20
    3112:	0f b6       	in	r0, 0x3f	; 63
    3114:	f8 94       	cli
    3116:	de bf       	out	0x3e, r29	; 62
    3118:	0f be       	out	0x3f, r0	; 63
    311a:	cd bf       	out	0x3d, r28	; 61
    311c:	88 8b       	std	Y+16, r24	; 0x10
    311e:	49 8b       	std	Y+17, r20	; 0x11
    3120:	5a 8b       	std	Y+18, r21	; 0x12
    3122:	6b 8b       	std	Y+19, r22	; 0x13
    3124:	7c 8b       	std	Y+20, r23	; 0x14
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    3126:	1f 86       	std	Y+15, r1	; 0x0f
    3128:	7c c0       	rjmp	.+248    	; 0x3222 <LCD_VoidShiftRight+0x11a>
        {
                LCD_CheckStatusSendCmnd4bit(0b00011100);
    312a:	8c e1       	ldi	r24, 0x1C	; 28
    312c:	0e 94 72 21 	call	0x42e4	; 0x42e4 <LCD_CheckStatusSendCmnd4bit>
                _delay_ms(Copy__Uint32DelayValue);
    3130:	69 89       	ldd	r22, Y+17	; 0x11
    3132:	7a 89       	ldd	r23, Y+18	; 0x12
    3134:	8b 89       	ldd	r24, Y+19	; 0x13
    3136:	9c 89       	ldd	r25, Y+20	; 0x14
    3138:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	8b 87       	std	Y+11, r24	; 0x0b
    3142:	9c 87       	std	Y+12, r25	; 0x0c
    3144:	ad 87       	std	Y+13, r26	; 0x0d
    3146:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3148:	6b 85       	ldd	r22, Y+11	; 0x0b
    314a:	7c 85       	ldd	r23, Y+12	; 0x0c
    314c:	8d 85       	ldd	r24, Y+13	; 0x0d
    314e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	4a ef       	ldi	r20, 0xFA	; 250
    3156:	54 e4       	ldi	r21, 0x44	; 68
    3158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	8f 83       	std	Y+7, r24	; 0x07
    3162:	98 87       	std	Y+8, r25	; 0x08
    3164:	a9 87       	std	Y+9, r26	; 0x09
    3166:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3168:	6f 81       	ldd	r22, Y+7	; 0x07
    316a:	78 85       	ldd	r23, Y+8	; 0x08
    316c:	89 85       	ldd	r24, Y+9	; 0x09
    316e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e8       	ldi	r20, 0x80	; 128
    3176:	5f e3       	ldi	r21, 0x3F	; 63
    3178:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    317c:	88 23       	and	r24, r24
    317e:	2c f4       	brge	.+10     	; 0x318a <LCD_VoidShiftRight+0x82>
		__ticks = 1;
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	9e 83       	std	Y+6, r25	; 0x06
    3186:	8d 83       	std	Y+5, r24	; 0x05
    3188:	3f c0       	rjmp	.+126    	; 0x3208 <LCD_VoidShiftRight+0x100>
	else if (__tmp > 65535)
    318a:	6f 81       	ldd	r22, Y+7	; 0x07
    318c:	78 85       	ldd	r23, Y+8	; 0x08
    318e:	89 85       	ldd	r24, Y+9	; 0x09
    3190:	9a 85       	ldd	r25, Y+10	; 0x0a
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	3f ef       	ldi	r19, 0xFF	; 255
    3196:	4f e7       	ldi	r20, 0x7F	; 127
    3198:	57 e4       	ldi	r21, 0x47	; 71
    319a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    319e:	18 16       	cp	r1, r24
    31a0:	4c f5       	brge	.+82     	; 0x31f4 <LCD_VoidShiftRight+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    31a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    31a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	40 e2       	ldi	r20, 0x20	; 32
    31b0:	51 e4       	ldi	r21, 0x41	; 65
    31b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	bc 01       	movw	r22, r24
    31bc:	cd 01       	movw	r24, r26
    31be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	9e 83       	std	Y+6, r25	; 0x06
    31c8:	8d 83       	std	Y+5, r24	; 0x05
    31ca:	0f c0       	rjmp	.+30     	; 0x31ea <LCD_VoidShiftRight+0xe2>
    31cc:	88 ec       	ldi	r24, 0xC8	; 200
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	9c 83       	std	Y+4, r25	; 0x04
    31d2:	8b 83       	std	Y+3, r24	; 0x03
    31d4:	8b 81       	ldd	r24, Y+3	; 0x03
    31d6:	9c 81       	ldd	r25, Y+4	; 0x04
    31d8:	01 97       	sbiw	r24, 0x01	; 1
    31da:	f1 f7       	brne	.-4      	; 0x31d8 <LCD_VoidShiftRight+0xd0>
    31dc:	9c 83       	std	Y+4, r25	; 0x04
    31de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e0:	8d 81       	ldd	r24, Y+5	; 0x05
    31e2:	9e 81       	ldd	r25, Y+6	; 0x06
    31e4:	01 97       	sbiw	r24, 0x01	; 1
    31e6:	9e 83       	std	Y+6, r25	; 0x06
    31e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ea:	8d 81       	ldd	r24, Y+5	; 0x05
    31ec:	9e 81       	ldd	r25, Y+6	; 0x06
    31ee:	00 97       	sbiw	r24, 0x00	; 0
    31f0:	69 f7       	brne	.-38     	; 0x31cc <LCD_VoidShiftRight+0xc4>
    31f2:	14 c0       	rjmp	.+40     	; 0x321c <LCD_VoidShiftRight+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f4:	6f 81       	ldd	r22, Y+7	; 0x07
    31f6:	78 85       	ldd	r23, Y+8	; 0x08
    31f8:	89 85       	ldd	r24, Y+9	; 0x09
    31fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    31fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	9e 83       	std	Y+6, r25	; 0x06
    3206:	8d 83       	std	Y+5, r24	; 0x05
    3208:	8d 81       	ldd	r24, Y+5	; 0x05
    320a:	9e 81       	ldd	r25, Y+6	; 0x06
    320c:	9a 83       	std	Y+2, r25	; 0x02
    320e:	89 83       	std	Y+1, r24	; 0x01
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	9a 81       	ldd	r25, Y+2	; 0x02
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	f1 f7       	brne	.-4      	; 0x3214 <LCD_VoidShiftRight+0x10c>
    3218:	9a 83       	std	Y+2, r25	; 0x02
    321a:	89 83       	std	Y+1, r24	; 0x01
        return Local_CheckStausReturnValue;
}
Void LCD_VoidShiftRight(_uint8 Copy__Uint8PositionValue, _uint32 Copy__Uint32DelayValue)
{
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    321c:	8f 85       	ldd	r24, Y+15	; 0x0f
    321e:	8f 5f       	subi	r24, 0xFF	; 255
    3220:	8f 87       	std	Y+15, r24	; 0x0f
    3222:	9f 85       	ldd	r25, Y+15	; 0x0f
    3224:	88 89       	ldd	r24, Y+16	; 0x10
    3226:	98 17       	cp	r25, r24
    3228:	08 f4       	brcc	.+2      	; 0x322c <LCD_VoidShiftRight+0x124>
    322a:	7f cf       	rjmp	.-258    	; 0x312a <LCD_VoidShiftRight+0x22>
        {
                LCD_CheckStatusSendCmnd4bit(0b00011100);
                _delay_ms(Copy__Uint32DelayValue);
        }
}
    322c:	64 96       	adiw	r28, 0x14	; 20
    322e:	0f b6       	in	r0, 0x3f	; 63
    3230:	f8 94       	cli
    3232:	de bf       	out	0x3e, r29	; 62
    3234:	0f be       	out	0x3f, r0	; 63
    3236:	cd bf       	out	0x3d, r28	; 61
    3238:	cf 91       	pop	r28
    323a:	df 91       	pop	r29
    323c:	08 95       	ret

0000323e <LCD_CheckStatusShiftRightOrLeft>:
CheckStatus LCD_CheckStatusShiftRightOrLeft(_uint32 Copy__Uint32DelayValue)
{
    323e:	df 93       	push	r29
    3240:	cf 93       	push	r28
    3242:	cd b7       	in	r28, 0x3d	; 61
    3244:	de b7       	in	r29, 0x3e	; 62
    3246:	63 97       	sbiw	r28, 0x13	; 19
    3248:	0f b6       	in	r0, 0x3f	; 63
    324a:	f8 94       	cli
    324c:	de bf       	out	0x3e, r29	; 62
    324e:	0f be       	out	0x3f, r0	; 63
    3250:	cd bf       	out	0x3d, r28	; 61
    3252:	68 8b       	std	Y+16, r22	; 0x10
    3254:	79 8b       	std	Y+17, r23	; 0x11
    3256:	8a 8b       	std	Y+18, r24	; 0x12
    3258:	9b 8b       	std	Y+19, r25	; 0x13
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    325a:	1f 86       	std	Y+15, r1	; 0x0f
        {

                if (LCD__UINT8_SHIFT_ACTIVATE == 0)
                {
                        //right
                        LCD_CheckStatusSendCmnd4bit(0b00011100);
    325c:	8c e1       	ldi	r24, 0x1C	; 28
    325e:	0e 94 72 21 	call	0x42e4	; 0x42e4 <LCD_CheckStatusSendCmnd4bit>
                        _delay_ms(Copy__Uint32DelayValue);
    3262:	68 89       	ldd	r22, Y+16	; 0x10
    3264:	79 89       	ldd	r23, Y+17	; 0x11
    3266:	8a 89       	ldd	r24, Y+18	; 0x12
    3268:	9b 89       	ldd	r25, Y+19	; 0x13
    326a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	8b 87       	std	Y+11, r24	; 0x0b
    3274:	9c 87       	std	Y+12, r25	; 0x0c
    3276:	ad 87       	std	Y+13, r26	; 0x0d
    3278:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    327a:	6b 85       	ldd	r22, Y+11	; 0x0b
    327c:	7c 85       	ldd	r23, Y+12	; 0x0c
    327e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3280:	9e 85       	ldd	r25, Y+14	; 0x0e
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	4a ef       	ldi	r20, 0xFA	; 250
    3288:	54 e4       	ldi	r21, 0x44	; 68
    328a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	8f 83       	std	Y+7, r24	; 0x07
    3294:	98 87       	std	Y+8, r25	; 0x08
    3296:	a9 87       	std	Y+9, r26	; 0x09
    3298:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    329a:	6f 81       	ldd	r22, Y+7	; 0x07
    329c:	78 85       	ldd	r23, Y+8	; 0x08
    329e:	89 85       	ldd	r24, Y+9	; 0x09
    32a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	40 e8       	ldi	r20, 0x80	; 128
    32a8:	5f e3       	ldi	r21, 0x3F	; 63
    32aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32ae:	88 23       	and	r24, r24
    32b0:	2c f4       	brge	.+10     	; 0x32bc <LCD_CheckStatusShiftRightOrLeft+0x7e>
		__ticks = 1;
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	9e 83       	std	Y+6, r25	; 0x06
    32b8:	8d 83       	std	Y+5, r24	; 0x05
    32ba:	3f c0       	rjmp	.+126    	; 0x333a <LCD_CheckStatusShiftRightOrLeft+0xfc>
	else if (__tmp > 65535)
    32bc:	6f 81       	ldd	r22, Y+7	; 0x07
    32be:	78 85       	ldd	r23, Y+8	; 0x08
    32c0:	89 85       	ldd	r24, Y+9	; 0x09
    32c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	3f ef       	ldi	r19, 0xFF	; 255
    32c8:	4f e7       	ldi	r20, 0x7F	; 127
    32ca:	57 e4       	ldi	r21, 0x47	; 71
    32cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32d0:	18 16       	cp	r1, r24
    32d2:	4c f5       	brge	.+82     	; 0x3326 <LCD_CheckStatusShiftRightOrLeft+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32da:	9e 85       	ldd	r25, Y+14	; 0x0e
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	40 e2       	ldi	r20, 0x20	; 32
    32e2:	51 e4       	ldi	r21, 0x41	; 65
    32e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	bc 01       	movw	r22, r24
    32ee:	cd 01       	movw	r24, r26
    32f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	9e 83       	std	Y+6, r25	; 0x06
    32fa:	8d 83       	std	Y+5, r24	; 0x05
    32fc:	0f c0       	rjmp	.+30     	; 0x331c <LCD_CheckStatusShiftRightOrLeft+0xde>
    32fe:	88 ec       	ldi	r24, 0xC8	; 200
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	9c 83       	std	Y+4, r25	; 0x04
    3304:	8b 83       	std	Y+3, r24	; 0x03
    3306:	8b 81       	ldd	r24, Y+3	; 0x03
    3308:	9c 81       	ldd	r25, Y+4	; 0x04
    330a:	01 97       	sbiw	r24, 0x01	; 1
    330c:	f1 f7       	brne	.-4      	; 0x330a <LCD_CheckStatusShiftRightOrLeft+0xcc>
    330e:	9c 83       	std	Y+4, r25	; 0x04
    3310:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3312:	8d 81       	ldd	r24, Y+5	; 0x05
    3314:	9e 81       	ldd	r25, Y+6	; 0x06
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	9e 83       	std	Y+6, r25	; 0x06
    331a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    331c:	8d 81       	ldd	r24, Y+5	; 0x05
    331e:	9e 81       	ldd	r25, Y+6	; 0x06
    3320:	00 97       	sbiw	r24, 0x00	; 0
    3322:	69 f7       	brne	.-38     	; 0x32fe <LCD_CheckStatusShiftRightOrLeft+0xc0>
    3324:	14 c0       	rjmp	.+40     	; 0x334e <LCD_CheckStatusShiftRightOrLeft+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3326:	6f 81       	ldd	r22, Y+7	; 0x07
    3328:	78 85       	ldd	r23, Y+8	; 0x08
    332a:	89 85       	ldd	r24, Y+9	; 0x09
    332c:	9a 85       	ldd	r25, Y+10	; 0x0a
    332e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	9e 83       	std	Y+6, r25	; 0x06
    3338:	8d 83       	std	Y+5, r24	; 0x05
    333a:	8d 81       	ldd	r24, Y+5	; 0x05
    333c:	9e 81       	ldd	r25, Y+6	; 0x06
    333e:	9a 83       	std	Y+2, r25	; 0x02
    3340:	89 83       	std	Y+1, r24	; 0x01
    3342:	89 81       	ldd	r24, Y+1	; 0x01
    3344:	9a 81       	ldd	r25, Y+2	; 0x02
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	f1 f7       	brne	.-4      	; 0x3346 <LCD_CheckStatusShiftRightOrLeft+0x108>
    334a:	9a 83       	std	Y+2, r25	; 0x02
    334c:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    334e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3350:	63 96       	adiw	r28, 0x13	; 19
    3352:	0f b6       	in	r0, 0x3f	; 63
    3354:	f8 94       	cli
    3356:	de bf       	out	0x3e, r29	; 62
    3358:	0f be       	out	0x3f, r0	; 63
    335a:	cd bf       	out	0x3d, r28	; 61
    335c:	cf 91       	pop	r28
    335e:	df 91       	pop	r29
    3360:	08 95       	ret

00003362 <LCD_VoidShiftLeft>:
Void LCD_VoidShiftLeft(_uint8 Copy__Uint8PositionValue, _uint32 Copy__Uint32DelayValue)
{
    3362:	df 93       	push	r29
    3364:	cf 93       	push	r28
    3366:	cd b7       	in	r28, 0x3d	; 61
    3368:	de b7       	in	r29, 0x3e	; 62
    336a:	64 97       	sbiw	r28, 0x14	; 20
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	f8 94       	cli
    3370:	de bf       	out	0x3e, r29	; 62
    3372:	0f be       	out	0x3f, r0	; 63
    3374:	cd bf       	out	0x3d, r28	; 61
    3376:	88 8b       	std	Y+16, r24	; 0x10
    3378:	49 8b       	std	Y+17, r20	; 0x11
    337a:	5a 8b       	std	Y+18, r21	; 0x12
    337c:	6b 8b       	std	Y+19, r22	; 0x13
    337e:	7c 8b       	std	Y+20, r23	; 0x14
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    3380:	1f 86       	std	Y+15, r1	; 0x0f
    3382:	7c c0       	rjmp	.+248    	; 0x347c <LCD_VoidShiftLeft+0x11a>
        {
                LCD_CheckStatusSendCmnd4bit(0b00011000);
    3384:	88 e1       	ldi	r24, 0x18	; 24
    3386:	0e 94 72 21 	call	0x42e4	; 0x42e4 <LCD_CheckStatusSendCmnd4bit>
                _delay_ms(Copy__Uint32DelayValue);
    338a:	69 89       	ldd	r22, Y+17	; 0x11
    338c:	7a 89       	ldd	r23, Y+18	; 0x12
    338e:	8b 89       	ldd	r24, Y+19	; 0x13
    3390:	9c 89       	ldd	r25, Y+20	; 0x14
    3392:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	8b 87       	std	Y+11, r24	; 0x0b
    339c:	9c 87       	std	Y+12, r25	; 0x0c
    339e:	ad 87       	std	Y+13, r26	; 0x0d
    33a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	4a ef       	ldi	r20, 0xFA	; 250
    33b0:	54 e4       	ldi	r21, 0x44	; 68
    33b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	8f 83       	std	Y+7, r24	; 0x07
    33bc:	98 87       	std	Y+8, r25	; 0x08
    33be:	a9 87       	std	Y+9, r26	; 0x09
    33c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33c2:	6f 81       	ldd	r22, Y+7	; 0x07
    33c4:	78 85       	ldd	r23, Y+8	; 0x08
    33c6:	89 85       	ldd	r24, Y+9	; 0x09
    33c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	40 e8       	ldi	r20, 0x80	; 128
    33d0:	5f e3       	ldi	r21, 0x3F	; 63
    33d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33d6:	88 23       	and	r24, r24
    33d8:	2c f4       	brge	.+10     	; 0x33e4 <LCD_VoidShiftLeft+0x82>
		__ticks = 1;
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	9e 83       	std	Y+6, r25	; 0x06
    33e0:	8d 83       	std	Y+5, r24	; 0x05
    33e2:	3f c0       	rjmp	.+126    	; 0x3462 <LCD_VoidShiftLeft+0x100>
	else if (__tmp > 65535)
    33e4:	6f 81       	ldd	r22, Y+7	; 0x07
    33e6:	78 85       	ldd	r23, Y+8	; 0x08
    33e8:	89 85       	ldd	r24, Y+9	; 0x09
    33ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	3f ef       	ldi	r19, 0xFF	; 255
    33f0:	4f e7       	ldi	r20, 0x7F	; 127
    33f2:	57 e4       	ldi	r21, 0x47	; 71
    33f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33f8:	18 16       	cp	r1, r24
    33fa:	4c f5       	brge	.+82     	; 0x344e <LCD_VoidShiftLeft+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    33fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3400:	8d 85       	ldd	r24, Y+13	; 0x0d
    3402:	9e 85       	ldd	r25, Y+14	; 0x0e
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	40 e2       	ldi	r20, 0x20	; 32
    340a:	51 e4       	ldi	r21, 0x41	; 65
    340c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	bc 01       	movw	r22, r24
    3416:	cd 01       	movw	r24, r26
    3418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    341c:	dc 01       	movw	r26, r24
    341e:	cb 01       	movw	r24, r22
    3420:	9e 83       	std	Y+6, r25	; 0x06
    3422:	8d 83       	std	Y+5, r24	; 0x05
    3424:	0f c0       	rjmp	.+30     	; 0x3444 <LCD_VoidShiftLeft+0xe2>
    3426:	88 ec       	ldi	r24, 0xC8	; 200
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	9c 83       	std	Y+4, r25	; 0x04
    342c:	8b 83       	std	Y+3, r24	; 0x03
    342e:	8b 81       	ldd	r24, Y+3	; 0x03
    3430:	9c 81       	ldd	r25, Y+4	; 0x04
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	f1 f7       	brne	.-4      	; 0x3432 <LCD_VoidShiftLeft+0xd0>
    3436:	9c 83       	std	Y+4, r25	; 0x04
    3438:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    343a:	8d 81       	ldd	r24, Y+5	; 0x05
    343c:	9e 81       	ldd	r25, Y+6	; 0x06
    343e:	01 97       	sbiw	r24, 0x01	; 1
    3440:	9e 83       	std	Y+6, r25	; 0x06
    3442:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3444:	8d 81       	ldd	r24, Y+5	; 0x05
    3446:	9e 81       	ldd	r25, Y+6	; 0x06
    3448:	00 97       	sbiw	r24, 0x00	; 0
    344a:	69 f7       	brne	.-38     	; 0x3426 <LCD_VoidShiftLeft+0xc4>
    344c:	14 c0       	rjmp	.+40     	; 0x3476 <LCD_VoidShiftLeft+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    344e:	6f 81       	ldd	r22, Y+7	; 0x07
    3450:	78 85       	ldd	r23, Y+8	; 0x08
    3452:	89 85       	ldd	r24, Y+9	; 0x09
    3454:	9a 85       	ldd	r25, Y+10	; 0x0a
    3456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	9e 83       	std	Y+6, r25	; 0x06
    3460:	8d 83       	std	Y+5, r24	; 0x05
    3462:	8d 81       	ldd	r24, Y+5	; 0x05
    3464:	9e 81       	ldd	r25, Y+6	; 0x06
    3466:	9a 83       	std	Y+2, r25	; 0x02
    3468:	89 83       	std	Y+1, r24	; 0x01
    346a:	89 81       	ldd	r24, Y+1	; 0x01
    346c:	9a 81       	ldd	r25, Y+2	; 0x02
    346e:	01 97       	sbiw	r24, 0x01	; 1
    3470:	f1 f7       	brne	.-4      	; 0x346e <LCD_VoidShiftLeft+0x10c>
    3472:	9a 83       	std	Y+2, r25	; 0x02
    3474:	89 83       	std	Y+1, r24	; 0x01
        return Local_CheckStausReturnValue;
}
Void LCD_VoidShiftLeft(_uint8 Copy__Uint8PositionValue, _uint32 Copy__Uint32DelayValue)
{
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    3476:	8f 85       	ldd	r24, Y+15	; 0x0f
    3478:	8f 5f       	subi	r24, 0xFF	; 255
    347a:	8f 87       	std	Y+15, r24	; 0x0f
    347c:	9f 85       	ldd	r25, Y+15	; 0x0f
    347e:	88 89       	ldd	r24, Y+16	; 0x10
    3480:	98 17       	cp	r25, r24
    3482:	08 f4       	brcc	.+2      	; 0x3486 <LCD_VoidShiftLeft+0x124>
    3484:	7f cf       	rjmp	.-258    	; 0x3384 <LCD_VoidShiftLeft+0x22>
        {
                LCD_CheckStatusSendCmnd4bit(0b00011000);
                _delay_ms(Copy__Uint32DelayValue);
        }
}
    3486:	64 96       	adiw	r28, 0x14	; 20
    3488:	0f b6       	in	r0, 0x3f	; 63
    348a:	f8 94       	cli
    348c:	de bf       	out	0x3e, r29	; 62
    348e:	0f be       	out	0x3f, r0	; 63
    3490:	cd bf       	out	0x3d, r28	; 61
    3492:	cf 91       	pop	r28
    3494:	df 91       	pop	r29
    3496:	08 95       	ret

00003498 <LCD_CheckStatusDisplaySpecialChar>:
CheckStatus LCD_CheckStatusDisplaySpecialChar(_uint8 Copy__Uint8Char)
{
    3498:	df 93       	push	r29
    349a:	cf 93       	push	r28
    349c:	00 d0       	rcall	.+0      	; 0x349e <LCD_CheckStatusDisplaySpecialChar+0x6>
    349e:	00 d0       	rcall	.+0      	; 0x34a0 <LCD_CheckStatusDisplaySpecialChar+0x8>
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
    34a4:	8a 83       	std	Y+2, r24	; 0x02
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    34a6:	19 82       	std	Y+1, r1	; 0x01
        if (Copy__Uint8Char <= 8)
    34a8:	8a 81       	ldd	r24, Y+2	; 0x02
    34aa:	89 30       	cpi	r24, 0x09	; 9
    34ac:	08 f0       	brcs	.+2      	; 0x34b0 <LCD_CheckStatusDisplaySpecialChar+0x18>
    34ae:	54 c0       	rjmp	.+168    	; 0x3558 <LCD_CheckStatusDisplaySpecialChar+0xc0>
        {
                switch (Copy__Uint8Char)
    34b0:	8a 81       	ldd	r24, Y+2	; 0x02
    34b2:	28 2f       	mov	r18, r24
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	3c 83       	std	Y+4, r19	; 0x04
    34b8:	2b 83       	std	Y+3, r18	; 0x03
    34ba:	8b 81       	ldd	r24, Y+3	; 0x03
    34bc:	9c 81       	ldd	r25, Y+4	; 0x04
    34be:	84 30       	cpi	r24, 0x04	; 4
    34c0:	91 05       	cpc	r25, r1
    34c2:	b1 f1       	breq	.+108    	; 0x3530 <LCD_CheckStatusDisplaySpecialChar+0x98>
    34c4:	2b 81       	ldd	r18, Y+3	; 0x03
    34c6:	3c 81       	ldd	r19, Y+4	; 0x04
    34c8:	25 30       	cpi	r18, 0x05	; 5
    34ca:	31 05       	cpc	r19, r1
    34cc:	84 f4       	brge	.+32     	; 0x34ee <LCD_CheckStatusDisplaySpecialChar+0x56>
    34ce:	8b 81       	ldd	r24, Y+3	; 0x03
    34d0:	9c 81       	ldd	r25, Y+4	; 0x04
    34d2:	82 30       	cpi	r24, 0x02	; 2
    34d4:	91 05       	cpc	r25, r1
    34d6:	21 f1       	breq	.+72     	; 0x3520 <LCD_CheckStatusDisplaySpecialChar+0x88>
    34d8:	2b 81       	ldd	r18, Y+3	; 0x03
    34da:	3c 81       	ldd	r19, Y+4	; 0x04
    34dc:	23 30       	cpi	r18, 0x03	; 3
    34de:	31 05       	cpc	r19, r1
    34e0:	1c f5       	brge	.+70     	; 0x3528 <LCD_CheckStatusDisplaySpecialChar+0x90>
    34e2:	8b 81       	ldd	r24, Y+3	; 0x03
    34e4:	9c 81       	ldd	r25, Y+4	; 0x04
    34e6:	81 30       	cpi	r24, 0x01	; 1
    34e8:	91 05       	cpc	r25, r1
    34ea:	b1 f0       	breq	.+44     	; 0x3518 <LCD_CheckStatusDisplaySpecialChar+0x80>
    34ec:	37 c0       	rjmp	.+110    	; 0x355c <LCD_CheckStatusDisplaySpecialChar+0xc4>
    34ee:	2b 81       	ldd	r18, Y+3	; 0x03
    34f0:	3c 81       	ldd	r19, Y+4	; 0x04
    34f2:	26 30       	cpi	r18, 0x06	; 6
    34f4:	31 05       	cpc	r19, r1
    34f6:	21 f1       	breq	.+72     	; 0x3540 <LCD_CheckStatusDisplaySpecialChar+0xa8>
    34f8:	8b 81       	ldd	r24, Y+3	; 0x03
    34fa:	9c 81       	ldd	r25, Y+4	; 0x04
    34fc:	86 30       	cpi	r24, 0x06	; 6
    34fe:	91 05       	cpc	r25, r1
    3500:	dc f0       	brlt	.+54     	; 0x3538 <LCD_CheckStatusDisplaySpecialChar+0xa0>
    3502:	2b 81       	ldd	r18, Y+3	; 0x03
    3504:	3c 81       	ldd	r19, Y+4	; 0x04
    3506:	27 30       	cpi	r18, 0x07	; 7
    3508:	31 05       	cpc	r19, r1
    350a:	f1 f0       	breq	.+60     	; 0x3548 <LCD_CheckStatusDisplaySpecialChar+0xb0>
    350c:	8b 81       	ldd	r24, Y+3	; 0x03
    350e:	9c 81       	ldd	r25, Y+4	; 0x04
    3510:	88 30       	cpi	r24, 0x08	; 8
    3512:	91 05       	cpc	r25, r1
    3514:	e9 f0       	breq	.+58     	; 0x3550 <LCD_CheckStatusDisplaySpecialChar+0xb8>
    3516:	22 c0       	rjmp	.+68     	; 0x355c <LCD_CheckStatusDisplaySpecialChar+0xc4>
                {

                case 1:
                        LCD_CheckStatusSendChar4bit(0);
    3518:	80 e0       	ldi	r24, 0x00	; 0
    351a:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
    351e:	1e c0       	rjmp	.+60     	; 0x355c <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 2:
                        LCD_CheckStatusSendChar4bit(1);
    3520:	81 e0       	ldi	r24, 0x01	; 1
    3522:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
    3526:	1a c0       	rjmp	.+52     	; 0x355c <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 3:
                        LCD_CheckStatusSendChar4bit(2);
    3528:	82 e0       	ldi	r24, 0x02	; 2
    352a:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
    352e:	16 c0       	rjmp	.+44     	; 0x355c <LCD_CheckStatusDisplaySpecialChar+0xc4>

                        break;
                case 4:
                        LCD_CheckStatusSendChar4bit(3);
    3530:	83 e0       	ldi	r24, 0x03	; 3
    3532:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
    3536:	12 c0       	rjmp	.+36     	; 0x355c <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 5:
                        LCD_CheckStatusSendChar4bit(4);
    3538:	84 e0       	ldi	r24, 0x04	; 4
    353a:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
    353e:	0e c0       	rjmp	.+28     	; 0x355c <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 6:
                        LCD_CheckStatusSendChar4bit(5);
    3540:	85 e0       	ldi	r24, 0x05	; 5
    3542:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
    3546:	0a c0       	rjmp	.+20     	; 0x355c <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 7:
                        LCD_CheckStatusSendChar4bit(6);
    3548:	86 e0       	ldi	r24, 0x06	; 6
    354a:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
    354e:	06 c0       	rjmp	.+12     	; 0x355c <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 8:
                        LCD_CheckStatusSendChar4bit(7);
    3550:	87 e0       	ldi	r24, 0x07	; 7
    3552:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
    3556:	02 c0       	rjmp	.+4      	; 0x355c <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                }
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	89 83       	std	Y+1, r24	; 0x01
        }
        return Local_CheckStausReturnValue;
    355c:	89 81       	ldd	r24, Y+1	; 0x01
}
    355e:	0f 90       	pop	r0
    3560:	0f 90       	pop	r0
    3562:	0f 90       	pop	r0
    3564:	0f 90       	pop	r0
    3566:	cf 91       	pop	r28
    3568:	df 91       	pop	r29
    356a:	08 95       	ret

0000356c <LCD_VoidInit4bit>:
Void LCD_VoidInit4bit(Void)
{
    356c:	0f 93       	push	r16
    356e:	1f 93       	push	r17
    3570:	df 93       	push	r29
    3572:	cf 93       	push	r28
    3574:	cd b7       	in	r28, 0x3d	; 61
    3576:	de b7       	in	r29, 0x3e	; 62
    3578:	cc 54       	subi	r28, 0x4C	; 76
    357a:	d0 40       	sbci	r29, 0x00	; 0
    357c:	0f b6       	in	r0, 0x3f	; 63
    357e:	f8 94       	cli
    3580:	de bf       	out	0x3e, r29	; 62
    3582:	0f be       	out	0x3f, r0	; 63
    3584:	cd bf       	out	0x3d, r28	; 61
    3586:	fe 01       	movw	r30, r28
    3588:	e7 5b       	subi	r30, 0xB7	; 183
    358a:	ff 4f       	sbci	r31, 0xFF	; 255
    358c:	80 e0       	ldi	r24, 0x00	; 0
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	ac e0       	ldi	r26, 0x0C	; 12
    3592:	b2 e4       	ldi	r27, 0x42	; 66
    3594:	80 83       	st	Z, r24
    3596:	91 83       	std	Z+1, r25	; 0x01
    3598:	a2 83       	std	Z+2, r26	; 0x02
    359a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    359c:	8e 01       	movw	r16, r28
    359e:	0b 5b       	subi	r16, 0xBB	; 187
    35a0:	1f 4f       	sbci	r17, 0xFF	; 255
    35a2:	fe 01       	movw	r30, r28
    35a4:	e7 5b       	subi	r30, 0xB7	; 183
    35a6:	ff 4f       	sbci	r31, 0xFF	; 255
    35a8:	60 81       	ld	r22, Z
    35aa:	71 81       	ldd	r23, Z+1	; 0x01
    35ac:	82 81       	ldd	r24, Z+2	; 0x02
    35ae:	93 81       	ldd	r25, Z+3	; 0x03
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	4a ef       	ldi	r20, 0xFA	; 250
    35b6:	54 e4       	ldi	r21, 0x44	; 68
    35b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35bc:	dc 01       	movw	r26, r24
    35be:	cb 01       	movw	r24, r22
    35c0:	f8 01       	movw	r30, r16
    35c2:	80 83       	st	Z, r24
    35c4:	91 83       	std	Z+1, r25	; 0x01
    35c6:	a2 83       	std	Z+2, r26	; 0x02
    35c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35ca:	fe 01       	movw	r30, r28
    35cc:	eb 5b       	subi	r30, 0xBB	; 187
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	60 81       	ld	r22, Z
    35d2:	71 81       	ldd	r23, Z+1	; 0x01
    35d4:	82 81       	ldd	r24, Z+2	; 0x02
    35d6:	93 81       	ldd	r25, Z+3	; 0x03
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	40 e8       	ldi	r20, 0x80	; 128
    35de:	5f e3       	ldi	r21, 0x3F	; 63
    35e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35e4:	88 23       	and	r24, r24
    35e6:	44 f4       	brge	.+16     	; 0x35f8 <LCD_VoidInit4bit+0x8c>
		__ticks = 1;
    35e8:	fe 01       	movw	r30, r28
    35ea:	ed 5b       	subi	r30, 0xBD	; 189
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	91 83       	std	Z+1, r25	; 0x01
    35f4:	80 83       	st	Z, r24
    35f6:	64 c0       	rjmp	.+200    	; 0x36c0 <LCD_VoidInit4bit+0x154>
	else if (__tmp > 65535)
    35f8:	fe 01       	movw	r30, r28
    35fa:	eb 5b       	subi	r30, 0xBB	; 187
    35fc:	ff 4f       	sbci	r31, 0xFF	; 255
    35fe:	60 81       	ld	r22, Z
    3600:	71 81       	ldd	r23, Z+1	; 0x01
    3602:	82 81       	ldd	r24, Z+2	; 0x02
    3604:	93 81       	ldd	r25, Z+3	; 0x03
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	3f ef       	ldi	r19, 0xFF	; 255
    360a:	4f e7       	ldi	r20, 0x7F	; 127
    360c:	57 e4       	ldi	r21, 0x47	; 71
    360e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3612:	18 16       	cp	r1, r24
    3614:	0c f0       	brlt	.+2      	; 0x3618 <LCD_VoidInit4bit+0xac>
    3616:	43 c0       	rjmp	.+134    	; 0x369e <LCD_VoidInit4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3618:	fe 01       	movw	r30, r28
    361a:	e7 5b       	subi	r30, 0xB7	; 183
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	60 81       	ld	r22, Z
    3620:	71 81       	ldd	r23, Z+1	; 0x01
    3622:	82 81       	ldd	r24, Z+2	; 0x02
    3624:	93 81       	ldd	r25, Z+3	; 0x03
    3626:	20 e0       	ldi	r18, 0x00	; 0
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	40 e2       	ldi	r20, 0x20	; 32
    362c:	51 e4       	ldi	r21, 0x41	; 65
    362e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	8e 01       	movw	r16, r28
    3638:	0d 5b       	subi	r16, 0xBD	; 189
    363a:	1f 4f       	sbci	r17, 0xFF	; 255
    363c:	bc 01       	movw	r22, r24
    363e:	cd 01       	movw	r24, r26
    3640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3644:	dc 01       	movw	r26, r24
    3646:	cb 01       	movw	r24, r22
    3648:	f8 01       	movw	r30, r16
    364a:	91 83       	std	Z+1, r25	; 0x01
    364c:	80 83       	st	Z, r24
    364e:	1f c0       	rjmp	.+62     	; 0x368e <LCD_VoidInit4bit+0x122>
    3650:	fe 01       	movw	r30, r28
    3652:	ef 5b       	subi	r30, 0xBF	; 191
    3654:	ff 4f       	sbci	r31, 0xFF	; 255
    3656:	88 ec       	ldi	r24, 0xC8	; 200
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	91 83       	std	Z+1, r25	; 0x01
    365c:	80 83       	st	Z, r24
    365e:	fe 01       	movw	r30, r28
    3660:	ef 5b       	subi	r30, 0xBF	; 191
    3662:	ff 4f       	sbci	r31, 0xFF	; 255
    3664:	80 81       	ld	r24, Z
    3666:	91 81       	ldd	r25, Z+1	; 0x01
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	f1 f7       	brne	.-4      	; 0x3668 <LCD_VoidInit4bit+0xfc>
    366c:	fe 01       	movw	r30, r28
    366e:	ef 5b       	subi	r30, 0xBF	; 191
    3670:	ff 4f       	sbci	r31, 0xFF	; 255
    3672:	91 83       	std	Z+1, r25	; 0x01
    3674:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3676:	de 01       	movw	r26, r28
    3678:	ad 5b       	subi	r26, 0xBD	; 189
    367a:	bf 4f       	sbci	r27, 0xFF	; 255
    367c:	fe 01       	movw	r30, r28
    367e:	ed 5b       	subi	r30, 0xBD	; 189
    3680:	ff 4f       	sbci	r31, 0xFF	; 255
    3682:	80 81       	ld	r24, Z
    3684:	91 81       	ldd	r25, Z+1	; 0x01
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	11 96       	adiw	r26, 0x01	; 1
    368a:	9c 93       	st	X, r25
    368c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    368e:	fe 01       	movw	r30, r28
    3690:	ed 5b       	subi	r30, 0xBD	; 189
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
    3694:	80 81       	ld	r24, Z
    3696:	91 81       	ldd	r25, Z+1	; 0x01
    3698:	00 97       	sbiw	r24, 0x00	; 0
    369a:	d1 f6       	brne	.-76     	; 0x3650 <LCD_VoidInit4bit+0xe4>
    369c:	24 c0       	rjmp	.+72     	; 0x36e6 <LCD_VoidInit4bit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    369e:	8e 01       	movw	r16, r28
    36a0:	0d 5b       	subi	r16, 0xBD	; 189
    36a2:	1f 4f       	sbci	r17, 0xFF	; 255
    36a4:	fe 01       	movw	r30, r28
    36a6:	eb 5b       	subi	r30, 0xBB	; 187
    36a8:	ff 4f       	sbci	r31, 0xFF	; 255
    36aa:	60 81       	ld	r22, Z
    36ac:	71 81       	ldd	r23, Z+1	; 0x01
    36ae:	82 81       	ldd	r24, Z+2	; 0x02
    36b0:	93 81       	ldd	r25, Z+3	; 0x03
    36b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	f8 01       	movw	r30, r16
    36bc:	91 83       	std	Z+1, r25	; 0x01
    36be:	80 83       	st	Z, r24
    36c0:	fe 01       	movw	r30, r28
    36c2:	ed 5b       	subi	r30, 0xBD	; 189
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	80 81       	ld	r24, Z
    36c8:	91 81       	ldd	r25, Z+1	; 0x01
    36ca:	fe 01       	movw	r30, r28
    36cc:	ff 96       	adiw	r30, 0x3f	; 63
    36ce:	91 83       	std	Z+1, r25	; 0x01
    36d0:	80 83       	st	Z, r24
    36d2:	fe 01       	movw	r30, r28
    36d4:	ff 96       	adiw	r30, 0x3f	; 63
    36d6:	80 81       	ld	r24, Z
    36d8:	91 81       	ldd	r25, Z+1	; 0x01
    36da:	01 97       	sbiw	r24, 0x01	; 1
    36dc:	f1 f7       	brne	.-4      	; 0x36da <LCD_VoidInit4bit+0x16e>
    36de:	fe 01       	movw	r30, r28
    36e0:	ff 96       	adiw	r30, 0x3f	; 63
    36e2:	91 83       	std	Z+1, r25	; 0x01
    36e4:	80 83       	st	Z, r24
        _delay_ms(35);
        LCD_CheckStatusSendCmnd(0b00100000);
    36e6:	80 e2       	ldi	r24, 0x20	; 32
    36e8:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b00100000);
    36ec:	80 e2       	ldi	r24, 0x20	; 32
    36ee:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b11000000);
    36f2:	80 ec       	ldi	r24, 0xC0	; 192
    36f4:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_CheckStatusSendCmnd>
    36f8:	80 e0       	ldi	r24, 0x00	; 0
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	a0 e2       	ldi	r26, 0x20	; 32
    36fe:	b2 e4       	ldi	r27, 0x42	; 66
    3700:	8b af       	std	Y+59, r24	; 0x3b
    3702:	9c af       	std	Y+60, r25	; 0x3c
    3704:	ad af       	std	Y+61, r26	; 0x3d
    3706:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3708:	6b ad       	ldd	r22, Y+59	; 0x3b
    370a:	7c ad       	ldd	r23, Y+60	; 0x3c
    370c:	8d ad       	ldd	r24, Y+61	; 0x3d
    370e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3710:	2b ea       	ldi	r18, 0xAB	; 171
    3712:	3a ea       	ldi	r19, 0xAA	; 170
    3714:	4a e2       	ldi	r20, 0x2A	; 42
    3716:	50 e4       	ldi	r21, 0x40	; 64
    3718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371c:	dc 01       	movw	r26, r24
    371e:	cb 01       	movw	r24, r22
    3720:	8f ab       	std	Y+55, r24	; 0x37
    3722:	98 af       	std	Y+56, r25	; 0x38
    3724:	a9 af       	std	Y+57, r26	; 0x39
    3726:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    3728:	6f a9       	ldd	r22, Y+55	; 0x37
    372a:	78 ad       	ldd	r23, Y+56	; 0x38
    372c:	89 ad       	ldd	r24, Y+57	; 0x39
    372e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	40 e8       	ldi	r20, 0x80	; 128
    3736:	5f e3       	ldi	r21, 0x3F	; 63
    3738:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    373c:	88 23       	and	r24, r24
    373e:	1c f4       	brge	.+6      	; 0x3746 <LCD_VoidInit4bit+0x1da>
		__ticks = 1;
    3740:	81 e0       	ldi	r24, 0x01	; 1
    3742:	8e ab       	std	Y+54, r24	; 0x36
    3744:	91 c0       	rjmp	.+290    	; 0x3868 <LCD_VoidInit4bit+0x2fc>
	else if (__tmp > 255)
    3746:	6f a9       	ldd	r22, Y+55	; 0x37
    3748:	78 ad       	ldd	r23, Y+56	; 0x38
    374a:	89 ad       	ldd	r24, Y+57	; 0x39
    374c:	9a ad       	ldd	r25, Y+58	; 0x3a
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	4f e7       	ldi	r20, 0x7F	; 127
    3754:	53 e4       	ldi	r21, 0x43	; 67
    3756:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    375a:	18 16       	cp	r1, r24
    375c:	0c f0       	brlt	.+2      	; 0x3760 <LCD_VoidInit4bit+0x1f4>
    375e:	7b c0       	rjmp	.+246    	; 0x3856 <LCD_VoidInit4bit+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    3760:	6b ad       	ldd	r22, Y+59	; 0x3b
    3762:	7c ad       	ldd	r23, Y+60	; 0x3c
    3764:	8d ad       	ldd	r24, Y+61	; 0x3d
    3766:	9e ad       	ldd	r25, Y+62	; 0x3e
    3768:	20 e0       	ldi	r18, 0x00	; 0
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	4a e7       	ldi	r20, 0x7A	; 122
    376e:	54 e4       	ldi	r21, 0x44	; 68
    3770:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3774:	dc 01       	movw	r26, r24
    3776:	cb 01       	movw	r24, r22
    3778:	8a ab       	std	Y+50, r24	; 0x32
    377a:	9b ab       	std	Y+51, r25	; 0x33
    377c:	ac ab       	std	Y+52, r26	; 0x34
    377e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3780:	6a a9       	ldd	r22, Y+50	; 0x32
    3782:	7b a9       	ldd	r23, Y+51	; 0x33
    3784:	8c a9       	ldd	r24, Y+52	; 0x34
    3786:	9d a9       	ldd	r25, Y+53	; 0x35
    3788:	20 e0       	ldi	r18, 0x00	; 0
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	4a ef       	ldi	r20, 0xFA	; 250
    378e:	54 e4       	ldi	r21, 0x44	; 68
    3790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	8e a7       	std	Y+46, r24	; 0x2e
    379a:	9f a7       	std	Y+47, r25	; 0x2f
    379c:	a8 ab       	std	Y+48, r26	; 0x30
    379e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    37a0:	6e a5       	ldd	r22, Y+46	; 0x2e
    37a2:	7f a5       	ldd	r23, Y+47	; 0x2f
    37a4:	88 a9       	ldd	r24, Y+48	; 0x30
    37a6:	99 a9       	ldd	r25, Y+49	; 0x31
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	40 e8       	ldi	r20, 0x80	; 128
    37ae:	5f e3       	ldi	r21, 0x3F	; 63
    37b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37b4:	88 23       	and	r24, r24
    37b6:	2c f4       	brge	.+10     	; 0x37c2 <LCD_VoidInit4bit+0x256>
		__ticks = 1;
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	9d a7       	std	Y+45, r25	; 0x2d
    37be:	8c a7       	std	Y+44, r24	; 0x2c
    37c0:	3f c0       	rjmp	.+126    	; 0x3840 <LCD_VoidInit4bit+0x2d4>
	else if (__tmp > 65535)
    37c2:	6e a5       	ldd	r22, Y+46	; 0x2e
    37c4:	7f a5       	ldd	r23, Y+47	; 0x2f
    37c6:	88 a9       	ldd	r24, Y+48	; 0x30
    37c8:	99 a9       	ldd	r25, Y+49	; 0x31
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	3f ef       	ldi	r19, 0xFF	; 255
    37ce:	4f e7       	ldi	r20, 0x7F	; 127
    37d0:	57 e4       	ldi	r21, 0x47	; 71
    37d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37d6:	18 16       	cp	r1, r24
    37d8:	4c f5       	brge	.+82     	; 0x382c <LCD_VoidInit4bit+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37da:	6a a9       	ldd	r22, Y+50	; 0x32
    37dc:	7b a9       	ldd	r23, Y+51	; 0x33
    37de:	8c a9       	ldd	r24, Y+52	; 0x34
    37e0:	9d a9       	ldd	r25, Y+53	; 0x35
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	40 e2       	ldi	r20, 0x20	; 32
    37e8:	51 e4       	ldi	r21, 0x41	; 65
    37ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ee:	dc 01       	movw	r26, r24
    37f0:	cb 01       	movw	r24, r22
    37f2:	bc 01       	movw	r22, r24
    37f4:	cd 01       	movw	r24, r26
    37f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37fa:	dc 01       	movw	r26, r24
    37fc:	cb 01       	movw	r24, r22
    37fe:	9d a7       	std	Y+45, r25	; 0x2d
    3800:	8c a7       	std	Y+44, r24	; 0x2c
    3802:	0f c0       	rjmp	.+30     	; 0x3822 <LCD_VoidInit4bit+0x2b6>
    3804:	88 ec       	ldi	r24, 0xC8	; 200
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	9b a7       	std	Y+43, r25	; 0x2b
    380a:	8a a7       	std	Y+42, r24	; 0x2a
    380c:	8a a5       	ldd	r24, Y+42	; 0x2a
    380e:	9b a5       	ldd	r25, Y+43	; 0x2b
    3810:	01 97       	sbiw	r24, 0x01	; 1
    3812:	f1 f7       	brne	.-4      	; 0x3810 <LCD_VoidInit4bit+0x2a4>
    3814:	9b a7       	std	Y+43, r25	; 0x2b
    3816:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3818:	8c a5       	ldd	r24, Y+44	; 0x2c
    381a:	9d a5       	ldd	r25, Y+45	; 0x2d
    381c:	01 97       	sbiw	r24, 0x01	; 1
    381e:	9d a7       	std	Y+45, r25	; 0x2d
    3820:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3822:	8c a5       	ldd	r24, Y+44	; 0x2c
    3824:	9d a5       	ldd	r25, Y+45	; 0x2d
    3826:	00 97       	sbiw	r24, 0x00	; 0
    3828:	69 f7       	brne	.-38     	; 0x3804 <LCD_VoidInit4bit+0x298>
    382a:	24 c0       	rjmp	.+72     	; 0x3874 <LCD_VoidInit4bit+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    382c:	6e a5       	ldd	r22, Y+46	; 0x2e
    382e:	7f a5       	ldd	r23, Y+47	; 0x2f
    3830:	88 a9       	ldd	r24, Y+48	; 0x30
    3832:	99 a9       	ldd	r25, Y+49	; 0x31
    3834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3838:	dc 01       	movw	r26, r24
    383a:	cb 01       	movw	r24, r22
    383c:	9d a7       	std	Y+45, r25	; 0x2d
    383e:	8c a7       	std	Y+44, r24	; 0x2c
    3840:	8c a5       	ldd	r24, Y+44	; 0x2c
    3842:	9d a5       	ldd	r25, Y+45	; 0x2d
    3844:	99 a7       	std	Y+41, r25	; 0x29
    3846:	88 a7       	std	Y+40, r24	; 0x28
    3848:	88 a5       	ldd	r24, Y+40	; 0x28
    384a:	99 a5       	ldd	r25, Y+41	; 0x29
    384c:	01 97       	sbiw	r24, 0x01	; 1
    384e:	f1 f7       	brne	.-4      	; 0x384c <LCD_VoidInit4bit+0x2e0>
    3850:	99 a7       	std	Y+41, r25	; 0x29
    3852:	88 a7       	std	Y+40, r24	; 0x28
    3854:	0f c0       	rjmp	.+30     	; 0x3874 <LCD_VoidInit4bit+0x308>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3856:	6f a9       	ldd	r22, Y+55	; 0x37
    3858:	78 ad       	ldd	r23, Y+56	; 0x38
    385a:	89 ad       	ldd	r24, Y+57	; 0x39
    385c:	9a ad       	ldd	r25, Y+58	; 0x3a
    385e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	8e ab       	std	Y+54, r24	; 0x36
    3868:	8e a9       	ldd	r24, Y+54	; 0x36
    386a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    386c:	8f a1       	ldd	r24, Y+39	; 0x27
    386e:	8a 95       	dec	r24
    3870:	f1 f7       	brne	.-4      	; 0x386e <LCD_VoidInit4bit+0x302>
    3872:	8f a3       	std	Y+39, r24	; 0x27
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00000000);
    3874:	80 e0       	ldi	r24, 0x00	; 0
    3876:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b11110000);
    387a:	80 ef       	ldi	r24, 0xF0	; 240
    387c:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_CheckStatusSendCmnd>
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	a0 e2       	ldi	r26, 0x20	; 32
    3886:	b2 e4       	ldi	r27, 0x42	; 66
    3888:	8b a3       	std	Y+35, r24	; 0x23
    388a:	9c a3       	std	Y+36, r25	; 0x24
    388c:	ad a3       	std	Y+37, r26	; 0x25
    388e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3890:	6b a1       	ldd	r22, Y+35	; 0x23
    3892:	7c a1       	ldd	r23, Y+36	; 0x24
    3894:	8d a1       	ldd	r24, Y+37	; 0x25
    3896:	9e a1       	ldd	r25, Y+38	; 0x26
    3898:	2b ea       	ldi	r18, 0xAB	; 171
    389a:	3a ea       	ldi	r19, 0xAA	; 170
    389c:	4a e2       	ldi	r20, 0x2A	; 42
    389e:	50 e4       	ldi	r21, 0x40	; 64
    38a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a4:	dc 01       	movw	r26, r24
    38a6:	cb 01       	movw	r24, r22
    38a8:	8f 8f       	std	Y+31, r24	; 0x1f
    38aa:	98 a3       	std	Y+32, r25	; 0x20
    38ac:	a9 a3       	std	Y+33, r26	; 0x21
    38ae:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    38b0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    38b2:	78 a1       	ldd	r23, Y+32	; 0x20
    38b4:	89 a1       	ldd	r24, Y+33	; 0x21
    38b6:	9a a1       	ldd	r25, Y+34	; 0x22
    38b8:	20 e0       	ldi	r18, 0x00	; 0
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	40 e8       	ldi	r20, 0x80	; 128
    38be:	5f e3       	ldi	r21, 0x3F	; 63
    38c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38c4:	88 23       	and	r24, r24
    38c6:	1c f4       	brge	.+6      	; 0x38ce <LCD_VoidInit4bit+0x362>
		__ticks = 1;
    38c8:	81 e0       	ldi	r24, 0x01	; 1
    38ca:	8e 8f       	std	Y+30, r24	; 0x1e
    38cc:	91 c0       	rjmp	.+290    	; 0x39f0 <LCD_VoidInit4bit+0x484>
	else if (__tmp > 255)
    38ce:	6f 8d       	ldd	r22, Y+31	; 0x1f
    38d0:	78 a1       	ldd	r23, Y+32	; 0x20
    38d2:	89 a1       	ldd	r24, Y+33	; 0x21
    38d4:	9a a1       	ldd	r25, Y+34	; 0x22
    38d6:	20 e0       	ldi	r18, 0x00	; 0
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	4f e7       	ldi	r20, 0x7F	; 127
    38dc:	53 e4       	ldi	r21, 0x43	; 67
    38de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38e2:	18 16       	cp	r1, r24
    38e4:	0c f0       	brlt	.+2      	; 0x38e8 <LCD_VoidInit4bit+0x37c>
    38e6:	7b c0       	rjmp	.+246    	; 0x39de <LCD_VoidInit4bit+0x472>
	{
		_delay_ms(__us / 1000.0);
    38e8:	6b a1       	ldd	r22, Y+35	; 0x23
    38ea:	7c a1       	ldd	r23, Y+36	; 0x24
    38ec:	8d a1       	ldd	r24, Y+37	; 0x25
    38ee:	9e a1       	ldd	r25, Y+38	; 0x26
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	4a e7       	ldi	r20, 0x7A	; 122
    38f6:	54 e4       	ldi	r21, 0x44	; 68
    38f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    38fc:	dc 01       	movw	r26, r24
    38fe:	cb 01       	movw	r24, r22
    3900:	8a 8f       	std	Y+26, r24	; 0x1a
    3902:	9b 8f       	std	Y+27, r25	; 0x1b
    3904:	ac 8f       	std	Y+28, r26	; 0x1c
    3906:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3908:	6a 8d       	ldd	r22, Y+26	; 0x1a
    390a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    390c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    390e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3910:	20 e0       	ldi	r18, 0x00	; 0
    3912:	30 e0       	ldi	r19, 0x00	; 0
    3914:	4a ef       	ldi	r20, 0xFA	; 250
    3916:	54 e4       	ldi	r21, 0x44	; 68
    3918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	8e 8b       	std	Y+22, r24	; 0x16
    3922:	9f 8b       	std	Y+23, r25	; 0x17
    3924:	a8 8f       	std	Y+24, r26	; 0x18
    3926:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    3928:	6e 89       	ldd	r22, Y+22	; 0x16
    392a:	7f 89       	ldd	r23, Y+23	; 0x17
    392c:	88 8d       	ldd	r24, Y+24	; 0x18
    392e:	99 8d       	ldd	r25, Y+25	; 0x19
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	40 e8       	ldi	r20, 0x80	; 128
    3936:	5f e3       	ldi	r21, 0x3F	; 63
    3938:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    393c:	88 23       	and	r24, r24
    393e:	2c f4       	brge	.+10     	; 0x394a <LCD_VoidInit4bit+0x3de>
		__ticks = 1;
    3940:	81 e0       	ldi	r24, 0x01	; 1
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	9d 8b       	std	Y+21, r25	; 0x15
    3946:	8c 8b       	std	Y+20, r24	; 0x14
    3948:	3f c0       	rjmp	.+126    	; 0x39c8 <LCD_VoidInit4bit+0x45c>
	else if (__tmp > 65535)
    394a:	6e 89       	ldd	r22, Y+22	; 0x16
    394c:	7f 89       	ldd	r23, Y+23	; 0x17
    394e:	88 8d       	ldd	r24, Y+24	; 0x18
    3950:	99 8d       	ldd	r25, Y+25	; 0x19
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	3f ef       	ldi	r19, 0xFF	; 255
    3956:	4f e7       	ldi	r20, 0x7F	; 127
    3958:	57 e4       	ldi	r21, 0x47	; 71
    395a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    395e:	18 16       	cp	r1, r24
    3960:	4c f5       	brge	.+82     	; 0x39b4 <LCD_VoidInit4bit+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3962:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3964:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3966:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3968:	9d 8d       	ldd	r25, Y+29	; 0x1d
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	40 e2       	ldi	r20, 0x20	; 32
    3970:	51 e4       	ldi	r21, 0x41	; 65
    3972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3976:	dc 01       	movw	r26, r24
    3978:	cb 01       	movw	r24, r22
    397a:	bc 01       	movw	r22, r24
    397c:	cd 01       	movw	r24, r26
    397e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3982:	dc 01       	movw	r26, r24
    3984:	cb 01       	movw	r24, r22
    3986:	9d 8b       	std	Y+21, r25	; 0x15
    3988:	8c 8b       	std	Y+20, r24	; 0x14
    398a:	0f c0       	rjmp	.+30     	; 0x39aa <LCD_VoidInit4bit+0x43e>
    398c:	88 ec       	ldi	r24, 0xC8	; 200
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	9b 8b       	std	Y+19, r25	; 0x13
    3992:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3994:	8a 89       	ldd	r24, Y+18	; 0x12
    3996:	9b 89       	ldd	r25, Y+19	; 0x13
    3998:	01 97       	sbiw	r24, 0x01	; 1
    399a:	f1 f7       	brne	.-4      	; 0x3998 <LCD_VoidInit4bit+0x42c>
    399c:	9b 8b       	std	Y+19, r25	; 0x13
    399e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a0:	8c 89       	ldd	r24, Y+20	; 0x14
    39a2:	9d 89       	ldd	r25, Y+21	; 0x15
    39a4:	01 97       	sbiw	r24, 0x01	; 1
    39a6:	9d 8b       	std	Y+21, r25	; 0x15
    39a8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39aa:	8c 89       	ldd	r24, Y+20	; 0x14
    39ac:	9d 89       	ldd	r25, Y+21	; 0x15
    39ae:	00 97       	sbiw	r24, 0x00	; 0
    39b0:	69 f7       	brne	.-38     	; 0x398c <LCD_VoidInit4bit+0x420>
    39b2:	24 c0       	rjmp	.+72     	; 0x39fc <LCD_VoidInit4bit+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39b4:	6e 89       	ldd	r22, Y+22	; 0x16
    39b6:	7f 89       	ldd	r23, Y+23	; 0x17
    39b8:	88 8d       	ldd	r24, Y+24	; 0x18
    39ba:	99 8d       	ldd	r25, Y+25	; 0x19
    39bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	9d 8b       	std	Y+21, r25	; 0x15
    39c6:	8c 8b       	std	Y+20, r24	; 0x14
    39c8:	8c 89       	ldd	r24, Y+20	; 0x14
    39ca:	9d 89       	ldd	r25, Y+21	; 0x15
    39cc:	99 8b       	std	Y+17, r25	; 0x11
    39ce:	88 8b       	std	Y+16, r24	; 0x10
    39d0:	88 89       	ldd	r24, Y+16	; 0x10
    39d2:	99 89       	ldd	r25, Y+17	; 0x11
    39d4:	01 97       	sbiw	r24, 0x01	; 1
    39d6:	f1 f7       	brne	.-4      	; 0x39d4 <LCD_VoidInit4bit+0x468>
    39d8:	99 8b       	std	Y+17, r25	; 0x11
    39da:	88 8b       	std	Y+16, r24	; 0x10
    39dc:	0f c0       	rjmp	.+30     	; 0x39fc <LCD_VoidInit4bit+0x490>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    39de:	6f 8d       	ldd	r22, Y+31	; 0x1f
    39e0:	78 a1       	ldd	r23, Y+32	; 0x20
    39e2:	89 a1       	ldd	r24, Y+33	; 0x21
    39e4:	9a a1       	ldd	r25, Y+34	; 0x22
    39e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ea:	dc 01       	movw	r26, r24
    39ec:	cb 01       	movw	r24, r22
    39ee:	8e 8f       	std	Y+30, r24	; 0x1e
    39f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    39f2:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    39f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    39f6:	8a 95       	dec	r24
    39f8:	f1 f7       	brne	.-4      	; 0x39f6 <LCD_VoidInit4bit+0x48a>
    39fa:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00000000);
    39fc:	80 e0       	ldi	r24, 0x00	; 0
    39fe:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b00010000);
    3a02:	80 e1       	ldi	r24, 0x10	; 16
    3a04:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_CheckStatusSendCmnd>
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	a0 e0       	ldi	r26, 0x00	; 0
    3a0e:	b0 e4       	ldi	r27, 0x40	; 64
    3a10:	8b 87       	std	Y+11, r24	; 0x0b
    3a12:	9c 87       	std	Y+12, r25	; 0x0c
    3a14:	ad 87       	std	Y+13, r26	; 0x0d
    3a16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	4a ef       	ldi	r20, 0xFA	; 250
    3a26:	54 e4       	ldi	r21, 0x44	; 68
    3a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2c:	dc 01       	movw	r26, r24
    3a2e:	cb 01       	movw	r24, r22
    3a30:	8f 83       	std	Y+7, r24	; 0x07
    3a32:	98 87       	std	Y+8, r25	; 0x08
    3a34:	a9 87       	std	Y+9, r26	; 0x09
    3a36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a38:	6f 81       	ldd	r22, Y+7	; 0x07
    3a3a:	78 85       	ldd	r23, Y+8	; 0x08
    3a3c:	89 85       	ldd	r24, Y+9	; 0x09
    3a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	40 e8       	ldi	r20, 0x80	; 128
    3a46:	5f e3       	ldi	r21, 0x3F	; 63
    3a48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a4c:	88 23       	and	r24, r24
    3a4e:	2c f4       	brge	.+10     	; 0x3a5a <LCD_VoidInit4bit+0x4ee>
		__ticks = 1;
    3a50:	81 e0       	ldi	r24, 0x01	; 1
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	9e 83       	std	Y+6, r25	; 0x06
    3a56:	8d 83       	std	Y+5, r24	; 0x05
    3a58:	3f c0       	rjmp	.+126    	; 0x3ad8 <LCD_VoidInit4bit+0x56c>
	else if (__tmp > 65535)
    3a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a5c:	78 85       	ldd	r23, Y+8	; 0x08
    3a5e:	89 85       	ldd	r24, Y+9	; 0x09
    3a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	3f ef       	ldi	r19, 0xFF	; 255
    3a66:	4f e7       	ldi	r20, 0x7F	; 127
    3a68:	57 e4       	ldi	r21, 0x47	; 71
    3a6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a6e:	18 16       	cp	r1, r24
    3a70:	4c f5       	brge	.+82     	; 0x3ac4 <LCD_VoidInit4bit+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a7a:	20 e0       	ldi	r18, 0x00	; 0
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	40 e2       	ldi	r20, 0x20	; 32
    3a80:	51 e4       	ldi	r21, 0x41	; 65
    3a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a86:	dc 01       	movw	r26, r24
    3a88:	cb 01       	movw	r24, r22
    3a8a:	bc 01       	movw	r22, r24
    3a8c:	cd 01       	movw	r24, r26
    3a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a92:	dc 01       	movw	r26, r24
    3a94:	cb 01       	movw	r24, r22
    3a96:	9e 83       	std	Y+6, r25	; 0x06
    3a98:	8d 83       	std	Y+5, r24	; 0x05
    3a9a:	0f c0       	rjmp	.+30     	; 0x3aba <LCD_VoidInit4bit+0x54e>
    3a9c:	88 ec       	ldi	r24, 0xC8	; 200
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	9c 83       	std	Y+4, r25	; 0x04
    3aa2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    3aa8:	01 97       	sbiw	r24, 0x01	; 1
    3aaa:	f1 f7       	brne	.-4      	; 0x3aa8 <LCD_VoidInit4bit+0x53c>
    3aac:	9c 83       	std	Y+4, r25	; 0x04
    3aae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab4:	01 97       	sbiw	r24, 0x01	; 1
    3ab6:	9e 83       	std	Y+6, r25	; 0x06
    3ab8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aba:	8d 81       	ldd	r24, Y+5	; 0x05
    3abc:	9e 81       	ldd	r25, Y+6	; 0x06
    3abe:	00 97       	sbiw	r24, 0x00	; 0
    3ac0:	69 f7       	brne	.-38     	; 0x3a9c <LCD_VoidInit4bit+0x530>
    3ac2:	14 c0       	rjmp	.+40     	; 0x3aec <LCD_VoidInit4bit+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ac6:	78 85       	ldd	r23, Y+8	; 0x08
    3ac8:	89 85       	ldd	r24, Y+9	; 0x09
    3aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    3acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad0:	dc 01       	movw	r26, r24
    3ad2:	cb 01       	movw	r24, r22
    3ad4:	9e 83       	std	Y+6, r25	; 0x06
    3ad6:	8d 83       	std	Y+5, r24	; 0x05
    3ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    3ada:	9e 81       	ldd	r25, Y+6	; 0x06
    3adc:	9a 83       	std	Y+2, r25	; 0x02
    3ade:	89 83       	std	Y+1, r24	; 0x01
    3ae0:	89 81       	ldd	r24, Y+1	; 0x01
    3ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae4:	01 97       	sbiw	r24, 0x01	; 1
    3ae6:	f1 f7       	brne	.-4      	; 0x3ae4 <LCD_VoidInit4bit+0x578>
    3ae8:	9a 83       	std	Y+2, r25	; 0x02
    3aea:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
        LCD_CheckStatusSendCmnd(0b00000000);
    3aec:	80 e0       	ldi	r24, 0x00	; 0
    3aee:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b01100000);
    3af2:	80 e6       	ldi	r24, 0x60	; 96
    3af4:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_CheckStatusSendCmnd>
}
    3af8:	c4 5b       	subi	r28, 0xB4	; 180
    3afa:	df 4f       	sbci	r29, 0xFF	; 255
    3afc:	0f b6       	in	r0, 0x3f	; 63
    3afe:	f8 94       	cli
    3b00:	de bf       	out	0x3e, r29	; 62
    3b02:	0f be       	out	0x3f, r0	; 63
    3b04:	cd bf       	out	0x3d, r28	; 61
    3b06:	cf 91       	pop	r28
    3b08:	df 91       	pop	r29
    3b0a:	1f 91       	pop	r17
    3b0c:	0f 91       	pop	r16
    3b0e:	08 95       	ret

00003b10 <LCD_CheckStatusSendChar4bit>:

CheckStatus LCD_CheckStatusSendChar4bit(_uint8 Copy__Uint8Char)
{
    3b10:	0f 93       	push	r16
    3b12:	1f 93       	push	r17
    3b14:	df 93       	push	r29
    3b16:	cf 93       	push	r28
    3b18:	cd b7       	in	r28, 0x3d	; 61
    3b1a:	de b7       	in	r29, 0x3e	; 62
    3b1c:	c2 56       	subi	r28, 0x62	; 98
    3b1e:	d0 40       	sbci	r29, 0x00	; 0
    3b20:	0f b6       	in	r0, 0x3f	; 63
    3b22:	f8 94       	cli
    3b24:	de bf       	out	0x3e, r29	; 62
    3b26:	0f be       	out	0x3f, r0	; 63
    3b28:	cd bf       	out	0x3d, r28	; 61
    3b2a:	fe 01       	movw	r30, r28
    3b2c:	ee 59       	subi	r30, 0x9E	; 158
    3b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b30:	80 83       	st	Z, r24
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    3b32:	fe 01       	movw	r30, r28
    3b34:	ef 59       	subi	r30, 0x9F	; 159
    3b36:	ff 4f       	sbci	r31, 0xFF	; 255
    3b38:	10 82       	st	Z, r1
	         3-Send CHAR byte  to the Data Pins of LCD
	         4-PULSE of Enable E = 1 ,E = 0
	        */
        if (Copy__Uint8Char <= 255)
        {
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_HIGH);
    3b3a:	80 e0       	ldi	r24, 0x00	; 0
    3b3c:	60 e0       	ldi	r22, 0x00	; 0
    3b3e:	41 e0       	ldi	r20, 0x01	; 1
    3b40:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    3b44:	80 e0       	ldi	r24, 0x00	; 0
    3b46:	61 e0       	ldi	r22, 0x01	; 1
    3b48:	40 e0       	ldi	r20, 0x00	; 0
    3b4a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, Copy__Uint8Char & LCD__UINT8_DATA_PINS);
    3b4e:	fe 01       	movw	r30, r28
    3b50:	ee 59       	subi	r30, 0x9E	; 158
    3b52:	ff 4f       	sbci	r31, 0xFF	; 255
    3b54:	80 81       	ld	r24, Z
    3b56:	98 2f       	mov	r25, r24
    3b58:	90 7f       	andi	r25, 0xF0	; 240
    3b5a:	83 e0       	ldi	r24, 0x03	; 3
    3b5c:	69 2f       	mov	r22, r25
    3b5e:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    3b62:	80 e0       	ldi	r24, 0x00	; 0
    3b64:	62 e0       	ldi	r22, 0x02	; 2
    3b66:	41 e0       	ldi	r20, 0x01	; 1
    3b68:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>
    3b6c:	fe 01       	movw	r30, r28
    3b6e:	e3 5a       	subi	r30, 0xA3	; 163
    3b70:	ff 4f       	sbci	r31, 0xFF	; 255
    3b72:	80 e0       	ldi	r24, 0x00	; 0
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	a0 e8       	ldi	r26, 0x80	; 128
    3b78:	bf e3       	ldi	r27, 0x3F	; 63
    3b7a:	80 83       	st	Z, r24
    3b7c:	91 83       	std	Z+1, r25	; 0x01
    3b7e:	a2 83       	std	Z+2, r26	; 0x02
    3b80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3b82:	8e 01       	movw	r16, r28
    3b84:	07 5a       	subi	r16, 0xA7	; 167
    3b86:	1f 4f       	sbci	r17, 0xFF	; 255
    3b88:	fe 01       	movw	r30, r28
    3b8a:	e3 5a       	subi	r30, 0xA3	; 163
    3b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8e:	60 81       	ld	r22, Z
    3b90:	71 81       	ldd	r23, Z+1	; 0x01
    3b92:	82 81       	ldd	r24, Z+2	; 0x02
    3b94:	93 81       	ldd	r25, Z+3	; 0x03
    3b96:	2b ea       	ldi	r18, 0xAB	; 171
    3b98:	3a ea       	ldi	r19, 0xAA	; 170
    3b9a:	4a e2       	ldi	r20, 0x2A	; 42
    3b9c:	50 e4       	ldi	r21, 0x40	; 64
    3b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	cb 01       	movw	r24, r22
    3ba6:	f8 01       	movw	r30, r16
    3ba8:	80 83       	st	Z, r24
    3baa:	91 83       	std	Z+1, r25	; 0x01
    3bac:	a2 83       	std	Z+2, r26	; 0x02
    3bae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bb0:	fe 01       	movw	r30, r28
    3bb2:	e7 5a       	subi	r30, 0xA7	; 167
    3bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb6:	60 81       	ld	r22, Z
    3bb8:	71 81       	ldd	r23, Z+1	; 0x01
    3bba:	82 81       	ldd	r24, Z+2	; 0x02
    3bbc:	93 81       	ldd	r25, Z+3	; 0x03
    3bbe:	20 e0       	ldi	r18, 0x00	; 0
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	40 e8       	ldi	r20, 0x80	; 128
    3bc4:	5f e3       	ldi	r21, 0x3F	; 63
    3bc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bca:	88 23       	and	r24, r24
    3bcc:	34 f4       	brge	.+12     	; 0x3bda <LCD_CheckStatusSendChar4bit+0xca>
		__ticks = 1;
    3bce:	fe 01       	movw	r30, r28
    3bd0:	e8 5a       	subi	r30, 0xA8	; 168
    3bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	80 83       	st	Z, r24
    3bd8:	e0 c0       	rjmp	.+448    	; 0x3d9a <LCD_CheckStatusSendChar4bit+0x28a>
	else if (__tmp > 255)
    3bda:	fe 01       	movw	r30, r28
    3bdc:	e7 5a       	subi	r30, 0xA7	; 167
    3bde:	ff 4f       	sbci	r31, 0xFF	; 255
    3be0:	60 81       	ld	r22, Z
    3be2:	71 81       	ldd	r23, Z+1	; 0x01
    3be4:	82 81       	ldd	r24, Z+2	; 0x02
    3be6:	93 81       	ldd	r25, Z+3	; 0x03
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	4f e7       	ldi	r20, 0x7F	; 127
    3bee:	53 e4       	ldi	r21, 0x43	; 67
    3bf0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bf4:	18 16       	cp	r1, r24
    3bf6:	0c f0       	brlt	.+2      	; 0x3bfa <LCD_CheckStatusSendChar4bit+0xea>
    3bf8:	c0 c0       	rjmp	.+384    	; 0x3d7a <LCD_CheckStatusSendChar4bit+0x26a>
	{
		_delay_ms(__us / 1000.0);
    3bfa:	fe 01       	movw	r30, r28
    3bfc:	e3 5a       	subi	r30, 0xA3	; 163
    3bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3c00:	60 81       	ld	r22, Z
    3c02:	71 81       	ldd	r23, Z+1	; 0x01
    3c04:	82 81       	ldd	r24, Z+2	; 0x02
    3c06:	93 81       	ldd	r25, Z+3	; 0x03
    3c08:	20 e0       	ldi	r18, 0x00	; 0
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	4a e7       	ldi	r20, 0x7A	; 122
    3c0e:	54 e4       	ldi	r21, 0x44	; 68
    3c10:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3c14:	dc 01       	movw	r26, r24
    3c16:	cb 01       	movw	r24, r22
    3c18:	fe 01       	movw	r30, r28
    3c1a:	ec 5a       	subi	r30, 0xAC	; 172
    3c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1e:	80 83       	st	Z, r24
    3c20:	91 83       	std	Z+1, r25	; 0x01
    3c22:	a2 83       	std	Z+2, r26	; 0x02
    3c24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c26:	8e 01       	movw	r16, r28
    3c28:	00 5b       	subi	r16, 0xB0	; 176
    3c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	ec 5a       	subi	r30, 0xAC	; 172
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	60 81       	ld	r22, Z
    3c34:	71 81       	ldd	r23, Z+1	; 0x01
    3c36:	82 81       	ldd	r24, Z+2	; 0x02
    3c38:	93 81       	ldd	r25, Z+3	; 0x03
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	4a ef       	ldi	r20, 0xFA	; 250
    3c40:	54 e4       	ldi	r21, 0x44	; 68
    3c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	f8 01       	movw	r30, r16
    3c4c:	80 83       	st	Z, r24
    3c4e:	91 83       	std	Z+1, r25	; 0x01
    3c50:	a2 83       	std	Z+2, r26	; 0x02
    3c52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c54:	fe 01       	movw	r30, r28
    3c56:	e0 5b       	subi	r30, 0xB0	; 176
    3c58:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5a:	60 81       	ld	r22, Z
    3c5c:	71 81       	ldd	r23, Z+1	; 0x01
    3c5e:	82 81       	ldd	r24, Z+2	; 0x02
    3c60:	93 81       	ldd	r25, Z+3	; 0x03
    3c62:	20 e0       	ldi	r18, 0x00	; 0
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	40 e8       	ldi	r20, 0x80	; 128
    3c68:	5f e3       	ldi	r21, 0x3F	; 63
    3c6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c6e:	88 23       	and	r24, r24
    3c70:	44 f4       	brge	.+16     	; 0x3c82 <LCD_CheckStatusSendChar4bit+0x172>
		__ticks = 1;
    3c72:	fe 01       	movw	r30, r28
    3c74:	e2 5b       	subi	r30, 0xB2	; 178
    3c76:	ff 4f       	sbci	r31, 0xFF	; 255
    3c78:	81 e0       	ldi	r24, 0x01	; 1
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	91 83       	std	Z+1, r25	; 0x01
    3c7e:	80 83       	st	Z, r24
    3c80:	64 c0       	rjmp	.+200    	; 0x3d4a <LCD_CheckStatusSendChar4bit+0x23a>
	else if (__tmp > 65535)
    3c82:	fe 01       	movw	r30, r28
    3c84:	e0 5b       	subi	r30, 0xB0	; 176
    3c86:	ff 4f       	sbci	r31, 0xFF	; 255
    3c88:	60 81       	ld	r22, Z
    3c8a:	71 81       	ldd	r23, Z+1	; 0x01
    3c8c:	82 81       	ldd	r24, Z+2	; 0x02
    3c8e:	93 81       	ldd	r25, Z+3	; 0x03
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	3f ef       	ldi	r19, 0xFF	; 255
    3c94:	4f e7       	ldi	r20, 0x7F	; 127
    3c96:	57 e4       	ldi	r21, 0x47	; 71
    3c98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c9c:	18 16       	cp	r1, r24
    3c9e:	0c f0       	brlt	.+2      	; 0x3ca2 <LCD_CheckStatusSendChar4bit+0x192>
    3ca0:	43 c0       	rjmp	.+134    	; 0x3d28 <LCD_CheckStatusSendChar4bit+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ca2:	fe 01       	movw	r30, r28
    3ca4:	ec 5a       	subi	r30, 0xAC	; 172
    3ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca8:	60 81       	ld	r22, Z
    3caa:	71 81       	ldd	r23, Z+1	; 0x01
    3cac:	82 81       	ldd	r24, Z+2	; 0x02
    3cae:	93 81       	ldd	r25, Z+3	; 0x03
    3cb0:	20 e0       	ldi	r18, 0x00	; 0
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	40 e2       	ldi	r20, 0x20	; 32
    3cb6:	51 e4       	ldi	r21, 0x41	; 65
    3cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	8e 01       	movw	r16, r28
    3cc2:	02 5b       	subi	r16, 0xB2	; 178
    3cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cc6:	bc 01       	movw	r22, r24
    3cc8:	cd 01       	movw	r24, r26
    3cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cce:	dc 01       	movw	r26, r24
    3cd0:	cb 01       	movw	r24, r22
    3cd2:	f8 01       	movw	r30, r16
    3cd4:	91 83       	std	Z+1, r25	; 0x01
    3cd6:	80 83       	st	Z, r24
    3cd8:	1f c0       	rjmp	.+62     	; 0x3d18 <LCD_CheckStatusSendChar4bit+0x208>
    3cda:	fe 01       	movw	r30, r28
    3cdc:	e4 5b       	subi	r30, 0xB4	; 180
    3cde:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce0:	88 ec       	ldi	r24, 0xC8	; 200
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	91 83       	std	Z+1, r25	; 0x01
    3ce6:	80 83       	st	Z, r24
    3ce8:	fe 01       	movw	r30, r28
    3cea:	e4 5b       	subi	r30, 0xB4	; 180
    3cec:	ff 4f       	sbci	r31, 0xFF	; 255
    3cee:	80 81       	ld	r24, Z
    3cf0:	91 81       	ldd	r25, Z+1	; 0x01
    3cf2:	01 97       	sbiw	r24, 0x01	; 1
    3cf4:	f1 f7       	brne	.-4      	; 0x3cf2 <LCD_CheckStatusSendChar4bit+0x1e2>
    3cf6:	fe 01       	movw	r30, r28
    3cf8:	e4 5b       	subi	r30, 0xB4	; 180
    3cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfc:	91 83       	std	Z+1, r25	; 0x01
    3cfe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d00:	de 01       	movw	r26, r28
    3d02:	a2 5b       	subi	r26, 0xB2	; 178
    3d04:	bf 4f       	sbci	r27, 0xFF	; 255
    3d06:	fe 01       	movw	r30, r28
    3d08:	e2 5b       	subi	r30, 0xB2	; 178
    3d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0c:	80 81       	ld	r24, Z
    3d0e:	91 81       	ldd	r25, Z+1	; 0x01
    3d10:	01 97       	sbiw	r24, 0x01	; 1
    3d12:	11 96       	adiw	r26, 0x01	; 1
    3d14:	9c 93       	st	X, r25
    3d16:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d18:	fe 01       	movw	r30, r28
    3d1a:	e2 5b       	subi	r30, 0xB2	; 178
    3d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1e:	80 81       	ld	r24, Z
    3d20:	91 81       	ldd	r25, Z+1	; 0x01
    3d22:	00 97       	sbiw	r24, 0x00	; 0
    3d24:	d1 f6       	brne	.-76     	; 0x3cda <LCD_CheckStatusSendChar4bit+0x1ca>
    3d26:	4b c0       	rjmp	.+150    	; 0x3dbe <LCD_CheckStatusSendChar4bit+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d28:	8e 01       	movw	r16, r28
    3d2a:	02 5b       	subi	r16, 0xB2	; 178
    3d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d2e:	fe 01       	movw	r30, r28
    3d30:	e0 5b       	subi	r30, 0xB0	; 176
    3d32:	ff 4f       	sbci	r31, 0xFF	; 255
    3d34:	60 81       	ld	r22, Z
    3d36:	71 81       	ldd	r23, Z+1	; 0x01
    3d38:	82 81       	ldd	r24, Z+2	; 0x02
    3d3a:	93 81       	ldd	r25, Z+3	; 0x03
    3d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	f8 01       	movw	r30, r16
    3d46:	91 83       	std	Z+1, r25	; 0x01
    3d48:	80 83       	st	Z, r24
    3d4a:	de 01       	movw	r26, r28
    3d4c:	a6 5b       	subi	r26, 0xB6	; 182
    3d4e:	bf 4f       	sbci	r27, 0xFF	; 255
    3d50:	fe 01       	movw	r30, r28
    3d52:	e2 5b       	subi	r30, 0xB2	; 178
    3d54:	ff 4f       	sbci	r31, 0xFF	; 255
    3d56:	80 81       	ld	r24, Z
    3d58:	91 81       	ldd	r25, Z+1	; 0x01
    3d5a:	11 96       	adiw	r26, 0x01	; 1
    3d5c:	9c 93       	st	X, r25
    3d5e:	8e 93       	st	-X, r24
    3d60:	fe 01       	movw	r30, r28
    3d62:	e6 5b       	subi	r30, 0xB6	; 182
    3d64:	ff 4f       	sbci	r31, 0xFF	; 255
    3d66:	80 81       	ld	r24, Z
    3d68:	91 81       	ldd	r25, Z+1	; 0x01
    3d6a:	01 97       	sbiw	r24, 0x01	; 1
    3d6c:	f1 f7       	brne	.-4      	; 0x3d6a <LCD_CheckStatusSendChar4bit+0x25a>
    3d6e:	fe 01       	movw	r30, r28
    3d70:	e6 5b       	subi	r30, 0xB6	; 182
    3d72:	ff 4f       	sbci	r31, 0xFF	; 255
    3d74:	91 83       	std	Z+1, r25	; 0x01
    3d76:	80 83       	st	Z, r24
    3d78:	22 c0       	rjmp	.+68     	; 0x3dbe <LCD_CheckStatusSendChar4bit+0x2ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3d7a:	8e 01       	movw	r16, r28
    3d7c:	08 5a       	subi	r16, 0xA8	; 168
    3d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d80:	fe 01       	movw	r30, r28
    3d82:	e7 5a       	subi	r30, 0xA7	; 167
    3d84:	ff 4f       	sbci	r31, 0xFF	; 255
    3d86:	60 81       	ld	r22, Z
    3d88:	71 81       	ldd	r23, Z+1	; 0x01
    3d8a:	82 81       	ldd	r24, Z+2	; 0x02
    3d8c:	93 81       	ldd	r25, Z+3	; 0x03
    3d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d92:	dc 01       	movw	r26, r24
    3d94:	cb 01       	movw	r24, r22
    3d96:	f8 01       	movw	r30, r16
    3d98:	80 83       	st	Z, r24
    3d9a:	de 01       	movw	r26, r28
    3d9c:	a7 5b       	subi	r26, 0xB7	; 183
    3d9e:	bf 4f       	sbci	r27, 0xFF	; 255
    3da0:	fe 01       	movw	r30, r28
    3da2:	e8 5a       	subi	r30, 0xA8	; 168
    3da4:	ff 4f       	sbci	r31, 0xFF	; 255
    3da6:	80 81       	ld	r24, Z
    3da8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3daa:	fe 01       	movw	r30, r28
    3dac:	e7 5b       	subi	r30, 0xB7	; 183
    3dae:	ff 4f       	sbci	r31, 0xFF	; 255
    3db0:	80 81       	ld	r24, Z
    3db2:	8a 95       	dec	r24
    3db4:	f1 f7       	brne	.-4      	; 0x3db2 <LCD_CheckStatusSendChar4bit+0x2a2>
    3db6:	fe 01       	movw	r30, r28
    3db8:	e7 5b       	subi	r30, 0xB7	; 183
    3dba:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbc:	80 83       	st	Z, r24
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    3dbe:	80 e0       	ldi	r24, 0x00	; 0
    3dc0:	62 e0       	ldi	r22, 0x02	; 2
    3dc2:	40 e0       	ldi	r20, 0x00	; 0
    3dc4:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>
    3dc8:	fe 01       	movw	r30, r28
    3dca:	eb 5b       	subi	r30, 0xBB	; 187
    3dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	a0 e8       	ldi	r26, 0x80	; 128
    3dd4:	bf e3       	ldi	r27, 0x3F	; 63
    3dd6:	80 83       	st	Z, r24
    3dd8:	91 83       	std	Z+1, r25	; 0x01
    3dda:	a2 83       	std	Z+2, r26	; 0x02
    3ddc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3dde:	8e 01       	movw	r16, r28
    3de0:	0f 5b       	subi	r16, 0xBF	; 191
    3de2:	1f 4f       	sbci	r17, 0xFF	; 255
    3de4:	fe 01       	movw	r30, r28
    3de6:	eb 5b       	subi	r30, 0xBB	; 187
    3de8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dea:	60 81       	ld	r22, Z
    3dec:	71 81       	ldd	r23, Z+1	; 0x01
    3dee:	82 81       	ldd	r24, Z+2	; 0x02
    3df0:	93 81       	ldd	r25, Z+3	; 0x03
    3df2:	2b ea       	ldi	r18, 0xAB	; 171
    3df4:	3a ea       	ldi	r19, 0xAA	; 170
    3df6:	4a e2       	ldi	r20, 0x2A	; 42
    3df8:	50 e4       	ldi	r21, 0x40	; 64
    3dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dfe:	dc 01       	movw	r26, r24
    3e00:	cb 01       	movw	r24, r22
    3e02:	f8 01       	movw	r30, r16
    3e04:	80 83       	st	Z, r24
    3e06:	91 83       	std	Z+1, r25	; 0x01
    3e08:	a2 83       	std	Z+2, r26	; 0x02
    3e0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	ef 5b       	subi	r30, 0xBF	; 191
    3e10:	ff 4f       	sbci	r31, 0xFF	; 255
    3e12:	60 81       	ld	r22, Z
    3e14:	71 81       	ldd	r23, Z+1	; 0x01
    3e16:	82 81       	ldd	r24, Z+2	; 0x02
    3e18:	93 81       	ldd	r25, Z+3	; 0x03
    3e1a:	20 e0       	ldi	r18, 0x00	; 0
    3e1c:	30 e0       	ldi	r19, 0x00	; 0
    3e1e:	40 e8       	ldi	r20, 0x80	; 128
    3e20:	5f e3       	ldi	r21, 0x3F	; 63
    3e22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e26:	88 23       	and	r24, r24
    3e28:	34 f4       	brge	.+12     	; 0x3e36 <LCD_CheckStatusSendChar4bit+0x326>
		__ticks = 1;
    3e2a:	81 e0       	ldi	r24, 0x01	; 1
    3e2c:	fe 01       	movw	r30, r28
    3e2e:	e0 5c       	subi	r30, 0xC0	; 192
    3e30:	ff 4f       	sbci	r31, 0xFF	; 255
    3e32:	80 83       	st	Z, r24
    3e34:	9d c0       	rjmp	.+314    	; 0x3f70 <LCD_CheckStatusSendChar4bit+0x460>
	else if (__tmp > 255)
    3e36:	fe 01       	movw	r30, r28
    3e38:	ef 5b       	subi	r30, 0xBF	; 191
    3e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3c:	60 81       	ld	r22, Z
    3e3e:	71 81       	ldd	r23, Z+1	; 0x01
    3e40:	82 81       	ldd	r24, Z+2	; 0x02
    3e42:	93 81       	ldd	r25, Z+3	; 0x03
    3e44:	20 e0       	ldi	r18, 0x00	; 0
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	4f e7       	ldi	r20, 0x7F	; 127
    3e4a:	53 e4       	ldi	r21, 0x43	; 67
    3e4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e50:	18 16       	cp	r1, r24
    3e52:	0c f0       	brlt	.+2      	; 0x3e56 <LCD_CheckStatusSendChar4bit+0x346>
    3e54:	7e c0       	rjmp	.+252    	; 0x3f52 <LCD_CheckStatusSendChar4bit+0x442>
	{
		_delay_ms(__us / 1000.0);
    3e56:	fe 01       	movw	r30, r28
    3e58:	eb 5b       	subi	r30, 0xBB	; 187
    3e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5c:	60 81       	ld	r22, Z
    3e5e:	71 81       	ldd	r23, Z+1	; 0x01
    3e60:	82 81       	ldd	r24, Z+2	; 0x02
    3e62:	93 81       	ldd	r25, Z+3	; 0x03
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	4a e7       	ldi	r20, 0x7A	; 122
    3e6a:	54 e4       	ldi	r21, 0x44	; 68
    3e6c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e70:	dc 01       	movw	r26, r24
    3e72:	cb 01       	movw	r24, r22
    3e74:	8c af       	std	Y+60, r24	; 0x3c
    3e76:	9d af       	std	Y+61, r25	; 0x3d
    3e78:	ae af       	std	Y+62, r26	; 0x3e
    3e7a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e7c:	6c ad       	ldd	r22, Y+60	; 0x3c
    3e7e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3e80:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e82:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e84:	20 e0       	ldi	r18, 0x00	; 0
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	4a ef       	ldi	r20, 0xFA	; 250
    3e8a:	54 e4       	ldi	r21, 0x44	; 68
    3e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e90:	dc 01       	movw	r26, r24
    3e92:	cb 01       	movw	r24, r22
    3e94:	88 af       	std	Y+56, r24	; 0x38
    3e96:	99 af       	std	Y+57, r25	; 0x39
    3e98:	aa af       	std	Y+58, r26	; 0x3a
    3e9a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3e9c:	68 ad       	ldd	r22, Y+56	; 0x38
    3e9e:	79 ad       	ldd	r23, Y+57	; 0x39
    3ea0:	8a ad       	ldd	r24, Y+58	; 0x3a
    3ea2:	9b ad       	ldd	r25, Y+59	; 0x3b
    3ea4:	20 e0       	ldi	r18, 0x00	; 0
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	40 e8       	ldi	r20, 0x80	; 128
    3eaa:	5f e3       	ldi	r21, 0x3F	; 63
    3eac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3eb0:	88 23       	and	r24, r24
    3eb2:	2c f4       	brge	.+10     	; 0x3ebe <LCD_CheckStatusSendChar4bit+0x3ae>
		__ticks = 1;
    3eb4:	81 e0       	ldi	r24, 0x01	; 1
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	9f ab       	std	Y+55, r25	; 0x37
    3eba:	8e ab       	std	Y+54, r24	; 0x36
    3ebc:	3f c0       	rjmp	.+126    	; 0x3f3c <LCD_CheckStatusSendChar4bit+0x42c>
	else if (__tmp > 65535)
    3ebe:	68 ad       	ldd	r22, Y+56	; 0x38
    3ec0:	79 ad       	ldd	r23, Y+57	; 0x39
    3ec2:	8a ad       	ldd	r24, Y+58	; 0x3a
    3ec4:	9b ad       	ldd	r25, Y+59	; 0x3b
    3ec6:	20 e0       	ldi	r18, 0x00	; 0
    3ec8:	3f ef       	ldi	r19, 0xFF	; 255
    3eca:	4f e7       	ldi	r20, 0x7F	; 127
    3ecc:	57 e4       	ldi	r21, 0x47	; 71
    3ece:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ed2:	18 16       	cp	r1, r24
    3ed4:	4c f5       	brge	.+82     	; 0x3f28 <LCD_CheckStatusSendChar4bit+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ed6:	6c ad       	ldd	r22, Y+60	; 0x3c
    3ed8:	7d ad       	ldd	r23, Y+61	; 0x3d
    3eda:	8e ad       	ldd	r24, Y+62	; 0x3e
    3edc:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ede:	20 e0       	ldi	r18, 0x00	; 0
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	40 e2       	ldi	r20, 0x20	; 32
    3ee4:	51 e4       	ldi	r21, 0x41	; 65
    3ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eea:	dc 01       	movw	r26, r24
    3eec:	cb 01       	movw	r24, r22
    3eee:	bc 01       	movw	r22, r24
    3ef0:	cd 01       	movw	r24, r26
    3ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ef6:	dc 01       	movw	r26, r24
    3ef8:	cb 01       	movw	r24, r22
    3efa:	9f ab       	std	Y+55, r25	; 0x37
    3efc:	8e ab       	std	Y+54, r24	; 0x36
    3efe:	0f c0       	rjmp	.+30     	; 0x3f1e <LCD_CheckStatusSendChar4bit+0x40e>
    3f00:	88 ec       	ldi	r24, 0xC8	; 200
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	9d ab       	std	Y+53, r25	; 0x35
    3f06:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f08:	8c a9       	ldd	r24, Y+52	; 0x34
    3f0a:	9d a9       	ldd	r25, Y+53	; 0x35
    3f0c:	01 97       	sbiw	r24, 0x01	; 1
    3f0e:	f1 f7       	brne	.-4      	; 0x3f0c <LCD_CheckStatusSendChar4bit+0x3fc>
    3f10:	9d ab       	std	Y+53, r25	; 0x35
    3f12:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f14:	8e a9       	ldd	r24, Y+54	; 0x36
    3f16:	9f a9       	ldd	r25, Y+55	; 0x37
    3f18:	01 97       	sbiw	r24, 0x01	; 1
    3f1a:	9f ab       	std	Y+55, r25	; 0x37
    3f1c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f1e:	8e a9       	ldd	r24, Y+54	; 0x36
    3f20:	9f a9       	ldd	r25, Y+55	; 0x37
    3f22:	00 97       	sbiw	r24, 0x00	; 0
    3f24:	69 f7       	brne	.-38     	; 0x3f00 <LCD_CheckStatusSendChar4bit+0x3f0>
    3f26:	2d c0       	rjmp	.+90     	; 0x3f82 <LCD_CheckStatusSendChar4bit+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f28:	68 ad       	ldd	r22, Y+56	; 0x38
    3f2a:	79 ad       	ldd	r23, Y+57	; 0x39
    3f2c:	8a ad       	ldd	r24, Y+58	; 0x3a
    3f2e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f34:	dc 01       	movw	r26, r24
    3f36:	cb 01       	movw	r24, r22
    3f38:	9f ab       	std	Y+55, r25	; 0x37
    3f3a:	8e ab       	std	Y+54, r24	; 0x36
    3f3c:	8e a9       	ldd	r24, Y+54	; 0x36
    3f3e:	9f a9       	ldd	r25, Y+55	; 0x37
    3f40:	9b ab       	std	Y+51, r25	; 0x33
    3f42:	8a ab       	std	Y+50, r24	; 0x32
    3f44:	8a a9       	ldd	r24, Y+50	; 0x32
    3f46:	9b a9       	ldd	r25, Y+51	; 0x33
    3f48:	01 97       	sbiw	r24, 0x01	; 1
    3f4a:	f1 f7       	brne	.-4      	; 0x3f48 <LCD_CheckStatusSendChar4bit+0x438>
    3f4c:	9b ab       	std	Y+51, r25	; 0x33
    3f4e:	8a ab       	std	Y+50, r24	; 0x32
    3f50:	18 c0       	rjmp	.+48     	; 0x3f82 <LCD_CheckStatusSendChar4bit+0x472>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3f52:	fe 01       	movw	r30, r28
    3f54:	ef 5b       	subi	r30, 0xBF	; 191
    3f56:	ff 4f       	sbci	r31, 0xFF	; 255
    3f58:	60 81       	ld	r22, Z
    3f5a:	71 81       	ldd	r23, Z+1	; 0x01
    3f5c:	82 81       	ldd	r24, Z+2	; 0x02
    3f5e:	93 81       	ldd	r25, Z+3	; 0x03
    3f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f64:	dc 01       	movw	r26, r24
    3f66:	cb 01       	movw	r24, r22
    3f68:	fe 01       	movw	r30, r28
    3f6a:	e0 5c       	subi	r30, 0xC0	; 192
    3f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6e:	80 83       	st	Z, r24
    3f70:	fe 01       	movw	r30, r28
    3f72:	e0 5c       	subi	r30, 0xC0	; 192
    3f74:	ff 4f       	sbci	r31, 0xFF	; 255
    3f76:	80 81       	ld	r24, Z
    3f78:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3f7a:	89 a9       	ldd	r24, Y+49	; 0x31
    3f7c:	8a 95       	dec	r24
    3f7e:	f1 f7       	brne	.-4      	; 0x3f7c <LCD_CheckStatusSendChar4bit+0x46c>
    3f80:	89 ab       	std	Y+49, r24	; 0x31
                _delay_us(1);

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_HIGH);
    3f82:	80 e0       	ldi	r24, 0x00	; 0
    3f84:	60 e0       	ldi	r22, 0x00	; 0
    3f86:	41 e0       	ldi	r20, 0x01	; 1
    3f88:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    3f8c:	80 e0       	ldi	r24, 0x00	; 0
    3f8e:	61 e0       	ldi	r22, 0x01	; 1
    3f90:	40 e0       	ldi	r20, 0x00	; 0
    3f92:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, (Copy__Uint8Char << 4) & LCD__UINT8_DATA_PINS);
    3f96:	fe 01       	movw	r30, r28
    3f98:	ee 59       	subi	r30, 0x9E	; 158
    3f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9c:	80 81       	ld	r24, Z
    3f9e:	88 2f       	mov	r24, r24
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	82 95       	swap	r24
    3fa4:	92 95       	swap	r25
    3fa6:	90 7f       	andi	r25, 0xF0	; 240
    3fa8:	98 27       	eor	r25, r24
    3faa:	80 7f       	andi	r24, 0xF0	; 240
    3fac:	98 27       	eor	r25, r24
    3fae:	98 2f       	mov	r25, r24
    3fb0:	83 e0       	ldi	r24, 0x03	; 3
    3fb2:	69 2f       	mov	r22, r25
    3fb4:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    3fb8:	80 e0       	ldi	r24, 0x00	; 0
    3fba:	62 e0       	ldi	r22, 0x02	; 2
    3fbc:	41 e0       	ldi	r20, 0x01	; 1
    3fbe:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>
    3fc2:	80 e0       	ldi	r24, 0x00	; 0
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	a0 e8       	ldi	r26, 0x80	; 128
    3fc8:	bf e3       	ldi	r27, 0x3F	; 63
    3fca:	8d a7       	std	Y+45, r24	; 0x2d
    3fcc:	9e a7       	std	Y+46, r25	; 0x2e
    3fce:	af a7       	std	Y+47, r26	; 0x2f
    3fd0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3fd2:	6d a5       	ldd	r22, Y+45	; 0x2d
    3fd4:	7e a5       	ldd	r23, Y+46	; 0x2e
    3fd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fd8:	98 a9       	ldd	r25, Y+48	; 0x30
    3fda:	2b ea       	ldi	r18, 0xAB	; 171
    3fdc:	3a ea       	ldi	r19, 0xAA	; 170
    3fde:	4a e2       	ldi	r20, 0x2A	; 42
    3fe0:	50 e4       	ldi	r21, 0x40	; 64
    3fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fe6:	dc 01       	movw	r26, r24
    3fe8:	cb 01       	movw	r24, r22
    3fea:	89 a7       	std	Y+41, r24	; 0x29
    3fec:	9a a7       	std	Y+42, r25	; 0x2a
    3fee:	ab a7       	std	Y+43, r26	; 0x2b
    3ff0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3ff2:	69 a5       	ldd	r22, Y+41	; 0x29
    3ff4:	7a a5       	ldd	r23, Y+42	; 0x2a
    3ff6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ff8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ffa:	20 e0       	ldi	r18, 0x00	; 0
    3ffc:	30 e0       	ldi	r19, 0x00	; 0
    3ffe:	40 e8       	ldi	r20, 0x80	; 128
    4000:	5f e3       	ldi	r21, 0x3F	; 63
    4002:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4006:	88 23       	and	r24, r24
    4008:	1c f4       	brge	.+6      	; 0x4010 <LCD_CheckStatusSendChar4bit+0x500>
		__ticks = 1;
    400a:	81 e0       	ldi	r24, 0x01	; 1
    400c:	88 a7       	std	Y+40, r24	; 0x28
    400e:	91 c0       	rjmp	.+290    	; 0x4132 <LCD_CheckStatusSendChar4bit+0x622>
	else if (__tmp > 255)
    4010:	69 a5       	ldd	r22, Y+41	; 0x29
    4012:	7a a5       	ldd	r23, Y+42	; 0x2a
    4014:	8b a5       	ldd	r24, Y+43	; 0x2b
    4016:	9c a5       	ldd	r25, Y+44	; 0x2c
    4018:	20 e0       	ldi	r18, 0x00	; 0
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	4f e7       	ldi	r20, 0x7F	; 127
    401e:	53 e4       	ldi	r21, 0x43	; 67
    4020:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4024:	18 16       	cp	r1, r24
    4026:	0c f0       	brlt	.+2      	; 0x402a <LCD_CheckStatusSendChar4bit+0x51a>
    4028:	7b c0       	rjmp	.+246    	; 0x4120 <LCD_CheckStatusSendChar4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    402a:	6d a5       	ldd	r22, Y+45	; 0x2d
    402c:	7e a5       	ldd	r23, Y+46	; 0x2e
    402e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4030:	98 a9       	ldd	r25, Y+48	; 0x30
    4032:	20 e0       	ldi	r18, 0x00	; 0
    4034:	30 e0       	ldi	r19, 0x00	; 0
    4036:	4a e7       	ldi	r20, 0x7A	; 122
    4038:	54 e4       	ldi	r21, 0x44	; 68
    403a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    403e:	dc 01       	movw	r26, r24
    4040:	cb 01       	movw	r24, r22
    4042:	8c a3       	std	Y+36, r24	; 0x24
    4044:	9d a3       	std	Y+37, r25	; 0x25
    4046:	ae a3       	std	Y+38, r26	; 0x26
    4048:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    404a:	6c a1       	ldd	r22, Y+36	; 0x24
    404c:	7d a1       	ldd	r23, Y+37	; 0x25
    404e:	8e a1       	ldd	r24, Y+38	; 0x26
    4050:	9f a1       	ldd	r25, Y+39	; 0x27
    4052:	20 e0       	ldi	r18, 0x00	; 0
    4054:	30 e0       	ldi	r19, 0x00	; 0
    4056:	4a ef       	ldi	r20, 0xFA	; 250
    4058:	54 e4       	ldi	r21, 0x44	; 68
    405a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    405e:	dc 01       	movw	r26, r24
    4060:	cb 01       	movw	r24, r22
    4062:	88 a3       	std	Y+32, r24	; 0x20
    4064:	99 a3       	std	Y+33, r25	; 0x21
    4066:	aa a3       	std	Y+34, r26	; 0x22
    4068:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    406a:	68 a1       	ldd	r22, Y+32	; 0x20
    406c:	79 a1       	ldd	r23, Y+33	; 0x21
    406e:	8a a1       	ldd	r24, Y+34	; 0x22
    4070:	9b a1       	ldd	r25, Y+35	; 0x23
    4072:	20 e0       	ldi	r18, 0x00	; 0
    4074:	30 e0       	ldi	r19, 0x00	; 0
    4076:	40 e8       	ldi	r20, 0x80	; 128
    4078:	5f e3       	ldi	r21, 0x3F	; 63
    407a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    407e:	88 23       	and	r24, r24
    4080:	2c f4       	brge	.+10     	; 0x408c <LCD_CheckStatusSendChar4bit+0x57c>
		__ticks = 1;
    4082:	81 e0       	ldi	r24, 0x01	; 1
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	9f 8f       	std	Y+31, r25	; 0x1f
    4088:	8e 8f       	std	Y+30, r24	; 0x1e
    408a:	3f c0       	rjmp	.+126    	; 0x410a <LCD_CheckStatusSendChar4bit+0x5fa>
	else if (__tmp > 65535)
    408c:	68 a1       	ldd	r22, Y+32	; 0x20
    408e:	79 a1       	ldd	r23, Y+33	; 0x21
    4090:	8a a1       	ldd	r24, Y+34	; 0x22
    4092:	9b a1       	ldd	r25, Y+35	; 0x23
    4094:	20 e0       	ldi	r18, 0x00	; 0
    4096:	3f ef       	ldi	r19, 0xFF	; 255
    4098:	4f e7       	ldi	r20, 0x7F	; 127
    409a:	57 e4       	ldi	r21, 0x47	; 71
    409c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40a0:	18 16       	cp	r1, r24
    40a2:	4c f5       	brge	.+82     	; 0x40f6 <LCD_CheckStatusSendChar4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40a4:	6c a1       	ldd	r22, Y+36	; 0x24
    40a6:	7d a1       	ldd	r23, Y+37	; 0x25
    40a8:	8e a1       	ldd	r24, Y+38	; 0x26
    40aa:	9f a1       	ldd	r25, Y+39	; 0x27
    40ac:	20 e0       	ldi	r18, 0x00	; 0
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	40 e2       	ldi	r20, 0x20	; 32
    40b2:	51 e4       	ldi	r21, 0x41	; 65
    40b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40b8:	dc 01       	movw	r26, r24
    40ba:	cb 01       	movw	r24, r22
    40bc:	bc 01       	movw	r22, r24
    40be:	cd 01       	movw	r24, r26
    40c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40c4:	dc 01       	movw	r26, r24
    40c6:	cb 01       	movw	r24, r22
    40c8:	9f 8f       	std	Y+31, r25	; 0x1f
    40ca:	8e 8f       	std	Y+30, r24	; 0x1e
    40cc:	0f c0       	rjmp	.+30     	; 0x40ec <LCD_CheckStatusSendChar4bit+0x5dc>
    40ce:	88 ec       	ldi	r24, 0xC8	; 200
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	9d 8f       	std	Y+29, r25	; 0x1d
    40d4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    40d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    40d8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    40da:	01 97       	sbiw	r24, 0x01	; 1
    40dc:	f1 f7       	brne	.-4      	; 0x40da <LCD_CheckStatusSendChar4bit+0x5ca>
    40de:	9d 8f       	std	Y+29, r25	; 0x1d
    40e0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    40e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    40e6:	01 97       	sbiw	r24, 0x01	; 1
    40e8:	9f 8f       	std	Y+31, r25	; 0x1f
    40ea:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    40ee:	9f 8d       	ldd	r25, Y+31	; 0x1f
    40f0:	00 97       	sbiw	r24, 0x00	; 0
    40f2:	69 f7       	brne	.-38     	; 0x40ce <LCD_CheckStatusSendChar4bit+0x5be>
    40f4:	24 c0       	rjmp	.+72     	; 0x413e <LCD_CheckStatusSendChar4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40f6:	68 a1       	ldd	r22, Y+32	; 0x20
    40f8:	79 a1       	ldd	r23, Y+33	; 0x21
    40fa:	8a a1       	ldd	r24, Y+34	; 0x22
    40fc:	9b a1       	ldd	r25, Y+35	; 0x23
    40fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4102:	dc 01       	movw	r26, r24
    4104:	cb 01       	movw	r24, r22
    4106:	9f 8f       	std	Y+31, r25	; 0x1f
    4108:	8e 8f       	std	Y+30, r24	; 0x1e
    410a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    410c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    410e:	9b 8f       	std	Y+27, r25	; 0x1b
    4110:	8a 8f       	std	Y+26, r24	; 0x1a
    4112:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4114:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4116:	01 97       	sbiw	r24, 0x01	; 1
    4118:	f1 f7       	brne	.-4      	; 0x4116 <LCD_CheckStatusSendChar4bit+0x606>
    411a:	9b 8f       	std	Y+27, r25	; 0x1b
    411c:	8a 8f       	std	Y+26, r24	; 0x1a
    411e:	0f c0       	rjmp	.+30     	; 0x413e <LCD_CheckStatusSendChar4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4120:	69 a5       	ldd	r22, Y+41	; 0x29
    4122:	7a a5       	ldd	r23, Y+42	; 0x2a
    4124:	8b a5       	ldd	r24, Y+43	; 0x2b
    4126:	9c a5       	ldd	r25, Y+44	; 0x2c
    4128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    412c:	dc 01       	movw	r26, r24
    412e:	cb 01       	movw	r24, r22
    4130:	88 a7       	std	Y+40, r24	; 0x28
    4132:	88 a5       	ldd	r24, Y+40	; 0x28
    4134:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4136:	89 8d       	ldd	r24, Y+25	; 0x19
    4138:	8a 95       	dec	r24
    413a:	f1 f7       	brne	.-4      	; 0x4138 <LCD_CheckStatusSendChar4bit+0x628>
    413c:	89 8f       	std	Y+25, r24	; 0x19
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    413e:	80 e0       	ldi	r24, 0x00	; 0
    4140:	62 e0       	ldi	r22, 0x02	; 2
    4142:	40 e0       	ldi	r20, 0x00	; 0
    4144:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>
    4148:	80 e0       	ldi	r24, 0x00	; 0
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	a0 e8       	ldi	r26, 0x80	; 128
    414e:	bf e3       	ldi	r27, 0x3F	; 63
    4150:	8d 8b       	std	Y+21, r24	; 0x15
    4152:	9e 8b       	std	Y+22, r25	; 0x16
    4154:	af 8b       	std	Y+23, r26	; 0x17
    4156:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4158:	6d 89       	ldd	r22, Y+21	; 0x15
    415a:	7e 89       	ldd	r23, Y+22	; 0x16
    415c:	8f 89       	ldd	r24, Y+23	; 0x17
    415e:	98 8d       	ldd	r25, Y+24	; 0x18
    4160:	2b ea       	ldi	r18, 0xAB	; 171
    4162:	3a ea       	ldi	r19, 0xAA	; 170
    4164:	4a e2       	ldi	r20, 0x2A	; 42
    4166:	50 e4       	ldi	r21, 0x40	; 64
    4168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    416c:	dc 01       	movw	r26, r24
    416e:	cb 01       	movw	r24, r22
    4170:	89 8b       	std	Y+17, r24	; 0x11
    4172:	9a 8b       	std	Y+18, r25	; 0x12
    4174:	ab 8b       	std	Y+19, r26	; 0x13
    4176:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4178:	69 89       	ldd	r22, Y+17	; 0x11
    417a:	7a 89       	ldd	r23, Y+18	; 0x12
    417c:	8b 89       	ldd	r24, Y+19	; 0x13
    417e:	9c 89       	ldd	r25, Y+20	; 0x14
    4180:	20 e0       	ldi	r18, 0x00	; 0
    4182:	30 e0       	ldi	r19, 0x00	; 0
    4184:	40 e8       	ldi	r20, 0x80	; 128
    4186:	5f e3       	ldi	r21, 0x3F	; 63
    4188:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    418c:	88 23       	and	r24, r24
    418e:	1c f4       	brge	.+6      	; 0x4196 <LCD_CheckStatusSendChar4bit+0x686>
		__ticks = 1;
    4190:	81 e0       	ldi	r24, 0x01	; 1
    4192:	88 8b       	std	Y+16, r24	; 0x10
    4194:	91 c0       	rjmp	.+290    	; 0x42b8 <LCD_CheckStatusSendChar4bit+0x7a8>
	else if (__tmp > 255)
    4196:	69 89       	ldd	r22, Y+17	; 0x11
    4198:	7a 89       	ldd	r23, Y+18	; 0x12
    419a:	8b 89       	ldd	r24, Y+19	; 0x13
    419c:	9c 89       	ldd	r25, Y+20	; 0x14
    419e:	20 e0       	ldi	r18, 0x00	; 0
    41a0:	30 e0       	ldi	r19, 0x00	; 0
    41a2:	4f e7       	ldi	r20, 0x7F	; 127
    41a4:	53 e4       	ldi	r21, 0x43	; 67
    41a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41aa:	18 16       	cp	r1, r24
    41ac:	0c f0       	brlt	.+2      	; 0x41b0 <LCD_CheckStatusSendChar4bit+0x6a0>
    41ae:	7b c0       	rjmp	.+246    	; 0x42a6 <LCD_CheckStatusSendChar4bit+0x796>
	{
		_delay_ms(__us / 1000.0);
    41b0:	6d 89       	ldd	r22, Y+21	; 0x15
    41b2:	7e 89       	ldd	r23, Y+22	; 0x16
    41b4:	8f 89       	ldd	r24, Y+23	; 0x17
    41b6:	98 8d       	ldd	r25, Y+24	; 0x18
    41b8:	20 e0       	ldi	r18, 0x00	; 0
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	4a e7       	ldi	r20, 0x7A	; 122
    41be:	54 e4       	ldi	r21, 0x44	; 68
    41c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    41c4:	dc 01       	movw	r26, r24
    41c6:	cb 01       	movw	r24, r22
    41c8:	8c 87       	std	Y+12, r24	; 0x0c
    41ca:	9d 87       	std	Y+13, r25	; 0x0d
    41cc:	ae 87       	std	Y+14, r26	; 0x0e
    41ce:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41d0:	6c 85       	ldd	r22, Y+12	; 0x0c
    41d2:	7d 85       	ldd	r23, Y+13	; 0x0d
    41d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    41d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    41d8:	20 e0       	ldi	r18, 0x00	; 0
    41da:	30 e0       	ldi	r19, 0x00	; 0
    41dc:	4a ef       	ldi	r20, 0xFA	; 250
    41de:	54 e4       	ldi	r21, 0x44	; 68
    41e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e4:	dc 01       	movw	r26, r24
    41e6:	cb 01       	movw	r24, r22
    41e8:	88 87       	std	Y+8, r24	; 0x08
    41ea:	99 87       	std	Y+9, r25	; 0x09
    41ec:	aa 87       	std	Y+10, r26	; 0x0a
    41ee:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    41f0:	68 85       	ldd	r22, Y+8	; 0x08
    41f2:	79 85       	ldd	r23, Y+9	; 0x09
    41f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    41f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    41f8:	20 e0       	ldi	r18, 0x00	; 0
    41fa:	30 e0       	ldi	r19, 0x00	; 0
    41fc:	40 e8       	ldi	r20, 0x80	; 128
    41fe:	5f e3       	ldi	r21, 0x3F	; 63
    4200:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4204:	88 23       	and	r24, r24
    4206:	2c f4       	brge	.+10     	; 0x4212 <LCD_CheckStatusSendChar4bit+0x702>
		__ticks = 1;
    4208:	81 e0       	ldi	r24, 0x01	; 1
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	9f 83       	std	Y+7, r25	; 0x07
    420e:	8e 83       	std	Y+6, r24	; 0x06
    4210:	3f c0       	rjmp	.+126    	; 0x4290 <LCD_CheckStatusSendChar4bit+0x780>
	else if (__tmp > 65535)
    4212:	68 85       	ldd	r22, Y+8	; 0x08
    4214:	79 85       	ldd	r23, Y+9	; 0x09
    4216:	8a 85       	ldd	r24, Y+10	; 0x0a
    4218:	9b 85       	ldd	r25, Y+11	; 0x0b
    421a:	20 e0       	ldi	r18, 0x00	; 0
    421c:	3f ef       	ldi	r19, 0xFF	; 255
    421e:	4f e7       	ldi	r20, 0x7F	; 127
    4220:	57 e4       	ldi	r21, 0x47	; 71
    4222:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4226:	18 16       	cp	r1, r24
    4228:	4c f5       	brge	.+82     	; 0x427c <LCD_CheckStatusSendChar4bit+0x76c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    422a:	6c 85       	ldd	r22, Y+12	; 0x0c
    422c:	7d 85       	ldd	r23, Y+13	; 0x0d
    422e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4230:	9f 85       	ldd	r25, Y+15	; 0x0f
    4232:	20 e0       	ldi	r18, 0x00	; 0
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	40 e2       	ldi	r20, 0x20	; 32
    4238:	51 e4       	ldi	r21, 0x41	; 65
    423a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    423e:	dc 01       	movw	r26, r24
    4240:	cb 01       	movw	r24, r22
    4242:	bc 01       	movw	r22, r24
    4244:	cd 01       	movw	r24, r26
    4246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    424a:	dc 01       	movw	r26, r24
    424c:	cb 01       	movw	r24, r22
    424e:	9f 83       	std	Y+7, r25	; 0x07
    4250:	8e 83       	std	Y+6, r24	; 0x06
    4252:	0f c0       	rjmp	.+30     	; 0x4272 <LCD_CheckStatusSendChar4bit+0x762>
    4254:	88 ec       	ldi	r24, 0xC8	; 200
    4256:	90 e0       	ldi	r25, 0x00	; 0
    4258:	9d 83       	std	Y+5, r25	; 0x05
    425a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    425c:	8c 81       	ldd	r24, Y+4	; 0x04
    425e:	9d 81       	ldd	r25, Y+5	; 0x05
    4260:	01 97       	sbiw	r24, 0x01	; 1
    4262:	f1 f7       	brne	.-4      	; 0x4260 <LCD_CheckStatusSendChar4bit+0x750>
    4264:	9d 83       	std	Y+5, r25	; 0x05
    4266:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4268:	8e 81       	ldd	r24, Y+6	; 0x06
    426a:	9f 81       	ldd	r25, Y+7	; 0x07
    426c:	01 97       	sbiw	r24, 0x01	; 1
    426e:	9f 83       	std	Y+7, r25	; 0x07
    4270:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4272:	8e 81       	ldd	r24, Y+6	; 0x06
    4274:	9f 81       	ldd	r25, Y+7	; 0x07
    4276:	00 97       	sbiw	r24, 0x00	; 0
    4278:	69 f7       	brne	.-38     	; 0x4254 <LCD_CheckStatusSendChar4bit+0x744>
    427a:	24 c0       	rjmp	.+72     	; 0x42c4 <LCD_CheckStatusSendChar4bit+0x7b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    427c:	68 85       	ldd	r22, Y+8	; 0x08
    427e:	79 85       	ldd	r23, Y+9	; 0x09
    4280:	8a 85       	ldd	r24, Y+10	; 0x0a
    4282:	9b 85       	ldd	r25, Y+11	; 0x0b
    4284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4288:	dc 01       	movw	r26, r24
    428a:	cb 01       	movw	r24, r22
    428c:	9f 83       	std	Y+7, r25	; 0x07
    428e:	8e 83       	std	Y+6, r24	; 0x06
    4290:	8e 81       	ldd	r24, Y+6	; 0x06
    4292:	9f 81       	ldd	r25, Y+7	; 0x07
    4294:	9b 83       	std	Y+3, r25	; 0x03
    4296:	8a 83       	std	Y+2, r24	; 0x02
    4298:	8a 81       	ldd	r24, Y+2	; 0x02
    429a:	9b 81       	ldd	r25, Y+3	; 0x03
    429c:	01 97       	sbiw	r24, 0x01	; 1
    429e:	f1 f7       	brne	.-4      	; 0x429c <LCD_CheckStatusSendChar4bit+0x78c>
    42a0:	9b 83       	std	Y+3, r25	; 0x03
    42a2:	8a 83       	std	Y+2, r24	; 0x02
    42a4:	0f c0       	rjmp	.+30     	; 0x42c4 <LCD_CheckStatusSendChar4bit+0x7b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    42a6:	69 89       	ldd	r22, Y+17	; 0x11
    42a8:	7a 89       	ldd	r23, Y+18	; 0x12
    42aa:	8b 89       	ldd	r24, Y+19	; 0x13
    42ac:	9c 89       	ldd	r25, Y+20	; 0x14
    42ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42b2:	dc 01       	movw	r26, r24
    42b4:	cb 01       	movw	r24, r22
    42b6:	88 8b       	std	Y+16, r24	; 0x10
    42b8:	88 89       	ldd	r24, Y+16	; 0x10
    42ba:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    42bc:	89 81       	ldd	r24, Y+1	; 0x01
    42be:	8a 95       	dec	r24
    42c0:	f1 f7       	brne	.-4      	; 0x42be <LCD_CheckStatusSendChar4bit+0x7ae>
    42c2:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    42c4:	fe 01       	movw	r30, r28
    42c6:	ef 59       	subi	r30, 0x9F	; 159
    42c8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ca:	80 81       	ld	r24, Z
}
    42cc:	ce 59       	subi	r28, 0x9E	; 158
    42ce:	df 4f       	sbci	r29, 0xFF	; 255
    42d0:	0f b6       	in	r0, 0x3f	; 63
    42d2:	f8 94       	cli
    42d4:	de bf       	out	0x3e, r29	; 62
    42d6:	0f be       	out	0x3f, r0	; 63
    42d8:	cd bf       	out	0x3d, r28	; 61
    42da:	cf 91       	pop	r28
    42dc:	df 91       	pop	r29
    42de:	1f 91       	pop	r17
    42e0:	0f 91       	pop	r16
    42e2:	08 95       	ret

000042e4 <LCD_CheckStatusSendCmnd4bit>:
CheckStatus LCD_CheckStatusSendCmnd4bit(_uint8 Copy__Uint8Cmnd)
{
    42e4:	0f 93       	push	r16
    42e6:	1f 93       	push	r17
    42e8:	df 93       	push	r29
    42ea:	cf 93       	push	r28
    42ec:	cd b7       	in	r28, 0x3d	; 61
    42ee:	de b7       	in	r29, 0x3e	; 62
    42f0:	c2 56       	subi	r28, 0x62	; 98
    42f2:	d0 40       	sbci	r29, 0x00	; 0
    42f4:	0f b6       	in	r0, 0x3f	; 63
    42f6:	f8 94       	cli
    42f8:	de bf       	out	0x3e, r29	; 62
    42fa:	0f be       	out	0x3f, r0	; 63
    42fc:	cd bf       	out	0x3d, r28	; 61
    42fe:	fe 01       	movw	r30, r28
    4300:	ee 59       	subi	r30, 0x9E	; 158
    4302:	ff 4f       	sbci	r31, 0xFF	; 255
    4304:	80 83       	st	Z, r24
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    4306:	fe 01       	movw	r30, r28
    4308:	ef 59       	subi	r30, 0x9F	; 159
    430a:	ff 4f       	sbci	r31, 0xFF	; 255
    430c:	10 82       	st	Z, r1
         3-Send CMND byte  to the Data Pins of LCD
         4-PULSE of Enable E = 1 ,E = 0
        */
        if (Copy__Uint8Cmnd <= 255)
        {
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_LOW);
    430e:	80 e0       	ldi	r24, 0x00	; 0
    4310:	60 e0       	ldi	r22, 0x00	; 0
    4312:	40 e0       	ldi	r20, 0x00	; 0
    4314:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    4318:	80 e0       	ldi	r24, 0x00	; 0
    431a:	61 e0       	ldi	r22, 0x01	; 1
    431c:	40 e0       	ldi	r20, 0x00	; 0
    431e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT,( Copy__Uint8Cmnd & LCD__UINT8_DATA_PINS));
    4322:	fe 01       	movw	r30, r28
    4324:	ee 59       	subi	r30, 0x9E	; 158
    4326:	ff 4f       	sbci	r31, 0xFF	; 255
    4328:	80 81       	ld	r24, Z
    432a:	98 2f       	mov	r25, r24
    432c:	90 7f       	andi	r25, 0xF0	; 240
    432e:	83 e0       	ldi	r24, 0x03	; 3
    4330:	69 2f       	mov	r22, r25
    4332:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    4336:	80 e0       	ldi	r24, 0x00	; 0
    4338:	62 e0       	ldi	r22, 0x02	; 2
    433a:	41 e0       	ldi	r20, 0x01	; 1
    433c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>
    4340:	fe 01       	movw	r30, r28
    4342:	e3 5a       	subi	r30, 0xA3	; 163
    4344:	ff 4f       	sbci	r31, 0xFF	; 255
    4346:	80 e0       	ldi	r24, 0x00	; 0
    4348:	90 e0       	ldi	r25, 0x00	; 0
    434a:	a0 e8       	ldi	r26, 0x80	; 128
    434c:	bf e3       	ldi	r27, 0x3F	; 63
    434e:	80 83       	st	Z, r24
    4350:	91 83       	std	Z+1, r25	; 0x01
    4352:	a2 83       	std	Z+2, r26	; 0x02
    4354:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4356:	8e 01       	movw	r16, r28
    4358:	07 5a       	subi	r16, 0xA7	; 167
    435a:	1f 4f       	sbci	r17, 0xFF	; 255
    435c:	fe 01       	movw	r30, r28
    435e:	e3 5a       	subi	r30, 0xA3	; 163
    4360:	ff 4f       	sbci	r31, 0xFF	; 255
    4362:	60 81       	ld	r22, Z
    4364:	71 81       	ldd	r23, Z+1	; 0x01
    4366:	82 81       	ldd	r24, Z+2	; 0x02
    4368:	93 81       	ldd	r25, Z+3	; 0x03
    436a:	2b ea       	ldi	r18, 0xAB	; 171
    436c:	3a ea       	ldi	r19, 0xAA	; 170
    436e:	4a e2       	ldi	r20, 0x2A	; 42
    4370:	50 e4       	ldi	r21, 0x40	; 64
    4372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4376:	dc 01       	movw	r26, r24
    4378:	cb 01       	movw	r24, r22
    437a:	f8 01       	movw	r30, r16
    437c:	80 83       	st	Z, r24
    437e:	91 83       	std	Z+1, r25	; 0x01
    4380:	a2 83       	std	Z+2, r26	; 0x02
    4382:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4384:	fe 01       	movw	r30, r28
    4386:	e7 5a       	subi	r30, 0xA7	; 167
    4388:	ff 4f       	sbci	r31, 0xFF	; 255
    438a:	60 81       	ld	r22, Z
    438c:	71 81       	ldd	r23, Z+1	; 0x01
    438e:	82 81       	ldd	r24, Z+2	; 0x02
    4390:	93 81       	ldd	r25, Z+3	; 0x03
    4392:	20 e0       	ldi	r18, 0x00	; 0
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	40 e8       	ldi	r20, 0x80	; 128
    4398:	5f e3       	ldi	r21, 0x3F	; 63
    439a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    439e:	88 23       	and	r24, r24
    43a0:	34 f4       	brge	.+12     	; 0x43ae <LCD_CheckStatusSendCmnd4bit+0xca>
		__ticks = 1;
    43a2:	fe 01       	movw	r30, r28
    43a4:	e8 5a       	subi	r30, 0xA8	; 168
    43a6:	ff 4f       	sbci	r31, 0xFF	; 255
    43a8:	81 e0       	ldi	r24, 0x01	; 1
    43aa:	80 83       	st	Z, r24
    43ac:	e0 c0       	rjmp	.+448    	; 0x456e <LCD_CheckStatusSendCmnd4bit+0x28a>
	else if (__tmp > 255)
    43ae:	fe 01       	movw	r30, r28
    43b0:	e7 5a       	subi	r30, 0xA7	; 167
    43b2:	ff 4f       	sbci	r31, 0xFF	; 255
    43b4:	60 81       	ld	r22, Z
    43b6:	71 81       	ldd	r23, Z+1	; 0x01
    43b8:	82 81       	ldd	r24, Z+2	; 0x02
    43ba:	93 81       	ldd	r25, Z+3	; 0x03
    43bc:	20 e0       	ldi	r18, 0x00	; 0
    43be:	30 e0       	ldi	r19, 0x00	; 0
    43c0:	4f e7       	ldi	r20, 0x7F	; 127
    43c2:	53 e4       	ldi	r21, 0x43	; 67
    43c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43c8:	18 16       	cp	r1, r24
    43ca:	0c f0       	brlt	.+2      	; 0x43ce <LCD_CheckStatusSendCmnd4bit+0xea>
    43cc:	c0 c0       	rjmp	.+384    	; 0x454e <LCD_CheckStatusSendCmnd4bit+0x26a>
	{
		_delay_ms(__us / 1000.0);
    43ce:	fe 01       	movw	r30, r28
    43d0:	e3 5a       	subi	r30, 0xA3	; 163
    43d2:	ff 4f       	sbci	r31, 0xFF	; 255
    43d4:	60 81       	ld	r22, Z
    43d6:	71 81       	ldd	r23, Z+1	; 0x01
    43d8:	82 81       	ldd	r24, Z+2	; 0x02
    43da:	93 81       	ldd	r25, Z+3	; 0x03
    43dc:	20 e0       	ldi	r18, 0x00	; 0
    43de:	30 e0       	ldi	r19, 0x00	; 0
    43e0:	4a e7       	ldi	r20, 0x7A	; 122
    43e2:	54 e4       	ldi	r21, 0x44	; 68
    43e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    43e8:	dc 01       	movw	r26, r24
    43ea:	cb 01       	movw	r24, r22
    43ec:	fe 01       	movw	r30, r28
    43ee:	ec 5a       	subi	r30, 0xAC	; 172
    43f0:	ff 4f       	sbci	r31, 0xFF	; 255
    43f2:	80 83       	st	Z, r24
    43f4:	91 83       	std	Z+1, r25	; 0x01
    43f6:	a2 83       	std	Z+2, r26	; 0x02
    43f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43fa:	8e 01       	movw	r16, r28
    43fc:	00 5b       	subi	r16, 0xB0	; 176
    43fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4400:	fe 01       	movw	r30, r28
    4402:	ec 5a       	subi	r30, 0xAC	; 172
    4404:	ff 4f       	sbci	r31, 0xFF	; 255
    4406:	60 81       	ld	r22, Z
    4408:	71 81       	ldd	r23, Z+1	; 0x01
    440a:	82 81       	ldd	r24, Z+2	; 0x02
    440c:	93 81       	ldd	r25, Z+3	; 0x03
    440e:	20 e0       	ldi	r18, 0x00	; 0
    4410:	30 e0       	ldi	r19, 0x00	; 0
    4412:	4a ef       	ldi	r20, 0xFA	; 250
    4414:	54 e4       	ldi	r21, 0x44	; 68
    4416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    441a:	dc 01       	movw	r26, r24
    441c:	cb 01       	movw	r24, r22
    441e:	f8 01       	movw	r30, r16
    4420:	80 83       	st	Z, r24
    4422:	91 83       	std	Z+1, r25	; 0x01
    4424:	a2 83       	std	Z+2, r26	; 0x02
    4426:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4428:	fe 01       	movw	r30, r28
    442a:	e0 5b       	subi	r30, 0xB0	; 176
    442c:	ff 4f       	sbci	r31, 0xFF	; 255
    442e:	60 81       	ld	r22, Z
    4430:	71 81       	ldd	r23, Z+1	; 0x01
    4432:	82 81       	ldd	r24, Z+2	; 0x02
    4434:	93 81       	ldd	r25, Z+3	; 0x03
    4436:	20 e0       	ldi	r18, 0x00	; 0
    4438:	30 e0       	ldi	r19, 0x00	; 0
    443a:	40 e8       	ldi	r20, 0x80	; 128
    443c:	5f e3       	ldi	r21, 0x3F	; 63
    443e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4442:	88 23       	and	r24, r24
    4444:	44 f4       	brge	.+16     	; 0x4456 <LCD_CheckStatusSendCmnd4bit+0x172>
		__ticks = 1;
    4446:	fe 01       	movw	r30, r28
    4448:	e2 5b       	subi	r30, 0xB2	; 178
    444a:	ff 4f       	sbci	r31, 0xFF	; 255
    444c:	81 e0       	ldi	r24, 0x01	; 1
    444e:	90 e0       	ldi	r25, 0x00	; 0
    4450:	91 83       	std	Z+1, r25	; 0x01
    4452:	80 83       	st	Z, r24
    4454:	64 c0       	rjmp	.+200    	; 0x451e <LCD_CheckStatusSendCmnd4bit+0x23a>
	else if (__tmp > 65535)
    4456:	fe 01       	movw	r30, r28
    4458:	e0 5b       	subi	r30, 0xB0	; 176
    445a:	ff 4f       	sbci	r31, 0xFF	; 255
    445c:	60 81       	ld	r22, Z
    445e:	71 81       	ldd	r23, Z+1	; 0x01
    4460:	82 81       	ldd	r24, Z+2	; 0x02
    4462:	93 81       	ldd	r25, Z+3	; 0x03
    4464:	20 e0       	ldi	r18, 0x00	; 0
    4466:	3f ef       	ldi	r19, 0xFF	; 255
    4468:	4f e7       	ldi	r20, 0x7F	; 127
    446a:	57 e4       	ldi	r21, 0x47	; 71
    446c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4470:	18 16       	cp	r1, r24
    4472:	0c f0       	brlt	.+2      	; 0x4476 <LCD_CheckStatusSendCmnd4bit+0x192>
    4474:	43 c0       	rjmp	.+134    	; 0x44fc <LCD_CheckStatusSendCmnd4bit+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4476:	fe 01       	movw	r30, r28
    4478:	ec 5a       	subi	r30, 0xAC	; 172
    447a:	ff 4f       	sbci	r31, 0xFF	; 255
    447c:	60 81       	ld	r22, Z
    447e:	71 81       	ldd	r23, Z+1	; 0x01
    4480:	82 81       	ldd	r24, Z+2	; 0x02
    4482:	93 81       	ldd	r25, Z+3	; 0x03
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	40 e2       	ldi	r20, 0x20	; 32
    448a:	51 e4       	ldi	r21, 0x41	; 65
    448c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4490:	dc 01       	movw	r26, r24
    4492:	cb 01       	movw	r24, r22
    4494:	8e 01       	movw	r16, r28
    4496:	02 5b       	subi	r16, 0xB2	; 178
    4498:	1f 4f       	sbci	r17, 0xFF	; 255
    449a:	bc 01       	movw	r22, r24
    449c:	cd 01       	movw	r24, r26
    449e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a2:	dc 01       	movw	r26, r24
    44a4:	cb 01       	movw	r24, r22
    44a6:	f8 01       	movw	r30, r16
    44a8:	91 83       	std	Z+1, r25	; 0x01
    44aa:	80 83       	st	Z, r24
    44ac:	1f c0       	rjmp	.+62     	; 0x44ec <LCD_CheckStatusSendCmnd4bit+0x208>
    44ae:	fe 01       	movw	r30, r28
    44b0:	e4 5b       	subi	r30, 0xB4	; 180
    44b2:	ff 4f       	sbci	r31, 0xFF	; 255
    44b4:	88 ec       	ldi	r24, 0xC8	; 200
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	91 83       	std	Z+1, r25	; 0x01
    44ba:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    44bc:	fe 01       	movw	r30, r28
    44be:	e4 5b       	subi	r30, 0xB4	; 180
    44c0:	ff 4f       	sbci	r31, 0xFF	; 255
    44c2:	80 81       	ld	r24, Z
    44c4:	91 81       	ldd	r25, Z+1	; 0x01
    44c6:	01 97       	sbiw	r24, 0x01	; 1
    44c8:	f1 f7       	brne	.-4      	; 0x44c6 <LCD_CheckStatusSendCmnd4bit+0x1e2>
    44ca:	fe 01       	movw	r30, r28
    44cc:	e4 5b       	subi	r30, 0xB4	; 180
    44ce:	ff 4f       	sbci	r31, 0xFF	; 255
    44d0:	91 83       	std	Z+1, r25	; 0x01
    44d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44d4:	de 01       	movw	r26, r28
    44d6:	a2 5b       	subi	r26, 0xB2	; 178
    44d8:	bf 4f       	sbci	r27, 0xFF	; 255
    44da:	fe 01       	movw	r30, r28
    44dc:	e2 5b       	subi	r30, 0xB2	; 178
    44de:	ff 4f       	sbci	r31, 0xFF	; 255
    44e0:	80 81       	ld	r24, Z
    44e2:	91 81       	ldd	r25, Z+1	; 0x01
    44e4:	01 97       	sbiw	r24, 0x01	; 1
    44e6:	11 96       	adiw	r26, 0x01	; 1
    44e8:	9c 93       	st	X, r25
    44ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44ec:	fe 01       	movw	r30, r28
    44ee:	e2 5b       	subi	r30, 0xB2	; 178
    44f0:	ff 4f       	sbci	r31, 0xFF	; 255
    44f2:	80 81       	ld	r24, Z
    44f4:	91 81       	ldd	r25, Z+1	; 0x01
    44f6:	00 97       	sbiw	r24, 0x00	; 0
    44f8:	d1 f6       	brne	.-76     	; 0x44ae <LCD_CheckStatusSendCmnd4bit+0x1ca>
    44fa:	4b c0       	rjmp	.+150    	; 0x4592 <LCD_CheckStatusSendCmnd4bit+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44fc:	8e 01       	movw	r16, r28
    44fe:	02 5b       	subi	r16, 0xB2	; 178
    4500:	1f 4f       	sbci	r17, 0xFF	; 255
    4502:	fe 01       	movw	r30, r28
    4504:	e0 5b       	subi	r30, 0xB0	; 176
    4506:	ff 4f       	sbci	r31, 0xFF	; 255
    4508:	60 81       	ld	r22, Z
    450a:	71 81       	ldd	r23, Z+1	; 0x01
    450c:	82 81       	ldd	r24, Z+2	; 0x02
    450e:	93 81       	ldd	r25, Z+3	; 0x03
    4510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4514:	dc 01       	movw	r26, r24
    4516:	cb 01       	movw	r24, r22
    4518:	f8 01       	movw	r30, r16
    451a:	91 83       	std	Z+1, r25	; 0x01
    451c:	80 83       	st	Z, r24
    451e:	de 01       	movw	r26, r28
    4520:	a6 5b       	subi	r26, 0xB6	; 182
    4522:	bf 4f       	sbci	r27, 0xFF	; 255
    4524:	fe 01       	movw	r30, r28
    4526:	e2 5b       	subi	r30, 0xB2	; 178
    4528:	ff 4f       	sbci	r31, 0xFF	; 255
    452a:	80 81       	ld	r24, Z
    452c:	91 81       	ldd	r25, Z+1	; 0x01
    452e:	11 96       	adiw	r26, 0x01	; 1
    4530:	9c 93       	st	X, r25
    4532:	8e 93       	st	-X, r24
    4534:	fe 01       	movw	r30, r28
    4536:	e6 5b       	subi	r30, 0xB6	; 182
    4538:	ff 4f       	sbci	r31, 0xFF	; 255
    453a:	80 81       	ld	r24, Z
    453c:	91 81       	ldd	r25, Z+1	; 0x01
    453e:	01 97       	sbiw	r24, 0x01	; 1
    4540:	f1 f7       	brne	.-4      	; 0x453e <LCD_CheckStatusSendCmnd4bit+0x25a>
    4542:	fe 01       	movw	r30, r28
    4544:	e6 5b       	subi	r30, 0xB6	; 182
    4546:	ff 4f       	sbci	r31, 0xFF	; 255
    4548:	91 83       	std	Z+1, r25	; 0x01
    454a:	80 83       	st	Z, r24
    454c:	22 c0       	rjmp	.+68     	; 0x4592 <LCD_CheckStatusSendCmnd4bit+0x2ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    454e:	8e 01       	movw	r16, r28
    4550:	08 5a       	subi	r16, 0xA8	; 168
    4552:	1f 4f       	sbci	r17, 0xFF	; 255
    4554:	fe 01       	movw	r30, r28
    4556:	e7 5a       	subi	r30, 0xA7	; 167
    4558:	ff 4f       	sbci	r31, 0xFF	; 255
    455a:	60 81       	ld	r22, Z
    455c:	71 81       	ldd	r23, Z+1	; 0x01
    455e:	82 81       	ldd	r24, Z+2	; 0x02
    4560:	93 81       	ldd	r25, Z+3	; 0x03
    4562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4566:	dc 01       	movw	r26, r24
    4568:	cb 01       	movw	r24, r22
    456a:	f8 01       	movw	r30, r16
    456c:	80 83       	st	Z, r24
    456e:	de 01       	movw	r26, r28
    4570:	a7 5b       	subi	r26, 0xB7	; 183
    4572:	bf 4f       	sbci	r27, 0xFF	; 255
    4574:	fe 01       	movw	r30, r28
    4576:	e8 5a       	subi	r30, 0xA8	; 168
    4578:	ff 4f       	sbci	r31, 0xFF	; 255
    457a:	80 81       	ld	r24, Z
    457c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    457e:	fe 01       	movw	r30, r28
    4580:	e7 5b       	subi	r30, 0xB7	; 183
    4582:	ff 4f       	sbci	r31, 0xFF	; 255
    4584:	80 81       	ld	r24, Z
    4586:	8a 95       	dec	r24
    4588:	f1 f7       	brne	.-4      	; 0x4586 <LCD_CheckStatusSendCmnd4bit+0x2a2>
    458a:	fe 01       	movw	r30, r28
    458c:	e7 5b       	subi	r30, 0xB7	; 183
    458e:	ff 4f       	sbci	r31, 0xFF	; 255
    4590:	80 83       	st	Z, r24
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    4592:	80 e0       	ldi	r24, 0x00	; 0
    4594:	62 e0       	ldi	r22, 0x02	; 2
    4596:	40 e0       	ldi	r20, 0x00	; 0
    4598:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>
    459c:	fe 01       	movw	r30, r28
    459e:	eb 5b       	subi	r30, 0xBB	; 187
    45a0:	ff 4f       	sbci	r31, 0xFF	; 255
    45a2:	80 e0       	ldi	r24, 0x00	; 0
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	a0 e8       	ldi	r26, 0x80	; 128
    45a8:	bf e3       	ldi	r27, 0x3F	; 63
    45aa:	80 83       	st	Z, r24
    45ac:	91 83       	std	Z+1, r25	; 0x01
    45ae:	a2 83       	std	Z+2, r26	; 0x02
    45b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    45b2:	8e 01       	movw	r16, r28
    45b4:	0f 5b       	subi	r16, 0xBF	; 191
    45b6:	1f 4f       	sbci	r17, 0xFF	; 255
    45b8:	fe 01       	movw	r30, r28
    45ba:	eb 5b       	subi	r30, 0xBB	; 187
    45bc:	ff 4f       	sbci	r31, 0xFF	; 255
    45be:	60 81       	ld	r22, Z
    45c0:	71 81       	ldd	r23, Z+1	; 0x01
    45c2:	82 81       	ldd	r24, Z+2	; 0x02
    45c4:	93 81       	ldd	r25, Z+3	; 0x03
    45c6:	2b ea       	ldi	r18, 0xAB	; 171
    45c8:	3a ea       	ldi	r19, 0xAA	; 170
    45ca:	4a e2       	ldi	r20, 0x2A	; 42
    45cc:	50 e4       	ldi	r21, 0x40	; 64
    45ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45d2:	dc 01       	movw	r26, r24
    45d4:	cb 01       	movw	r24, r22
    45d6:	f8 01       	movw	r30, r16
    45d8:	80 83       	st	Z, r24
    45da:	91 83       	std	Z+1, r25	; 0x01
    45dc:	a2 83       	std	Z+2, r26	; 0x02
    45de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45e0:	fe 01       	movw	r30, r28
    45e2:	ef 5b       	subi	r30, 0xBF	; 191
    45e4:	ff 4f       	sbci	r31, 0xFF	; 255
    45e6:	60 81       	ld	r22, Z
    45e8:	71 81       	ldd	r23, Z+1	; 0x01
    45ea:	82 81       	ldd	r24, Z+2	; 0x02
    45ec:	93 81       	ldd	r25, Z+3	; 0x03
    45ee:	20 e0       	ldi	r18, 0x00	; 0
    45f0:	30 e0       	ldi	r19, 0x00	; 0
    45f2:	40 e8       	ldi	r20, 0x80	; 128
    45f4:	5f e3       	ldi	r21, 0x3F	; 63
    45f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45fa:	88 23       	and	r24, r24
    45fc:	34 f4       	brge	.+12     	; 0x460a <LCD_CheckStatusSendCmnd4bit+0x326>
		__ticks = 1;
    45fe:	81 e0       	ldi	r24, 0x01	; 1
    4600:	fe 01       	movw	r30, r28
    4602:	e0 5c       	subi	r30, 0xC0	; 192
    4604:	ff 4f       	sbci	r31, 0xFF	; 255
    4606:	80 83       	st	Z, r24
    4608:	9d c0       	rjmp	.+314    	; 0x4744 <LCD_CheckStatusSendCmnd4bit+0x460>
	else if (__tmp > 255)
    460a:	fe 01       	movw	r30, r28
    460c:	ef 5b       	subi	r30, 0xBF	; 191
    460e:	ff 4f       	sbci	r31, 0xFF	; 255
    4610:	60 81       	ld	r22, Z
    4612:	71 81       	ldd	r23, Z+1	; 0x01
    4614:	82 81       	ldd	r24, Z+2	; 0x02
    4616:	93 81       	ldd	r25, Z+3	; 0x03
    4618:	20 e0       	ldi	r18, 0x00	; 0
    461a:	30 e0       	ldi	r19, 0x00	; 0
    461c:	4f e7       	ldi	r20, 0x7F	; 127
    461e:	53 e4       	ldi	r21, 0x43	; 67
    4620:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4624:	18 16       	cp	r1, r24
    4626:	0c f0       	brlt	.+2      	; 0x462a <LCD_CheckStatusSendCmnd4bit+0x346>
    4628:	7e c0       	rjmp	.+252    	; 0x4726 <LCD_CheckStatusSendCmnd4bit+0x442>
	{
		_delay_ms(__us / 1000.0);
    462a:	fe 01       	movw	r30, r28
    462c:	eb 5b       	subi	r30, 0xBB	; 187
    462e:	ff 4f       	sbci	r31, 0xFF	; 255
    4630:	60 81       	ld	r22, Z
    4632:	71 81       	ldd	r23, Z+1	; 0x01
    4634:	82 81       	ldd	r24, Z+2	; 0x02
    4636:	93 81       	ldd	r25, Z+3	; 0x03
    4638:	20 e0       	ldi	r18, 0x00	; 0
    463a:	30 e0       	ldi	r19, 0x00	; 0
    463c:	4a e7       	ldi	r20, 0x7A	; 122
    463e:	54 e4       	ldi	r21, 0x44	; 68
    4640:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4644:	dc 01       	movw	r26, r24
    4646:	cb 01       	movw	r24, r22
    4648:	8c af       	std	Y+60, r24	; 0x3c
    464a:	9d af       	std	Y+61, r25	; 0x3d
    464c:	ae af       	std	Y+62, r26	; 0x3e
    464e:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4650:	6c ad       	ldd	r22, Y+60	; 0x3c
    4652:	7d ad       	ldd	r23, Y+61	; 0x3d
    4654:	8e ad       	ldd	r24, Y+62	; 0x3e
    4656:	9f ad       	ldd	r25, Y+63	; 0x3f
    4658:	20 e0       	ldi	r18, 0x00	; 0
    465a:	30 e0       	ldi	r19, 0x00	; 0
    465c:	4a ef       	ldi	r20, 0xFA	; 250
    465e:	54 e4       	ldi	r21, 0x44	; 68
    4660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4664:	dc 01       	movw	r26, r24
    4666:	cb 01       	movw	r24, r22
    4668:	88 af       	std	Y+56, r24	; 0x38
    466a:	99 af       	std	Y+57, r25	; 0x39
    466c:	aa af       	std	Y+58, r26	; 0x3a
    466e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    4670:	68 ad       	ldd	r22, Y+56	; 0x38
    4672:	79 ad       	ldd	r23, Y+57	; 0x39
    4674:	8a ad       	ldd	r24, Y+58	; 0x3a
    4676:	9b ad       	ldd	r25, Y+59	; 0x3b
    4678:	20 e0       	ldi	r18, 0x00	; 0
    467a:	30 e0       	ldi	r19, 0x00	; 0
    467c:	40 e8       	ldi	r20, 0x80	; 128
    467e:	5f e3       	ldi	r21, 0x3F	; 63
    4680:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4684:	88 23       	and	r24, r24
    4686:	2c f4       	brge	.+10     	; 0x4692 <LCD_CheckStatusSendCmnd4bit+0x3ae>
		__ticks = 1;
    4688:	81 e0       	ldi	r24, 0x01	; 1
    468a:	90 e0       	ldi	r25, 0x00	; 0
    468c:	9f ab       	std	Y+55, r25	; 0x37
    468e:	8e ab       	std	Y+54, r24	; 0x36
    4690:	3f c0       	rjmp	.+126    	; 0x4710 <LCD_CheckStatusSendCmnd4bit+0x42c>
	else if (__tmp > 65535)
    4692:	68 ad       	ldd	r22, Y+56	; 0x38
    4694:	79 ad       	ldd	r23, Y+57	; 0x39
    4696:	8a ad       	ldd	r24, Y+58	; 0x3a
    4698:	9b ad       	ldd	r25, Y+59	; 0x3b
    469a:	20 e0       	ldi	r18, 0x00	; 0
    469c:	3f ef       	ldi	r19, 0xFF	; 255
    469e:	4f e7       	ldi	r20, 0x7F	; 127
    46a0:	57 e4       	ldi	r21, 0x47	; 71
    46a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46a6:	18 16       	cp	r1, r24
    46a8:	4c f5       	brge	.+82     	; 0x46fc <LCD_CheckStatusSendCmnd4bit+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46aa:	6c ad       	ldd	r22, Y+60	; 0x3c
    46ac:	7d ad       	ldd	r23, Y+61	; 0x3d
    46ae:	8e ad       	ldd	r24, Y+62	; 0x3e
    46b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    46b2:	20 e0       	ldi	r18, 0x00	; 0
    46b4:	30 e0       	ldi	r19, 0x00	; 0
    46b6:	40 e2       	ldi	r20, 0x20	; 32
    46b8:	51 e4       	ldi	r21, 0x41	; 65
    46ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46be:	dc 01       	movw	r26, r24
    46c0:	cb 01       	movw	r24, r22
    46c2:	bc 01       	movw	r22, r24
    46c4:	cd 01       	movw	r24, r26
    46c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ca:	dc 01       	movw	r26, r24
    46cc:	cb 01       	movw	r24, r22
    46ce:	9f ab       	std	Y+55, r25	; 0x37
    46d0:	8e ab       	std	Y+54, r24	; 0x36
    46d2:	0f c0       	rjmp	.+30     	; 0x46f2 <LCD_CheckStatusSendCmnd4bit+0x40e>
    46d4:	88 ec       	ldi	r24, 0xC8	; 200
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	9d ab       	std	Y+53, r25	; 0x35
    46da:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    46dc:	8c a9       	ldd	r24, Y+52	; 0x34
    46de:	9d a9       	ldd	r25, Y+53	; 0x35
    46e0:	01 97       	sbiw	r24, 0x01	; 1
    46e2:	f1 f7       	brne	.-4      	; 0x46e0 <LCD_CheckStatusSendCmnd4bit+0x3fc>
    46e4:	9d ab       	std	Y+53, r25	; 0x35
    46e6:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46e8:	8e a9       	ldd	r24, Y+54	; 0x36
    46ea:	9f a9       	ldd	r25, Y+55	; 0x37
    46ec:	01 97       	sbiw	r24, 0x01	; 1
    46ee:	9f ab       	std	Y+55, r25	; 0x37
    46f0:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46f2:	8e a9       	ldd	r24, Y+54	; 0x36
    46f4:	9f a9       	ldd	r25, Y+55	; 0x37
    46f6:	00 97       	sbiw	r24, 0x00	; 0
    46f8:	69 f7       	brne	.-38     	; 0x46d4 <LCD_CheckStatusSendCmnd4bit+0x3f0>
    46fa:	2d c0       	rjmp	.+90     	; 0x4756 <LCD_CheckStatusSendCmnd4bit+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46fc:	68 ad       	ldd	r22, Y+56	; 0x38
    46fe:	79 ad       	ldd	r23, Y+57	; 0x39
    4700:	8a ad       	ldd	r24, Y+58	; 0x3a
    4702:	9b ad       	ldd	r25, Y+59	; 0x3b
    4704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4708:	dc 01       	movw	r26, r24
    470a:	cb 01       	movw	r24, r22
    470c:	9f ab       	std	Y+55, r25	; 0x37
    470e:	8e ab       	std	Y+54, r24	; 0x36
    4710:	8e a9       	ldd	r24, Y+54	; 0x36
    4712:	9f a9       	ldd	r25, Y+55	; 0x37
    4714:	9b ab       	std	Y+51, r25	; 0x33
    4716:	8a ab       	std	Y+50, r24	; 0x32
    4718:	8a a9       	ldd	r24, Y+50	; 0x32
    471a:	9b a9       	ldd	r25, Y+51	; 0x33
    471c:	01 97       	sbiw	r24, 0x01	; 1
    471e:	f1 f7       	brne	.-4      	; 0x471c <LCD_CheckStatusSendCmnd4bit+0x438>
    4720:	9b ab       	std	Y+51, r25	; 0x33
    4722:	8a ab       	std	Y+50, r24	; 0x32
    4724:	18 c0       	rjmp	.+48     	; 0x4756 <LCD_CheckStatusSendCmnd4bit+0x472>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4726:	fe 01       	movw	r30, r28
    4728:	ef 5b       	subi	r30, 0xBF	; 191
    472a:	ff 4f       	sbci	r31, 0xFF	; 255
    472c:	60 81       	ld	r22, Z
    472e:	71 81       	ldd	r23, Z+1	; 0x01
    4730:	82 81       	ldd	r24, Z+2	; 0x02
    4732:	93 81       	ldd	r25, Z+3	; 0x03
    4734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4738:	dc 01       	movw	r26, r24
    473a:	cb 01       	movw	r24, r22
    473c:	fe 01       	movw	r30, r28
    473e:	e0 5c       	subi	r30, 0xC0	; 192
    4740:	ff 4f       	sbci	r31, 0xFF	; 255
    4742:	80 83       	st	Z, r24
    4744:	fe 01       	movw	r30, r28
    4746:	e0 5c       	subi	r30, 0xC0	; 192
    4748:	ff 4f       	sbci	r31, 0xFF	; 255
    474a:	80 81       	ld	r24, Z
    474c:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    474e:	89 a9       	ldd	r24, Y+49	; 0x31
    4750:	8a 95       	dec	r24
    4752:	f1 f7       	brne	.-4      	; 0x4750 <LCD_CheckStatusSendCmnd4bit+0x46c>
    4754:	89 ab       	std	Y+49, r24	; 0x31
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_LOW);
    4756:	80 e0       	ldi	r24, 0x00	; 0
    4758:	60 e0       	ldi	r22, 0x00	; 0
    475a:	40 e0       	ldi	r20, 0x00	; 0
    475c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    4760:	80 e0       	ldi	r24, 0x00	; 0
    4762:	61 e0       	ldi	r22, 0x01	; 1
    4764:	40 e0       	ldi	r20, 0x00	; 0
    4766:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, ((Copy__Uint8Cmnd << 4) & LCD__UINT8_DATA_PINS));
    476a:	fe 01       	movw	r30, r28
    476c:	ee 59       	subi	r30, 0x9E	; 158
    476e:	ff 4f       	sbci	r31, 0xFF	; 255
    4770:	80 81       	ld	r24, Z
    4772:	88 2f       	mov	r24, r24
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	82 95       	swap	r24
    4778:	92 95       	swap	r25
    477a:	90 7f       	andi	r25, 0xF0	; 240
    477c:	98 27       	eor	r25, r24
    477e:	80 7f       	andi	r24, 0xF0	; 240
    4780:	98 27       	eor	r25, r24
    4782:	98 2f       	mov	r25, r24
    4784:	83 e0       	ldi	r24, 0x03	; 3
    4786:	69 2f       	mov	r22, r25
    4788:	0e 94 4e 0b 	call	0x169c	; 0x169c <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    478c:	80 e0       	ldi	r24, 0x00	; 0
    478e:	62 e0       	ldi	r22, 0x02	; 2
    4790:	41 e0       	ldi	r20, 0x01	; 1
    4792:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>
    4796:	80 e0       	ldi	r24, 0x00	; 0
    4798:	90 e0       	ldi	r25, 0x00	; 0
    479a:	a0 e8       	ldi	r26, 0x80	; 128
    479c:	bf e3       	ldi	r27, 0x3F	; 63
    479e:	8d a7       	std	Y+45, r24	; 0x2d
    47a0:	9e a7       	std	Y+46, r25	; 0x2e
    47a2:	af a7       	std	Y+47, r26	; 0x2f
    47a4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    47a6:	6d a5       	ldd	r22, Y+45	; 0x2d
    47a8:	7e a5       	ldd	r23, Y+46	; 0x2e
    47aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    47ac:	98 a9       	ldd	r25, Y+48	; 0x30
    47ae:	2b ea       	ldi	r18, 0xAB	; 171
    47b0:	3a ea       	ldi	r19, 0xAA	; 170
    47b2:	4a e2       	ldi	r20, 0x2A	; 42
    47b4:	50 e4       	ldi	r21, 0x40	; 64
    47b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ba:	dc 01       	movw	r26, r24
    47bc:	cb 01       	movw	r24, r22
    47be:	89 a7       	std	Y+41, r24	; 0x29
    47c0:	9a a7       	std	Y+42, r25	; 0x2a
    47c2:	ab a7       	std	Y+43, r26	; 0x2b
    47c4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    47c6:	69 a5       	ldd	r22, Y+41	; 0x29
    47c8:	7a a5       	ldd	r23, Y+42	; 0x2a
    47ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    47cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    47ce:	20 e0       	ldi	r18, 0x00	; 0
    47d0:	30 e0       	ldi	r19, 0x00	; 0
    47d2:	40 e8       	ldi	r20, 0x80	; 128
    47d4:	5f e3       	ldi	r21, 0x3F	; 63
    47d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47da:	88 23       	and	r24, r24
    47dc:	1c f4       	brge	.+6      	; 0x47e4 <LCD_CheckStatusSendCmnd4bit+0x500>
		__ticks = 1;
    47de:	81 e0       	ldi	r24, 0x01	; 1
    47e0:	88 a7       	std	Y+40, r24	; 0x28
    47e2:	91 c0       	rjmp	.+290    	; 0x4906 <LCD_CheckStatusSendCmnd4bit+0x622>
	else if (__tmp > 255)
    47e4:	69 a5       	ldd	r22, Y+41	; 0x29
    47e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    47e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    47ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    47ec:	20 e0       	ldi	r18, 0x00	; 0
    47ee:	30 e0       	ldi	r19, 0x00	; 0
    47f0:	4f e7       	ldi	r20, 0x7F	; 127
    47f2:	53 e4       	ldi	r21, 0x43	; 67
    47f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47f8:	18 16       	cp	r1, r24
    47fa:	0c f0       	brlt	.+2      	; 0x47fe <LCD_CheckStatusSendCmnd4bit+0x51a>
    47fc:	7b c0       	rjmp	.+246    	; 0x48f4 <LCD_CheckStatusSendCmnd4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    47fe:	6d a5       	ldd	r22, Y+45	; 0x2d
    4800:	7e a5       	ldd	r23, Y+46	; 0x2e
    4802:	8f a5       	ldd	r24, Y+47	; 0x2f
    4804:	98 a9       	ldd	r25, Y+48	; 0x30
    4806:	20 e0       	ldi	r18, 0x00	; 0
    4808:	30 e0       	ldi	r19, 0x00	; 0
    480a:	4a e7       	ldi	r20, 0x7A	; 122
    480c:	54 e4       	ldi	r21, 0x44	; 68
    480e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4812:	dc 01       	movw	r26, r24
    4814:	cb 01       	movw	r24, r22
    4816:	8c a3       	std	Y+36, r24	; 0x24
    4818:	9d a3       	std	Y+37, r25	; 0x25
    481a:	ae a3       	std	Y+38, r26	; 0x26
    481c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    481e:	6c a1       	ldd	r22, Y+36	; 0x24
    4820:	7d a1       	ldd	r23, Y+37	; 0x25
    4822:	8e a1       	ldd	r24, Y+38	; 0x26
    4824:	9f a1       	ldd	r25, Y+39	; 0x27
    4826:	20 e0       	ldi	r18, 0x00	; 0
    4828:	30 e0       	ldi	r19, 0x00	; 0
    482a:	4a ef       	ldi	r20, 0xFA	; 250
    482c:	54 e4       	ldi	r21, 0x44	; 68
    482e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4832:	dc 01       	movw	r26, r24
    4834:	cb 01       	movw	r24, r22
    4836:	88 a3       	std	Y+32, r24	; 0x20
    4838:	99 a3       	std	Y+33, r25	; 0x21
    483a:	aa a3       	std	Y+34, r26	; 0x22
    483c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    483e:	68 a1       	ldd	r22, Y+32	; 0x20
    4840:	79 a1       	ldd	r23, Y+33	; 0x21
    4842:	8a a1       	ldd	r24, Y+34	; 0x22
    4844:	9b a1       	ldd	r25, Y+35	; 0x23
    4846:	20 e0       	ldi	r18, 0x00	; 0
    4848:	30 e0       	ldi	r19, 0x00	; 0
    484a:	40 e8       	ldi	r20, 0x80	; 128
    484c:	5f e3       	ldi	r21, 0x3F	; 63
    484e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4852:	88 23       	and	r24, r24
    4854:	2c f4       	brge	.+10     	; 0x4860 <LCD_CheckStatusSendCmnd4bit+0x57c>
		__ticks = 1;
    4856:	81 e0       	ldi	r24, 0x01	; 1
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	9f 8f       	std	Y+31, r25	; 0x1f
    485c:	8e 8f       	std	Y+30, r24	; 0x1e
    485e:	3f c0       	rjmp	.+126    	; 0x48de <LCD_CheckStatusSendCmnd4bit+0x5fa>
	else if (__tmp > 65535)
    4860:	68 a1       	ldd	r22, Y+32	; 0x20
    4862:	79 a1       	ldd	r23, Y+33	; 0x21
    4864:	8a a1       	ldd	r24, Y+34	; 0x22
    4866:	9b a1       	ldd	r25, Y+35	; 0x23
    4868:	20 e0       	ldi	r18, 0x00	; 0
    486a:	3f ef       	ldi	r19, 0xFF	; 255
    486c:	4f e7       	ldi	r20, 0x7F	; 127
    486e:	57 e4       	ldi	r21, 0x47	; 71
    4870:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4874:	18 16       	cp	r1, r24
    4876:	4c f5       	brge	.+82     	; 0x48ca <LCD_CheckStatusSendCmnd4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4878:	6c a1       	ldd	r22, Y+36	; 0x24
    487a:	7d a1       	ldd	r23, Y+37	; 0x25
    487c:	8e a1       	ldd	r24, Y+38	; 0x26
    487e:	9f a1       	ldd	r25, Y+39	; 0x27
    4880:	20 e0       	ldi	r18, 0x00	; 0
    4882:	30 e0       	ldi	r19, 0x00	; 0
    4884:	40 e2       	ldi	r20, 0x20	; 32
    4886:	51 e4       	ldi	r21, 0x41	; 65
    4888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    488c:	dc 01       	movw	r26, r24
    488e:	cb 01       	movw	r24, r22
    4890:	bc 01       	movw	r22, r24
    4892:	cd 01       	movw	r24, r26
    4894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4898:	dc 01       	movw	r26, r24
    489a:	cb 01       	movw	r24, r22
    489c:	9f 8f       	std	Y+31, r25	; 0x1f
    489e:	8e 8f       	std	Y+30, r24	; 0x1e
    48a0:	0f c0       	rjmp	.+30     	; 0x48c0 <LCD_CheckStatusSendCmnd4bit+0x5dc>
    48a2:	88 ec       	ldi	r24, 0xC8	; 200
    48a4:	90 e0       	ldi	r25, 0x00	; 0
    48a6:	9d 8f       	std	Y+29, r25	; 0x1d
    48a8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    48aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    48ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    48ae:	01 97       	sbiw	r24, 0x01	; 1
    48b0:	f1 f7       	brne	.-4      	; 0x48ae <LCD_CheckStatusSendCmnd4bit+0x5ca>
    48b2:	9d 8f       	std	Y+29, r25	; 0x1d
    48b4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    48b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    48ba:	01 97       	sbiw	r24, 0x01	; 1
    48bc:	9f 8f       	std	Y+31, r25	; 0x1f
    48be:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    48c2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    48c4:	00 97       	sbiw	r24, 0x00	; 0
    48c6:	69 f7       	brne	.-38     	; 0x48a2 <LCD_CheckStatusSendCmnd4bit+0x5be>
    48c8:	24 c0       	rjmp	.+72     	; 0x4912 <LCD_CheckStatusSendCmnd4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48ca:	68 a1       	ldd	r22, Y+32	; 0x20
    48cc:	79 a1       	ldd	r23, Y+33	; 0x21
    48ce:	8a a1       	ldd	r24, Y+34	; 0x22
    48d0:	9b a1       	ldd	r25, Y+35	; 0x23
    48d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48d6:	dc 01       	movw	r26, r24
    48d8:	cb 01       	movw	r24, r22
    48da:	9f 8f       	std	Y+31, r25	; 0x1f
    48dc:	8e 8f       	std	Y+30, r24	; 0x1e
    48de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    48e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    48e2:	9b 8f       	std	Y+27, r25	; 0x1b
    48e4:	8a 8f       	std	Y+26, r24	; 0x1a
    48e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    48e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    48ea:	01 97       	sbiw	r24, 0x01	; 1
    48ec:	f1 f7       	brne	.-4      	; 0x48ea <LCD_CheckStatusSendCmnd4bit+0x606>
    48ee:	9b 8f       	std	Y+27, r25	; 0x1b
    48f0:	8a 8f       	std	Y+26, r24	; 0x1a
    48f2:	0f c0       	rjmp	.+30     	; 0x4912 <LCD_CheckStatusSendCmnd4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    48f4:	69 a5       	ldd	r22, Y+41	; 0x29
    48f6:	7a a5       	ldd	r23, Y+42	; 0x2a
    48f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    48fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    48fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4900:	dc 01       	movw	r26, r24
    4902:	cb 01       	movw	r24, r22
    4904:	88 a7       	std	Y+40, r24	; 0x28
    4906:	88 a5       	ldd	r24, Y+40	; 0x28
    4908:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    490a:	89 8d       	ldd	r24, Y+25	; 0x19
    490c:	8a 95       	dec	r24
    490e:	f1 f7       	brne	.-4      	; 0x490c <LCD_CheckStatusSendCmnd4bit+0x628>
    4910:	89 8f       	std	Y+25, r24	; 0x19
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    4912:	80 e0       	ldi	r24, 0x00	; 0
    4914:	62 e0       	ldi	r22, 0x02	; 2
    4916:	40 e0       	ldi	r20, 0x00	; 0
    4918:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>
    491c:	80 e0       	ldi	r24, 0x00	; 0
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	a0 e8       	ldi	r26, 0x80	; 128
    4922:	bf e3       	ldi	r27, 0x3F	; 63
    4924:	8d 8b       	std	Y+21, r24	; 0x15
    4926:	9e 8b       	std	Y+22, r25	; 0x16
    4928:	af 8b       	std	Y+23, r26	; 0x17
    492a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    492c:	6d 89       	ldd	r22, Y+21	; 0x15
    492e:	7e 89       	ldd	r23, Y+22	; 0x16
    4930:	8f 89       	ldd	r24, Y+23	; 0x17
    4932:	98 8d       	ldd	r25, Y+24	; 0x18
    4934:	2b ea       	ldi	r18, 0xAB	; 171
    4936:	3a ea       	ldi	r19, 0xAA	; 170
    4938:	4a e2       	ldi	r20, 0x2A	; 42
    493a:	50 e4       	ldi	r21, 0x40	; 64
    493c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4940:	dc 01       	movw	r26, r24
    4942:	cb 01       	movw	r24, r22
    4944:	89 8b       	std	Y+17, r24	; 0x11
    4946:	9a 8b       	std	Y+18, r25	; 0x12
    4948:	ab 8b       	std	Y+19, r26	; 0x13
    494a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    494c:	69 89       	ldd	r22, Y+17	; 0x11
    494e:	7a 89       	ldd	r23, Y+18	; 0x12
    4950:	8b 89       	ldd	r24, Y+19	; 0x13
    4952:	9c 89       	ldd	r25, Y+20	; 0x14
    4954:	20 e0       	ldi	r18, 0x00	; 0
    4956:	30 e0       	ldi	r19, 0x00	; 0
    4958:	40 e8       	ldi	r20, 0x80	; 128
    495a:	5f e3       	ldi	r21, 0x3F	; 63
    495c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4960:	88 23       	and	r24, r24
    4962:	1c f4       	brge	.+6      	; 0x496a <LCD_CheckStatusSendCmnd4bit+0x686>
		__ticks = 1;
    4964:	81 e0       	ldi	r24, 0x01	; 1
    4966:	88 8b       	std	Y+16, r24	; 0x10
    4968:	91 c0       	rjmp	.+290    	; 0x4a8c <LCD_CheckStatusSendCmnd4bit+0x7a8>
	else if (__tmp > 255)
    496a:	69 89       	ldd	r22, Y+17	; 0x11
    496c:	7a 89       	ldd	r23, Y+18	; 0x12
    496e:	8b 89       	ldd	r24, Y+19	; 0x13
    4970:	9c 89       	ldd	r25, Y+20	; 0x14
    4972:	20 e0       	ldi	r18, 0x00	; 0
    4974:	30 e0       	ldi	r19, 0x00	; 0
    4976:	4f e7       	ldi	r20, 0x7F	; 127
    4978:	53 e4       	ldi	r21, 0x43	; 67
    497a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    497e:	18 16       	cp	r1, r24
    4980:	0c f0       	brlt	.+2      	; 0x4984 <LCD_CheckStatusSendCmnd4bit+0x6a0>
    4982:	7b c0       	rjmp	.+246    	; 0x4a7a <LCD_CheckStatusSendCmnd4bit+0x796>
	{
		_delay_ms(__us / 1000.0);
    4984:	6d 89       	ldd	r22, Y+21	; 0x15
    4986:	7e 89       	ldd	r23, Y+22	; 0x16
    4988:	8f 89       	ldd	r24, Y+23	; 0x17
    498a:	98 8d       	ldd	r25, Y+24	; 0x18
    498c:	20 e0       	ldi	r18, 0x00	; 0
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	4a e7       	ldi	r20, 0x7A	; 122
    4992:	54 e4       	ldi	r21, 0x44	; 68
    4994:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4998:	dc 01       	movw	r26, r24
    499a:	cb 01       	movw	r24, r22
    499c:	8c 87       	std	Y+12, r24	; 0x0c
    499e:	9d 87       	std	Y+13, r25	; 0x0d
    49a0:	ae 87       	std	Y+14, r26	; 0x0e
    49a2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    49a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    49a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    49aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    49ac:	20 e0       	ldi	r18, 0x00	; 0
    49ae:	30 e0       	ldi	r19, 0x00	; 0
    49b0:	4a ef       	ldi	r20, 0xFA	; 250
    49b2:	54 e4       	ldi	r21, 0x44	; 68
    49b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49b8:	dc 01       	movw	r26, r24
    49ba:	cb 01       	movw	r24, r22
    49bc:	88 87       	std	Y+8, r24	; 0x08
    49be:	99 87       	std	Y+9, r25	; 0x09
    49c0:	aa 87       	std	Y+10, r26	; 0x0a
    49c2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    49c4:	68 85       	ldd	r22, Y+8	; 0x08
    49c6:	79 85       	ldd	r23, Y+9	; 0x09
    49c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    49ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    49cc:	20 e0       	ldi	r18, 0x00	; 0
    49ce:	30 e0       	ldi	r19, 0x00	; 0
    49d0:	40 e8       	ldi	r20, 0x80	; 128
    49d2:	5f e3       	ldi	r21, 0x3F	; 63
    49d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49d8:	88 23       	and	r24, r24
    49da:	2c f4       	brge	.+10     	; 0x49e6 <LCD_CheckStatusSendCmnd4bit+0x702>
		__ticks = 1;
    49dc:	81 e0       	ldi	r24, 0x01	; 1
    49de:	90 e0       	ldi	r25, 0x00	; 0
    49e0:	9f 83       	std	Y+7, r25	; 0x07
    49e2:	8e 83       	std	Y+6, r24	; 0x06
    49e4:	3f c0       	rjmp	.+126    	; 0x4a64 <LCD_CheckStatusSendCmnd4bit+0x780>
	else if (__tmp > 65535)
    49e6:	68 85       	ldd	r22, Y+8	; 0x08
    49e8:	79 85       	ldd	r23, Y+9	; 0x09
    49ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    49ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    49ee:	20 e0       	ldi	r18, 0x00	; 0
    49f0:	3f ef       	ldi	r19, 0xFF	; 255
    49f2:	4f e7       	ldi	r20, 0x7F	; 127
    49f4:	57 e4       	ldi	r21, 0x47	; 71
    49f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49fa:	18 16       	cp	r1, r24
    49fc:	4c f5       	brge	.+82     	; 0x4a50 <LCD_CheckStatusSendCmnd4bit+0x76c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    4a00:	7d 85       	ldd	r23, Y+13	; 0x0d
    4a02:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a04:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a06:	20 e0       	ldi	r18, 0x00	; 0
    4a08:	30 e0       	ldi	r19, 0x00	; 0
    4a0a:	40 e2       	ldi	r20, 0x20	; 32
    4a0c:	51 e4       	ldi	r21, 0x41	; 65
    4a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a12:	dc 01       	movw	r26, r24
    4a14:	cb 01       	movw	r24, r22
    4a16:	bc 01       	movw	r22, r24
    4a18:	cd 01       	movw	r24, r26
    4a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a1e:	dc 01       	movw	r26, r24
    4a20:	cb 01       	movw	r24, r22
    4a22:	9f 83       	std	Y+7, r25	; 0x07
    4a24:	8e 83       	std	Y+6, r24	; 0x06
    4a26:	0f c0       	rjmp	.+30     	; 0x4a46 <LCD_CheckStatusSendCmnd4bit+0x762>
    4a28:	88 ec       	ldi	r24, 0xC8	; 200
    4a2a:	90 e0       	ldi	r25, 0x00	; 0
    4a2c:	9d 83       	std	Y+5, r25	; 0x05
    4a2e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4a30:	8c 81       	ldd	r24, Y+4	; 0x04
    4a32:	9d 81       	ldd	r25, Y+5	; 0x05
    4a34:	01 97       	sbiw	r24, 0x01	; 1
    4a36:	f1 f7       	brne	.-4      	; 0x4a34 <LCD_CheckStatusSendCmnd4bit+0x750>
    4a38:	9d 83       	std	Y+5, r25	; 0x05
    4a3a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a3c:	8e 81       	ldd	r24, Y+6	; 0x06
    4a3e:	9f 81       	ldd	r25, Y+7	; 0x07
    4a40:	01 97       	sbiw	r24, 0x01	; 1
    4a42:	9f 83       	std	Y+7, r25	; 0x07
    4a44:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a46:	8e 81       	ldd	r24, Y+6	; 0x06
    4a48:	9f 81       	ldd	r25, Y+7	; 0x07
    4a4a:	00 97       	sbiw	r24, 0x00	; 0
    4a4c:	69 f7       	brne	.-38     	; 0x4a28 <LCD_CheckStatusSendCmnd4bit+0x744>
    4a4e:	24 c0       	rjmp	.+72     	; 0x4a98 <LCD_CheckStatusSendCmnd4bit+0x7b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a50:	68 85       	ldd	r22, Y+8	; 0x08
    4a52:	79 85       	ldd	r23, Y+9	; 0x09
    4a54:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a56:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a5c:	dc 01       	movw	r26, r24
    4a5e:	cb 01       	movw	r24, r22
    4a60:	9f 83       	std	Y+7, r25	; 0x07
    4a62:	8e 83       	std	Y+6, r24	; 0x06
    4a64:	8e 81       	ldd	r24, Y+6	; 0x06
    4a66:	9f 81       	ldd	r25, Y+7	; 0x07
    4a68:	9b 83       	std	Y+3, r25	; 0x03
    4a6a:	8a 83       	std	Y+2, r24	; 0x02
    4a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    4a70:	01 97       	sbiw	r24, 0x01	; 1
    4a72:	f1 f7       	brne	.-4      	; 0x4a70 <LCD_CheckStatusSendCmnd4bit+0x78c>
    4a74:	9b 83       	std	Y+3, r25	; 0x03
    4a76:	8a 83       	std	Y+2, r24	; 0x02
    4a78:	0f c0       	rjmp	.+30     	; 0x4a98 <LCD_CheckStatusSendCmnd4bit+0x7b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4a7a:	69 89       	ldd	r22, Y+17	; 0x11
    4a7c:	7a 89       	ldd	r23, Y+18	; 0x12
    4a7e:	8b 89       	ldd	r24, Y+19	; 0x13
    4a80:	9c 89       	ldd	r25, Y+20	; 0x14
    4a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a86:	dc 01       	movw	r26, r24
    4a88:	cb 01       	movw	r24, r22
    4a8a:	88 8b       	std	Y+16, r24	; 0x10
    4a8c:	88 89       	ldd	r24, Y+16	; 0x10
    4a8e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4a90:	89 81       	ldd	r24, Y+1	; 0x01
    4a92:	8a 95       	dec	r24
    4a94:	f1 f7       	brne	.-4      	; 0x4a92 <LCD_CheckStatusSendCmnd4bit+0x7ae>
    4a96:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    4a98:	fe 01       	movw	r30, r28
    4a9a:	ef 59       	subi	r30, 0x9F	; 159
    4a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9e:	80 81       	ld	r24, Z
}
    4aa0:	ce 59       	subi	r28, 0x9E	; 158
    4aa2:	df 4f       	sbci	r29, 0xFF	; 255
    4aa4:	0f b6       	in	r0, 0x3f	; 63
    4aa6:	f8 94       	cli
    4aa8:	de bf       	out	0x3e, r29	; 62
    4aaa:	0f be       	out	0x3f, r0	; 63
    4aac:	cd bf       	out	0x3d, r28	; 61
    4aae:	cf 91       	pop	r28
    4ab0:	df 91       	pop	r29
    4ab2:	1f 91       	pop	r17
    4ab4:	0f 91       	pop	r16
    4ab6:	08 95       	ret

00004ab8 <main>:
_uint8 Login_Sys(Void);
_uint8 Check_Login(Void);
Void ConvertCharToInteger(_uint8 *Copy_Uint8Char);
_uint8 Local__Uint8Arr[4];

int main(){
    4ab8:	df 93       	push	r29
    4aba:	cf 93       	push	r28
    4abc:	cd b7       	in	r28, 0x3d	; 61
    4abe:	de b7       	in	r29, 0x3e	; 62
    4ac0:	ac 97       	sbiw	r28, 0x2c	; 44
    4ac2:	0f b6       	in	r0, 0x3f	; 63
    4ac4:	f8 94       	cli
    4ac6:	de bf       	out	0x3e, r29	; 62
    4ac8:	0f be       	out	0x3f, r0	; 63
    4aca:	cd bf       	out	0x3d, r28	; 61

DIO_VoidInit();
    4acc:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_VoidInit>

LCD_VoidInit4bit();
    4ad0:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_VoidInit4bit>

/* Enable EXTRnal interrupt number 0 */

GIE_VoidEnable();
    4ad4:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <GIE_VoidEnable>

EXTI_CheckStatusSetCallBackFunc(&Turnon,INT0);
    4ad8:	87 ef       	ldi	r24, 0xF7	; 247
    4ada:	96 e2       	ldi	r25, 0x26	; 38
    4adc:	60 e0       	ldi	r22, 0x00	; 0
    4ade:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <EXTI_CheckStatusSetCallBackFunc>

EXIT_CheckStatusExtIntEnable(INT0,EXIT_UINT8_FALLING_EDGE);
    4ae2:	80 e0       	ldi	r24, 0x00	; 0
    4ae4:	61 e0       	ldi	r22, 0x01	; 1
    4ae6:	0e 94 bc 0c 	call	0x1978	; 0x1978 <EXIT_CheckStatusExtIntEnable>
    4aea:	80 e0       	ldi	r24, 0x00	; 0
    4aec:	90 e0       	ldi	r25, 0x00	; 0
    4aee:	aa ef       	ldi	r26, 0xFA	; 250
    4af0:	b3 e4       	ldi	r27, 0x43	; 67
    4af2:	8f a3       	std	Y+39, r24	; 0x27
    4af4:	98 a7       	std	Y+40, r25	; 0x28
    4af6:	a9 a7       	std	Y+41, r26	; 0x29
    4af8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4afa:	6f a1       	ldd	r22, Y+39	; 0x27
    4afc:	78 a5       	ldd	r23, Y+40	; 0x28
    4afe:	89 a5       	ldd	r24, Y+41	; 0x29
    4b00:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b02:	20 e0       	ldi	r18, 0x00	; 0
    4b04:	30 e0       	ldi	r19, 0x00	; 0
    4b06:	4a ef       	ldi	r20, 0xFA	; 250
    4b08:	54 e4       	ldi	r21, 0x44	; 68
    4b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b0e:	dc 01       	movw	r26, r24
    4b10:	cb 01       	movw	r24, r22
    4b12:	8b a3       	std	Y+35, r24	; 0x23
    4b14:	9c a3       	std	Y+36, r25	; 0x24
    4b16:	ad a3       	std	Y+37, r26	; 0x25
    4b18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4b1a:	6b a1       	ldd	r22, Y+35	; 0x23
    4b1c:	7c a1       	ldd	r23, Y+36	; 0x24
    4b1e:	8d a1       	ldd	r24, Y+37	; 0x25
    4b20:	9e a1       	ldd	r25, Y+38	; 0x26
    4b22:	20 e0       	ldi	r18, 0x00	; 0
    4b24:	30 e0       	ldi	r19, 0x00	; 0
    4b26:	40 e8       	ldi	r20, 0x80	; 128
    4b28:	5f e3       	ldi	r21, 0x3F	; 63
    4b2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b2e:	88 23       	and	r24, r24
    4b30:	2c f4       	brge	.+10     	; 0x4b3c <main+0x84>
		__ticks = 1;
    4b32:	81 e0       	ldi	r24, 0x01	; 1
    4b34:	90 e0       	ldi	r25, 0x00	; 0
    4b36:	9a a3       	std	Y+34, r25	; 0x22
    4b38:	89 a3       	std	Y+33, r24	; 0x21
    4b3a:	3f c0       	rjmp	.+126    	; 0x4bba <main+0x102>
	else if (__tmp > 65535)
    4b3c:	6b a1       	ldd	r22, Y+35	; 0x23
    4b3e:	7c a1       	ldd	r23, Y+36	; 0x24
    4b40:	8d a1       	ldd	r24, Y+37	; 0x25
    4b42:	9e a1       	ldd	r25, Y+38	; 0x26
    4b44:	20 e0       	ldi	r18, 0x00	; 0
    4b46:	3f ef       	ldi	r19, 0xFF	; 255
    4b48:	4f e7       	ldi	r20, 0x7F	; 127
    4b4a:	57 e4       	ldi	r21, 0x47	; 71
    4b4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b50:	18 16       	cp	r1, r24
    4b52:	4c f5       	brge	.+82     	; 0x4ba6 <main+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b54:	6f a1       	ldd	r22, Y+39	; 0x27
    4b56:	78 a5       	ldd	r23, Y+40	; 0x28
    4b58:	89 a5       	ldd	r24, Y+41	; 0x29
    4b5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b5c:	20 e0       	ldi	r18, 0x00	; 0
    4b5e:	30 e0       	ldi	r19, 0x00	; 0
    4b60:	40 e2       	ldi	r20, 0x20	; 32
    4b62:	51 e4       	ldi	r21, 0x41	; 65
    4b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b68:	dc 01       	movw	r26, r24
    4b6a:	cb 01       	movw	r24, r22
    4b6c:	bc 01       	movw	r22, r24
    4b6e:	cd 01       	movw	r24, r26
    4b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b74:	dc 01       	movw	r26, r24
    4b76:	cb 01       	movw	r24, r22
    4b78:	9a a3       	std	Y+34, r25	; 0x22
    4b7a:	89 a3       	std	Y+33, r24	; 0x21
    4b7c:	0f c0       	rjmp	.+30     	; 0x4b9c <main+0xe4>
    4b7e:	88 ec       	ldi	r24, 0xC8	; 200
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	98 a3       	std	Y+32, r25	; 0x20
    4b84:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4b86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b88:	98 a1       	ldd	r25, Y+32	; 0x20
    4b8a:	01 97       	sbiw	r24, 0x01	; 1
    4b8c:	f1 f7       	brne	.-4      	; 0x4b8a <main+0xd2>
    4b8e:	98 a3       	std	Y+32, r25	; 0x20
    4b90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b92:	89 a1       	ldd	r24, Y+33	; 0x21
    4b94:	9a a1       	ldd	r25, Y+34	; 0x22
    4b96:	01 97       	sbiw	r24, 0x01	; 1
    4b98:	9a a3       	std	Y+34, r25	; 0x22
    4b9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b9c:	89 a1       	ldd	r24, Y+33	; 0x21
    4b9e:	9a a1       	ldd	r25, Y+34	; 0x22
    4ba0:	00 97       	sbiw	r24, 0x00	; 0
    4ba2:	69 f7       	brne	.-38     	; 0x4b7e <main+0xc6>
    4ba4:	14 c0       	rjmp	.+40     	; 0x4bce <main+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ba6:	6b a1       	ldd	r22, Y+35	; 0x23
    4ba8:	7c a1       	ldd	r23, Y+36	; 0x24
    4baa:	8d a1       	ldd	r24, Y+37	; 0x25
    4bac:	9e a1       	ldd	r25, Y+38	; 0x26
    4bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bb2:	dc 01       	movw	r26, r24
    4bb4:	cb 01       	movw	r24, r22
    4bb6:	9a a3       	std	Y+34, r25	; 0x22
    4bb8:	89 a3       	std	Y+33, r24	; 0x21
    4bba:	89 a1       	ldd	r24, Y+33	; 0x21
    4bbc:	9a a1       	ldd	r25, Y+34	; 0x22
    4bbe:	9e 8f       	std	Y+30, r25	; 0x1e
    4bc0:	8d 8f       	std	Y+29, r24	; 0x1d
    4bc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4bc4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4bc6:	01 97       	sbiw	r24, 0x01	; 1
    4bc8:	f1 f7       	brne	.-4      	; 0x4bc6 <main+0x10e>
    4bca:	9e 8f       	std	Y+30, r25	; 0x1e
    4bcc:	8d 8f       	std	Y+29, r24	; 0x1d

_delay_ms(500);

for(int  i =1 ;i<=3;++i)
    4bce:	81 e0       	ldi	r24, 0x01	; 1
    4bd0:	90 e0       	ldi	r25, 0x00	; 0
    4bd2:	9c a7       	std	Y+44, r25	; 0x2c
    4bd4:	8b a7       	std	Y+43, r24	; 0x2b
    4bd6:	ef c0       	rjmp	.+478    	; 0x4db6 <main+0x2fe>
{

   LCD_CheckStatusSendChar4bit('0'+i);
    4bd8:	8b a5       	ldd	r24, Y+43	; 0x2b
    4bda:	80 5d       	subi	r24, 0xD0	; 208
    4bdc:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
    4be0:	80 e0       	ldi	r24, 0x00	; 0
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	aa e7       	ldi	r26, 0x7A	; 122
    4be6:	b4 e4       	ldi	r27, 0x44	; 68
    4be8:	89 8f       	std	Y+25, r24	; 0x19
    4bea:	9a 8f       	std	Y+26, r25	; 0x1a
    4bec:	ab 8f       	std	Y+27, r26	; 0x1b
    4bee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bf0:	69 8d       	ldd	r22, Y+25	; 0x19
    4bf2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4bf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4bf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4bf8:	20 e0       	ldi	r18, 0x00	; 0
    4bfa:	30 e0       	ldi	r19, 0x00	; 0
    4bfc:	4a ef       	ldi	r20, 0xFA	; 250
    4bfe:	54 e4       	ldi	r21, 0x44	; 68
    4c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c04:	dc 01       	movw	r26, r24
    4c06:	cb 01       	movw	r24, r22
    4c08:	8d 8b       	std	Y+21, r24	; 0x15
    4c0a:	9e 8b       	std	Y+22, r25	; 0x16
    4c0c:	af 8b       	std	Y+23, r26	; 0x17
    4c0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4c10:	6d 89       	ldd	r22, Y+21	; 0x15
    4c12:	7e 89       	ldd	r23, Y+22	; 0x16
    4c14:	8f 89       	ldd	r24, Y+23	; 0x17
    4c16:	98 8d       	ldd	r25, Y+24	; 0x18
    4c18:	20 e0       	ldi	r18, 0x00	; 0
    4c1a:	30 e0       	ldi	r19, 0x00	; 0
    4c1c:	40 e8       	ldi	r20, 0x80	; 128
    4c1e:	5f e3       	ldi	r21, 0x3F	; 63
    4c20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c24:	88 23       	and	r24, r24
    4c26:	2c f4       	brge	.+10     	; 0x4c32 <main+0x17a>
		__ticks = 1;
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	9c 8b       	std	Y+20, r25	; 0x14
    4c2e:	8b 8b       	std	Y+19, r24	; 0x13
    4c30:	3f c0       	rjmp	.+126    	; 0x4cb0 <main+0x1f8>
	else if (__tmp > 65535)
    4c32:	6d 89       	ldd	r22, Y+21	; 0x15
    4c34:	7e 89       	ldd	r23, Y+22	; 0x16
    4c36:	8f 89       	ldd	r24, Y+23	; 0x17
    4c38:	98 8d       	ldd	r25, Y+24	; 0x18
    4c3a:	20 e0       	ldi	r18, 0x00	; 0
    4c3c:	3f ef       	ldi	r19, 0xFF	; 255
    4c3e:	4f e7       	ldi	r20, 0x7F	; 127
    4c40:	57 e4       	ldi	r21, 0x47	; 71
    4c42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c46:	18 16       	cp	r1, r24
    4c48:	4c f5       	brge	.+82     	; 0x4c9c <main+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c4a:	69 8d       	ldd	r22, Y+25	; 0x19
    4c4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c52:	20 e0       	ldi	r18, 0x00	; 0
    4c54:	30 e0       	ldi	r19, 0x00	; 0
    4c56:	40 e2       	ldi	r20, 0x20	; 32
    4c58:	51 e4       	ldi	r21, 0x41	; 65
    4c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c5e:	dc 01       	movw	r26, r24
    4c60:	cb 01       	movw	r24, r22
    4c62:	bc 01       	movw	r22, r24
    4c64:	cd 01       	movw	r24, r26
    4c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c6a:	dc 01       	movw	r26, r24
    4c6c:	cb 01       	movw	r24, r22
    4c6e:	9c 8b       	std	Y+20, r25	; 0x14
    4c70:	8b 8b       	std	Y+19, r24	; 0x13
    4c72:	0f c0       	rjmp	.+30     	; 0x4c92 <main+0x1da>
    4c74:	88 ec       	ldi	r24, 0xC8	; 200
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	9a 8b       	std	Y+18, r25	; 0x12
    4c7a:	89 8b       	std	Y+17, r24	; 0x11
    4c7c:	89 89       	ldd	r24, Y+17	; 0x11
    4c7e:	9a 89       	ldd	r25, Y+18	; 0x12
    4c80:	01 97       	sbiw	r24, 0x01	; 1
    4c82:	f1 f7       	brne	.-4      	; 0x4c80 <main+0x1c8>
    4c84:	9a 8b       	std	Y+18, r25	; 0x12
    4c86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c88:	8b 89       	ldd	r24, Y+19	; 0x13
    4c8a:	9c 89       	ldd	r25, Y+20	; 0x14
    4c8c:	01 97       	sbiw	r24, 0x01	; 1
    4c8e:	9c 8b       	std	Y+20, r25	; 0x14
    4c90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c92:	8b 89       	ldd	r24, Y+19	; 0x13
    4c94:	9c 89       	ldd	r25, Y+20	; 0x14
    4c96:	00 97       	sbiw	r24, 0x00	; 0
    4c98:	69 f7       	brne	.-38     	; 0x4c74 <main+0x1bc>
    4c9a:	14 c0       	rjmp	.+40     	; 0x4cc4 <main+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c9c:	6d 89       	ldd	r22, Y+21	; 0x15
    4c9e:	7e 89       	ldd	r23, Y+22	; 0x16
    4ca0:	8f 89       	ldd	r24, Y+23	; 0x17
    4ca2:	98 8d       	ldd	r25, Y+24	; 0x18
    4ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ca8:	dc 01       	movw	r26, r24
    4caa:	cb 01       	movw	r24, r22
    4cac:	9c 8b       	std	Y+20, r25	; 0x14
    4cae:	8b 8b       	std	Y+19, r24	; 0x13
    4cb0:	8b 89       	ldd	r24, Y+19	; 0x13
    4cb2:	9c 89       	ldd	r25, Y+20	; 0x14
    4cb4:	98 8b       	std	Y+16, r25	; 0x10
    4cb6:	8f 87       	std	Y+15, r24	; 0x0f
    4cb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4cba:	98 89       	ldd	r25, Y+16	; 0x10
    4cbc:	01 97       	sbiw	r24, 0x01	; 1
    4cbe:	f1 f7       	brne	.-4      	; 0x4cbc <main+0x204>
    4cc0:	98 8b       	std	Y+16, r25	; 0x10
    4cc2:	8f 87       	std	Y+15, r24	; 0x0f

   _delay_ms(1000);

   LCD_VoidClearDisplay();
    4cc4:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <LCD_VoidClearDisplay>
    4cc8:	80 e0       	ldi	r24, 0x00	; 0
    4cca:	90 e0       	ldi	r25, 0x00	; 0
    4ccc:	aa e7       	ldi	r26, 0x7A	; 122
    4cce:	b4 e4       	ldi	r27, 0x44	; 68
    4cd0:	8b 87       	std	Y+11, r24	; 0x0b
    4cd2:	9c 87       	std	Y+12, r25	; 0x0c
    4cd4:	ad 87       	std	Y+13, r26	; 0x0d
    4cd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cda:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ce0:	20 e0       	ldi	r18, 0x00	; 0
    4ce2:	30 e0       	ldi	r19, 0x00	; 0
    4ce4:	4a ef       	ldi	r20, 0xFA	; 250
    4ce6:	54 e4       	ldi	r21, 0x44	; 68
    4ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cec:	dc 01       	movw	r26, r24
    4cee:	cb 01       	movw	r24, r22
    4cf0:	8f 83       	std	Y+7, r24	; 0x07
    4cf2:	98 87       	std	Y+8, r25	; 0x08
    4cf4:	a9 87       	std	Y+9, r26	; 0x09
    4cf6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4cf8:	6f 81       	ldd	r22, Y+7	; 0x07
    4cfa:	78 85       	ldd	r23, Y+8	; 0x08
    4cfc:	89 85       	ldd	r24, Y+9	; 0x09
    4cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d00:	20 e0       	ldi	r18, 0x00	; 0
    4d02:	30 e0       	ldi	r19, 0x00	; 0
    4d04:	40 e8       	ldi	r20, 0x80	; 128
    4d06:	5f e3       	ldi	r21, 0x3F	; 63
    4d08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d0c:	88 23       	and	r24, r24
    4d0e:	2c f4       	brge	.+10     	; 0x4d1a <main+0x262>
		__ticks = 1;
    4d10:	81 e0       	ldi	r24, 0x01	; 1
    4d12:	90 e0       	ldi	r25, 0x00	; 0
    4d14:	9e 83       	std	Y+6, r25	; 0x06
    4d16:	8d 83       	std	Y+5, r24	; 0x05
    4d18:	3f c0       	rjmp	.+126    	; 0x4d98 <main+0x2e0>
	else if (__tmp > 65535)
    4d1a:	6f 81       	ldd	r22, Y+7	; 0x07
    4d1c:	78 85       	ldd	r23, Y+8	; 0x08
    4d1e:	89 85       	ldd	r24, Y+9	; 0x09
    4d20:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d22:	20 e0       	ldi	r18, 0x00	; 0
    4d24:	3f ef       	ldi	r19, 0xFF	; 255
    4d26:	4f e7       	ldi	r20, 0x7F	; 127
    4d28:	57 e4       	ldi	r21, 0x47	; 71
    4d2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d2e:	18 16       	cp	r1, r24
    4d30:	4c f5       	brge	.+82     	; 0x4d84 <main+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d32:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d34:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d36:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d38:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d3a:	20 e0       	ldi	r18, 0x00	; 0
    4d3c:	30 e0       	ldi	r19, 0x00	; 0
    4d3e:	40 e2       	ldi	r20, 0x20	; 32
    4d40:	51 e4       	ldi	r21, 0x41	; 65
    4d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d46:	dc 01       	movw	r26, r24
    4d48:	cb 01       	movw	r24, r22
    4d4a:	bc 01       	movw	r22, r24
    4d4c:	cd 01       	movw	r24, r26
    4d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d52:	dc 01       	movw	r26, r24
    4d54:	cb 01       	movw	r24, r22
    4d56:	9e 83       	std	Y+6, r25	; 0x06
    4d58:	8d 83       	std	Y+5, r24	; 0x05
    4d5a:	0f c0       	rjmp	.+30     	; 0x4d7a <main+0x2c2>
    4d5c:	88 ec       	ldi	r24, 0xC8	; 200
    4d5e:	90 e0       	ldi	r25, 0x00	; 0
    4d60:	9c 83       	std	Y+4, r25	; 0x04
    4d62:	8b 83       	std	Y+3, r24	; 0x03
    4d64:	8b 81       	ldd	r24, Y+3	; 0x03
    4d66:	9c 81       	ldd	r25, Y+4	; 0x04
    4d68:	01 97       	sbiw	r24, 0x01	; 1
    4d6a:	f1 f7       	brne	.-4      	; 0x4d68 <main+0x2b0>
    4d6c:	9c 83       	std	Y+4, r25	; 0x04
    4d6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d70:	8d 81       	ldd	r24, Y+5	; 0x05
    4d72:	9e 81       	ldd	r25, Y+6	; 0x06
    4d74:	01 97       	sbiw	r24, 0x01	; 1
    4d76:	9e 83       	std	Y+6, r25	; 0x06
    4d78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    4d7e:	00 97       	sbiw	r24, 0x00	; 0
    4d80:	69 f7       	brne	.-38     	; 0x4d5c <main+0x2a4>
    4d82:	14 c0       	rjmp	.+40     	; 0x4dac <main+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d84:	6f 81       	ldd	r22, Y+7	; 0x07
    4d86:	78 85       	ldd	r23, Y+8	; 0x08
    4d88:	89 85       	ldd	r24, Y+9	; 0x09
    4d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d90:	dc 01       	movw	r26, r24
    4d92:	cb 01       	movw	r24, r22
    4d94:	9e 83       	std	Y+6, r25	; 0x06
    4d96:	8d 83       	std	Y+5, r24	; 0x05
    4d98:	8d 81       	ldd	r24, Y+5	; 0x05
    4d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d9c:	9a 83       	std	Y+2, r25	; 0x02
    4d9e:	89 83       	std	Y+1, r24	; 0x01
    4da0:	89 81       	ldd	r24, Y+1	; 0x01
    4da2:	9a 81       	ldd	r25, Y+2	; 0x02
    4da4:	01 97       	sbiw	r24, 0x01	; 1
    4da6:	f1 f7       	brne	.-4      	; 0x4da4 <main+0x2ec>
    4da8:	9a 83       	std	Y+2, r25	; 0x02
    4daa:	89 83       	std	Y+1, r24	; 0x01

EXIT_CheckStatusExtIntEnable(INT0,EXIT_UINT8_FALLING_EDGE);

_delay_ms(500);

for(int  i =1 ;i<=3;++i)
    4dac:	8b a5       	ldd	r24, Y+43	; 0x2b
    4dae:	9c a5       	ldd	r25, Y+44	; 0x2c
    4db0:	01 96       	adiw	r24, 0x01	; 1
    4db2:	9c a7       	std	Y+44, r25	; 0x2c
    4db4:	8b a7       	std	Y+43, r24	; 0x2b
    4db6:	8b a5       	ldd	r24, Y+43	; 0x2b
    4db8:	9c a5       	ldd	r25, Y+44	; 0x2c
    4dba:	84 30       	cpi	r24, 0x04	; 4
    4dbc:	91 05       	cpc	r25, r1
    4dbe:	0c f4       	brge	.+2      	; 0x4dc2 <main+0x30a>
    4dc0:	0b cf       	rjmp	.-490    	; 0x4bd8 <main+0x120>
   LCD_VoidClearDisplay();
_delay_ms(1000);

}

Check_Login();
    4dc2:	0e 94 81 28 	call	0x5102	; 0x5102 <Check_Login>
    4dc6:	ff cf       	rjmp	.-2      	; 0x4dc6 <main+0x30e>

00004dc8 <ConvertCharToInteger>:
	return  0 ;
}


Void ConvertCharToInteger(_uint8 *Copy_Uint8Char)
{
    4dc8:	df 93       	push	r29
    4dca:	cf 93       	push	r28
    4dcc:	00 d0       	rcall	.+0      	; 0x4dce <ConvertCharToInteger+0x6>
    4dce:	cd b7       	in	r28, 0x3d	; 61
    4dd0:	de b7       	in	r29, 0x3e	; 62
    4dd2:	9a 83       	std	Y+2, r25	; 0x02
    4dd4:	89 83       	std	Y+1, r24	; 0x01
	*Copy_Uint8Char=*Copy_Uint8Char-'0';
    4dd6:	e9 81       	ldd	r30, Y+1	; 0x01
    4dd8:	fa 81       	ldd	r31, Y+2	; 0x02
    4dda:	80 81       	ld	r24, Z
    4ddc:	80 53       	subi	r24, 0x30	; 48
    4dde:	e9 81       	ldd	r30, Y+1	; 0x01
    4de0:	fa 81       	ldd	r31, Y+2	; 0x02
    4de2:	80 83       	st	Z, r24

}
    4de4:	0f 90       	pop	r0
    4de6:	0f 90       	pop	r0
    4de8:	cf 91       	pop	r28
    4dea:	df 91       	pop	r29
    4dec:	08 95       	ret

00004dee <Turnon>:

Void Turnon(Void)
{
    4dee:	df 93       	push	r29
    4df0:	cf 93       	push	r28
    4df2:	cd b7       	in	r28, 0x3d	; 61
    4df4:	de b7       	in	r29, 0x3e	; 62
		static _uint8 Local__Uint8Flag=0;

if(Local__Uint8Flag == 0)
    4df6:	80 91 f8 01 	lds	r24, 0x01F8
    4dfa:	88 23       	and	r24, r24
    4dfc:	49 f4       	brne	.+18     	; 0x4e10 <Turnon+0x22>
{
      DIO__CheckStatusSetPinValue(DIO__UINT8_PORTD,DIO__UINT8_PIN3,DIO__UINT8_HIGH);
    4dfe:	83 e0       	ldi	r24, 0x03	; 3
    4e00:	63 e0       	ldi	r22, 0x03	; 3
    4e02:	41 e0       	ldi	r20, 0x01	; 1
    4e04:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>
      Local__Uint8Flag =1;
    4e08:	81 e0       	ldi	r24, 0x01	; 1
    4e0a:	80 93 f8 01 	sts	0x01F8, r24
    4e0e:	07 c0       	rjmp	.+14     	; 0x4e1e <Turnon+0x30>
}
else
{
	 DIO__CheckStatusSetPinValue(DIO__UINT8_PORTD,DIO__UINT8_PIN3,DIO__UINT8_LOW);
    4e10:	83 e0       	ldi	r24, 0x03	; 3
    4e12:	63 e0       	ldi	r22, 0x03	; 3
    4e14:	40 e0       	ldi	r20, 0x00	; 0
    4e16:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>
     Local__Uint8Flag=0;
    4e1a:	10 92 f8 01 	sts	0x01F8, r1
}


}
    4e1e:	cf 91       	pop	r28
    4e20:	df 91       	pop	r29
    4e22:	08 95       	ret

00004e24 <Login_Sys>:



_uint8 Login_Sys(Void)
{
    4e24:	df 93       	push	r29
    4e26:	cf 93       	push	r28
    4e28:	cd b7       	in	r28, 0x3d	; 61
    4e2a:	de b7       	in	r29, 0x3e	; 62
    4e2c:	a2 97       	sbiw	r28, 0x22	; 34
    4e2e:	0f b6       	in	r0, 0x3f	; 63
    4e30:	f8 94       	cli
    4e32:	de bf       	out	0x3e, r29	; 62
    4e34:	0f be       	out	0x3f, r0	; 63
    4e36:	cd bf       	out	0x3d, r28	; 61
	_uint16 Local__Uint16Var2;
	_uint8 Local__Uint8Var;

	for(int j=0;j<3;++j){
    4e38:	1e 8e       	std	Y+30, r1	; 0x1e
    4e3a:	1d 8e       	std	Y+29, r1	; 0x1d
    4e3c:	3f c0       	rjmp	.+126    	; 0x4ebc <Login_Sys+0x98>
		LCD_CheckStatusGoToXY(LCD__UINT8_LINE1,LCD__UINT8_LOCATION_NUMBER0);
    4e3e:	80 e0       	ldi	r24, 0x00	; 0
    4e40:	60 e0       	ldi	r22, 0x00	; 0
    4e42:	0e 94 90 15 	call	0x2b20	; 0x2b20 <LCD_CheckStatusGoToXY>
		LCD_CheckStatusWriteString("PASS:");
    4e46:	80 e6       	ldi	r24, 0x60	; 96
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	0e 94 56 15 	call	0x2aac	; 0x2aac <LCD_CheckStatusWriteString>

for(int i=0;i<4;){
    4e4e:	1c 8e       	std	Y+28, r1	; 0x1c
    4e50:	1b 8e       	std	Y+27, r1	; 0x1b
    4e52:	2a c0       	rjmp	.+84     	; 0x4ea8 <Login_Sys+0x84>
		while(LCD__UINT8_LOCATION_NUMBER6+i<10)
		{
			LCD_CheckStatusGoToXY(LCD__UINT8_LINE1,LCD__UINT8_LOCATION_NUMBER6+i);
    4e54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e56:	98 2f       	mov	r25, r24
    4e58:	9a 5f       	subi	r25, 0xFA	; 250
    4e5a:	80 e0       	ldi	r24, 0x00	; 0
    4e5c:	69 2f       	mov	r22, r25
    4e5e:	0e 94 90 15 	call	0x2b20	; 0x2b20 <LCD_CheckStatusGoToXY>
	    KPAD_CheckStatusGetKey(&Local__Uint8Var);
    4e62:	ce 01       	movw	r24, r28
    4e64:	81 96       	adiw	r24, 0x21	; 33
    4e66:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <KPAD_CheckStatusGetKey>
	   if(Local__Uint8Var != KPAD__UINT8_KEY_NOT_PRESSED)
    4e6a:	89 a1       	ldd	r24, Y+33	; 0x21
    4e6c:	8f 3f       	cpi	r24, 0xFF	; 255
    4e6e:	a1 f0       	breq	.+40     	; 0x4e98 <Login_Sys+0x74>
	    {

	     Local__Uint8Arr[i]=Local__Uint8Var;
    4e70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e74:	29 a1       	ldd	r18, Y+33	; 0x21
    4e76:	fc 01       	movw	r30, r24
    4e78:	e7 50       	subi	r30, 0x07	; 7
    4e7a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e7c:	20 83       	st	Z, r18
		 LCD_CheckStatusSendChar4bit('*');
    4e7e:	8a e2       	ldi	r24, 0x2A	; 42
    4e80:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_CheckStatusSendChar4bit>
	     if(Local__Uint8Var == 'D')
    4e84:	89 a1       	ldd	r24, Y+33	; 0x21
    4e86:	84 34       	cpi	r24, 0x44	; 68
    4e88:	11 f4       	brne	.+4      	; 0x4e8e <Login_Sys+0x6a>
	        {
	          LCD_VoidClearDisplay();
    4e8a:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <LCD_VoidClearDisplay>
	        }
	        ++i;
    4e8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e92:	01 96       	adiw	r24, 0x01	; 1
    4e94:	9c 8f       	std	Y+28, r25	; 0x1c
    4e96:	8b 8f       	std	Y+27, r24	; 0x1b
	for(int j=0;j<3;++j){
		LCD_CheckStatusGoToXY(LCD__UINT8_LINE1,LCD__UINT8_LOCATION_NUMBER0);
		LCD_CheckStatusWriteString("PASS:");

for(int i=0;i<4;){
		while(LCD__UINT8_LOCATION_NUMBER6+i<10)
    4e98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e9c:	06 96       	adiw	r24, 0x06	; 6
    4e9e:	8a 30       	cpi	r24, 0x0A	; 10
    4ea0:	91 05       	cpc	r25, r1
    4ea2:	c4 f2       	brlt	.-80     	; 0x4e54 <Login_Sys+0x30>
	        }
	        ++i;
	       }
	    }

	LCD_VoidClearDisplay();
    4ea4:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <LCD_VoidClearDisplay>

	for(int j=0;j<3;++j){
		LCD_CheckStatusGoToXY(LCD__UINT8_LINE1,LCD__UINT8_LOCATION_NUMBER0);
		LCD_CheckStatusWriteString("PASS:");

for(int i=0;i<4;){
    4ea8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4eaa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4eac:	84 30       	cpi	r24, 0x04	; 4
    4eae:	91 05       	cpc	r25, r1
    4eb0:	9c f3       	brlt	.-26     	; 0x4e98 <Login_Sys+0x74>
_uint8 Login_Sys(Void)
{
	_uint16 Local__Uint16Var2;
	_uint8 Local__Uint8Var;

	for(int j=0;j<3;++j){
    4eb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4eb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4eb6:	01 96       	adiw	r24, 0x01	; 1
    4eb8:	9e 8f       	std	Y+30, r25	; 0x1e
    4eba:	8d 8f       	std	Y+29, r24	; 0x1d
    4ebc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ebe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ec0:	83 30       	cpi	r24, 0x03	; 3
    4ec2:	91 05       	cpc	r25, r1
    4ec4:	0c f4       	brge	.+2      	; 0x4ec8 <Login_Sys+0xa4>
    4ec6:	bb cf       	rjmp	.-138    	; 0x4e3e <Login_Sys+0x1a>
	    }

	LCD_VoidClearDisplay();
	}
}
	for(int c=0;c<4;c++)
    4ec8:	1a 8e       	std	Y+26, r1	; 0x1a
    4eca:	19 8e       	std	Y+25, r1	; 0x19
    4ecc:	41 c0       	rjmp	.+130    	; 0x4f50 <Login_Sys+0x12c>
	{

          ConvertCharToInteger(&Local__Uint8Arr[c]);
    4ece:	89 8d       	ldd	r24, Y+25	; 0x19
    4ed0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4ed2:	87 50       	subi	r24, 0x07	; 7
    4ed4:	9e 4f       	sbci	r25, 0xFE	; 254
    4ed6:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <ConvertCharToInteger>
          Local__Uint16Var2=(_uint16)(Local__Uint8Arr[0]*1000+Local__Uint8Arr[1]*100+Local__Uint8Arr[2]*10+Local__Uint8Arr[3]*1);
    4eda:	80 91 f9 01 	lds	r24, 0x01F9
    4ede:	28 2f       	mov	r18, r24
    4ee0:	30 e0       	ldi	r19, 0x00	; 0
    4ee2:	88 ee       	ldi	r24, 0xE8	; 232
    4ee4:	93 e0       	ldi	r25, 0x03	; 3
    4ee6:	28 9f       	mul	r18, r24
    4ee8:	a0 01       	movw	r20, r0
    4eea:	29 9f       	mul	r18, r25
    4eec:	50 0d       	add	r21, r0
    4eee:	38 9f       	mul	r19, r24
    4ef0:	50 0d       	add	r21, r0
    4ef2:	11 24       	eor	r1, r1
    4ef4:	80 91 fa 01 	lds	r24, 0x01FA
    4ef8:	28 2f       	mov	r18, r24
    4efa:	30 e0       	ldi	r19, 0x00	; 0
    4efc:	84 e6       	ldi	r24, 0x64	; 100
    4efe:	90 e0       	ldi	r25, 0x00	; 0
    4f00:	bc 01       	movw	r22, r24
    4f02:	26 9f       	mul	r18, r22
    4f04:	c0 01       	movw	r24, r0
    4f06:	27 9f       	mul	r18, r23
    4f08:	90 0d       	add	r25, r0
    4f0a:	36 9f       	mul	r19, r22
    4f0c:	90 0d       	add	r25, r0
    4f0e:	11 24       	eor	r1, r1
    4f10:	48 0f       	add	r20, r24
    4f12:	59 1f       	adc	r21, r25
    4f14:	80 91 fb 01 	lds	r24, 0x01FB
    4f18:	88 2f       	mov	r24, r24
    4f1a:	90 e0       	ldi	r25, 0x00	; 0
    4f1c:	9c 01       	movw	r18, r24
    4f1e:	22 0f       	add	r18, r18
    4f20:	33 1f       	adc	r19, r19
    4f22:	c9 01       	movw	r24, r18
    4f24:	88 0f       	add	r24, r24
    4f26:	99 1f       	adc	r25, r25
    4f28:	88 0f       	add	r24, r24
    4f2a:	99 1f       	adc	r25, r25
    4f2c:	82 0f       	add	r24, r18
    4f2e:	93 1f       	adc	r25, r19
    4f30:	9a 01       	movw	r18, r20
    4f32:	28 0f       	add	r18, r24
    4f34:	39 1f       	adc	r19, r25
    4f36:	80 91 fc 01 	lds	r24, 0x01FC
    4f3a:	88 2f       	mov	r24, r24
    4f3c:	90 e0       	ldi	r25, 0x00	; 0
    4f3e:	82 0f       	add	r24, r18
    4f40:	93 1f       	adc	r25, r19
    4f42:	98 a3       	std	Y+32, r25	; 0x20
    4f44:	8f 8f       	std	Y+31, r24	; 0x1f
	    }

	LCD_VoidClearDisplay();
	}
}
	for(int c=0;c<4;c++)
    4f46:	89 8d       	ldd	r24, Y+25	; 0x19
    4f48:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4f4a:	01 96       	adiw	r24, 0x01	; 1
    4f4c:	9a 8f       	std	Y+26, r25	; 0x1a
    4f4e:	89 8f       	std	Y+25, r24	; 0x19
    4f50:	89 8d       	ldd	r24, Y+25	; 0x19
    4f52:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4f54:	84 30       	cpi	r24, 0x04	; 4
    4f56:	91 05       	cpc	r25, r1
    4f58:	0c f4       	brge	.+2      	; 0x4f5c <Login_Sys+0x138>
    4f5a:	b9 cf       	rjmp	.-142    	; 0x4ece <Login_Sys+0xaa>

          ConvertCharToInteger(&Local__Uint8Arr[c]);
          Local__Uint16Var2=(_uint16)(Local__Uint8Arr[0]*1000+Local__Uint8Arr[1]*100+Local__Uint8Arr[2]*10+Local__Uint8Arr[3]*1);

	}
	 if(1234==Local__Uint16Var2)
    4f5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4f5e:	98 a1       	ldd	r25, Y+32	; 0x20
    4f60:	74 e0       	ldi	r23, 0x04	; 4
    4f62:	82 3d       	cpi	r24, 0xD2	; 210
    4f64:	97 07       	cpc	r25, r23
    4f66:	09 f0       	breq	.+2      	; 0x4f6a <Login_Sys+0x146>
    4f68:	c1 c0       	rjmp	.+386    	; 0x50ec <Login_Sys+0x2c8>
    4f6a:	80 e0       	ldi	r24, 0x00	; 0
    4f6c:	90 e0       	ldi	r25, 0x00	; 0
    4f6e:	a0 e8       	ldi	r26, 0x80	; 128
    4f70:	bf e3       	ldi	r27, 0x3F	; 63
    4f72:	8d 8b       	std	Y+21, r24	; 0x15
    4f74:	9e 8b       	std	Y+22, r25	; 0x16
    4f76:	af 8b       	std	Y+23, r26	; 0x17
    4f78:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4f7a:	6d 89       	ldd	r22, Y+21	; 0x15
    4f7c:	7e 89       	ldd	r23, Y+22	; 0x16
    4f7e:	8f 89       	ldd	r24, Y+23	; 0x17
    4f80:	98 8d       	ldd	r25, Y+24	; 0x18
    4f82:	2b ea       	ldi	r18, 0xAB	; 171
    4f84:	3a ea       	ldi	r19, 0xAA	; 170
    4f86:	4a e2       	ldi	r20, 0x2A	; 42
    4f88:	50 e4       	ldi	r21, 0x40	; 64
    4f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f8e:	dc 01       	movw	r26, r24
    4f90:	cb 01       	movw	r24, r22
    4f92:	89 8b       	std	Y+17, r24	; 0x11
    4f94:	9a 8b       	std	Y+18, r25	; 0x12
    4f96:	ab 8b       	std	Y+19, r26	; 0x13
    4f98:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4f9a:	69 89       	ldd	r22, Y+17	; 0x11
    4f9c:	7a 89       	ldd	r23, Y+18	; 0x12
    4f9e:	8b 89       	ldd	r24, Y+19	; 0x13
    4fa0:	9c 89       	ldd	r25, Y+20	; 0x14
    4fa2:	20 e0       	ldi	r18, 0x00	; 0
    4fa4:	30 e0       	ldi	r19, 0x00	; 0
    4fa6:	40 e8       	ldi	r20, 0x80	; 128
    4fa8:	5f e3       	ldi	r21, 0x3F	; 63
    4faa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fae:	88 23       	and	r24, r24
    4fb0:	1c f4       	brge	.+6      	; 0x4fb8 <Login_Sys+0x194>
		__ticks = 1;
    4fb2:	81 e0       	ldi	r24, 0x01	; 1
    4fb4:	88 8b       	std	Y+16, r24	; 0x10
    4fb6:	91 c0       	rjmp	.+290    	; 0x50da <Login_Sys+0x2b6>
	else if (__tmp > 255)
    4fb8:	69 89       	ldd	r22, Y+17	; 0x11
    4fba:	7a 89       	ldd	r23, Y+18	; 0x12
    4fbc:	8b 89       	ldd	r24, Y+19	; 0x13
    4fbe:	9c 89       	ldd	r25, Y+20	; 0x14
    4fc0:	20 e0       	ldi	r18, 0x00	; 0
    4fc2:	30 e0       	ldi	r19, 0x00	; 0
    4fc4:	4f e7       	ldi	r20, 0x7F	; 127
    4fc6:	53 e4       	ldi	r21, 0x43	; 67
    4fc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fcc:	18 16       	cp	r1, r24
    4fce:	0c f0       	brlt	.+2      	; 0x4fd2 <Login_Sys+0x1ae>
    4fd0:	7b c0       	rjmp	.+246    	; 0x50c8 <Login_Sys+0x2a4>
	{
		_delay_ms(__us / 1000.0);
    4fd2:	6d 89       	ldd	r22, Y+21	; 0x15
    4fd4:	7e 89       	ldd	r23, Y+22	; 0x16
    4fd6:	8f 89       	ldd	r24, Y+23	; 0x17
    4fd8:	98 8d       	ldd	r25, Y+24	; 0x18
    4fda:	20 e0       	ldi	r18, 0x00	; 0
    4fdc:	30 e0       	ldi	r19, 0x00	; 0
    4fde:	4a e7       	ldi	r20, 0x7A	; 122
    4fe0:	54 e4       	ldi	r21, 0x44	; 68
    4fe2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4fe6:	dc 01       	movw	r26, r24
    4fe8:	cb 01       	movw	r24, r22
    4fea:	8c 87       	std	Y+12, r24	; 0x0c
    4fec:	9d 87       	std	Y+13, r25	; 0x0d
    4fee:	ae 87       	std	Y+14, r26	; 0x0e
    4ff0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ff2:	6c 85       	ldd	r22, Y+12	; 0x0c
    4ff4:	7d 85       	ldd	r23, Y+13	; 0x0d
    4ff6:	8e 85       	ldd	r24, Y+14	; 0x0e
    4ff8:	9f 85       	ldd	r25, Y+15	; 0x0f
    4ffa:	20 e0       	ldi	r18, 0x00	; 0
    4ffc:	30 e0       	ldi	r19, 0x00	; 0
    4ffe:	4a ef       	ldi	r20, 0xFA	; 250
    5000:	54 e4       	ldi	r21, 0x44	; 68
    5002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5006:	dc 01       	movw	r26, r24
    5008:	cb 01       	movw	r24, r22
    500a:	88 87       	std	Y+8, r24	; 0x08
    500c:	99 87       	std	Y+9, r25	; 0x09
    500e:	aa 87       	std	Y+10, r26	; 0x0a
    5010:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5012:	68 85       	ldd	r22, Y+8	; 0x08
    5014:	79 85       	ldd	r23, Y+9	; 0x09
    5016:	8a 85       	ldd	r24, Y+10	; 0x0a
    5018:	9b 85       	ldd	r25, Y+11	; 0x0b
    501a:	20 e0       	ldi	r18, 0x00	; 0
    501c:	30 e0       	ldi	r19, 0x00	; 0
    501e:	40 e8       	ldi	r20, 0x80	; 128
    5020:	5f e3       	ldi	r21, 0x3F	; 63
    5022:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5026:	88 23       	and	r24, r24
    5028:	2c f4       	brge	.+10     	; 0x5034 <Login_Sys+0x210>
		__ticks = 1;
    502a:	81 e0       	ldi	r24, 0x01	; 1
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	9f 83       	std	Y+7, r25	; 0x07
    5030:	8e 83       	std	Y+6, r24	; 0x06
    5032:	3f c0       	rjmp	.+126    	; 0x50b2 <Login_Sys+0x28e>
	else if (__tmp > 65535)
    5034:	68 85       	ldd	r22, Y+8	; 0x08
    5036:	79 85       	ldd	r23, Y+9	; 0x09
    5038:	8a 85       	ldd	r24, Y+10	; 0x0a
    503a:	9b 85       	ldd	r25, Y+11	; 0x0b
    503c:	20 e0       	ldi	r18, 0x00	; 0
    503e:	3f ef       	ldi	r19, 0xFF	; 255
    5040:	4f e7       	ldi	r20, 0x7F	; 127
    5042:	57 e4       	ldi	r21, 0x47	; 71
    5044:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5048:	18 16       	cp	r1, r24
    504a:	4c f5       	brge	.+82     	; 0x509e <Login_Sys+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    504c:	6c 85       	ldd	r22, Y+12	; 0x0c
    504e:	7d 85       	ldd	r23, Y+13	; 0x0d
    5050:	8e 85       	ldd	r24, Y+14	; 0x0e
    5052:	9f 85       	ldd	r25, Y+15	; 0x0f
    5054:	20 e0       	ldi	r18, 0x00	; 0
    5056:	30 e0       	ldi	r19, 0x00	; 0
    5058:	40 e2       	ldi	r20, 0x20	; 32
    505a:	51 e4       	ldi	r21, 0x41	; 65
    505c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5060:	dc 01       	movw	r26, r24
    5062:	cb 01       	movw	r24, r22
    5064:	bc 01       	movw	r22, r24
    5066:	cd 01       	movw	r24, r26
    5068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    506c:	dc 01       	movw	r26, r24
    506e:	cb 01       	movw	r24, r22
    5070:	9f 83       	std	Y+7, r25	; 0x07
    5072:	8e 83       	std	Y+6, r24	; 0x06
    5074:	0f c0       	rjmp	.+30     	; 0x5094 <Login_Sys+0x270>
    5076:	88 ec       	ldi	r24, 0xC8	; 200
    5078:	90 e0       	ldi	r25, 0x00	; 0
    507a:	9d 83       	std	Y+5, r25	; 0x05
    507c:	8c 83       	std	Y+4, r24	; 0x04
    507e:	8c 81       	ldd	r24, Y+4	; 0x04
    5080:	9d 81       	ldd	r25, Y+5	; 0x05
    5082:	01 97       	sbiw	r24, 0x01	; 1
    5084:	f1 f7       	brne	.-4      	; 0x5082 <Login_Sys+0x25e>
    5086:	9d 83       	std	Y+5, r25	; 0x05
    5088:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    508a:	8e 81       	ldd	r24, Y+6	; 0x06
    508c:	9f 81       	ldd	r25, Y+7	; 0x07
    508e:	01 97       	sbiw	r24, 0x01	; 1
    5090:	9f 83       	std	Y+7, r25	; 0x07
    5092:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5094:	8e 81       	ldd	r24, Y+6	; 0x06
    5096:	9f 81       	ldd	r25, Y+7	; 0x07
    5098:	00 97       	sbiw	r24, 0x00	; 0
    509a:	69 f7       	brne	.-38     	; 0x5076 <Login_Sys+0x252>
    509c:	24 c0       	rjmp	.+72     	; 0x50e6 <Login_Sys+0x2c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    509e:	68 85       	ldd	r22, Y+8	; 0x08
    50a0:	79 85       	ldd	r23, Y+9	; 0x09
    50a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    50a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    50a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50aa:	dc 01       	movw	r26, r24
    50ac:	cb 01       	movw	r24, r22
    50ae:	9f 83       	std	Y+7, r25	; 0x07
    50b0:	8e 83       	std	Y+6, r24	; 0x06
    50b2:	8e 81       	ldd	r24, Y+6	; 0x06
    50b4:	9f 81       	ldd	r25, Y+7	; 0x07
    50b6:	9b 83       	std	Y+3, r25	; 0x03
    50b8:	8a 83       	std	Y+2, r24	; 0x02
    50ba:	8a 81       	ldd	r24, Y+2	; 0x02
    50bc:	9b 81       	ldd	r25, Y+3	; 0x03
    50be:	01 97       	sbiw	r24, 0x01	; 1
    50c0:	f1 f7       	brne	.-4      	; 0x50be <Login_Sys+0x29a>
    50c2:	9b 83       	std	Y+3, r25	; 0x03
    50c4:	8a 83       	std	Y+2, r24	; 0x02
    50c6:	0f c0       	rjmp	.+30     	; 0x50e6 <Login_Sys+0x2c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    50c8:	69 89       	ldd	r22, Y+17	; 0x11
    50ca:	7a 89       	ldd	r23, Y+18	; 0x12
    50cc:	8b 89       	ldd	r24, Y+19	; 0x13
    50ce:	9c 89       	ldd	r25, Y+20	; 0x14
    50d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50d4:	dc 01       	movw	r26, r24
    50d6:	cb 01       	movw	r24, r22
    50d8:	88 8b       	std	Y+16, r24	; 0x10
    50da:	88 89       	ldd	r24, Y+16	; 0x10
    50dc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    50de:	89 81       	ldd	r24, Y+1	; 0x01
    50e0:	8a 95       	dec	r24
    50e2:	f1 f7       	brne	.-4      	; 0x50e0 <Login_Sys+0x2bc>
    50e4:	89 83       	std	Y+1, r24	; 0x01
	          }
	          else
	          {
	             return 0;
	          }
	        return 1;
    50e6:	81 e0       	ldi	r24, 0x01	; 1
    50e8:	8a a3       	std	Y+34, r24	; 0x22
    50ea:	01 c0       	rjmp	.+2      	; 0x50ee <Login_Sys+0x2ca>
	          {
	          	_delay_us(1);
	          }
	          else
	          {
	             return 0;
    50ec:	1a a2       	std	Y+34, r1	; 0x22
    50ee:	8a a1       	ldd	r24, Y+34	; 0x22
	          }
	        return 1;

}
    50f0:	a2 96       	adiw	r28, 0x22	; 34
    50f2:	0f b6       	in	r0, 0x3f	; 63
    50f4:	f8 94       	cli
    50f6:	de bf       	out	0x3e, r29	; 62
    50f8:	0f be       	out	0x3f, r0	; 63
    50fa:	cd bf       	out	0x3d, r28	; 61
    50fc:	cf 91       	pop	r28
    50fe:	df 91       	pop	r29
    5100:	08 95       	ret

00005102 <Check_Login>:


_uint8 Check_Login(Void)
{
    5102:	df 93       	push	r29
    5104:	cf 93       	push	r28
    5106:	0f 92       	push	r0
    5108:	cd b7       	in	r28, 0x3d	; 61
    510a:	de b7       	in	r29, 0x3e	; 62
	_uint8  LocalReturnValue;
	LocalReturnValue=Login_Sys();
    510c:	0e 94 12 27 	call	0x4e24	; 0x4e24 <Login_Sys>
    5110:	89 83       	std	Y+1, r24	; 0x01
if(LocalReturnValue==1)
    5112:	89 81       	ldd	r24, Y+1	; 0x01
    5114:	81 30       	cpi	r24, 0x01	; 1
    5116:	09 f5       	brne	.+66     	; 0x515a <Check_Login+0x58>
{

LCD_CheckStatusWriteString("Good Morning There!!");
    5118:	86 e6       	ldi	r24, 0x66	; 102
    511a:	90 e0       	ldi	r25, 0x00	; 0
    511c:	0e 94 56 15 	call	0x2aac	; 0x2aac <LCD_CheckStatusWriteString>

LCD_CheckStatusSpecialChar(2,LCD__UINT8_LINE2,LCD__UINT8_LOCATION_NUMBER8);
    5120:	82 e0       	ldi	r24, 0x02	; 2
    5122:	61 e0       	ldi	r22, 0x01	; 1
    5124:	48 e0       	ldi	r20, 0x08	; 8
    5126:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <LCD_CheckStatusSpecialChar>
LCD_CheckStatusDisplaySpecialChar(2);
    512a:	82 e0       	ldi	r24, 0x02	; 2
    512c:	0e 94 4c 1a 	call	0x3498	; 0x3498 <LCD_CheckStatusDisplaySpecialChar>
LCD_CheckStatusSpecialChar(3,LCD__UINT8_LINE2,LCD__UINT8_LOCATION_NUMBER9);
    5130:	83 e0       	ldi	r24, 0x03	; 3
    5132:	61 e0       	ldi	r22, 0x01	; 1
    5134:	49 e0       	ldi	r20, 0x09	; 9
    5136:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <LCD_CheckStatusSpecialChar>
LCD_CheckStatusDisplaySpecialChar(3);
    513a:	83 e0       	ldi	r24, 0x03	; 3
    513c:	0e 94 4c 1a 	call	0x3498	; 0x3498 <LCD_CheckStatusDisplaySpecialChar>
LCD_VoidShiftRight(36,350);
    5140:	84 e2       	ldi	r24, 0x24	; 36
    5142:	4e e5       	ldi	r20, 0x5E	; 94
    5144:	51 e0       	ldi	r21, 0x01	; 1
    5146:	60 e0       	ldi	r22, 0x00	; 0
    5148:	70 e0       	ldi	r23, 0x00	; 0
    514a:	0e 94 84 18 	call	0x3108	; 0x3108 <LCD_VoidShiftRight>
DIO__CheckStatusSetPinValue(DIO__UINT8_PORTD,DIO__UINT8_PIN1,DIO__UINT8_HIGH);
    514e:	83 e0       	ldi	r24, 0x03	; 3
    5150:	61 e0       	ldi	r22, 0x01	; 1
    5152:	41 e0       	ldi	r20, 0x01	; 1
    5154:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO__CheckStatusSetPinValue>
    5158:	0e c0       	rjmp	.+28     	; 0x5176 <Check_Login+0x74>
}
else if(LocalReturnValue== 0)
    515a:	89 81       	ldd	r24, Y+1	; 0x01
    515c:	88 23       	and	r24, r24
    515e:	59 f4       	brne	.+22     	; 0x5176 <Check_Login+0x74>
{
LCD_CheckStatusWriteString("Wrong!");
    5160:	8b e7       	ldi	r24, 0x7B	; 123
    5162:	90 e0       	ldi	r25, 0x00	; 0
    5164:	0e 94 56 15 	call	0x2aac	; 0x2aac <LCD_CheckStatusWriteString>
while(TRUE){
LCD_CheckStatusShiftRightOrLeft(350);
    5168:	6e e5       	ldi	r22, 0x5E	; 94
    516a:	71 e0       	ldi	r23, 0x01	; 1
    516c:	80 e0       	ldi	r24, 0x00	; 0
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	0e 94 1f 19 	call	0x323e	; 0x323e <LCD_CheckStatusShiftRightOrLeft>
    5174:	f9 cf       	rjmp	.-14     	; 0x5168 <Check_Login+0x66>
}
}
return 0 ;
    5176:	80 e0       	ldi	r24, 0x00	; 0
}
    5178:	0f 90       	pop	r0
    517a:	cf 91       	pop	r28
    517c:	df 91       	pop	r29
    517e:	08 95       	ret

00005180 <__mulsi3>:
    5180:	62 9f       	mul	r22, r18
    5182:	d0 01       	movw	r26, r0
    5184:	73 9f       	mul	r23, r19
    5186:	f0 01       	movw	r30, r0
    5188:	82 9f       	mul	r24, r18
    518a:	e0 0d       	add	r30, r0
    518c:	f1 1d       	adc	r31, r1
    518e:	64 9f       	mul	r22, r20
    5190:	e0 0d       	add	r30, r0
    5192:	f1 1d       	adc	r31, r1
    5194:	92 9f       	mul	r25, r18
    5196:	f0 0d       	add	r31, r0
    5198:	83 9f       	mul	r24, r19
    519a:	f0 0d       	add	r31, r0
    519c:	74 9f       	mul	r23, r20
    519e:	f0 0d       	add	r31, r0
    51a0:	65 9f       	mul	r22, r21
    51a2:	f0 0d       	add	r31, r0
    51a4:	99 27       	eor	r25, r25
    51a6:	72 9f       	mul	r23, r18
    51a8:	b0 0d       	add	r27, r0
    51aa:	e1 1d       	adc	r30, r1
    51ac:	f9 1f       	adc	r31, r25
    51ae:	63 9f       	mul	r22, r19
    51b0:	b0 0d       	add	r27, r0
    51b2:	e1 1d       	adc	r30, r1
    51b4:	f9 1f       	adc	r31, r25
    51b6:	bd 01       	movw	r22, r26
    51b8:	cf 01       	movw	r24, r30
    51ba:	11 24       	eor	r1, r1
    51bc:	08 95       	ret

000051be <__udivmodsi4>:
    51be:	a1 e2       	ldi	r26, 0x21	; 33
    51c0:	1a 2e       	mov	r1, r26
    51c2:	aa 1b       	sub	r26, r26
    51c4:	bb 1b       	sub	r27, r27
    51c6:	fd 01       	movw	r30, r26
    51c8:	0d c0       	rjmp	.+26     	; 0x51e4 <__udivmodsi4_ep>

000051ca <__udivmodsi4_loop>:
    51ca:	aa 1f       	adc	r26, r26
    51cc:	bb 1f       	adc	r27, r27
    51ce:	ee 1f       	adc	r30, r30
    51d0:	ff 1f       	adc	r31, r31
    51d2:	a2 17       	cp	r26, r18
    51d4:	b3 07       	cpc	r27, r19
    51d6:	e4 07       	cpc	r30, r20
    51d8:	f5 07       	cpc	r31, r21
    51da:	20 f0       	brcs	.+8      	; 0x51e4 <__udivmodsi4_ep>
    51dc:	a2 1b       	sub	r26, r18
    51de:	b3 0b       	sbc	r27, r19
    51e0:	e4 0b       	sbc	r30, r20
    51e2:	f5 0b       	sbc	r31, r21

000051e4 <__udivmodsi4_ep>:
    51e4:	66 1f       	adc	r22, r22
    51e6:	77 1f       	adc	r23, r23
    51e8:	88 1f       	adc	r24, r24
    51ea:	99 1f       	adc	r25, r25
    51ec:	1a 94       	dec	r1
    51ee:	69 f7       	brne	.-38     	; 0x51ca <__udivmodsi4_loop>
    51f0:	60 95       	com	r22
    51f2:	70 95       	com	r23
    51f4:	80 95       	com	r24
    51f6:	90 95       	com	r25
    51f8:	9b 01       	movw	r18, r22
    51fa:	ac 01       	movw	r20, r24
    51fc:	bd 01       	movw	r22, r26
    51fe:	cf 01       	movw	r24, r30
    5200:	08 95       	ret

00005202 <__prologue_saves__>:
    5202:	2f 92       	push	r2
    5204:	3f 92       	push	r3
    5206:	4f 92       	push	r4
    5208:	5f 92       	push	r5
    520a:	6f 92       	push	r6
    520c:	7f 92       	push	r7
    520e:	8f 92       	push	r8
    5210:	9f 92       	push	r9
    5212:	af 92       	push	r10
    5214:	bf 92       	push	r11
    5216:	cf 92       	push	r12
    5218:	df 92       	push	r13
    521a:	ef 92       	push	r14
    521c:	ff 92       	push	r15
    521e:	0f 93       	push	r16
    5220:	1f 93       	push	r17
    5222:	cf 93       	push	r28
    5224:	df 93       	push	r29
    5226:	cd b7       	in	r28, 0x3d	; 61
    5228:	de b7       	in	r29, 0x3e	; 62
    522a:	ca 1b       	sub	r28, r26
    522c:	db 0b       	sbc	r29, r27
    522e:	0f b6       	in	r0, 0x3f	; 63
    5230:	f8 94       	cli
    5232:	de bf       	out	0x3e, r29	; 62
    5234:	0f be       	out	0x3f, r0	; 63
    5236:	cd bf       	out	0x3d, r28	; 61
    5238:	09 94       	ijmp

0000523a <__epilogue_restores__>:
    523a:	2a 88       	ldd	r2, Y+18	; 0x12
    523c:	39 88       	ldd	r3, Y+17	; 0x11
    523e:	48 88       	ldd	r4, Y+16	; 0x10
    5240:	5f 84       	ldd	r5, Y+15	; 0x0f
    5242:	6e 84       	ldd	r6, Y+14	; 0x0e
    5244:	7d 84       	ldd	r7, Y+13	; 0x0d
    5246:	8c 84       	ldd	r8, Y+12	; 0x0c
    5248:	9b 84       	ldd	r9, Y+11	; 0x0b
    524a:	aa 84       	ldd	r10, Y+10	; 0x0a
    524c:	b9 84       	ldd	r11, Y+9	; 0x09
    524e:	c8 84       	ldd	r12, Y+8	; 0x08
    5250:	df 80       	ldd	r13, Y+7	; 0x07
    5252:	ee 80       	ldd	r14, Y+6	; 0x06
    5254:	fd 80       	ldd	r15, Y+5	; 0x05
    5256:	0c 81       	ldd	r16, Y+4	; 0x04
    5258:	1b 81       	ldd	r17, Y+3	; 0x03
    525a:	aa 81       	ldd	r26, Y+2	; 0x02
    525c:	b9 81       	ldd	r27, Y+1	; 0x01
    525e:	ce 0f       	add	r28, r30
    5260:	d1 1d       	adc	r29, r1
    5262:	0f b6       	in	r0, 0x3f	; 63
    5264:	f8 94       	cli
    5266:	de bf       	out	0x3e, r29	; 62
    5268:	0f be       	out	0x3f, r0	; 63
    526a:	cd bf       	out	0x3d, r28	; 61
    526c:	ed 01       	movw	r28, r26
    526e:	08 95       	ret

00005270 <_exit>:
    5270:	f8 94       	cli

00005272 <__stop_program>:
    5272:	ff cf       	rjmp	.-2      	; 0x5272 <__stop_program>
