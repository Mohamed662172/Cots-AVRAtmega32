
LCDTEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000022ac  00002320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001728  00000000  00000000  00002334  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b77  00000000  00000000  00003a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000045d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00004733  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000048c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00006907  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00007a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000898c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00008b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00008dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000965c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 10 11 	call	0x2220	; 0x2220 <main>
      7a:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a9 e6       	ldi	r26, 0x69	; 105
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	89 e6       	ldi	r24, 0x69	; 105
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 25 11 	jmp	0x224a	; 0x224a <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	69 e6       	ldi	r22, 0x69	; 105
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO__CheckStatusInit>:

/* HAL */

/* Defination Of Function  */
CheckStatus DIO__CheckStatusInit(Void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	0f 92       	push	r0
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
     c98:	19 82       	std	Y+1, r1	; 0x01

        /* intial direction */

        {
        	        DDRA__UINT8_REG = CONC(DIO__UINT8_PA7_INITIAL_DIRECTION, DIO__UINT8_PA6_INITIAL_DIRECTION, DIO__UINT8_PA5_INITIAL_DIRECTION, DIO__UINT8_PA4_INITIAL_DIRECTION, DIO__UINT8_PA3_INITIAL_DIRECTION, DIO__UINT8_PA2_INITIAL_DIRECTION, DIO__UINT8_PA1_INITIAL_DIRECTION, DIO__UINT8_PA0_INITIAL_DIRECTION);
     c9a:	ea e3       	ldi	r30, 0x3A	; 58
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	80 83       	st	Z, r24
        	        DDRB__UINT8_REG = CONC(DIO__UINT8_PB7_INITIAL_DIRECTION, DIO__UINT8_PB6_INITIAL_DIRECTION, DIO__UINT8_PB5_INITIAL_DIRECTION, DIO__UINT8_PB4_INITIAL_DIRECTION, DIO__UINT8_PB3_INITIAL_DIRECTION, DIO__UINT8_PB2_INITIAL_DIRECTION, DIO__UINT8_PB1_INITIAL_DIRECTION, DIO__UINT8_PB0_INITIAL_DIRECTION);
     ca2:	e7 e3       	ldi	r30, 0x37	; 55
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	10 82       	st	Z, r1
        	        DDRC__UINT8_REG = CONC(DIO__UINT8_PC7_INITIAL_DIRECTION, DIO__UINT8_PC6_INITIAL_DIRECTION, DIO__UINT8_PC5_INITIAL_DIRECTION, DIO__UINT8_PC4_INITIAL_DIRECTION, DIO__UINT8_PC3_INITIAL_DIRECTION, DIO__UINT8_PC2_INITIAL_DIRECTION, DIO__UINT8_PC1_INITIAL_DIRECTION, DIO__UINT8_PC0_INITIAL_DIRECTION);
     ca8:	e4 e3       	ldi	r30, 0x34	; 52
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	10 82       	st	Z, r1
        	        DDRD__UINT8_REG = CONC(DIO__UINT8_PD7_INITIAL_DIRECTION, DIO__UINT8_PD6_INITIAL_DIRECTION, DIO__UINT8_PD5_INITIAL_DIRECTION, DIO__UINT8_PD4_INITIAL_DIRECTION, DIO__UINT8_PD3_INITIAL_DIRECTION, DIO__UINT8_PD2_INITIAL_DIRECTION, DIO__UINT8_PD1_INITIAL_DIRECTION, DIO__UINT8_PD0_INITIAL_DIRECTION);
     cae:	e1 e3       	ldi	r30, 0x31	; 49
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	80 83       	st	Z, r24

                /* initial Value */

                PORTA__UINT8_REG = CONC(DIO__UINT8_PA7_INITIAL_VALUE, DIO__UINT8_PA6_INITIAL_VALUE, DIO__UINT8_PA5_INITIAL_VALUE, DIO__UINT8_PA4_INITIAL_VALUE, DIO__UINT8_PA3_INITIAL_VALUE, DIO__UINT8_PA2_INITIAL_VALUE, DIO__UINT8_PA1_INITIAL_VALUE, DIO__UINT8_PA0_INITIAL_VALUE);
     cb6:	eb e3       	ldi	r30, 0x3B	; 59
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	10 82       	st	Z, r1
                PORTB__UINT8_REG = CONC(DIO__UINT8_PB7_INITIAL_VALUE, DIO__UINT8_PB6_INITIAL_VALUE, DIO__UINT8_PB5_INITIAL_VALUE, DIO__UINT8_PB4_INITIAL_VALUE, DIO__UINT8_PB3_INITIAL_VALUE, DIO__UINT8_PB2_INITIAL_VALUE, DIO__UINT8_PB1_INITIAL_VALUE, DIO__UINT8_PB0_INITIAL_VALUE);
     cbc:	e8 e3       	ldi	r30, 0x38	; 56
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	10 82       	st	Z, r1
                PORTC__UINT8_REG = CONC(DIO__UINT8_PC7_INITIAL_VALUE, DIO__UINT8_PC6_INITIAL_VALUE, DIO__UINT8_PC5_INITIAL_VALUE, DIO__UINT8_PC4_INITIAL_VALUE, DIO__UINT8_PC3_INITIAL_VALUE, DIO__UINT8_PC2_INITIAL_VALUE, DIO__UINT8_PC1_INITIAL_VALUE, DIO__UINT8_PC0_INITIAL_VALUE);
     cc2:	e5 e3       	ldi	r30, 0x35	; 53
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	10 82       	st	Z, r1
                PORTD__UINT8_REG = CONC(DIO__UINT8_PD7_INITIAL_VALUE, DIO__UINT8_PD6_INITIAL_VALUE, DIO__UINT8_PD5_INITIAL_VALUE, DIO__UINT8_PD4_INITIAL_VALUE, DIO__UINT8_PD3_INITIAL_VALUE, DIO__UINT8_PD2_INITIAL_VALUE, DIO__UINT8_PD1_INITIAL_VALUE, DIO__UINT8_PD0_INITIAL_VALUE);
     cc8:	e2 e3       	ldi	r30, 0x32	; 50
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	10 82       	st	Z, r1
        }

        return Local_CheckStatusReturnStatus;
     cce:	89 81       	ldd	r24, Y+1	; 0x01
}
     cd0:	0f 90       	pop	r0
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <DIO__CheckStatusSetPinDirection>:

CheckStatus DIO__CheckStatusSetPinDirection(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 Copy__uint8PinDirection)
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	2f 97       	sbiw	r28, 0x0f	; 15
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	8a 83       	std	Y+2, r24	; 0x02
     cee:	6b 83       	std	Y+3, r22	; 0x03
     cf0:	4c 83       	std	Y+4, r20	; 0x04
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
     cf2:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pin  Direction
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && ((Copy__uint8PinDirection == DIO__UINT8_OUTPUT) || (Copy__uint8PinDirection == DIO__UINT8_INPUT)))
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	84 30       	cpi	r24, 0x04	; 4
     cf8:	08 f0       	brcs	.+2      	; 0xcfc <DIO__CheckStatusSetPinDirection+0x24>
     cfa:	0a c1       	rjmp	.+532    	; 0xf10 <DIO__CheckStatusSetPinDirection+0x238>
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	88 30       	cpi	r24, 0x08	; 8
     d00:	08 f0       	brcs	.+2      	; 0xd04 <DIO__CheckStatusSetPinDirection+0x2c>
     d02:	06 c1       	rjmp	.+524    	; 0xf10 <DIO__CheckStatusSetPinDirection+0x238>
     d04:	8c 81       	ldd	r24, Y+4	; 0x04
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	21 f0       	breq	.+8      	; 0xd12 <DIO__CheckStatusSetPinDirection+0x3a>
     d0a:	8c 81       	ldd	r24, Y+4	; 0x04
     d0c:	88 23       	and	r24, r24
     d0e:	09 f0       	breq	.+2      	; 0xd12 <DIO__CheckStatusSetPinDirection+0x3a>
     d10:	ff c0       	rjmp	.+510    	; 0xf10 <DIO__CheckStatusSetPinDirection+0x238>
        {
                switch (Copy__uint8PortId)
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	3f 87       	std	Y+15, r19	; 0x0f
     d1a:	2e 87       	std	Y+14, r18	; 0x0e
     d1c:	8e 85       	ldd	r24, Y+14	; 0x0e
     d1e:	9f 85       	ldd	r25, Y+15	; 0x0f
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	91 05       	cpc	r25, r1
     d24:	09 f4       	brne	.+2      	; 0xd28 <DIO__CheckStatusSetPinDirection+0x50>
     d26:	4e c0       	rjmp	.+156    	; 0xdc4 <DIO__CheckStatusSetPinDirection+0xec>
     d28:	2e 85       	ldd	r18, Y+14	; 0x0e
     d2a:	3f 85       	ldd	r19, Y+15	; 0x0f
     d2c:	22 30       	cpi	r18, 0x02	; 2
     d2e:	31 05       	cpc	r19, r1
     d30:	2c f4       	brge	.+10     	; 0xd3c <DIO__CheckStatusSetPinDirection+0x64>
     d32:	8e 85       	ldd	r24, Y+14	; 0x0e
     d34:	9f 85       	ldd	r25, Y+15	; 0x0f
     d36:	00 97       	sbiw	r24, 0x00	; 0
     d38:	71 f0       	breq	.+28     	; 0xd56 <DIO__CheckStatusSetPinDirection+0x7e>
     d3a:	e7 c0       	rjmp	.+462    	; 0xf0a <DIO__CheckStatusSetPinDirection+0x232>
     d3c:	2e 85       	ldd	r18, Y+14	; 0x0e
     d3e:	3f 85       	ldd	r19, Y+15	; 0x0f
     d40:	22 30       	cpi	r18, 0x02	; 2
     d42:	31 05       	cpc	r19, r1
     d44:	09 f4       	brne	.+2      	; 0xd48 <DIO__CheckStatusSetPinDirection+0x70>
     d46:	75 c0       	rjmp	.+234    	; 0xe32 <DIO__CheckStatusSetPinDirection+0x15a>
     d48:	8e 85       	ldd	r24, Y+14	; 0x0e
     d4a:	9f 85       	ldd	r25, Y+15	; 0x0f
     d4c:	83 30       	cpi	r24, 0x03	; 3
     d4e:	91 05       	cpc	r25, r1
     d50:	09 f4       	brne	.+2      	; 0xd54 <DIO__CheckStatusSetPinDirection+0x7c>
     d52:	a6 c0       	rjmp	.+332    	; 0xea0 <DIO__CheckStatusSetPinDirection+0x1c8>
     d54:	da c0       	rjmp	.+436    	; 0xf0a <DIO__CheckStatusSetPinDirection+0x232>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PinDirection)
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	3d 87       	std	Y+13, r19	; 0x0d
     d5e:	2c 87       	std	Y+12, r18	; 0x0c
     d60:	8c 85       	ldd	r24, Y+12	; 0x0c
     d62:	9d 85       	ldd	r25, Y+13	; 0x0d
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	d1 f0       	breq	.+52     	; 0xd9c <DIO__CheckStatusSetPinDirection+0xc4>
     d68:	2c 85       	ldd	r18, Y+12	; 0x0c
     d6a:	3d 85       	ldd	r19, Y+13	; 0x0d
     d6c:	21 30       	cpi	r18, 0x01	; 1
     d6e:	31 05       	cpc	r19, r1
     d70:	09 f0       	breq	.+2      	; 0xd74 <DIO__CheckStatusSetPinDirection+0x9c>
     d72:	cb c0       	rjmp	.+406    	; 0xf0a <DIO__CheckStatusSetPinDirection+0x232>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRA__UINT8_REG, Copy__uint8PinId);
     d74:	aa e3       	ldi	r26, 0x3A	; 58
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	ea e3       	ldi	r30, 0x3A	; 58
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	48 2f       	mov	r20, r24
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	02 2e       	mov	r0, r18
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <DIO__CheckStatusSetPinDirection+0xba>
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	0a 94       	dec	r0
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <DIO__CheckStatusSetPinDirection+0xb6>
     d96:	84 2b       	or	r24, r20
     d98:	8c 93       	st	X, r24
     d9a:	b7 c0       	rjmp	.+366    	; 0xf0a <DIO__CheckStatusSetPinDirection+0x232>
                                break;

                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRA__UINT8_REG, Copy__uint8PinId);
     d9c:	aa e3       	ldi	r26, 0x3A	; 58
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	ea e3       	ldi	r30, 0x3A	; 58
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	48 2f       	mov	r20, r24
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 2e       	mov	r0, r18
     db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO__CheckStatusSetPinDirection+0xe2>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	0a 94       	dec	r0
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO__CheckStatusSetPinDirection+0xde>
     dbe:	84 23       	and	r24, r20
     dc0:	8c 93       	st	X, r24
     dc2:	a3 c0       	rjmp	.+326    	; 0xf0a <DIO__CheckStatusSetPinDirection+0x232>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PinDirection)
     dc4:	8c 81       	ldd	r24, Y+4	; 0x04
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	3b 87       	std	Y+11, r19	; 0x0b
     dcc:	2a 87       	std	Y+10, r18	; 0x0a
     dce:	8a 85       	ldd	r24, Y+10	; 0x0a
     dd0:	9b 85       	ldd	r25, Y+11	; 0x0b
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	d1 f0       	breq	.+52     	; 0xe0a <DIO__CheckStatusSetPinDirection+0x132>
     dd6:	2a 85       	ldd	r18, Y+10	; 0x0a
     dd8:	3b 85       	ldd	r19, Y+11	; 0x0b
     dda:	21 30       	cpi	r18, 0x01	; 1
     ddc:	31 05       	cpc	r19, r1
     dde:	09 f0       	breq	.+2      	; 0xde2 <DIO__CheckStatusSetPinDirection+0x10a>
     de0:	94 c0       	rjmp	.+296    	; 0xf0a <DIO__CheckStatusSetPinDirection+0x232>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRB__UINT8_REG, Copy__uint8PinId);
     de2:	a7 e3       	ldi	r26, 0x37	; 55
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e7 e3       	ldi	r30, 0x37	; 55
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <DIO__CheckStatusSetPinDirection+0x128>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <DIO__CheckStatusSetPinDirection+0x124>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	80 c0       	rjmp	.+256    	; 0xf0a <DIO__CheckStatusSetPinDirection+0x232>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRB__UINT8_REG, Copy__uint8PinId);
     e0a:	a7 e3       	ldi	r26, 0x37	; 55
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e7 e3       	ldi	r30, 0x37	; 55
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO__CheckStatusSetPinDirection+0x150>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO__CheckStatusSetPinDirection+0x14c>
     e2c:	84 23       	and	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	6c c0       	rjmp	.+216    	; 0xf0a <DIO__CheckStatusSetPinDirection+0x232>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PinDirection)
     e32:	8c 81       	ldd	r24, Y+4	; 0x04
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	39 87       	std	Y+9, r19	; 0x09
     e3a:	28 87       	std	Y+8, r18	; 0x08
     e3c:	88 85       	ldd	r24, Y+8	; 0x08
     e3e:	99 85       	ldd	r25, Y+9	; 0x09
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	d1 f0       	breq	.+52     	; 0xe78 <DIO__CheckStatusSetPinDirection+0x1a0>
     e44:	28 85       	ldd	r18, Y+8	; 0x08
     e46:	39 85       	ldd	r19, Y+9	; 0x09
     e48:	21 30       	cpi	r18, 0x01	; 1
     e4a:	31 05       	cpc	r19, r1
     e4c:	09 f0       	breq	.+2      	; 0xe50 <DIO__CheckStatusSetPinDirection+0x178>
     e4e:	5d c0       	rjmp	.+186    	; 0xf0a <DIO__CheckStatusSetPinDirection+0x232>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRC__UINT8_REG, Copy__uint8PinId);
     e50:	a4 e3       	ldi	r26, 0x34	; 52
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e4 e3       	ldi	r30, 0x34	; 52
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <DIO__CheckStatusSetPinDirection+0x196>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <DIO__CheckStatusSetPinDirection+0x192>
     e72:	84 2b       	or	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	49 c0       	rjmp	.+146    	; 0xf0a <DIO__CheckStatusSetPinDirection+0x232>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRC__UINT8_REG, Copy__uint8PinId);
     e78:	a4 e3       	ldi	r26, 0x34	; 52
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e4 e3       	ldi	r30, 0x34	; 52
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 2e       	mov	r0, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <DIO__CheckStatusSetPinDirection+0x1be>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <DIO__CheckStatusSetPinDirection+0x1ba>
     e9a:	84 23       	and	r24, r20
     e9c:	8c 93       	st	X, r24
     e9e:	35 c0       	rjmp	.+106    	; 0xf0a <DIO__CheckStatusSetPinDirection+0x232>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PinDirection)
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	3f 83       	std	Y+7, r19	; 0x07
     ea8:	2e 83       	std	Y+6, r18	; 0x06
     eaa:	8e 81       	ldd	r24, Y+6	; 0x06
     eac:	9f 81       	ldd	r25, Y+7	; 0x07
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	c9 f0       	breq	.+50     	; 0xee4 <DIO__CheckStatusSetPinDirection+0x20c>
     eb2:	2e 81       	ldd	r18, Y+6	; 0x06
     eb4:	3f 81       	ldd	r19, Y+7	; 0x07
     eb6:	21 30       	cpi	r18, 0x01	; 1
     eb8:	31 05       	cpc	r19, r1
     eba:	39 f5       	brne	.+78     	; 0xf0a <DIO__CheckStatusSetPinDirection+0x232>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRD__UINT8_REG, Copy__uint8PinId);
     ebc:	a1 e3       	ldi	r26, 0x31	; 49
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e1 e3       	ldi	r30, 0x31	; 49
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <DIO__CheckStatusSetPinDirection+0x202>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <DIO__CheckStatusSetPinDirection+0x1fe>
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	13 c0       	rjmp	.+38     	; 0xf0a <DIO__CheckStatusSetPinDirection+0x232>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRD__UINT8_REG, Copy__uint8PinId);
     ee4:	a1 e3       	ldi	r26, 0x31	; 49
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e1 e3       	ldi	r30, 0x31	; 49
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO__CheckStatusSetPinDirection+0x22a>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO__CheckStatusSetPinDirection+0x226>
     f06:	84 23       	and	r24, r20
     f08:	8c 93       	st	X, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
     f0a:	39 81       	ldd	r19, Y+1	; 0x01
     f0c:	3d 83       	std	Y+5, r19	; 0x05
     f0e:	04 c0       	rjmp	.+8      	; 0xf18 <DIO__CheckStatusSetPinDirection+0x240>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	8d 83       	std	Y+5, r24	; 0x05
     f18:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
     f1a:	2f 96       	adiw	r28, 0x0f	; 15
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <DIO__CheckStatusSetPinValue>:

CheckStatus DIO__CheckStatusSetPinValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 Copy__uint8PinValue)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	2f 97       	sbiw	r28, 0x0f	; 15
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	8a 83       	std	Y+2, r24	; 0x02
     f42:	6b 83       	std	Y+3, r22	; 0x03
     f44:	4c 83       	std	Y+4, r20	; 0x04
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
     f46:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pin  Value 
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && ((Copy__uint8PinValue == DIO__UINT8_HIGH) || (Copy__uint8PinValue == DIO__UINT8_LOW)))
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	84 30       	cpi	r24, 0x04	; 4
     f4c:	08 f0       	brcs	.+2      	; 0xf50 <DIO__CheckStatusSetPinValue+0x24>
     f4e:	0a c1       	rjmp	.+532    	; 0x1164 <DIO__CheckStatusSetPinValue+0x238>
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	88 30       	cpi	r24, 0x08	; 8
     f54:	08 f0       	brcs	.+2      	; 0xf58 <DIO__CheckStatusSetPinValue+0x2c>
     f56:	06 c1       	rjmp	.+524    	; 0x1164 <DIO__CheckStatusSetPinValue+0x238>
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	21 f0       	breq	.+8      	; 0xf66 <DIO__CheckStatusSetPinValue+0x3a>
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	88 23       	and	r24, r24
     f62:	09 f0       	breq	.+2      	; 0xf66 <DIO__CheckStatusSetPinValue+0x3a>
     f64:	ff c0       	rjmp	.+510    	; 0x1164 <DIO__CheckStatusSetPinValue+0x238>
        {
                switch (Copy__uint8PortId)
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	3f 87       	std	Y+15, r19	; 0x0f
     f6e:	2e 87       	std	Y+14, r18	; 0x0e
     f70:	8e 85       	ldd	r24, Y+14	; 0x0e
     f72:	9f 85       	ldd	r25, Y+15	; 0x0f
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	91 05       	cpc	r25, r1
     f78:	09 f4       	brne	.+2      	; 0xf7c <DIO__CheckStatusSetPinValue+0x50>
     f7a:	4e c0       	rjmp	.+156    	; 0x1018 <DIO__CheckStatusSetPinValue+0xec>
     f7c:	2e 85       	ldd	r18, Y+14	; 0x0e
     f7e:	3f 85       	ldd	r19, Y+15	; 0x0f
     f80:	22 30       	cpi	r18, 0x02	; 2
     f82:	31 05       	cpc	r19, r1
     f84:	2c f4       	brge	.+10     	; 0xf90 <DIO__CheckStatusSetPinValue+0x64>
     f86:	8e 85       	ldd	r24, Y+14	; 0x0e
     f88:	9f 85       	ldd	r25, Y+15	; 0x0f
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	71 f0       	breq	.+28     	; 0xfaa <DIO__CheckStatusSetPinValue+0x7e>
     f8e:	e7 c0       	rjmp	.+462    	; 0x115e <DIO__CheckStatusSetPinValue+0x232>
     f90:	2e 85       	ldd	r18, Y+14	; 0x0e
     f92:	3f 85       	ldd	r19, Y+15	; 0x0f
     f94:	22 30       	cpi	r18, 0x02	; 2
     f96:	31 05       	cpc	r19, r1
     f98:	09 f4       	brne	.+2      	; 0xf9c <DIO__CheckStatusSetPinValue+0x70>
     f9a:	75 c0       	rjmp	.+234    	; 0x1086 <DIO__CheckStatusSetPinValue+0x15a>
     f9c:	8e 85       	ldd	r24, Y+14	; 0x0e
     f9e:	9f 85       	ldd	r25, Y+15	; 0x0f
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	91 05       	cpc	r25, r1
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <DIO__CheckStatusSetPinValue+0x7c>
     fa6:	a6 c0       	rjmp	.+332    	; 0x10f4 <DIO__CheckStatusSetPinValue+0x1c8>
     fa8:	da c0       	rjmp	.+436    	; 0x115e <DIO__CheckStatusSetPinValue+0x232>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PinValue)
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	3d 87       	std	Y+13, r19	; 0x0d
     fb2:	2c 87       	std	Y+12, r18	; 0x0c
     fb4:	8c 85       	ldd	r24, Y+12	; 0x0c
     fb6:	9d 85       	ldd	r25, Y+13	; 0x0d
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	d1 f0       	breq	.+52     	; 0xff0 <DIO__CheckStatusSetPinValue+0xc4>
     fbc:	2c 85       	ldd	r18, Y+12	; 0x0c
     fbe:	3d 85       	ldd	r19, Y+13	; 0x0d
     fc0:	21 30       	cpi	r18, 0x01	; 1
     fc2:	31 05       	cpc	r19, r1
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <DIO__CheckStatusSetPinValue+0x9c>
     fc6:	cb c0       	rjmp	.+406    	; 0x115e <DIO__CheckStatusSetPinValue+0x232>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTA__UINT8_REG, Copy__uint8PinId);
     fc8:	ab e3       	ldi	r26, 0x3B	; 59
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	eb e3       	ldi	r30, 0x3B	; 59
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <DIO__CheckStatusSetPinValue+0xba>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <DIO__CheckStatusSetPinValue+0xb6>
     fea:	84 2b       	or	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	b7 c0       	rjmp	.+366    	; 0x115e <DIO__CheckStatusSetPinValue+0x232>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTA__UINT8_REG, Copy__uint8PinId);
     ff0:	ab e3       	ldi	r26, 0x3B	; 59
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	eb e3       	ldi	r30, 0x3B	; 59
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <DIO__CheckStatusSetPinValue+0xe2>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <DIO__CheckStatusSetPinValue+0xde>
    1012:	84 23       	and	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	a3 c0       	rjmp	.+326    	; 0x115e <DIO__CheckStatusSetPinValue+0x232>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PinValue)
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	3b 87       	std	Y+11, r19	; 0x0b
    1020:	2a 87       	std	Y+10, r18	; 0x0a
    1022:	8a 85       	ldd	r24, Y+10	; 0x0a
    1024:	9b 85       	ldd	r25, Y+11	; 0x0b
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	d1 f0       	breq	.+52     	; 0x105e <DIO__CheckStatusSetPinValue+0x132>
    102a:	2a 85       	ldd	r18, Y+10	; 0x0a
    102c:	3b 85       	ldd	r19, Y+11	; 0x0b
    102e:	21 30       	cpi	r18, 0x01	; 1
    1030:	31 05       	cpc	r19, r1
    1032:	09 f0       	breq	.+2      	; 0x1036 <DIO__CheckStatusSetPinValue+0x10a>
    1034:	94 c0       	rjmp	.+296    	; 0x115e <DIO__CheckStatusSetPinValue+0x232>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTB__UINT8_REG, Copy__uint8PinId);
    1036:	a8 e3       	ldi	r26, 0x38	; 56
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e8 e3       	ldi	r30, 0x38	; 56
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO__CheckStatusSetPinValue+0x128>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO__CheckStatusSetPinValue+0x124>
    1058:	84 2b       	or	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	80 c0       	rjmp	.+256    	; 0x115e <DIO__CheckStatusSetPinValue+0x232>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTB__UINT8_REG, Copy__uint8PinId);
    105e:	a8 e3       	ldi	r26, 0x38	; 56
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e8 e3       	ldi	r30, 0x38	; 56
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 2e       	mov	r0, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <DIO__CheckStatusSetPinValue+0x150>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	0a 94       	dec	r0
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <DIO__CheckStatusSetPinValue+0x14c>
    1080:	84 23       	and	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	6c c0       	rjmp	.+216    	; 0x115e <DIO__CheckStatusSetPinValue+0x232>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PinValue)
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	39 87       	std	Y+9, r19	; 0x09
    108e:	28 87       	std	Y+8, r18	; 0x08
    1090:	88 85       	ldd	r24, Y+8	; 0x08
    1092:	99 85       	ldd	r25, Y+9	; 0x09
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	d1 f0       	breq	.+52     	; 0x10cc <DIO__CheckStatusSetPinValue+0x1a0>
    1098:	28 85       	ldd	r18, Y+8	; 0x08
    109a:	39 85       	ldd	r19, Y+9	; 0x09
    109c:	21 30       	cpi	r18, 0x01	; 1
    109e:	31 05       	cpc	r19, r1
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <DIO__CheckStatusSetPinValue+0x178>
    10a2:	5d c0       	rjmp	.+186    	; 0x115e <DIO__CheckStatusSetPinValue+0x232>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTC__UINT8_REG, Copy__uint8PinId);
    10a4:	a5 e3       	ldi	r26, 0x35	; 53
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e5 e3       	ldi	r30, 0x35	; 53
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO__CheckStatusSetPinValue+0x196>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO__CheckStatusSetPinValue+0x192>
    10c6:	84 2b       	or	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	49 c0       	rjmp	.+146    	; 0x115e <DIO__CheckStatusSetPinValue+0x232>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTC__UINT8_REG, Copy__uint8PinId);
    10cc:	a5 e3       	ldi	r26, 0x35	; 53
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e5 e3       	ldi	r30, 0x35	; 53
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO__CheckStatusSetPinValue+0x1be>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO__CheckStatusSetPinValue+0x1ba>
    10ee:	84 23       	and	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	35 c0       	rjmp	.+106    	; 0x115e <DIO__CheckStatusSetPinValue+0x232>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PinValue)
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	3f 83       	std	Y+7, r19	; 0x07
    10fc:	2e 83       	std	Y+6, r18	; 0x06
    10fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1100:	9f 81       	ldd	r25, Y+7	; 0x07
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	c9 f0       	breq	.+50     	; 0x1138 <DIO__CheckStatusSetPinValue+0x20c>
    1106:	2e 81       	ldd	r18, Y+6	; 0x06
    1108:	3f 81       	ldd	r19, Y+7	; 0x07
    110a:	21 30       	cpi	r18, 0x01	; 1
    110c:	31 05       	cpc	r19, r1
    110e:	39 f5       	brne	.+78     	; 0x115e <DIO__CheckStatusSetPinValue+0x232>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTD__UINT8_REG, Copy__uint8PinId);
    1110:	a2 e3       	ldi	r26, 0x32	; 50
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e2 e3       	ldi	r30, 0x32	; 50
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO__CheckStatusSetPinValue+0x202>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO__CheckStatusSetPinValue+0x1fe>
    1132:	84 2b       	or	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	13 c0       	rjmp	.+38     	; 0x115e <DIO__CheckStatusSetPinValue+0x232>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTD__UINT8_REG, Copy__uint8PinId);
    1138:	a2 e3       	ldi	r26, 0x32	; 50
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e2 e3       	ldi	r30, 0x32	; 50
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO__CheckStatusSetPinValue+0x22a>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO__CheckStatusSetPinValue+0x226>
    115a:	84 23       	and	r24, r20
    115c:	8c 93       	st	X, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    115e:	39 81       	ldd	r19, Y+1	; 0x01
    1160:	3d 83       	std	Y+5, r19	; 0x05
    1162:	04 c0       	rjmp	.+8      	; 0x116c <DIO__CheckStatusSetPinValue+0x240>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	8d 83       	std	Y+5, r24	; 0x05
    116c:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    116e:	2f 96       	adiw	r28, 0x0f	; 15
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <DIO__CheckStatusGetPinValue>:

CheckStatus DIO__CheckStatusGetPinValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 *Copy_p_uint8ReturnPinValue)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	28 97       	sbiw	r28, 0x08	; 8
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	8a 83       	std	Y+2, r24	; 0x02
    1196:	6b 83       	std	Y+3, r22	; 0x03
    1198:	5d 83       	std	Y+5, r21	; 0x05
    119a:	4c 83       	std	Y+4, r20	; 0x04

        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    119c:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pointer != NULL
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && (Copy_p_uint8ReturnPinValue != NULL))
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	84 30       	cpi	r24, 0x04	; 4
    11a2:	08 f0       	brcs	.+2      	; 0x11a6 <DIO__CheckStatusGetPinValue+0x26>
    11a4:	ec c0       	rjmp	.+472    	; 0x137e <DIO__CheckStatusGetPinValue+0x1fe>
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	88 30       	cpi	r24, 0x08	; 8
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <DIO__CheckStatusGetPinValue+0x2e>
    11ac:	e8 c0       	rjmp	.+464    	; 0x137e <DIO__CheckStatusGetPinValue+0x1fe>
    11ae:	8c 81       	ldd	r24, Y+4	; 0x04
    11b0:	9d 81       	ldd	r25, Y+5	; 0x05
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <DIO__CheckStatusGetPinValue+0x38>
    11b6:	e3 c0       	rjmp	.+454    	; 0x137e <DIO__CheckStatusGetPinValue+0x1fe>
        {
                switch (Copy__uint8PortId)
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	38 87       	std	Y+8, r19	; 0x08
    11c0:	2f 83       	std	Y+7, r18	; 0x07
    11c2:	4f 81       	ldd	r20, Y+7	; 0x07
    11c4:	58 85       	ldd	r21, Y+8	; 0x08
    11c6:	41 30       	cpi	r20, 0x01	; 1
    11c8:	51 05       	cpc	r21, r1
    11ca:	09 f4       	brne	.+2      	; 0x11ce <DIO__CheckStatusGetPinValue+0x4e>
    11cc:	48 c0       	rjmp	.+144    	; 0x125e <DIO__CheckStatusGetPinValue+0xde>
    11ce:	8f 81       	ldd	r24, Y+7	; 0x07
    11d0:	98 85       	ldd	r25, Y+8	; 0x08
    11d2:	82 30       	cpi	r24, 0x02	; 2
    11d4:	91 05       	cpc	r25, r1
    11d6:	34 f4       	brge	.+12     	; 0x11e4 <DIO__CheckStatusGetPinValue+0x64>
    11d8:	2f 81       	ldd	r18, Y+7	; 0x07
    11da:	38 85       	ldd	r19, Y+8	; 0x08
    11dc:	21 15       	cp	r18, r1
    11de:	31 05       	cpc	r19, r1
    11e0:	71 f0       	breq	.+28     	; 0x11fe <DIO__CheckStatusGetPinValue+0x7e>
    11e2:	ca c0       	rjmp	.+404    	; 0x1378 <DIO__CheckStatusGetPinValue+0x1f8>
    11e4:	4f 81       	ldd	r20, Y+7	; 0x07
    11e6:	58 85       	ldd	r21, Y+8	; 0x08
    11e8:	42 30       	cpi	r20, 0x02	; 2
    11ea:	51 05       	cpc	r21, r1
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <DIO__CheckStatusGetPinValue+0x70>
    11ee:	67 c0       	rjmp	.+206    	; 0x12be <DIO__CheckStatusGetPinValue+0x13e>
    11f0:	8f 81       	ldd	r24, Y+7	; 0x07
    11f2:	98 85       	ldd	r25, Y+8	; 0x08
    11f4:	83 30       	cpi	r24, 0x03	; 3
    11f6:	91 05       	cpc	r25, r1
    11f8:	09 f4       	brne	.+2      	; 0x11fc <DIO__CheckStatusGetPinValue+0x7c>
    11fa:	90 c0       	rjmp	.+288    	; 0x131c <DIO__CheckStatusGetPinValue+0x19c>
    11fc:	bd c0       	rjmp	.+378    	; 0x1378 <DIO__CheckStatusGetPinValue+0x1f8>
                {
                case DIO__UINT8_PORTA:
                        if (GET_BIT(PINA__UINT8_REG, Copy__uint8PinId) == 0)
    11fe:	e9 e3       	ldi	r30, 0x39	; 57
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	88 2f       	mov	r24, r24
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a9 01       	movw	r20, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <DIO__CheckStatusGetPinValue+0x96>
    1212:	55 95       	asr	r21
    1214:	47 95       	ror	r20
    1216:	8a 95       	dec	r24
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <DIO__CheckStatusGetPinValue+0x92>
    121a:	ca 01       	movw	r24, r20
    121c:	81 70       	andi	r24, 0x01	; 1
    121e:	90 70       	andi	r25, 0x00	; 0
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	21 f4       	brne	.+8      	; 0x122c <DIO__CheckStatusGetPinValue+0xac>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    1224:	ec 81       	ldd	r30, Y+4	; 0x04
    1226:	fd 81       	ldd	r31, Y+5	; 0x05
    1228:	10 82       	st	Z, r1
    122a:	a6 c0       	rjmp	.+332    	; 0x1378 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINA__UINT8_REG, Copy__uint8PinId) != 0)
    122c:	e9 e3       	ldi	r30, 0x39	; 57
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	88 2f       	mov	r24, r24
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	a9 01       	movw	r20, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO__CheckStatusGetPinValue+0xc4>
    1240:	55 95       	asr	r21
    1242:	47 95       	ror	r20
    1244:	8a 95       	dec	r24
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO__CheckStatusGetPinValue+0xc0>
    1248:	ca 01       	movw	r24, r20
    124a:	81 70       	andi	r24, 0x01	; 1
    124c:	90 70       	andi	r25, 0x00	; 0
    124e:	88 23       	and	r24, r24
    1250:	09 f4       	brne	.+2      	; 0x1254 <DIO__CheckStatusGetPinValue+0xd4>
    1252:	92 c0       	rjmp	.+292    	; 0x1378 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    1254:	ec 81       	ldd	r30, Y+4	; 0x04
    1256:	fd 81       	ldd	r31, Y+5	; 0x05
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	80 83       	st	Z, r24
    125c:	8d c0       	rjmp	.+282    	; 0x1378 <DIO__CheckStatusGetPinValue+0x1f8>
                                /* DO NOTHING */
                        }

                        break;
                case DIO__UINT8_PORTB:
                        if (GET_BIT(PINB__UINT8_REG, Copy__uint8PinId) == 0)
    125e:	e6 e3       	ldi	r30, 0x36	; 54
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	88 2f       	mov	r24, r24
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	a9 01       	movw	r20, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <DIO__CheckStatusGetPinValue+0xf6>
    1272:	55 95       	asr	r21
    1274:	47 95       	ror	r20
    1276:	8a 95       	dec	r24
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <DIO__CheckStatusGetPinValue+0xf2>
    127a:	ca 01       	movw	r24, r20
    127c:	81 70       	andi	r24, 0x01	; 1
    127e:	90 70       	andi	r25, 0x00	; 0
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	21 f4       	brne	.+8      	; 0x128c <DIO__CheckStatusGetPinValue+0x10c>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    1284:	ec 81       	ldd	r30, Y+4	; 0x04
    1286:	fd 81       	ldd	r31, Y+5	; 0x05
    1288:	10 82       	st	Z, r1
    128a:	76 c0       	rjmp	.+236    	; 0x1378 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINB__UINT8_REG, Copy__uint8PinId) != 0)
    128c:	e6 e3       	ldi	r30, 0x36	; 54
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	88 2f       	mov	r24, r24
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	a9 01       	movw	r20, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO__CheckStatusGetPinValue+0x124>
    12a0:	55 95       	asr	r21
    12a2:	47 95       	ror	r20
    12a4:	8a 95       	dec	r24
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <DIO__CheckStatusGetPinValue+0x120>
    12a8:	ca 01       	movw	r24, r20
    12aa:	81 70       	andi	r24, 0x01	; 1
    12ac:	90 70       	andi	r25, 0x00	; 0
    12ae:	88 23       	and	r24, r24
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <DIO__CheckStatusGetPinValue+0x134>
    12b2:	62 c0       	rjmp	.+196    	; 0x1378 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    12b4:	ec 81       	ldd	r30, Y+4	; 0x04
    12b6:	fd 81       	ldd	r31, Y+5	; 0x05
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	80 83       	st	Z, r24
    12bc:	5d c0       	rjmp	.+186    	; 0x1378 <DIO__CheckStatusGetPinValue+0x1f8>

                        break;

                case DIO__UINT8_PORTC:

                        if (GET_BIT(PINC__UINT8_REG, Copy__uint8PinId) == 0)
    12be:	e3 e3       	ldi	r30, 0x33	; 51
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	88 2f       	mov	r24, r24
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	a9 01       	movw	r20, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <DIO__CheckStatusGetPinValue+0x156>
    12d2:	55 95       	asr	r21
    12d4:	47 95       	ror	r20
    12d6:	8a 95       	dec	r24
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <DIO__CheckStatusGetPinValue+0x152>
    12da:	ca 01       	movw	r24, r20
    12dc:	81 70       	andi	r24, 0x01	; 1
    12de:	90 70       	andi	r25, 0x00	; 0
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	21 f4       	brne	.+8      	; 0x12ec <DIO__CheckStatusGetPinValue+0x16c>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    12e4:	ec 81       	ldd	r30, Y+4	; 0x04
    12e6:	fd 81       	ldd	r31, Y+5	; 0x05
    12e8:	10 82       	st	Z, r1
    12ea:	46 c0       	rjmp	.+140    	; 0x1378 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINC__UINT8_REG, Copy__uint8PinId) != 0)
    12ec:	e3 e3       	ldi	r30, 0x33	; 51
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	88 2f       	mov	r24, r24
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	a9 01       	movw	r20, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <DIO__CheckStatusGetPinValue+0x184>
    1300:	55 95       	asr	r21
    1302:	47 95       	ror	r20
    1304:	8a 95       	dec	r24
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <DIO__CheckStatusGetPinValue+0x180>
    1308:	ca 01       	movw	r24, r20
    130a:	81 70       	andi	r24, 0x01	; 1
    130c:	90 70       	andi	r25, 0x00	; 0
    130e:	88 23       	and	r24, r24
    1310:	99 f1       	breq	.+102    	; 0x1378 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    1312:	ec 81       	ldd	r30, Y+4	; 0x04
    1314:	fd 81       	ldd	r31, Y+5	; 0x05
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	80 83       	st	Z, r24
    131a:	2e c0       	rjmp	.+92     	; 0x1378 <DIO__CheckStatusGetPinValue+0x1f8>
                                /* DO NOTHING */
                        }

                        break;
                case DIO__UINT8_PORTD:
                        if (GET_BIT(PIND__UINT8_REG, Copy__uint8PinId) == 0)
    131c:	e0 e3       	ldi	r30, 0x30	; 48
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a9 01       	movw	r20, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO__CheckStatusGetPinValue+0x1b4>
    1330:	55 95       	asr	r21
    1332:	47 95       	ror	r20
    1334:	8a 95       	dec	r24
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <DIO__CheckStatusGetPinValue+0x1b0>
    1338:	ca 01       	movw	r24, r20
    133a:	81 70       	andi	r24, 0x01	; 1
    133c:	90 70       	andi	r25, 0x00	; 0
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	21 f4       	brne	.+8      	; 0x134a <DIO__CheckStatusGetPinValue+0x1ca>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    1342:	ec 81       	ldd	r30, Y+4	; 0x04
    1344:	fd 81       	ldd	r31, Y+5	; 0x05
    1346:	10 82       	st	Z, r1
    1348:	17 c0       	rjmp	.+46     	; 0x1378 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PIND__UINT8_REG, Copy__uint8PinId) != 0)
    134a:	e0 e3       	ldi	r30, 0x30	; 48
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	88 2f       	mov	r24, r24
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	a9 01       	movw	r20, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO__CheckStatusGetPinValue+0x1e2>
    135e:	55 95       	asr	r21
    1360:	47 95       	ror	r20
    1362:	8a 95       	dec	r24
    1364:	e2 f7       	brpl	.-8      	; 0x135e <DIO__CheckStatusGetPinValue+0x1de>
    1366:	ca 01       	movw	r24, r20
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	90 70       	andi	r25, 0x00	; 0
    136c:	88 23       	and	r24, r24
    136e:	21 f0       	breq	.+8      	; 0x1378 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    1370:	ec 81       	ldd	r30, Y+4	; 0x04
    1372:	fd 81       	ldd	r31, Y+5	; 0x05
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1378:	59 81       	ldd	r21, Y+1	; 0x01
    137a:	5e 83       	std	Y+6, r21	; 0x06
    137c:	04 c0       	rjmp	.+8      	; 0x1386 <DIO__CheckStatusGetPinValue+0x206>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	8e 83       	std	Y+6, r24	; 0x06
    1386:	8e 81       	ldd	r24, Y+6	; 0x06
        }
}
    1388:	28 96       	adiw	r28, 0x08	; 8
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <DIO__CheckStatusSetPortDirection>:

CheckStatus DIO__CheckStatusSetPortDirection(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PortDirection)
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	2e 97       	sbiw	r28, 0x0e	; 14
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	8a 83       	std	Y+2, r24	; 0x02
    13b0:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    13b2:	19 82       	std	Y+1, r1	; 0x01
        /* 
        Check 1-Valid Port Id
              2-Valid PORT diraction 
        */

        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && ((Copy__uint8PortDirection == DIO__UINT8_OUTPUT) || (Copy__uint8PortDirection == DIO__UINT8_INPUT)))
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	84 30       	cpi	r24, 0x04	; 4
    13b8:	08 f0       	brcs	.+2      	; 0x13bc <DIO__CheckStatusSetPortDirection+0x22>
    13ba:	89 c0       	rjmp	.+274    	; 0x14ce <DIO__CheckStatusSetPortDirection+0x134>
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	21 f0       	breq	.+8      	; 0x13ca <DIO__CheckStatusSetPortDirection+0x30>
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	88 23       	and	r24, r24
    13c6:	09 f0       	breq	.+2      	; 0x13ca <DIO__CheckStatusSetPortDirection+0x30>
    13c8:	82 c0       	rjmp	.+260    	; 0x14ce <DIO__CheckStatusSetPortDirection+0x134>
        {
                switch (Copy__uint8PortId)
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	3e 87       	std	Y+14, r19	; 0x0e
    13d2:	2d 87       	std	Y+13, r18	; 0x0d
    13d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	91 05       	cpc	r25, r1
    13dc:	71 f1       	breq	.+92     	; 0x143a <DIO__CheckStatusSetPortDirection+0xa0>
    13de:	2d 85       	ldd	r18, Y+13	; 0x0d
    13e0:	3e 85       	ldd	r19, Y+14	; 0x0e
    13e2:	22 30       	cpi	r18, 0x02	; 2
    13e4:	31 05       	cpc	r19, r1
    13e6:	2c f4       	brge	.+10     	; 0x13f2 <DIO__CheckStatusSetPortDirection+0x58>
    13e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	69 f0       	breq	.+26     	; 0x140a <DIO__CheckStatusSetPortDirection+0x70>
    13f0:	6b c0       	rjmp	.+214    	; 0x14c8 <DIO__CheckStatusSetPortDirection+0x12e>
    13f2:	2d 85       	ldd	r18, Y+13	; 0x0d
    13f4:	3e 85       	ldd	r19, Y+14	; 0x0e
    13f6:	22 30       	cpi	r18, 0x02	; 2
    13f8:	31 05       	cpc	r19, r1
    13fa:	b9 f1       	breq	.+110    	; 0x146a <DIO__CheckStatusSetPortDirection+0xd0>
    13fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1400:	83 30       	cpi	r24, 0x03	; 3
    1402:	91 05       	cpc	r25, r1
    1404:	09 f4       	brne	.+2      	; 0x1408 <DIO__CheckStatusSetPortDirection+0x6e>
    1406:	49 c0       	rjmp	.+146    	; 0x149a <DIO__CheckStatusSetPortDirection+0x100>
    1408:	5f c0       	rjmp	.+190    	; 0x14c8 <DIO__CheckStatusSetPortDirection+0x12e>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PortDirection)
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	3c 87       	std	Y+12, r19	; 0x0c
    1412:	2b 87       	std	Y+11, r18	; 0x0b
    1414:	8b 85       	ldd	r24, Y+11	; 0x0b
    1416:	9c 85       	ldd	r25, Y+12	; 0x0c
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	31 f0       	breq	.+12     	; 0x1428 <DIO__CheckStatusSetPortDirection+0x8e>
    141c:	2b 85       	ldd	r18, Y+11	; 0x0b
    141e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1420:	21 30       	cpi	r18, 0x01	; 1
    1422:	31 05       	cpc	r19, r1
    1424:	29 f0       	breq	.+10     	; 0x1430 <DIO__CheckStatusSetPortDirection+0x96>
    1426:	50 c0       	rjmp	.+160    	; 0x14c8 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTA__UINT8_REG = 0x00;
    1428:	eb e3       	ldi	r30, 0x3B	; 59
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	10 82       	st	Z, r1
    142e:	4c c0       	rjmp	.+152    	; 0x14c8 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTA__UINT8_REG = 0xFF;
    1430:	eb e3       	ldi	r30, 0x3B	; 59
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	80 83       	st	Z, r24
    1438:	47 c0       	rjmp	.+142    	; 0x14c8 <DIO__CheckStatusSetPortDirection+0x12e>
                                /* DO  NOTHING */
                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PortDirection)
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	3a 87       	std	Y+10, r19	; 0x0a
    1442:	29 87       	std	Y+9, r18	; 0x09
    1444:	89 85       	ldd	r24, Y+9	; 0x09
    1446:	9a 85       	ldd	r25, Y+10	; 0x0a
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	31 f0       	breq	.+12     	; 0x1458 <DIO__CheckStatusSetPortDirection+0xbe>
    144c:	29 85       	ldd	r18, Y+9	; 0x09
    144e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1450:	21 30       	cpi	r18, 0x01	; 1
    1452:	31 05       	cpc	r19, r1
    1454:	29 f0       	breq	.+10     	; 0x1460 <DIO__CheckStatusSetPortDirection+0xc6>
    1456:	38 c0       	rjmp	.+112    	; 0x14c8 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTB__UINT8_REG = 0x00;
    1458:	e8 e3       	ldi	r30, 0x38	; 56
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	10 82       	st	Z, r1
    145e:	34 c0       	rjmp	.+104    	; 0x14c8 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTB__UINT8_REG = 0xFF;
    1460:	e8 e3       	ldi	r30, 0x38	; 56
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	8f ef       	ldi	r24, 0xFF	; 255
    1466:	80 83       	st	Z, r24
    1468:	2f c0       	rjmp	.+94     	; 0x14c8 <DIO__CheckStatusSetPortDirection+0x12e>
                        }

                        break;

                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PortDirection)
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	38 87       	std	Y+8, r19	; 0x08
    1472:	2f 83       	std	Y+7, r18	; 0x07
    1474:	8f 81       	ldd	r24, Y+7	; 0x07
    1476:	98 85       	ldd	r25, Y+8	; 0x08
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	31 f0       	breq	.+12     	; 0x1488 <DIO__CheckStatusSetPortDirection+0xee>
    147c:	2f 81       	ldd	r18, Y+7	; 0x07
    147e:	38 85       	ldd	r19, Y+8	; 0x08
    1480:	21 30       	cpi	r18, 0x01	; 1
    1482:	31 05       	cpc	r19, r1
    1484:	29 f0       	breq	.+10     	; 0x1490 <DIO__CheckStatusSetPortDirection+0xf6>
    1486:	20 c0       	rjmp	.+64     	; 0x14c8 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTC__UINT8_REG = 0x00;
    1488:	e5 e3       	ldi	r30, 0x35	; 53
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	10 82       	st	Z, r1
    148e:	1c c0       	rjmp	.+56     	; 0x14c8 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTC__UINT8_REG = 0xFF;
    1490:	e5 e3       	ldi	r30, 0x35	; 53
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	8f ef       	ldi	r24, 0xFF	; 255
    1496:	80 83       	st	Z, r24
    1498:	17 c0       	rjmp	.+46     	; 0x14c8 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        }

                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PortDirection)
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	3e 83       	std	Y+6, r19	; 0x06
    14a2:	2d 83       	std	Y+5, r18	; 0x05
    14a4:	8d 81       	ldd	r24, Y+5	; 0x05
    14a6:	9e 81       	ldd	r25, Y+6	; 0x06
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	31 f0       	breq	.+12     	; 0x14b8 <DIO__CheckStatusSetPortDirection+0x11e>
    14ac:	2d 81       	ldd	r18, Y+5	; 0x05
    14ae:	3e 81       	ldd	r19, Y+6	; 0x06
    14b0:	21 30       	cpi	r18, 0x01	; 1
    14b2:	31 05       	cpc	r19, r1
    14b4:	29 f0       	breq	.+10     	; 0x14c0 <DIO__CheckStatusSetPortDirection+0x126>
    14b6:	08 c0       	rjmp	.+16     	; 0x14c8 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTD__UINT8_REG = 0x00;
    14b8:	e2 e3       	ldi	r30, 0x32	; 50
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	10 82       	st	Z, r1
    14be:	04 c0       	rjmp	.+8      	; 0x14c8 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTD__UINT8_REG = 0xFF;
    14c0:	e2 e3       	ldi	r30, 0x32	; 50
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	8f ef       	ldi	r24, 0xFF	; 255
    14c6:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    14c8:	39 81       	ldd	r19, Y+1	; 0x01
    14ca:	3c 83       	std	Y+4, r19	; 0x04
    14cc:	04 c0       	rjmp	.+8      	; 0x14d6 <DIO__CheckStatusSetPortDirection+0x13c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	8c 83       	std	Y+4, r24	; 0x04
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    14d8:	2e 96       	adiw	r28, 0x0e	; 14
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <DIO__CheckStatusSetPortValue>:

CheckStatus DIO__CheckStatusSetPortValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PortValue)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <DIO__CheckStatusSetPortValue+0x6>
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <DIO__CheckStatusSetPortValue+0x8>
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <DIO__CheckStatusSetPortValue+0xa>
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	8a 83       	std	Y+2, r24	; 0x02
    14fa:	6b 83       	std	Y+3, r22	; 0x03

        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    14fc:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
               
        */
        if (Copy__uint8PortId <= DIO__UINT8_PORTD)
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	84 30       	cpi	r24, 0x04	; 4
    1502:	a8 f5       	brcc	.+106    	; 0x156e <DIO__CheckStatusSetPortValue+0x84>
        {
                switch (Copy__uint8PortId)
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	3e 83       	std	Y+6, r19	; 0x06
    150c:	2d 83       	std	Y+5, r18	; 0x05
    150e:	8d 81       	ldd	r24, Y+5	; 0x05
    1510:	9e 81       	ldd	r25, Y+6	; 0x06
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	91 05       	cpc	r25, r1
    1516:	d1 f0       	breq	.+52     	; 0x154c <DIO__CheckStatusSetPortValue+0x62>
    1518:	2d 81       	ldd	r18, Y+5	; 0x05
    151a:	3e 81       	ldd	r19, Y+6	; 0x06
    151c:	22 30       	cpi	r18, 0x02	; 2
    151e:	31 05       	cpc	r19, r1
    1520:	2c f4       	brge	.+10     	; 0x152c <DIO__CheckStatusSetPortValue+0x42>
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	61 f0       	breq	.+24     	; 0x1542 <DIO__CheckStatusSetPortValue+0x58>
    152a:	1e c0       	rjmp	.+60     	; 0x1568 <DIO__CheckStatusSetPortValue+0x7e>
    152c:	2d 81       	ldd	r18, Y+5	; 0x05
    152e:	3e 81       	ldd	r19, Y+6	; 0x06
    1530:	22 30       	cpi	r18, 0x02	; 2
    1532:	31 05       	cpc	r19, r1
    1534:	81 f0       	breq	.+32     	; 0x1556 <DIO__CheckStatusSetPortValue+0x6c>
    1536:	8d 81       	ldd	r24, Y+5	; 0x05
    1538:	9e 81       	ldd	r25, Y+6	; 0x06
    153a:	83 30       	cpi	r24, 0x03	; 3
    153c:	91 05       	cpc	r25, r1
    153e:	81 f0       	breq	.+32     	; 0x1560 <DIO__CheckStatusSetPortValue+0x76>
    1540:	13 c0       	rjmp	.+38     	; 0x1568 <DIO__CheckStatusSetPortValue+0x7e>
                {
                case DIO__UINT8_PORTA:
                        PORTA__UINT8_REG = Copy__uint8PortValue;
    1542:	eb e3       	ldi	r30, 0x3B	; 59
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	80 83       	st	Z, r24
    154a:	0e c0       	rjmp	.+28     	; 0x1568 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTB:
                        PORTB__UINT8_REG = Copy__uint8PortValue;
    154c:	e8 e3       	ldi	r30, 0x38	; 56
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	80 83       	st	Z, r24
    1554:	09 c0       	rjmp	.+18     	; 0x1568 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTC:
                        PORTC__UINT8_REG = Copy__uint8PortValue;
    1556:	e5 e3       	ldi	r30, 0x35	; 53
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	80 83       	st	Z, r24
    155e:	04 c0       	rjmp	.+8      	; 0x1568 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTD:
                        PORTD__UINT8_REG = Copy__uint8PortValue;
    1560:	e2 e3       	ldi	r30, 0x32	; 50
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1568:	99 81       	ldd	r25, Y+1	; 0x01
    156a:	9c 83       	std	Y+4, r25	; 0x04
    156c:	04 c0       	rjmp	.+8      	; 0x1576 <DIO__CheckStatusSetPortValue+0x8c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    1572:	29 81       	ldd	r18, Y+1	; 0x01
    1574:	2c 83       	std	Y+4, r18	; 0x04
    1576:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    1578:	26 96       	adiw	r28, 0x06	; 6
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	de bf       	out	0x3e, r29	; 62
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	cd bf       	out	0x3d, r28	; 61
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <DIO__CheckStatusGetPortValue>:

CheckStatus DIO__CheckStatusGetPortValue(_uint8 Copy__uint8PortId, _uint8 *Copy_p_uint8ReturnPortValue)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	27 97       	sbiw	r28, 0x07	; 7
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	f8 94       	cli
    1598:	de bf       	out	0x3e, r29	; 62
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	cd bf       	out	0x3d, r28	; 61
    159e:	8a 83       	std	Y+2, r24	; 0x02
    15a0:	7c 83       	std	Y+4, r23	; 0x04
    15a2:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    15a4:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid Pointer != NULL
               
        */
        if (Copy_p_uint8ReturnPortValue != NULL)
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	e9 f1       	breq	.+122    	; 0x1628 <DIO__CheckStatusGetPortValue+0x9e>
        {
                switch (Copy__uint8PortId)
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	3f 83       	std	Y+7, r19	; 0x07
    15b6:	2e 83       	std	Y+6, r18	; 0x06
    15b8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ba:	9f 81       	ldd	r25, Y+7	; 0x07
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	91 05       	cpc	r25, r1
    15c0:	e1 f0       	breq	.+56     	; 0x15fa <DIO__CheckStatusGetPortValue+0x70>
    15c2:	2e 81       	ldd	r18, Y+6	; 0x06
    15c4:	3f 81       	ldd	r19, Y+7	; 0x07
    15c6:	22 30       	cpi	r18, 0x02	; 2
    15c8:	31 05       	cpc	r19, r1
    15ca:	2c f4       	brge	.+10     	; 0x15d6 <DIO__CheckStatusGetPortValue+0x4c>
    15cc:	8e 81       	ldd	r24, Y+6	; 0x06
    15ce:	9f 81       	ldd	r25, Y+7	; 0x07
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	61 f0       	breq	.+24     	; 0x15ec <DIO__CheckStatusGetPortValue+0x62>
    15d4:	26 c0       	rjmp	.+76     	; 0x1622 <DIO__CheckStatusGetPortValue+0x98>
    15d6:	2e 81       	ldd	r18, Y+6	; 0x06
    15d8:	3f 81       	ldd	r19, Y+7	; 0x07
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	a1 f0       	breq	.+40     	; 0x1608 <DIO__CheckStatusGetPortValue+0x7e>
    15e0:	8e 81       	ldd	r24, Y+6	; 0x06
    15e2:	9f 81       	ldd	r25, Y+7	; 0x07
    15e4:	83 30       	cpi	r24, 0x03	; 3
    15e6:	91 05       	cpc	r25, r1
    15e8:	b1 f0       	breq	.+44     	; 0x1616 <DIO__CheckStatusGetPortValue+0x8c>
    15ea:	1b c0       	rjmp	.+54     	; 0x1622 <DIO__CheckStatusGetPortValue+0x98>
                {
                case DIO__UINT8_PORTA:
                        *Copy_p_uint8ReturnPortValue = PINA__UINT8_REG;
    15ec:	e9 e3       	ldi	r30, 0x39	; 57
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	eb 81       	ldd	r30, Y+3	; 0x03
    15f4:	fc 81       	ldd	r31, Y+4	; 0x04
    15f6:	80 83       	st	Z, r24
    15f8:	14 c0       	rjmp	.+40     	; 0x1622 <DIO__CheckStatusGetPortValue+0x98>
                        break;
                case DIO__UINT8_PORTB:
                        *Copy_p_uint8ReturnPortValue = PINB__UINT8_REG;
    15fa:	e6 e3       	ldi	r30, 0x36	; 54
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	eb 81       	ldd	r30, Y+3	; 0x03
    1602:	fc 81       	ldd	r31, Y+4	; 0x04
    1604:	80 83       	st	Z, r24
    1606:	0d c0       	rjmp	.+26     	; 0x1622 <DIO__CheckStatusGetPortValue+0x98>

                        break;
                case DIO__UINT8_PORTC:
                        *Copy_p_uint8ReturnPortValue = PINC__UINT8_REG;
    1608:	e3 e3       	ldi	r30, 0x33	; 51
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	eb 81       	ldd	r30, Y+3	; 0x03
    1610:	fc 81       	ldd	r31, Y+4	; 0x04
    1612:	80 83       	st	Z, r24
    1614:	06 c0       	rjmp	.+12     	; 0x1622 <DIO__CheckStatusGetPortValue+0x98>
                        break;
                case DIO__UINT8_PORTD:
                        *Copy_p_uint8ReturnPortValue = PIND__UINT8_REG;
    1616:	e0 e3       	ldi	r30, 0x30	; 48
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	eb 81       	ldd	r30, Y+3	; 0x03
    161e:	fc 81       	ldd	r31, Y+4	; 0x04
    1620:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1622:	99 81       	ldd	r25, Y+1	; 0x01
    1624:	9d 83       	std	Y+5, r25	; 0x05
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <DIO__CheckStatusGetPortValue+0xa6>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    162c:	29 81       	ldd	r18, Y+1	; 0x01
    162e:	2d 83       	std	Y+5, r18	; 0x05
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    1632:	27 96       	adiw	r28, 0x07	; 7
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <LCD_CheckStatusInit>:
#include "LCD_private.h"
#include "LCD_config.h"
#define  LCD__UINT8_LOCATION_NUMBER39   39
/* Defination Of Function  */
void LCD_CheckStatusInit(Void)
{
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	cc 54       	subi	r28, 0x4C	; 76
    1652:	d0 40       	sbci	r29, 0x00	; 0
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	fe 01       	movw	r30, r28
    1660:	e7 5b       	subi	r30, 0xB7	; 183
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	ac e0       	ldi	r26, 0x0C	; 12
    166a:	b2 e4       	ldi	r27, 0x42	; 66
    166c:	80 83       	st	Z, r24
    166e:	91 83       	std	Z+1, r25	; 0x01
    1670:	a2 83       	std	Z+2, r26	; 0x02
    1672:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1674:	8e 01       	movw	r16, r28
    1676:	0b 5b       	subi	r16, 0xBB	; 187
    1678:	1f 4f       	sbci	r17, 0xFF	; 255
    167a:	fe 01       	movw	r30, r28
    167c:	e7 5b       	subi	r30, 0xB7	; 183
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	60 81       	ld	r22, Z
    1682:	71 81       	ldd	r23, Z+1	; 0x01
    1684:	82 81       	ldd	r24, Z+2	; 0x02
    1686:	93 81       	ldd	r25, Z+3	; 0x03
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	4a ef       	ldi	r20, 0xFA	; 250
    168e:	54 e4       	ldi	r21, 0x44	; 68
    1690:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	f8 01       	movw	r30, r16
    169a:	80 83       	st	Z, r24
    169c:	91 83       	std	Z+1, r25	; 0x01
    169e:	a2 83       	std	Z+2, r26	; 0x02
    16a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16a2:	fe 01       	movw	r30, r28
    16a4:	eb 5b       	subi	r30, 0xBB	; 187
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	60 81       	ld	r22, Z
    16aa:	71 81       	ldd	r23, Z+1	; 0x01
    16ac:	82 81       	ldd	r24, Z+2	; 0x02
    16ae:	93 81       	ldd	r25, Z+3	; 0x03
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	44 f4       	brge	.+16     	; 0x16d0 <LCD_CheckStatusInit+0x8c>
		__ticks = 1;
    16c0:	fe 01       	movw	r30, r28
    16c2:	ed 5b       	subi	r30, 0xBD	; 189
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	91 83       	std	Z+1, r25	; 0x01
    16cc:	80 83       	st	Z, r24
    16ce:	64 c0       	rjmp	.+200    	; 0x1798 <LCD_CheckStatusInit+0x154>
	else if (__tmp > 65535)
    16d0:	fe 01       	movw	r30, r28
    16d2:	eb 5b       	subi	r30, 0xBB	; 187
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	60 81       	ld	r22, Z
    16d8:	71 81       	ldd	r23, Z+1	; 0x01
    16da:	82 81       	ldd	r24, Z+2	; 0x02
    16dc:	93 81       	ldd	r25, Z+3	; 0x03
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	3f ef       	ldi	r19, 0xFF	; 255
    16e2:	4f e7       	ldi	r20, 0x7F	; 127
    16e4:	57 e4       	ldi	r21, 0x47	; 71
    16e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16ea:	18 16       	cp	r1, r24
    16ec:	0c f0       	brlt	.+2      	; 0x16f0 <LCD_CheckStatusInit+0xac>
    16ee:	43 c0       	rjmp	.+134    	; 0x1776 <LCD_CheckStatusInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f0:	fe 01       	movw	r30, r28
    16f2:	e7 5b       	subi	r30, 0xB7	; 183
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	60 81       	ld	r22, Z
    16f8:	71 81       	ldd	r23, Z+1	; 0x01
    16fa:	82 81       	ldd	r24, Z+2	; 0x02
    16fc:	93 81       	ldd	r25, Z+3	; 0x03
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e2       	ldi	r20, 0x20	; 32
    1704:	51 e4       	ldi	r21, 0x41	; 65
    1706:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	8e 01       	movw	r16, r28
    1710:	0d 5b       	subi	r16, 0xBD	; 189
    1712:	1f 4f       	sbci	r17, 0xFF	; 255
    1714:	bc 01       	movw	r22, r24
    1716:	cd 01       	movw	r24, r26
    1718:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	f8 01       	movw	r30, r16
    1722:	91 83       	std	Z+1, r25	; 0x01
    1724:	80 83       	st	Z, r24
    1726:	1f c0       	rjmp	.+62     	; 0x1766 <LCD_CheckStatusInit+0x122>
    1728:	fe 01       	movw	r30, r28
    172a:	ef 5b       	subi	r30, 0xBF	; 191
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	88 ec       	ldi	r24, 0xC8	; 200
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	91 83       	std	Z+1, r25	; 0x01
    1734:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1736:	fe 01       	movw	r30, r28
    1738:	ef 5b       	subi	r30, 0xBF	; 191
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	f1 f7       	brne	.-4      	; 0x1740 <LCD_CheckStatusInit+0xfc>
    1744:	fe 01       	movw	r30, r28
    1746:	ef 5b       	subi	r30, 0xBF	; 191
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	91 83       	std	Z+1, r25	; 0x01
    174c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174e:	de 01       	movw	r26, r28
    1750:	ad 5b       	subi	r26, 0xBD	; 189
    1752:	bf 4f       	sbci	r27, 0xFF	; 255
    1754:	fe 01       	movw	r30, r28
    1756:	ed 5b       	subi	r30, 0xBD	; 189
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	80 81       	ld	r24, Z
    175c:	91 81       	ldd	r25, Z+1	; 0x01
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	11 96       	adiw	r26, 0x01	; 1
    1762:	9c 93       	st	X, r25
    1764:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1766:	fe 01       	movw	r30, r28
    1768:	ed 5b       	subi	r30, 0xBD	; 189
    176a:	ff 4f       	sbci	r31, 0xFF	; 255
    176c:	80 81       	ld	r24, Z
    176e:	91 81       	ldd	r25, Z+1	; 0x01
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	d1 f6       	brne	.-76     	; 0x1728 <LCD_CheckStatusInit+0xe4>
    1774:	24 c0       	rjmp	.+72     	; 0x17be <LCD_CheckStatusInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1776:	8e 01       	movw	r16, r28
    1778:	0d 5b       	subi	r16, 0xBD	; 189
    177a:	1f 4f       	sbci	r17, 0xFF	; 255
    177c:	fe 01       	movw	r30, r28
    177e:	eb 5b       	subi	r30, 0xBB	; 187
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	60 81       	ld	r22, Z
    1784:	71 81       	ldd	r23, Z+1	; 0x01
    1786:	82 81       	ldd	r24, Z+2	; 0x02
    1788:	93 81       	ldd	r25, Z+3	; 0x03
    178a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	f8 01       	movw	r30, r16
    1794:	91 83       	std	Z+1, r25	; 0x01
    1796:	80 83       	st	Z, r24
    1798:	fe 01       	movw	r30, r28
    179a:	ed 5b       	subi	r30, 0xBD	; 189
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	80 81       	ld	r24, Z
    17a0:	91 81       	ldd	r25, Z+1	; 0x01
    17a2:	fe 01       	movw	r30, r28
    17a4:	ff 96       	adiw	r30, 0x3f	; 63
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	80 83       	st	Z, r24
    17aa:	fe 01       	movw	r30, r28
    17ac:	ff 96       	adiw	r30, 0x3f	; 63
    17ae:	80 81       	ld	r24, Z
    17b0:	91 81       	ldd	r25, Z+1	; 0x01
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <LCD_CheckStatusInit+0x16e>
    17b6:	fe 01       	movw	r30, r28
    17b8:	ff 96       	adiw	r30, 0x3f	; 63
    17ba:	91 83       	std	Z+1, r25	; 0x01
    17bc:	80 83       	st	Z, r24
        //CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
        _delay_ms(35);
        /* Function Set Cmnd 0b00111000*/

        LCD_CheckStatusSendCmnd(0b00111000);
    17be:	88 e3       	ldi	r24, 0x38	; 56
    17c0:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <LCD_CheckStatusSendCmnd>
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	a0 e2       	ldi	r26, 0x20	; 32
    17ca:	b2 e4       	ldi	r27, 0x42	; 66
    17cc:	8b af       	std	Y+59, r24	; 0x3b
    17ce:	9c af       	std	Y+60, r25	; 0x3c
    17d0:	ad af       	std	Y+61, r26	; 0x3d
    17d2:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17d4:	6b ad       	ldd	r22, Y+59	; 0x3b
    17d6:	7c ad       	ldd	r23, Y+60	; 0x3c
    17d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    17da:	9e ad       	ldd	r25, Y+62	; 0x3e
    17dc:	2b ea       	ldi	r18, 0xAB	; 171
    17de:	3a ea       	ldi	r19, 0xAA	; 170
    17e0:	4a e2       	ldi	r20, 0x2A	; 42
    17e2:	50 e4       	ldi	r21, 0x40	; 64
    17e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	8f ab       	std	Y+55, r24	; 0x37
    17ee:	98 af       	std	Y+56, r25	; 0x38
    17f0:	a9 af       	std	Y+57, r26	; 0x39
    17f2:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    17f4:	6f a9       	ldd	r22, Y+55	; 0x37
    17f6:	78 ad       	ldd	r23, Y+56	; 0x38
    17f8:	89 ad       	ldd	r24, Y+57	; 0x39
    17fa:	9a ad       	ldd	r25, Y+58	; 0x3a
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e8       	ldi	r20, 0x80	; 128
    1802:	5f e3       	ldi	r21, 0x3F	; 63
    1804:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1808:	88 23       	and	r24, r24
    180a:	1c f4       	brge	.+6      	; 0x1812 <LCD_CheckStatusInit+0x1ce>
		__ticks = 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	8e ab       	std	Y+54, r24	; 0x36
    1810:	91 c0       	rjmp	.+290    	; 0x1934 <LCD_CheckStatusInit+0x2f0>
	else if (__tmp > 255)
    1812:	6f a9       	ldd	r22, Y+55	; 0x37
    1814:	78 ad       	ldd	r23, Y+56	; 0x38
    1816:	89 ad       	ldd	r24, Y+57	; 0x39
    1818:	9a ad       	ldd	r25, Y+58	; 0x3a
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4f e7       	ldi	r20, 0x7F	; 127
    1820:	53 e4       	ldi	r21, 0x43	; 67
    1822:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1826:	18 16       	cp	r1, r24
    1828:	0c f0       	brlt	.+2      	; 0x182c <LCD_CheckStatusInit+0x1e8>
    182a:	7b c0       	rjmp	.+246    	; 0x1922 <LCD_CheckStatusInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    182c:	6b ad       	ldd	r22, Y+59	; 0x3b
    182e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1830:	8d ad       	ldd	r24, Y+61	; 0x3d
    1832:	9e ad       	ldd	r25, Y+62	; 0x3e
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	4a e7       	ldi	r20, 0x7A	; 122
    183a:	54 e4       	ldi	r21, 0x44	; 68
    183c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	8a ab       	std	Y+50, r24	; 0x32
    1846:	9b ab       	std	Y+51, r25	; 0x33
    1848:	ac ab       	std	Y+52, r26	; 0x34
    184a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    184c:	6a a9       	ldd	r22, Y+50	; 0x32
    184e:	7b a9       	ldd	r23, Y+51	; 0x33
    1850:	8c a9       	ldd	r24, Y+52	; 0x34
    1852:	9d a9       	ldd	r25, Y+53	; 0x35
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	4a ef       	ldi	r20, 0xFA	; 250
    185a:	54 e4       	ldi	r21, 0x44	; 68
    185c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	8e a7       	std	Y+46, r24	; 0x2e
    1866:	9f a7       	std	Y+47, r25	; 0x2f
    1868:	a8 ab       	std	Y+48, r26	; 0x30
    186a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    186c:	6e a5       	ldd	r22, Y+46	; 0x2e
    186e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1870:	88 a9       	ldd	r24, Y+48	; 0x30
    1872:	99 a9       	ldd	r25, Y+49	; 0x31
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e8       	ldi	r20, 0x80	; 128
    187a:	5f e3       	ldi	r21, 0x3F	; 63
    187c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1880:	88 23       	and	r24, r24
    1882:	2c f4       	brge	.+10     	; 0x188e <LCD_CheckStatusInit+0x24a>
		__ticks = 1;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	9d a7       	std	Y+45, r25	; 0x2d
    188a:	8c a7       	std	Y+44, r24	; 0x2c
    188c:	3f c0       	rjmp	.+126    	; 0x190c <LCD_CheckStatusInit+0x2c8>
	else if (__tmp > 65535)
    188e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1890:	7f a5       	ldd	r23, Y+47	; 0x2f
    1892:	88 a9       	ldd	r24, Y+48	; 0x30
    1894:	99 a9       	ldd	r25, Y+49	; 0x31
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	3f ef       	ldi	r19, 0xFF	; 255
    189a:	4f e7       	ldi	r20, 0x7F	; 127
    189c:	57 e4       	ldi	r21, 0x47	; 71
    189e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18a2:	18 16       	cp	r1, r24
    18a4:	4c f5       	brge	.+82     	; 0x18f8 <LCD_CheckStatusInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a6:	6a a9       	ldd	r22, Y+50	; 0x32
    18a8:	7b a9       	ldd	r23, Y+51	; 0x33
    18aa:	8c a9       	ldd	r24, Y+52	; 0x34
    18ac:	9d a9       	ldd	r25, Y+53	; 0x35
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e2       	ldi	r20, 0x20	; 32
    18b4:	51 e4       	ldi	r21, 0x41	; 65
    18b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	bc 01       	movw	r22, r24
    18c0:	cd 01       	movw	r24, r26
    18c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	9d a7       	std	Y+45, r25	; 0x2d
    18cc:	8c a7       	std	Y+44, r24	; 0x2c
    18ce:	0f c0       	rjmp	.+30     	; 0x18ee <LCD_CheckStatusInit+0x2aa>
    18d0:	88 ec       	ldi	r24, 0xC8	; 200
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	9b a7       	std	Y+43, r25	; 0x2b
    18d6:	8a a7       	std	Y+42, r24	; 0x2a
    18d8:	8a a5       	ldd	r24, Y+42	; 0x2a
    18da:	9b a5       	ldd	r25, Y+43	; 0x2b
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	f1 f7       	brne	.-4      	; 0x18dc <LCD_CheckStatusInit+0x298>
    18e0:	9b a7       	std	Y+43, r25	; 0x2b
    18e2:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e4:	8c a5       	ldd	r24, Y+44	; 0x2c
    18e6:	9d a5       	ldd	r25, Y+45	; 0x2d
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	9d a7       	std	Y+45, r25	; 0x2d
    18ec:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ee:	8c a5       	ldd	r24, Y+44	; 0x2c
    18f0:	9d a5       	ldd	r25, Y+45	; 0x2d
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	69 f7       	brne	.-38     	; 0x18d0 <LCD_CheckStatusInit+0x28c>
    18f6:	24 c0       	rjmp	.+72     	; 0x1940 <LCD_CheckStatusInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f8:	6e a5       	ldd	r22, Y+46	; 0x2e
    18fa:	7f a5       	ldd	r23, Y+47	; 0x2f
    18fc:	88 a9       	ldd	r24, Y+48	; 0x30
    18fe:	99 a9       	ldd	r25, Y+49	; 0x31
    1900:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	9d a7       	std	Y+45, r25	; 0x2d
    190a:	8c a7       	std	Y+44, r24	; 0x2c
    190c:	8c a5       	ldd	r24, Y+44	; 0x2c
    190e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1910:	99 a7       	std	Y+41, r25	; 0x29
    1912:	88 a7       	std	Y+40, r24	; 0x28
    1914:	88 a5       	ldd	r24, Y+40	; 0x28
    1916:	99 a5       	ldd	r25, Y+41	; 0x29
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <LCD_CheckStatusInit+0x2d4>
    191c:	99 a7       	std	Y+41, r25	; 0x29
    191e:	88 a7       	std	Y+40, r24	; 0x28
    1920:	0f c0       	rjmp	.+30     	; 0x1940 <LCD_CheckStatusInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1922:	6f a9       	ldd	r22, Y+55	; 0x37
    1924:	78 ad       	ldd	r23, Y+56	; 0x38
    1926:	89 ad       	ldd	r24, Y+57	; 0x39
    1928:	9a ad       	ldd	r25, Y+58	; 0x3a
    192a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	8e ab       	std	Y+54, r24	; 0x36
    1934:	8e a9       	ldd	r24, Y+54	; 0x36
    1936:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1938:	8f a1       	ldd	r24, Y+39	; 0x27
    193a:	8a 95       	dec	r24
    193c:	f1 f7       	brne	.-4      	; 0x193a <LCD_CheckStatusInit+0x2f6>
    193e:	8f a3       	std	Y+39, r24	; 0x27
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00001111);
    1940:	8f e0       	ldi	r24, 0x0F	; 15
    1942:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <LCD_CheckStatusSendCmnd>
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a0 e2       	ldi	r26, 0x20	; 32
    194c:	b2 e4       	ldi	r27, 0x42	; 66
    194e:	8b a3       	std	Y+35, r24	; 0x23
    1950:	9c a3       	std	Y+36, r25	; 0x24
    1952:	ad a3       	std	Y+37, r26	; 0x25
    1954:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1956:	6b a1       	ldd	r22, Y+35	; 0x23
    1958:	7c a1       	ldd	r23, Y+36	; 0x24
    195a:	8d a1       	ldd	r24, Y+37	; 0x25
    195c:	9e a1       	ldd	r25, Y+38	; 0x26
    195e:	2b ea       	ldi	r18, 0xAB	; 171
    1960:	3a ea       	ldi	r19, 0xAA	; 170
    1962:	4a e2       	ldi	r20, 0x2A	; 42
    1964:	50 e4       	ldi	r21, 0x40	; 64
    1966:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	8f 8f       	std	Y+31, r24	; 0x1f
    1970:	98 a3       	std	Y+32, r25	; 0x20
    1972:	a9 a3       	std	Y+33, r26	; 0x21
    1974:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1976:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1978:	78 a1       	ldd	r23, Y+32	; 0x20
    197a:	89 a1       	ldd	r24, Y+33	; 0x21
    197c:	9a a1       	ldd	r25, Y+34	; 0x22
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e8       	ldi	r20, 0x80	; 128
    1984:	5f e3       	ldi	r21, 0x3F	; 63
    1986:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    198a:	88 23       	and	r24, r24
    198c:	1c f4       	brge	.+6      	; 0x1994 <LCD_CheckStatusInit+0x350>
		__ticks = 1;
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	8e 8f       	std	Y+30, r24	; 0x1e
    1992:	91 c0       	rjmp	.+290    	; 0x1ab6 <LCD_CheckStatusInit+0x472>
	else if (__tmp > 255)
    1994:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1996:	78 a1       	ldd	r23, Y+32	; 0x20
    1998:	89 a1       	ldd	r24, Y+33	; 0x21
    199a:	9a a1       	ldd	r25, Y+34	; 0x22
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	4f e7       	ldi	r20, 0x7F	; 127
    19a2:	53 e4       	ldi	r21, 0x43	; 67
    19a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19a8:	18 16       	cp	r1, r24
    19aa:	0c f0       	brlt	.+2      	; 0x19ae <LCD_CheckStatusInit+0x36a>
    19ac:	7b c0       	rjmp	.+246    	; 0x1aa4 <LCD_CheckStatusInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    19ae:	6b a1       	ldd	r22, Y+35	; 0x23
    19b0:	7c a1       	ldd	r23, Y+36	; 0x24
    19b2:	8d a1       	ldd	r24, Y+37	; 0x25
    19b4:	9e a1       	ldd	r25, Y+38	; 0x26
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	4a e7       	ldi	r20, 0x7A	; 122
    19bc:	54 e4       	ldi	r21, 0x44	; 68
    19be:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	8a 8f       	std	Y+26, r24	; 0x1a
    19c8:	9b 8f       	std	Y+27, r25	; 0x1b
    19ca:	ac 8f       	std	Y+28, r26	; 0x1c
    19cc:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ce:	6a 8d       	ldd	r22, Y+26	; 0x1a
    19d0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    19d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19d4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	4a ef       	ldi	r20, 0xFA	; 250
    19dc:	54 e4       	ldi	r21, 0x44	; 68
    19de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	8e 8b       	std	Y+22, r24	; 0x16
    19e8:	9f 8b       	std	Y+23, r25	; 0x17
    19ea:	a8 8f       	std	Y+24, r26	; 0x18
    19ec:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    19ee:	6e 89       	ldd	r22, Y+22	; 0x16
    19f0:	7f 89       	ldd	r23, Y+23	; 0x17
    19f2:	88 8d       	ldd	r24, Y+24	; 0x18
    19f4:	99 8d       	ldd	r25, Y+25	; 0x19
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e8       	ldi	r20, 0x80	; 128
    19fc:	5f e3       	ldi	r21, 0x3F	; 63
    19fe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a02:	88 23       	and	r24, r24
    1a04:	2c f4       	brge	.+10     	; 0x1a10 <LCD_CheckStatusInit+0x3cc>
		__ticks = 1;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	9d 8b       	std	Y+21, r25	; 0x15
    1a0c:	8c 8b       	std	Y+20, r24	; 0x14
    1a0e:	3f c0       	rjmp	.+126    	; 0x1a8e <LCD_CheckStatusInit+0x44a>
	else if (__tmp > 65535)
    1a10:	6e 89       	ldd	r22, Y+22	; 0x16
    1a12:	7f 89       	ldd	r23, Y+23	; 0x17
    1a14:	88 8d       	ldd	r24, Y+24	; 0x18
    1a16:	99 8d       	ldd	r25, Y+25	; 0x19
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	3f ef       	ldi	r19, 0xFF	; 255
    1a1c:	4f e7       	ldi	r20, 0x7F	; 127
    1a1e:	57 e4       	ldi	r21, 0x47	; 71
    1a20:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a24:	18 16       	cp	r1, r24
    1a26:	4c f5       	brge	.+82     	; 0x1a7a <LCD_CheckStatusInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a28:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a2a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a2c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a2e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e2       	ldi	r20, 0x20	; 32
    1a36:	51 e4       	ldi	r21, 0x41	; 65
    1a38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	9d 8b       	std	Y+21, r25	; 0x15
    1a4e:	8c 8b       	std	Y+20, r24	; 0x14
    1a50:	0f c0       	rjmp	.+30     	; 0x1a70 <LCD_CheckStatusInit+0x42c>
    1a52:	88 ec       	ldi	r24, 0xC8	; 200
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	9b 8b       	std	Y+19, r25	; 0x13
    1a58:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a5a:	8a 89       	ldd	r24, Y+18	; 0x12
    1a5c:	9b 89       	ldd	r25, Y+19	; 0x13
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <LCD_CheckStatusInit+0x41a>
    1a62:	9b 8b       	std	Y+19, r25	; 0x13
    1a64:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a66:	8c 89       	ldd	r24, Y+20	; 0x14
    1a68:	9d 89       	ldd	r25, Y+21	; 0x15
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	9d 8b       	std	Y+21, r25	; 0x15
    1a6e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a70:	8c 89       	ldd	r24, Y+20	; 0x14
    1a72:	9d 89       	ldd	r25, Y+21	; 0x15
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	69 f7       	brne	.-38     	; 0x1a52 <LCD_CheckStatusInit+0x40e>
    1a78:	24 c0       	rjmp	.+72     	; 0x1ac2 <LCD_CheckStatusInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7a:	6e 89       	ldd	r22, Y+22	; 0x16
    1a7c:	7f 89       	ldd	r23, Y+23	; 0x17
    1a7e:	88 8d       	ldd	r24, Y+24	; 0x18
    1a80:	99 8d       	ldd	r25, Y+25	; 0x19
    1a82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	9d 8b       	std	Y+21, r25	; 0x15
    1a8c:	8c 8b       	std	Y+20, r24	; 0x14
    1a8e:	8c 89       	ldd	r24, Y+20	; 0x14
    1a90:	9d 89       	ldd	r25, Y+21	; 0x15
    1a92:	99 8b       	std	Y+17, r25	; 0x11
    1a94:	88 8b       	std	Y+16, r24	; 0x10
    1a96:	88 89       	ldd	r24, Y+16	; 0x10
    1a98:	99 89       	ldd	r25, Y+17	; 0x11
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <LCD_CheckStatusInit+0x456>
    1a9e:	99 8b       	std	Y+17, r25	; 0x11
    1aa0:	88 8b       	std	Y+16, r24	; 0x10
    1aa2:	0f c0       	rjmp	.+30     	; 0x1ac2 <LCD_CheckStatusInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1aa4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1aa6:	78 a1       	ldd	r23, Y+32	; 0x20
    1aa8:	89 a1       	ldd	r24, Y+33	; 0x21
    1aaa:	9a a1       	ldd	r25, Y+34	; 0x22
    1aac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	8e 8f       	std	Y+30, r24	; 0x1e
    1ab6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ab8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1aba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1abc:	8a 95       	dec	r24
    1abe:	f1 f7       	brne	.-4      	; 0x1abc <LCD_CheckStatusInit+0x478>
    1ac0:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00000001);
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <LCD_CheckStatusSendCmnd>
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	a0 e0       	ldi	r26, 0x00	; 0
    1ace:	b0 e4       	ldi	r27, 0x40	; 64
    1ad0:	8b 87       	std	Y+11, r24	; 0x0b
    1ad2:	9c 87       	std	Y+12, r25	; 0x0c
    1ad4:	ad 87       	std	Y+13, r26	; 0x0d
    1ad6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ada:	7c 85       	ldd	r23, Y+12	; 0x0c
    1adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ade:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	4a ef       	ldi	r20, 0xFA	; 250
    1ae6:	54 e4       	ldi	r21, 0x44	; 68
    1ae8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	8f 83       	std	Y+7, r24	; 0x07
    1af2:	98 87       	std	Y+8, r25	; 0x08
    1af4:	a9 87       	std	Y+9, r26	; 0x09
    1af6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1af8:	6f 81       	ldd	r22, Y+7	; 0x07
    1afa:	78 85       	ldd	r23, Y+8	; 0x08
    1afc:	89 85       	ldd	r24, Y+9	; 0x09
    1afe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e8       	ldi	r20, 0x80	; 128
    1b06:	5f e3       	ldi	r21, 0x3F	; 63
    1b08:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b0c:	88 23       	and	r24, r24
    1b0e:	2c f4       	brge	.+10     	; 0x1b1a <LCD_CheckStatusInit+0x4d6>
		__ticks = 1;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	9e 83       	std	Y+6, r25	; 0x06
    1b16:	8d 83       	std	Y+5, r24	; 0x05
    1b18:	3f c0       	rjmp	.+126    	; 0x1b98 <LCD_CheckStatusInit+0x554>
	else if (__tmp > 65535)
    1b1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1c:	78 85       	ldd	r23, Y+8	; 0x08
    1b1e:	89 85       	ldd	r24, Y+9	; 0x09
    1b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	3f ef       	ldi	r19, 0xFF	; 255
    1b26:	4f e7       	ldi	r20, 0x7F	; 127
    1b28:	57 e4       	ldi	r21, 0x47	; 71
    1b2a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b2e:	18 16       	cp	r1, r24
    1b30:	4c f5       	brge	.+82     	; 0x1b84 <LCD_CheckStatusInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e2       	ldi	r20, 0x20	; 32
    1b40:	51 e4       	ldi	r21, 0x41	; 65
    1b42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	bc 01       	movw	r22, r24
    1b4c:	cd 01       	movw	r24, r26
    1b4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	9e 83       	std	Y+6, r25	; 0x06
    1b58:	8d 83       	std	Y+5, r24	; 0x05
    1b5a:	0f c0       	rjmp	.+30     	; 0x1b7a <LCD_CheckStatusInit+0x536>
    1b5c:	88 ec       	ldi	r24, 0xC8	; 200
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	9c 83       	std	Y+4, r25	; 0x04
    1b62:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	9c 81       	ldd	r25, Y+4	; 0x04
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	f1 f7       	brne	.-4      	; 0x1b68 <LCD_CheckStatusInit+0x524>
    1b6c:	9c 83       	std	Y+4, r25	; 0x04
    1b6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b70:	8d 81       	ldd	r24, Y+5	; 0x05
    1b72:	9e 81       	ldd	r25, Y+6	; 0x06
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	9e 83       	std	Y+6, r25	; 0x06
    1b78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	69 f7       	brne	.-38     	; 0x1b5c <LCD_CheckStatusInit+0x518>
    1b82:	14 c0       	rjmp	.+40     	; 0x1bac <LCD_CheckStatusInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b84:	6f 81       	ldd	r22, Y+7	; 0x07
    1b86:	78 85       	ldd	r23, Y+8	; 0x08
    1b88:	89 85       	ldd	r24, Y+9	; 0x09
    1b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	9e 83       	std	Y+6, r25	; 0x06
    1b96:	8d 83       	std	Y+5, r24	; 0x05
    1b98:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9c:	9a 83       	std	Y+2, r25	; 0x02
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <LCD_CheckStatusInit+0x560>
    1ba8:	9a 83       	std	Y+2, r25	; 0x02
    1baa:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
        LCD_CheckStatusSendCmnd(0b00000110);
    1bac:	86 e0       	ldi	r24, 0x06	; 6
    1bae:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <LCD_CheckStatusSendCmnd>

        //return Local_CheckStausReturnValue;
}
    1bb2:	c4 5b       	subi	r28, 0xB4	; 180
    1bb4:	df 4f       	sbci	r29, 0xFF	; 255
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	1f 91       	pop	r17
    1bc6:	0f 91       	pop	r16
    1bc8:	08 95       	ret

00001bca <LCD_CheckStatusSendCmnd>:
void LCD_CheckStatusSendCmnd(_uint8 Copy__Uint8Cmnd)
{
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    1bd2:	e1 97       	sbiw	r28, 0x31	; 49
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	89 ab       	std	Y+49, r24	; 0x31
         1-Rs  =  0
         2-R/W =  0
         3-Send Cmnd byte  to the Data Pins of Lcd
         4-Pluse of Enable E = 1 ,E = 0
        */
        DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_LOW);
    1be0:	83 e0       	ldi	r24, 0x03	; 3
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	40 e0       	ldi	r20, 0x00	; 0
    1be6:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO__CheckStatusSetPinValue>

        DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    1bea:	83 e0       	ldi	r24, 0x03	; 3
    1bec:	61 e0       	ldi	r22, 0x01	; 1
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO__CheckStatusSetPinValue>

        DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, Copy__Uint8Cmnd);
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	69 a9       	ldd	r22, Y+49	; 0x31
    1bf8:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO__CheckStatusSetPortValue>

        DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    1bfc:	83 e0       	ldi	r24, 0x03	; 3
    1bfe:	62 e0       	ldi	r22, 0x02	; 2
    1c00:	41 e0       	ldi	r20, 0x01	; 1
    1c02:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO__CheckStatusSetPinValue>
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	a0 e8       	ldi	r26, 0x80	; 128
    1c0c:	bf e3       	ldi	r27, 0x3F	; 63
    1c0e:	8d a7       	std	Y+45, r24	; 0x2d
    1c10:	9e a7       	std	Y+46, r25	; 0x2e
    1c12:	af a7       	std	Y+47, r26	; 0x2f
    1c14:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c16:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c18:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c1e:	2b ea       	ldi	r18, 0xAB	; 171
    1c20:	3a ea       	ldi	r19, 0xAA	; 170
    1c22:	4a e2       	ldi	r20, 0x2A	; 42
    1c24:	50 e4       	ldi	r21, 0x40	; 64
    1c26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	89 a7       	std	Y+41, r24	; 0x29
    1c30:	9a a7       	std	Y+42, r25	; 0x2a
    1c32:	ab a7       	std	Y+43, r26	; 0x2b
    1c34:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1c36:	69 a5       	ldd	r22, Y+41	; 0x29
    1c38:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e8       	ldi	r20, 0x80	; 128
    1c44:	5f e3       	ldi	r21, 0x3F	; 63
    1c46:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c4a:	88 23       	and	r24, r24
    1c4c:	1c f4       	brge	.+6      	; 0x1c54 <LCD_CheckStatusSendCmnd+0x8a>
		__ticks = 1;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	88 a7       	std	Y+40, r24	; 0x28
    1c52:	91 c0       	rjmp	.+290    	; 0x1d76 <LCD_CheckStatusSendCmnd+0x1ac>
	else if (__tmp > 255)
    1c54:	69 a5       	ldd	r22, Y+41	; 0x29
    1c56:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c58:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c5a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	4f e7       	ldi	r20, 0x7F	; 127
    1c62:	53 e4       	ldi	r21, 0x43	; 67
    1c64:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c68:	18 16       	cp	r1, r24
    1c6a:	0c f0       	brlt	.+2      	; 0x1c6e <LCD_CheckStatusSendCmnd+0xa4>
    1c6c:	7b c0       	rjmp	.+246    	; 0x1d64 <LCD_CheckStatusSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1c6e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c70:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c74:	98 a9       	ldd	r25, Y+48	; 0x30
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	4a e7       	ldi	r20, 0x7A	; 122
    1c7c:	54 e4       	ldi	r21, 0x44	; 68
    1c7e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	8c a3       	std	Y+36, r24	; 0x24
    1c88:	9d a3       	std	Y+37, r25	; 0x25
    1c8a:	ae a3       	std	Y+38, r26	; 0x26
    1c8c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8e:	6c a1       	ldd	r22, Y+36	; 0x24
    1c90:	7d a1       	ldd	r23, Y+37	; 0x25
    1c92:	8e a1       	ldd	r24, Y+38	; 0x26
    1c94:	9f a1       	ldd	r25, Y+39	; 0x27
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	4a ef       	ldi	r20, 0xFA	; 250
    1c9c:	54 e4       	ldi	r21, 0x44	; 68
    1c9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	88 a3       	std	Y+32, r24	; 0x20
    1ca8:	99 a3       	std	Y+33, r25	; 0x21
    1caa:	aa a3       	std	Y+34, r26	; 0x22
    1cac:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1cae:	68 a1       	ldd	r22, Y+32	; 0x20
    1cb0:	79 a1       	ldd	r23, Y+33	; 0x21
    1cb2:	8a a1       	ldd	r24, Y+34	; 0x22
    1cb4:	9b a1       	ldd	r25, Y+35	; 0x23
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e8       	ldi	r20, 0x80	; 128
    1cbc:	5f e3       	ldi	r21, 0x3F	; 63
    1cbe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cc2:	88 23       	and	r24, r24
    1cc4:	2c f4       	brge	.+10     	; 0x1cd0 <LCD_CheckStatusSendCmnd+0x106>
		__ticks = 1;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	9f 8f       	std	Y+31, r25	; 0x1f
    1ccc:	8e 8f       	std	Y+30, r24	; 0x1e
    1cce:	3f c0       	rjmp	.+126    	; 0x1d4e <LCD_CheckStatusSendCmnd+0x184>
	else if (__tmp > 65535)
    1cd0:	68 a1       	ldd	r22, Y+32	; 0x20
    1cd2:	79 a1       	ldd	r23, Y+33	; 0x21
    1cd4:	8a a1       	ldd	r24, Y+34	; 0x22
    1cd6:	9b a1       	ldd	r25, Y+35	; 0x23
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	3f ef       	ldi	r19, 0xFF	; 255
    1cdc:	4f e7       	ldi	r20, 0x7F	; 127
    1cde:	57 e4       	ldi	r21, 0x47	; 71
    1ce0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ce4:	18 16       	cp	r1, r24
    1ce6:	4c f5       	brge	.+82     	; 0x1d3a <LCD_CheckStatusSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce8:	6c a1       	ldd	r22, Y+36	; 0x24
    1cea:	7d a1       	ldd	r23, Y+37	; 0x25
    1cec:	8e a1       	ldd	r24, Y+38	; 0x26
    1cee:	9f a1       	ldd	r25, Y+39	; 0x27
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e2       	ldi	r20, 0x20	; 32
    1cf6:	51 e4       	ldi	r21, 0x41	; 65
    1cf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	bc 01       	movw	r22, r24
    1d02:	cd 01       	movw	r24, r26
    1d04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9f 8f       	std	Y+31, r25	; 0x1f
    1d0e:	8e 8f       	std	Y+30, r24	; 0x1e
    1d10:	0f c0       	rjmp	.+30     	; 0x1d30 <LCD_CheckStatusSendCmnd+0x166>
    1d12:	88 ec       	ldi	r24, 0xC8	; 200
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9d 8f       	std	Y+29, r25	; 0x1d
    1d18:	8c 8f       	std	Y+28, r24	; 0x1c
    1d1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d1c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <LCD_CheckStatusSendCmnd+0x154>
    1d22:	9d 8f       	std	Y+29, r25	; 0x1d
    1d24:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d26:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d28:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	9f 8f       	std	Y+31, r25	; 0x1f
    1d2e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d32:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	69 f7       	brne	.-38     	; 0x1d12 <LCD_CheckStatusSendCmnd+0x148>
    1d38:	24 c0       	rjmp	.+72     	; 0x1d82 <LCD_CheckStatusSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3a:	68 a1       	ldd	r22, Y+32	; 0x20
    1d3c:	79 a1       	ldd	r23, Y+33	; 0x21
    1d3e:	8a a1       	ldd	r24, Y+34	; 0x22
    1d40:	9b a1       	ldd	r25, Y+35	; 0x23
    1d42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	9f 8f       	std	Y+31, r25	; 0x1f
    1d4c:	8e 8f       	std	Y+30, r24	; 0x1e
    1d4e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d50:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d52:	9b 8f       	std	Y+27, r25	; 0x1b
    1d54:	8a 8f       	std	Y+26, r24	; 0x1a
    1d56:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d58:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <LCD_CheckStatusSendCmnd+0x190>
    1d5e:	9b 8f       	std	Y+27, r25	; 0x1b
    1d60:	8a 8f       	std	Y+26, r24	; 0x1a
    1d62:	0f c0       	rjmp	.+30     	; 0x1d82 <LCD_CheckStatusSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d64:	69 a5       	ldd	r22, Y+41	; 0x29
    1d66:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d68:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	88 a7       	std	Y+40, r24	; 0x28
    1d76:	88 a5       	ldd	r24, Y+40	; 0x28
    1d78:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d7a:	89 8d       	ldd	r24, Y+25	; 0x19
    1d7c:	8a 95       	dec	r24
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <LCD_CheckStatusSendCmnd+0x1b2>
    1d80:	89 8f       	std	Y+25, r24	; 0x19
        _delay_us(1);
        DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    1d82:	83 e0       	ldi	r24, 0x03	; 3
    1d84:	62 e0       	ldi	r22, 0x02	; 2
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO__CheckStatusSetPinValue>
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	a0 e8       	ldi	r26, 0x80	; 128
    1d92:	bf e3       	ldi	r27, 0x3F	; 63
    1d94:	8d 8b       	std	Y+21, r24	; 0x15
    1d96:	9e 8b       	std	Y+22, r25	; 0x16
    1d98:	af 8b       	std	Y+23, r26	; 0x17
    1d9a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1da0:	8f 89       	ldd	r24, Y+23	; 0x17
    1da2:	98 8d       	ldd	r25, Y+24	; 0x18
    1da4:	2b ea       	ldi	r18, 0xAB	; 171
    1da6:	3a ea       	ldi	r19, 0xAA	; 170
    1da8:	4a e2       	ldi	r20, 0x2A	; 42
    1daa:	50 e4       	ldi	r21, 0x40	; 64
    1dac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	89 8b       	std	Y+17, r24	; 0x11
    1db6:	9a 8b       	std	Y+18, r25	; 0x12
    1db8:	ab 8b       	std	Y+19, r26	; 0x13
    1dba:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1dbc:	69 89       	ldd	r22, Y+17	; 0x11
    1dbe:	7a 89       	ldd	r23, Y+18	; 0x12
    1dc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e8       	ldi	r20, 0x80	; 128
    1dca:	5f e3       	ldi	r21, 0x3F	; 63
    1dcc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dd0:	88 23       	and	r24, r24
    1dd2:	1c f4       	brge	.+6      	; 0x1dda <LCD_CheckStatusSendCmnd+0x210>
		__ticks = 1;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	88 8b       	std	Y+16, r24	; 0x10
    1dd8:	91 c0       	rjmp	.+290    	; 0x1efc <LCD_CheckStatusSendCmnd+0x332>
	else if (__tmp > 255)
    1dda:	69 89       	ldd	r22, Y+17	; 0x11
    1ddc:	7a 89       	ldd	r23, Y+18	; 0x12
    1dde:	8b 89       	ldd	r24, Y+19	; 0x13
    1de0:	9c 89       	ldd	r25, Y+20	; 0x14
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	4f e7       	ldi	r20, 0x7F	; 127
    1de8:	53 e4       	ldi	r21, 0x43	; 67
    1dea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dee:	18 16       	cp	r1, r24
    1df0:	0c f0       	brlt	.+2      	; 0x1df4 <LCD_CheckStatusSendCmnd+0x22a>
    1df2:	7b c0       	rjmp	.+246    	; 0x1eea <LCD_CheckStatusSendCmnd+0x320>
	{
		_delay_ms(__us / 1000.0);
    1df4:	6d 89       	ldd	r22, Y+21	; 0x15
    1df6:	7e 89       	ldd	r23, Y+22	; 0x16
    1df8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	4a e7       	ldi	r20, 0x7A	; 122
    1e02:	54 e4       	ldi	r21, 0x44	; 68
    1e04:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	8c 87       	std	Y+12, r24	; 0x0c
    1e0e:	9d 87       	std	Y+13, r25	; 0x0d
    1e10:	ae 87       	std	Y+14, r26	; 0x0e
    1e12:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e14:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e16:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e18:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e1a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	4a ef       	ldi	r20, 0xFA	; 250
    1e22:	54 e4       	ldi	r21, 0x44	; 68
    1e24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	88 87       	std	Y+8, r24	; 0x08
    1e2e:	99 87       	std	Y+9, r25	; 0x09
    1e30:	aa 87       	std	Y+10, r26	; 0x0a
    1e32:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e34:	68 85       	ldd	r22, Y+8	; 0x08
    1e36:	79 85       	ldd	r23, Y+9	; 0x09
    1e38:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	40 e8       	ldi	r20, 0x80	; 128
    1e42:	5f e3       	ldi	r21, 0x3F	; 63
    1e44:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e48:	88 23       	and	r24, r24
    1e4a:	2c f4       	brge	.+10     	; 0x1e56 <LCD_CheckStatusSendCmnd+0x28c>
		__ticks = 1;
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	9f 83       	std	Y+7, r25	; 0x07
    1e52:	8e 83       	std	Y+6, r24	; 0x06
    1e54:	3f c0       	rjmp	.+126    	; 0x1ed4 <LCD_CheckStatusSendCmnd+0x30a>
	else if (__tmp > 65535)
    1e56:	68 85       	ldd	r22, Y+8	; 0x08
    1e58:	79 85       	ldd	r23, Y+9	; 0x09
    1e5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	3f ef       	ldi	r19, 0xFF	; 255
    1e62:	4f e7       	ldi	r20, 0x7F	; 127
    1e64:	57 e4       	ldi	r21, 0x47	; 71
    1e66:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e6a:	18 16       	cp	r1, r24
    1e6c:	4c f5       	brge	.+82     	; 0x1ec0 <LCD_CheckStatusSendCmnd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e70:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e72:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e74:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e2       	ldi	r20, 0x20	; 32
    1e7c:	51 e4       	ldi	r21, 0x41	; 65
    1e7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	bc 01       	movw	r22, r24
    1e88:	cd 01       	movw	r24, r26
    1e8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	9f 83       	std	Y+7, r25	; 0x07
    1e94:	8e 83       	std	Y+6, r24	; 0x06
    1e96:	0f c0       	rjmp	.+30     	; 0x1eb6 <LCD_CheckStatusSendCmnd+0x2ec>
    1e98:	88 ec       	ldi	r24, 0xC8	; 200
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	9d 83       	std	Y+5, r25	; 0x05
    1e9e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <LCD_CheckStatusSendCmnd+0x2da>
    1ea8:	9d 83       	std	Y+5, r25	; 0x05
    1eaa:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eac:	8e 81       	ldd	r24, Y+6	; 0x06
    1eae:	9f 81       	ldd	r25, Y+7	; 0x07
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	9f 83       	std	Y+7, r25	; 0x07
    1eb4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	69 f7       	brne	.-38     	; 0x1e98 <LCD_CheckStatusSendCmnd+0x2ce>
    1ebe:	24 c0       	rjmp	.+72     	; 0x1f08 <LCD_CheckStatusSendCmnd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec0:	68 85       	ldd	r22, Y+8	; 0x08
    1ec2:	79 85       	ldd	r23, Y+9	; 0x09
    1ec4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ec6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ec8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	9f 83       	std	Y+7, r25	; 0x07
    1ed2:	8e 83       	std	Y+6, r24	; 0x06
    1ed4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed8:	9b 83       	std	Y+3, r25	; 0x03
    1eda:	8a 83       	std	Y+2, r24	; 0x02
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <LCD_CheckStatusSendCmnd+0x316>
    1ee4:	9b 83       	std	Y+3, r25	; 0x03
    1ee6:	8a 83       	std	Y+2, r24	; 0x02
    1ee8:	0f c0       	rjmp	.+30     	; 0x1f08 <LCD_CheckStatusSendCmnd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1eea:	69 89       	ldd	r22, Y+17	; 0x11
    1eec:	7a 89       	ldd	r23, Y+18	; 0x12
    1eee:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	88 8b       	std	Y+16, r24	; 0x10
    1efc:	88 89       	ldd	r24, Y+16	; 0x10
    1efe:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	8a 95       	dec	r24
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LCD_CheckStatusSendCmnd+0x338>
    1f06:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(1);
//        return Local_CheckStausReturnValue;
}
    1f08:	e1 96       	adiw	r28, 0x31	; 49
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <LCD_CheckStatusSendChar>:
void LCD_CheckStatusSendChar(_uint8 Copy__Uint8Char)
{
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	6d 97       	sbiw	r28, 0x1d	; 29
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	de bf       	out	0x3e, r29	; 62
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	cd bf       	out	0x3d, r28	; 61
    1f2e:	8d 8f       	std	Y+29, r24	; 0x1d
         1-Rs  =  1
         2-R/W =  0
         3-Send Cmnd byte  to the Data Pins of Lcd
         4-Pluse of Enable E = 1 ,E = 0
        */
        DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_HIGH);
    1f30:	83 e0       	ldi	r24, 0x03	; 3
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	41 e0       	ldi	r20, 0x01	; 1
    1f36:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO__CheckStatusSetPinValue>

        DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    1f3a:	83 e0       	ldi	r24, 0x03	; 3
    1f3c:	61 e0       	ldi	r22, 0x01	; 1
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO__CheckStatusSetPinValue>

        DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, Copy__Uint8Char);
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1f48:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO__CheckStatusSetPortValue>

        DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    1f4c:	83 e0       	ldi	r24, 0x03	; 3
    1f4e:	62 e0       	ldi	r22, 0x02	; 2
    1f50:	41 e0       	ldi	r20, 0x01	; 1
    1f52:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO__CheckStatusSetPinValue>
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	a8 e4       	ldi	r26, 0x48	; 72
    1f5c:	b2 e4       	ldi	r27, 0x42	; 66
    1f5e:	89 8f       	std	Y+25, r24	; 0x19
    1f60:	9a 8f       	std	Y+26, r25	; 0x1a
    1f62:	ab 8f       	std	Y+27, r26	; 0x1b
    1f64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f66:	69 8d       	ldd	r22, Y+25	; 0x19
    1f68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	4a ef       	ldi	r20, 0xFA	; 250
    1f74:	54 e4       	ldi	r21, 0x44	; 68
    1f76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	8d 8b       	std	Y+21, r24	; 0x15
    1f80:	9e 8b       	std	Y+22, r25	; 0x16
    1f82:	af 8b       	std	Y+23, r26	; 0x17
    1f84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f86:	6d 89       	ldd	r22, Y+21	; 0x15
    1f88:	7e 89       	ldd	r23, Y+22	; 0x16
    1f8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e8       	ldi	r20, 0x80	; 128
    1f94:	5f e3       	ldi	r21, 0x3F	; 63
    1f96:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f9a:	88 23       	and	r24, r24
    1f9c:	2c f4       	brge	.+10     	; 0x1fa8 <LCD_CheckStatusSendChar+0x8e>
		__ticks = 1;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	9c 8b       	std	Y+20, r25	; 0x14
    1fa4:	8b 8b       	std	Y+19, r24	; 0x13
    1fa6:	3f c0       	rjmp	.+126    	; 0x2026 <LCD_CheckStatusSendChar+0x10c>
	else if (__tmp > 65535)
    1fa8:	6d 89       	ldd	r22, Y+21	; 0x15
    1faa:	7e 89       	ldd	r23, Y+22	; 0x16
    1fac:	8f 89       	ldd	r24, Y+23	; 0x17
    1fae:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	3f ef       	ldi	r19, 0xFF	; 255
    1fb4:	4f e7       	ldi	r20, 0x7F	; 127
    1fb6:	57 e4       	ldi	r21, 0x47	; 71
    1fb8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fbc:	18 16       	cp	r1, r24
    1fbe:	4c f5       	brge	.+82     	; 0x2012 <LCD_CheckStatusSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc0:	69 8d       	ldd	r22, Y+25	; 0x19
    1fc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	40 e2       	ldi	r20, 0x20	; 32
    1fce:	51 e4       	ldi	r21, 0x41	; 65
    1fd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	bc 01       	movw	r22, r24
    1fda:	cd 01       	movw	r24, r26
    1fdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	9c 8b       	std	Y+20, r25	; 0x14
    1fe6:	8b 8b       	std	Y+19, r24	; 0x13
    1fe8:	0f c0       	rjmp	.+30     	; 0x2008 <LCD_CheckStatusSendChar+0xee>
    1fea:	88 ec       	ldi	r24, 0xC8	; 200
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	9a 8b       	std	Y+18, r25	; 0x12
    1ff0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ff2:	89 89       	ldd	r24, Y+17	; 0x11
    1ff4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <LCD_CheckStatusSendChar+0xdc>
    1ffa:	9a 8b       	std	Y+18, r25	; 0x12
    1ffc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    2000:	9c 89       	ldd	r25, Y+20	; 0x14
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	9c 8b       	std	Y+20, r25	; 0x14
    2006:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2008:	8b 89       	ldd	r24, Y+19	; 0x13
    200a:	9c 89       	ldd	r25, Y+20	; 0x14
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	69 f7       	brne	.-38     	; 0x1fea <LCD_CheckStatusSendChar+0xd0>
    2010:	14 c0       	rjmp	.+40     	; 0x203a <LCD_CheckStatusSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2012:	6d 89       	ldd	r22, Y+21	; 0x15
    2014:	7e 89       	ldd	r23, Y+22	; 0x16
    2016:	8f 89       	ldd	r24, Y+23	; 0x17
    2018:	98 8d       	ldd	r25, Y+24	; 0x18
    201a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	9c 8b       	std	Y+20, r25	; 0x14
    2024:	8b 8b       	std	Y+19, r24	; 0x13
    2026:	8b 89       	ldd	r24, Y+19	; 0x13
    2028:	9c 89       	ldd	r25, Y+20	; 0x14
    202a:	98 8b       	std	Y+16, r25	; 0x10
    202c:	8f 87       	std	Y+15, r24	; 0x0f
    202e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2030:	98 89       	ldd	r25, Y+16	; 0x10
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	f1 f7       	brne	.-4      	; 0x2032 <LCD_CheckStatusSendChar+0x118>
    2036:	98 8b       	std	Y+16, r25	; 0x10
    2038:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(50);
        DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    203a:	83 e0       	ldi	r24, 0x03	; 3
    203c:	62 e0       	ldi	r22, 0x02	; 2
    203e:	40 e0       	ldi	r20, 0x00	; 0
    2040:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO__CheckStatusSetPinValue>
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	a8 e4       	ldi	r26, 0x48	; 72
    204a:	b2 e4       	ldi	r27, 0x42	; 66
    204c:	8b 87       	std	Y+11, r24	; 0x0b
    204e:	9c 87       	std	Y+12, r25	; 0x0c
    2050:	ad 87       	std	Y+13, r26	; 0x0d
    2052:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2054:	6b 85       	ldd	r22, Y+11	; 0x0b
    2056:	7c 85       	ldd	r23, Y+12	; 0x0c
    2058:	8d 85       	ldd	r24, Y+13	; 0x0d
    205a:	9e 85       	ldd	r25, Y+14	; 0x0e
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	4a ef       	ldi	r20, 0xFA	; 250
    2062:	54 e4       	ldi	r21, 0x44	; 68
    2064:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	8f 83       	std	Y+7, r24	; 0x07
    206e:	98 87       	std	Y+8, r25	; 0x08
    2070:	a9 87       	std	Y+9, r26	; 0x09
    2072:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2074:	6f 81       	ldd	r22, Y+7	; 0x07
    2076:	78 85       	ldd	r23, Y+8	; 0x08
    2078:	89 85       	ldd	r24, Y+9	; 0x09
    207a:	9a 85       	ldd	r25, Y+10	; 0x0a
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e8       	ldi	r20, 0x80	; 128
    2082:	5f e3       	ldi	r21, 0x3F	; 63
    2084:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2088:	88 23       	and	r24, r24
    208a:	2c f4       	brge	.+10     	; 0x2096 <LCD_CheckStatusSendChar+0x17c>
		__ticks = 1;
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	9e 83       	std	Y+6, r25	; 0x06
    2092:	8d 83       	std	Y+5, r24	; 0x05
    2094:	3f c0       	rjmp	.+126    	; 0x2114 <LCD_CheckStatusSendChar+0x1fa>
	else if (__tmp > 65535)
    2096:	6f 81       	ldd	r22, Y+7	; 0x07
    2098:	78 85       	ldd	r23, Y+8	; 0x08
    209a:	89 85       	ldd	r24, Y+9	; 0x09
    209c:	9a 85       	ldd	r25, Y+10	; 0x0a
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	3f ef       	ldi	r19, 0xFF	; 255
    20a2:	4f e7       	ldi	r20, 0x7F	; 127
    20a4:	57 e4       	ldi	r21, 0x47	; 71
    20a6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20aa:	18 16       	cp	r1, r24
    20ac:	4c f5       	brge	.+82     	; 0x2100 <LCD_CheckStatusSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e2       	ldi	r20, 0x20	; 32
    20bc:	51 e4       	ldi	r21, 0x41	; 65
    20be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	bc 01       	movw	r22, r24
    20c8:	cd 01       	movw	r24, r26
    20ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	9e 83       	std	Y+6, r25	; 0x06
    20d4:	8d 83       	std	Y+5, r24	; 0x05
    20d6:	0f c0       	rjmp	.+30     	; 0x20f6 <LCD_CheckStatusSendChar+0x1dc>
    20d8:	88 ec       	ldi	r24, 0xC8	; 200
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	9c 83       	std	Y+4, r25	; 0x04
    20de:	8b 83       	std	Y+3, r24	; 0x03
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	9c 81       	ldd	r25, Y+4	; 0x04
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	f1 f7       	brne	.-4      	; 0x20e4 <LCD_CheckStatusSendChar+0x1ca>
    20e8:	9c 83       	std	Y+4, r25	; 0x04
    20ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ec:	8d 81       	ldd	r24, Y+5	; 0x05
    20ee:	9e 81       	ldd	r25, Y+6	; 0x06
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	9e 83       	std	Y+6, r25	; 0x06
    20f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f6:	8d 81       	ldd	r24, Y+5	; 0x05
    20f8:	9e 81       	ldd	r25, Y+6	; 0x06
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	69 f7       	brne	.-38     	; 0x20d8 <LCD_CheckStatusSendChar+0x1be>
    20fe:	14 c0       	rjmp	.+40     	; 0x2128 <LCD_CheckStatusSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2100:	6f 81       	ldd	r22, Y+7	; 0x07
    2102:	78 85       	ldd	r23, Y+8	; 0x08
    2104:	89 85       	ldd	r24, Y+9	; 0x09
    2106:	9a 85       	ldd	r25, Y+10	; 0x0a
    2108:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9e 83       	std	Y+6, r25	; 0x06
    2112:	8d 83       	std	Y+5, r24	; 0x05
    2114:	8d 81       	ldd	r24, Y+5	; 0x05
    2116:	9e 81       	ldd	r25, Y+6	; 0x06
    2118:	9a 83       	std	Y+2, r25	; 0x02
    211a:	89 83       	std	Y+1, r24	; 0x01
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	9a 81       	ldd	r25, Y+2	; 0x02
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f1 f7       	brne	.-4      	; 0x2120 <LCD_CheckStatusSendChar+0x206>
    2124:	9a 83       	std	Y+2, r25	; 0x02
    2126:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(50);
//        return Local_CheckStausReturnValue;
}
    2128:	6d 96       	adiw	r28, 0x1d	; 29
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <LCD_CheckStatusWriteString>:

CheckStatus LCD_CheckStatusWriteString(_uint8 *Copy_p__Uint8String)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	00 d0       	rcall	.+0      	; 0x2140 <LCD_CheckStatusWriteString+0x6>
    2140:	00 d0       	rcall	.+0      	; 0x2142 <LCD_CheckStatusWriteString+0x8>
    2142:	0f 92       	push	r0
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	9c 83       	std	Y+4, r25	; 0x04
    214a:	8b 83       	std	Y+3, r24	; 0x03
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    214c:	1a 82       	std	Y+2, r1	; 0x02
        _uint8 Local__Uint8Index = DIO__UINT8_LOW;
    214e:	19 82       	std	Y+1, r1	; 0x01

        if (Copy_p__Uint8String != NULL)
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	f1 f0       	breq	.+60     	; 0x2194 <LCD_CheckStatusWriteString+0x5a>
        {
                for (Local__Uint8Index = DIO__UINT8_LOW; *(Copy_p__Uint8String + Local__Uint8Index) != '\0'; ++Local__Uint8Index)
    2158:	19 82       	std	Y+1, r1	; 0x01
    215a:	0e c0       	rjmp	.+28     	; 0x2178 <LCD_CheckStatusWriteString+0x3e>
                {
                        LCD_CheckStatusSendChar(*(Copy_p__Uint8String + Local__Uint8Index));
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	9c 81       	ldd	r25, Y+4	; 0x04
    2166:	fc 01       	movw	r30, r24
    2168:	e2 0f       	add	r30, r18
    216a:	f3 1f       	adc	r31, r19
    216c:	80 81       	ld	r24, Z
    216e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <LCD_CheckStatusSendChar>
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
        _uint8 Local__Uint8Index = DIO__UINT8_LOW;

        if (Copy_p__Uint8String != NULL)
        {
                for (Local__Uint8Index = DIO__UINT8_LOW; *(Copy_p__Uint8String + Local__Uint8Index) != '\0'; ++Local__Uint8Index)
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	8f 5f       	subi	r24, 0xFF	; 255
    2176:	89 83       	std	Y+1, r24	; 0x01
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	28 2f       	mov	r18, r24
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	9c 81       	ldd	r25, Y+4	; 0x04
    2182:	fc 01       	movw	r30, r24
    2184:	e2 0f       	add	r30, r18
    2186:	f3 1f       	adc	r31, r19
    2188:	80 81       	ld	r24, Z
    218a:	88 23       	and	r24, r24
    218c:	39 f7       	brne	.-50     	; 0x215c <LCD_CheckStatusWriteString+0x22>
                {
                        LCD_CheckStatusSendChar(*(Copy_p__Uint8String + Local__Uint8Index));
                }
                return Local_CheckStausReturnValue;
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	8d 83       	std	Y+5, r24	; 0x05
    2192:	04 c0       	rjmp	.+8      	; 0x219c <LCD_CheckStatusWriteString+0x62>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	8a 83       	std	Y+2, r24	; 0x02
                return Local_CheckStausReturnValue;
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	8d 83       	std	Y+5, r24	; 0x05
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <LCD_CheckStatusGoToXY>:

CheckStatus LCD_CheckStatusGoToXY(_uint8 Copy__Uint8LineNumber, _uint8 Copy__Uint8LocationNumber)
{
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <LCD_CheckStatusGoToXY+0x6>
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <LCD_CheckStatusGoToXY+0x8>
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <LCD_CheckStatusGoToXY+0xa>
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	8a 83       	std	Y+2, r24	; 0x02
    21be:	6b 83       	std	Y+3, r22	; 0x03

        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    21c0:	19 82       	std	Y+1, r1	; 0x01

        if ((Copy__Uint8LineNumber <= LCD__UINT8_LINE2) && (Copy__Uint8LocationNumber <= LCD__UINT8_LOCATION_NUMBER39))
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	82 30       	cpi	r24, 0x02	; 2
    21c6:	f0 f4       	brcc	.+60     	; 0x2204 <LCD_CheckStatusGoToXY+0x56>
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	88 32       	cpi	r24, 0x28	; 40
    21cc:	d8 f4       	brcc	.+54     	; 0x2204 <LCD_CheckStatusGoToXY+0x56>
        {
                
                switch (Copy__Uint8LineNumber)
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	3e 83       	std	Y+6, r19	; 0x06
    21d6:	2d 83       	std	Y+5, r18	; 0x05
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	9e 81       	ldd	r25, Y+6	; 0x06
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	31 f0       	breq	.+12     	; 0x21ec <LCD_CheckStatusGoToXY+0x3e>
    21e0:	2d 81       	ldd	r18, Y+5	; 0x05
    21e2:	3e 81       	ldd	r19, Y+6	; 0x06
    21e4:	21 30       	cpi	r18, 0x01	; 1
    21e6:	31 05       	cpc	r19, r1
    21e8:	31 f0       	breq	.+12     	; 0x21f6 <LCD_CheckStatusGoToXY+0x48>
    21ea:	09 c0       	rjmp	.+18     	; 0x21fe <LCD_CheckStatusGoToXY+0x50>
                {
                case LCD__UINT8_LINE1:
                        LCD_CheckStatusSendCmnd(0x80 + Copy__Uint8LocationNumber); //base +offsite
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	80 58       	subi	r24, 0x80	; 128
    21f0:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <LCD_CheckStatusSendCmnd>
    21f4:	04 c0       	rjmp	.+8      	; 0x21fe <LCD_CheckStatusGoToXY+0x50>
                        break;
                case LCD__UINT8_LINE2:
                        LCD_CheckStatusSendCmnd(0xC0 + Copy__Uint8LocationNumber);
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	80 54       	subi	r24, 0x40	; 64
    21fa:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <LCD_CheckStatusSendCmnd>
                        break;
                default:
                        break;
                }
                return Local_CheckStausReturnValue;
    21fe:	39 81       	ldd	r19, Y+1	; 0x01
    2200:	3c 83       	std	Y+4, r19	; 0x04
    2202:	04 c0       	rjmp	.+8      	; 0x220c <LCD_CheckStatusGoToXY+0x5e>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStausReturnValue;
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	8c 83       	std	Y+4, r24	; 0x04
    220c:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    220e:	26 96       	adiw	r28, 0x06	; 6
    2210:	0f b6       	in	r0, 0x3f	; 63
    2212:	f8 94       	cli
    2214:	de bf       	out	0x3e, r29	; 62
    2216:	0f be       	out	0x3f, r0	; 63
    2218:	cd bf       	out	0x3d, r28	; 61
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <main>:

/* HAL */
#include"LCD_interface.h"


int main (){
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62

     /* DIO INIT */
     DIO__CheckStatusInit();
    2228:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO__CheckStatusInit>
     /* LCD INIT */
     LCD_CheckStatusInit();
    222c:	0e 94 22 0b 	call	0x1644	; 0x1644 <LCD_CheckStatusInit>
     /* Write NAME */

     LCD_CheckStatusWriteString("ELABBAS ");
    2230:	80 e6       	ldi	r24, 0x60	; 96
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_CheckStatusWriteString>
    2238:	ff cf       	rjmp	.-2      	; 0x2238 <main+0x18>

0000223a <__prologue_saves__>:
    223a:	2f 92       	push	r2
    223c:	3f 92       	push	r3
    223e:	4f 92       	push	r4
    2240:	5f 92       	push	r5
    2242:	6f 92       	push	r6
    2244:	7f 92       	push	r7
    2246:	8f 92       	push	r8
    2248:	9f 92       	push	r9
    224a:	af 92       	push	r10
    224c:	bf 92       	push	r11
    224e:	cf 92       	push	r12
    2250:	df 92       	push	r13
    2252:	ef 92       	push	r14
    2254:	ff 92       	push	r15
    2256:	0f 93       	push	r16
    2258:	1f 93       	push	r17
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
    2262:	ca 1b       	sub	r28, r26
    2264:	db 0b       	sbc	r29, r27
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	09 94       	ijmp

00002272 <__epilogue_restores__>:
    2272:	2a 88       	ldd	r2, Y+18	; 0x12
    2274:	39 88       	ldd	r3, Y+17	; 0x11
    2276:	48 88       	ldd	r4, Y+16	; 0x10
    2278:	5f 84       	ldd	r5, Y+15	; 0x0f
    227a:	6e 84       	ldd	r6, Y+14	; 0x0e
    227c:	7d 84       	ldd	r7, Y+13	; 0x0d
    227e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2280:	9b 84       	ldd	r9, Y+11	; 0x0b
    2282:	aa 84       	ldd	r10, Y+10	; 0x0a
    2284:	b9 84       	ldd	r11, Y+9	; 0x09
    2286:	c8 84       	ldd	r12, Y+8	; 0x08
    2288:	df 80       	ldd	r13, Y+7	; 0x07
    228a:	ee 80       	ldd	r14, Y+6	; 0x06
    228c:	fd 80       	ldd	r15, Y+5	; 0x05
    228e:	0c 81       	ldd	r16, Y+4	; 0x04
    2290:	1b 81       	ldd	r17, Y+3	; 0x03
    2292:	aa 81       	ldd	r26, Y+2	; 0x02
    2294:	b9 81       	ldd	r27, Y+1	; 0x01
    2296:	ce 0f       	add	r28, r30
    2298:	d1 1d       	adc	r29, r1
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
    22a4:	ed 01       	movw	r28, r26
    22a6:	08 95       	ret

000022a8 <_exit>:
    22a8:	f8 94       	cli

000022aa <__stop_program>:
    22aa:	ff cf       	rjmp	.-2      	; 0x22aa <__stop_program>
