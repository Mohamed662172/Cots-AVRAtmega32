
Timer0Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001966  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001966  000019fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800068  00800068  00001a02  2**0
                  ALLOC
  3 .stab         00001788  00000000  00000000  00001a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000de8  00000000  00000000  0000318c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00003f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000115  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000012c6  00000000  00000000  00004169  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a1c  00000000  00000000  0000542f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000009ce  00000000  00000000  00005e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000100  00000000  00000000  0000681c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000256  00000000  00000000  0000691c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000652  00000000  00000000  00006b72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <__vector_10>
      2c:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a6 37       	cpi	r26, 0x76	; 118
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e6       	ldi	r30, 0x66	; 102
      78:	f9 e1       	ldi	r31, 0x19	; 25
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <main>
      8a:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 4f 02 	call	0x49e	; 0x49e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 4f 02 	call	0x49e	; 0x49e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a3 02 	call	0x546	; 0x546 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a3 02 	call	0x546	; 0x546 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__epilogue_restores__+0x18>

0000043e <__gesf2>:
     43e:	a8 e1       	ldi	r26, 0x18	; 24
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__prologue_saves__+0x18>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	89 e0       	ldi	r24, 0x09	; 9
     45c:	e8 2e       	mov	r14, r24
     45e:	f1 2c       	mov	r15, r1
     460:	ec 0e       	add	r14, r28
     462:	fd 1e       	adc	r15, r29
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	b7 01       	movw	r22, r14
     46a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__unpack_f>
     46e:	8e 01       	movw	r16, r28
     470:	0f 5e       	subi	r16, 0xEF	; 239
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     474:	ce 01       	movw	r24, r28
     476:	05 96       	adiw	r24, 0x05	; 5
     478:	b8 01       	movw	r22, r16
     47a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__unpack_f>
     47e:	89 85       	ldd	r24, Y+9	; 0x09
     480:	82 30       	cpi	r24, 0x02	; 2
     482:	40 f0       	brcs	.+16     	; 0x494 <__gesf2+0x56>
     484:	89 89       	ldd	r24, Y+17	; 0x11
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	28 f0       	brcs	.+10     	; 0x494 <__gesf2+0x56>
     48a:	c7 01       	movw	r24, r14
     48c:	b8 01       	movw	r22, r16
     48e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__fpcmp_parts_f>
     492:	01 c0       	rjmp	.+2      	; 0x496 <__gesf2+0x58>
     494:	8f ef       	ldi	r24, 0xFF	; 255
     496:	68 96       	adiw	r28, 0x18	; 24
     498:	e6 e0       	ldi	r30, 0x06	; 6
     49a:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__epilogue_restores__+0x18>

0000049e <__fixsfsi>:
     49e:	ac e0       	ldi	r26, 0x0C	; 12
     4a0:	b0 e0       	ldi	r27, 0x00	; 0
     4a2:	e5 e5       	ldi	r30, 0x55	; 85
     4a4:	f2 e0       	ldi	r31, 0x02	; 2
     4a6:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <__prologue_saves__+0x20>
     4aa:	69 83       	std	Y+1, r22	; 0x01
     4ac:	7a 83       	std	Y+2, r23	; 0x02
     4ae:	8b 83       	std	Y+3, r24	; 0x03
     4b0:	9c 83       	std	Y+4, r25	; 0x04
     4b2:	ce 01       	movw	r24, r28
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	be 01       	movw	r22, r28
     4b8:	6b 5f       	subi	r22, 0xFB	; 251
     4ba:	7f 4f       	sbci	r23, 0xFF	; 255
     4bc:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__unpack_f>
     4c0:	8d 81       	ldd	r24, Y+5	; 0x05
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	61 f1       	breq	.+88     	; 0x51e <__fixsfsi+0x80>
     4c6:	82 30       	cpi	r24, 0x02	; 2
     4c8:	50 f1       	brcs	.+84     	; 0x51e <__fixsfsi+0x80>
     4ca:	84 30       	cpi	r24, 0x04	; 4
     4cc:	21 f4       	brne	.+8      	; 0x4d6 <__fixsfsi+0x38>
     4ce:	8e 81       	ldd	r24, Y+6	; 0x06
     4d0:	88 23       	and	r24, r24
     4d2:	51 f1       	breq	.+84     	; 0x528 <__fixsfsi+0x8a>
     4d4:	2e c0       	rjmp	.+92     	; 0x532 <__fixsfsi+0x94>
     4d6:	2f 81       	ldd	r18, Y+7	; 0x07
     4d8:	38 85       	ldd	r19, Y+8	; 0x08
     4da:	37 fd       	sbrc	r19, 7
     4dc:	20 c0       	rjmp	.+64     	; 0x51e <__fixsfsi+0x80>
     4de:	6e 81       	ldd	r22, Y+6	; 0x06
     4e0:	2f 31       	cpi	r18, 0x1F	; 31
     4e2:	31 05       	cpc	r19, r1
     4e4:	1c f0       	brlt	.+6      	; 0x4ec <__fixsfsi+0x4e>
     4e6:	66 23       	and	r22, r22
     4e8:	f9 f0       	breq	.+62     	; 0x528 <__fixsfsi+0x8a>
     4ea:	23 c0       	rjmp	.+70     	; 0x532 <__fixsfsi+0x94>
     4ec:	8e e1       	ldi	r24, 0x1E	; 30
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	82 1b       	sub	r24, r18
     4f2:	93 0b       	sbc	r25, r19
     4f4:	29 85       	ldd	r18, Y+9	; 0x09
     4f6:	3a 85       	ldd	r19, Y+10	; 0x0a
     4f8:	4b 85       	ldd	r20, Y+11	; 0x0b
     4fa:	5c 85       	ldd	r21, Y+12	; 0x0c
     4fc:	04 c0       	rjmp	.+8      	; 0x506 <__fixsfsi+0x68>
     4fe:	56 95       	lsr	r21
     500:	47 95       	ror	r20
     502:	37 95       	ror	r19
     504:	27 95       	ror	r18
     506:	8a 95       	dec	r24
     508:	d2 f7       	brpl	.-12     	; 0x4fe <__fixsfsi+0x60>
     50a:	66 23       	and	r22, r22
     50c:	b1 f0       	breq	.+44     	; 0x53a <__fixsfsi+0x9c>
     50e:	50 95       	com	r21
     510:	40 95       	com	r20
     512:	30 95       	com	r19
     514:	21 95       	neg	r18
     516:	3f 4f       	sbci	r19, 0xFF	; 255
     518:	4f 4f       	sbci	r20, 0xFF	; 255
     51a:	5f 4f       	sbci	r21, 0xFF	; 255
     51c:	0e c0       	rjmp	.+28     	; 0x53a <__fixsfsi+0x9c>
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	40 e0       	ldi	r20, 0x00	; 0
     524:	50 e0       	ldi	r21, 0x00	; 0
     526:	09 c0       	rjmp	.+18     	; 0x53a <__fixsfsi+0x9c>
     528:	2f ef       	ldi	r18, 0xFF	; 255
     52a:	3f ef       	ldi	r19, 0xFF	; 255
     52c:	4f ef       	ldi	r20, 0xFF	; 255
     52e:	5f e7       	ldi	r21, 0x7F	; 127
     530:	04 c0       	rjmp	.+8      	; 0x53a <__fixsfsi+0x9c>
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	50 e8       	ldi	r21, 0x80	; 128
     53a:	b9 01       	movw	r22, r18
     53c:	ca 01       	movw	r24, r20
     53e:	2c 96       	adiw	r28, 0x0c	; 12
     540:	e2 e0       	ldi	r30, 0x02	; 2
     542:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__epilogue_restores__+0x20>

00000546 <__pack_f>:
     546:	df 92       	push	r13
     548:	ef 92       	push	r14
     54a:	ff 92       	push	r15
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	fc 01       	movw	r30, r24
     552:	e4 80       	ldd	r14, Z+4	; 0x04
     554:	f5 80       	ldd	r15, Z+5	; 0x05
     556:	06 81       	ldd	r16, Z+6	; 0x06
     558:	17 81       	ldd	r17, Z+7	; 0x07
     55a:	d1 80       	ldd	r13, Z+1	; 0x01
     55c:	80 81       	ld	r24, Z
     55e:	82 30       	cpi	r24, 0x02	; 2
     560:	48 f4       	brcc	.+18     	; 0x574 <__pack_f+0x2e>
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	a0 e1       	ldi	r26, 0x10	; 16
     568:	b0 e0       	ldi	r27, 0x00	; 0
     56a:	e8 2a       	or	r14, r24
     56c:	f9 2a       	or	r15, r25
     56e:	0a 2b       	or	r16, r26
     570:	1b 2b       	or	r17, r27
     572:	a5 c0       	rjmp	.+330    	; 0x6be <__pack_f+0x178>
     574:	84 30       	cpi	r24, 0x04	; 4
     576:	09 f4       	brne	.+2      	; 0x57a <__pack_f+0x34>
     578:	9f c0       	rjmp	.+318    	; 0x6b8 <__pack_f+0x172>
     57a:	82 30       	cpi	r24, 0x02	; 2
     57c:	21 f4       	brne	.+8      	; 0x586 <__pack_f+0x40>
     57e:	ee 24       	eor	r14, r14
     580:	ff 24       	eor	r15, r15
     582:	87 01       	movw	r16, r14
     584:	05 c0       	rjmp	.+10     	; 0x590 <__pack_f+0x4a>
     586:	e1 14       	cp	r14, r1
     588:	f1 04       	cpc	r15, r1
     58a:	01 05       	cpc	r16, r1
     58c:	11 05       	cpc	r17, r1
     58e:	19 f4       	brne	.+6      	; 0x596 <__pack_f+0x50>
     590:	e0 e0       	ldi	r30, 0x00	; 0
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	96 c0       	rjmp	.+300    	; 0x6c2 <__pack_f+0x17c>
     596:	62 81       	ldd	r22, Z+2	; 0x02
     598:	73 81       	ldd	r23, Z+3	; 0x03
     59a:	9f ef       	ldi	r25, 0xFF	; 255
     59c:	62 38       	cpi	r22, 0x82	; 130
     59e:	79 07       	cpc	r23, r25
     5a0:	0c f0       	brlt	.+2      	; 0x5a4 <__pack_f+0x5e>
     5a2:	5b c0       	rjmp	.+182    	; 0x65a <__pack_f+0x114>
     5a4:	22 e8       	ldi	r18, 0x82	; 130
     5a6:	3f ef       	ldi	r19, 0xFF	; 255
     5a8:	26 1b       	sub	r18, r22
     5aa:	37 0b       	sbc	r19, r23
     5ac:	2a 31       	cpi	r18, 0x1A	; 26
     5ae:	31 05       	cpc	r19, r1
     5b0:	2c f0       	brlt	.+10     	; 0x5bc <__pack_f+0x76>
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	40 e0       	ldi	r20, 0x00	; 0
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	2a c0       	rjmp	.+84     	; 0x610 <__pack_f+0xca>
     5bc:	b8 01       	movw	r22, r16
     5be:	a7 01       	movw	r20, r14
     5c0:	02 2e       	mov	r0, r18
     5c2:	04 c0       	rjmp	.+8      	; 0x5cc <__pack_f+0x86>
     5c4:	76 95       	lsr	r23
     5c6:	67 95       	ror	r22
     5c8:	57 95       	ror	r21
     5ca:	47 95       	ror	r20
     5cc:	0a 94       	dec	r0
     5ce:	d2 f7       	brpl	.-12     	; 0x5c4 <__pack_f+0x7e>
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	a0 e0       	ldi	r26, 0x00	; 0
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	04 c0       	rjmp	.+8      	; 0x5e2 <__pack_f+0x9c>
     5da:	88 0f       	add	r24, r24
     5dc:	99 1f       	adc	r25, r25
     5de:	aa 1f       	adc	r26, r26
     5e0:	bb 1f       	adc	r27, r27
     5e2:	2a 95       	dec	r18
     5e4:	d2 f7       	brpl	.-12     	; 0x5da <__pack_f+0x94>
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	a1 09       	sbc	r26, r1
     5ea:	b1 09       	sbc	r27, r1
     5ec:	8e 21       	and	r24, r14
     5ee:	9f 21       	and	r25, r15
     5f0:	a0 23       	and	r26, r16
     5f2:	b1 23       	and	r27, r17
     5f4:	00 97       	sbiw	r24, 0x00	; 0
     5f6:	a1 05       	cpc	r26, r1
     5f8:	b1 05       	cpc	r27, r1
     5fa:	21 f0       	breq	.+8      	; 0x604 <__pack_f+0xbe>
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	a0 e0       	ldi	r26, 0x00	; 0
     602:	b0 e0       	ldi	r27, 0x00	; 0
     604:	9a 01       	movw	r18, r20
     606:	ab 01       	movw	r20, r22
     608:	28 2b       	or	r18, r24
     60a:	39 2b       	or	r19, r25
     60c:	4a 2b       	or	r20, r26
     60e:	5b 2b       	or	r21, r27
     610:	da 01       	movw	r26, r20
     612:	c9 01       	movw	r24, r18
     614:	8f 77       	andi	r24, 0x7F	; 127
     616:	90 70       	andi	r25, 0x00	; 0
     618:	a0 70       	andi	r26, 0x00	; 0
     61a:	b0 70       	andi	r27, 0x00	; 0
     61c:	80 34       	cpi	r24, 0x40	; 64
     61e:	91 05       	cpc	r25, r1
     620:	a1 05       	cpc	r26, r1
     622:	b1 05       	cpc	r27, r1
     624:	39 f4       	brne	.+14     	; 0x634 <__pack_f+0xee>
     626:	27 ff       	sbrs	r18, 7
     628:	09 c0       	rjmp	.+18     	; 0x63c <__pack_f+0xf6>
     62a:	20 5c       	subi	r18, 0xC0	; 192
     62c:	3f 4f       	sbci	r19, 0xFF	; 255
     62e:	4f 4f       	sbci	r20, 0xFF	; 255
     630:	5f 4f       	sbci	r21, 0xFF	; 255
     632:	04 c0       	rjmp	.+8      	; 0x63c <__pack_f+0xf6>
     634:	21 5c       	subi	r18, 0xC1	; 193
     636:	3f 4f       	sbci	r19, 0xFF	; 255
     638:	4f 4f       	sbci	r20, 0xFF	; 255
     63a:	5f 4f       	sbci	r21, 0xFF	; 255
     63c:	e0 e0       	ldi	r30, 0x00	; 0
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	20 30       	cpi	r18, 0x00	; 0
     642:	a0 e0       	ldi	r26, 0x00	; 0
     644:	3a 07       	cpc	r19, r26
     646:	a0 e0       	ldi	r26, 0x00	; 0
     648:	4a 07       	cpc	r20, r26
     64a:	a0 e4       	ldi	r26, 0x40	; 64
     64c:	5a 07       	cpc	r21, r26
     64e:	10 f0       	brcs	.+4      	; 0x654 <__pack_f+0x10e>
     650:	e1 e0       	ldi	r30, 0x01	; 1
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	79 01       	movw	r14, r18
     656:	8a 01       	movw	r16, r20
     658:	27 c0       	rjmp	.+78     	; 0x6a8 <__pack_f+0x162>
     65a:	60 38       	cpi	r22, 0x80	; 128
     65c:	71 05       	cpc	r23, r1
     65e:	64 f5       	brge	.+88     	; 0x6b8 <__pack_f+0x172>
     660:	fb 01       	movw	r30, r22
     662:	e1 58       	subi	r30, 0x81	; 129
     664:	ff 4f       	sbci	r31, 0xFF	; 255
     666:	d8 01       	movw	r26, r16
     668:	c7 01       	movw	r24, r14
     66a:	8f 77       	andi	r24, 0x7F	; 127
     66c:	90 70       	andi	r25, 0x00	; 0
     66e:	a0 70       	andi	r26, 0x00	; 0
     670:	b0 70       	andi	r27, 0x00	; 0
     672:	80 34       	cpi	r24, 0x40	; 64
     674:	91 05       	cpc	r25, r1
     676:	a1 05       	cpc	r26, r1
     678:	b1 05       	cpc	r27, r1
     67a:	39 f4       	brne	.+14     	; 0x68a <__pack_f+0x144>
     67c:	e7 fe       	sbrs	r14, 7
     67e:	0d c0       	rjmp	.+26     	; 0x69a <__pack_f+0x154>
     680:	80 e4       	ldi	r24, 0x40	; 64
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	a0 e0       	ldi	r26, 0x00	; 0
     686:	b0 e0       	ldi	r27, 0x00	; 0
     688:	04 c0       	rjmp	.+8      	; 0x692 <__pack_f+0x14c>
     68a:	8f e3       	ldi	r24, 0x3F	; 63
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e0       	ldi	r27, 0x00	; 0
     692:	e8 0e       	add	r14, r24
     694:	f9 1e       	adc	r15, r25
     696:	0a 1f       	adc	r16, r26
     698:	1b 1f       	adc	r17, r27
     69a:	17 ff       	sbrs	r17, 7
     69c:	05 c0       	rjmp	.+10     	; 0x6a8 <__pack_f+0x162>
     69e:	16 95       	lsr	r17
     6a0:	07 95       	ror	r16
     6a2:	f7 94       	ror	r15
     6a4:	e7 94       	ror	r14
     6a6:	31 96       	adiw	r30, 0x01	; 1
     6a8:	87 e0       	ldi	r24, 0x07	; 7
     6aa:	16 95       	lsr	r17
     6ac:	07 95       	ror	r16
     6ae:	f7 94       	ror	r15
     6b0:	e7 94       	ror	r14
     6b2:	8a 95       	dec	r24
     6b4:	d1 f7       	brne	.-12     	; 0x6aa <__pack_f+0x164>
     6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <__pack_f+0x17c>
     6b8:	ee 24       	eor	r14, r14
     6ba:	ff 24       	eor	r15, r15
     6bc:	87 01       	movw	r16, r14
     6be:	ef ef       	ldi	r30, 0xFF	; 255
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	6e 2f       	mov	r22, r30
     6c4:	67 95       	ror	r22
     6c6:	66 27       	eor	r22, r22
     6c8:	67 95       	ror	r22
     6ca:	90 2f       	mov	r25, r16
     6cc:	9f 77       	andi	r25, 0x7F	; 127
     6ce:	d7 94       	ror	r13
     6d0:	dd 24       	eor	r13, r13
     6d2:	d7 94       	ror	r13
     6d4:	8e 2f       	mov	r24, r30
     6d6:	86 95       	lsr	r24
     6d8:	49 2f       	mov	r20, r25
     6da:	46 2b       	or	r20, r22
     6dc:	58 2f       	mov	r21, r24
     6de:	5d 29       	or	r21, r13
     6e0:	b7 01       	movw	r22, r14
     6e2:	ca 01       	movw	r24, r20
     6e4:	1f 91       	pop	r17
     6e6:	0f 91       	pop	r16
     6e8:	ff 90       	pop	r15
     6ea:	ef 90       	pop	r14
     6ec:	df 90       	pop	r13
     6ee:	08 95       	ret

000006f0 <__unpack_f>:
     6f0:	fc 01       	movw	r30, r24
     6f2:	db 01       	movw	r26, r22
     6f4:	40 81       	ld	r20, Z
     6f6:	51 81       	ldd	r21, Z+1	; 0x01
     6f8:	22 81       	ldd	r18, Z+2	; 0x02
     6fa:	62 2f       	mov	r22, r18
     6fc:	6f 77       	andi	r22, 0x7F	; 127
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	22 1f       	adc	r18, r18
     702:	22 27       	eor	r18, r18
     704:	22 1f       	adc	r18, r18
     706:	93 81       	ldd	r25, Z+3	; 0x03
     708:	89 2f       	mov	r24, r25
     70a:	88 0f       	add	r24, r24
     70c:	82 2b       	or	r24, r18
     70e:	28 2f       	mov	r18, r24
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	99 1f       	adc	r25, r25
     714:	99 27       	eor	r25, r25
     716:	99 1f       	adc	r25, r25
     718:	11 96       	adiw	r26, 0x01	; 1
     71a:	9c 93       	st	X, r25
     71c:	11 97       	sbiw	r26, 0x01	; 1
     71e:	21 15       	cp	r18, r1
     720:	31 05       	cpc	r19, r1
     722:	a9 f5       	brne	.+106    	; 0x78e <__unpack_f+0x9e>
     724:	41 15       	cp	r20, r1
     726:	51 05       	cpc	r21, r1
     728:	61 05       	cpc	r22, r1
     72a:	71 05       	cpc	r23, r1
     72c:	11 f4       	brne	.+4      	; 0x732 <__unpack_f+0x42>
     72e:	82 e0       	ldi	r24, 0x02	; 2
     730:	37 c0       	rjmp	.+110    	; 0x7a0 <__unpack_f+0xb0>
     732:	82 e8       	ldi	r24, 0x82	; 130
     734:	9f ef       	ldi	r25, 0xFF	; 255
     736:	13 96       	adiw	r26, 0x03	; 3
     738:	9c 93       	st	X, r25
     73a:	8e 93       	st	-X, r24
     73c:	12 97       	sbiw	r26, 0x02	; 2
     73e:	9a 01       	movw	r18, r20
     740:	ab 01       	movw	r20, r22
     742:	67 e0       	ldi	r22, 0x07	; 7
     744:	22 0f       	add	r18, r18
     746:	33 1f       	adc	r19, r19
     748:	44 1f       	adc	r20, r20
     74a:	55 1f       	adc	r21, r21
     74c:	6a 95       	dec	r22
     74e:	d1 f7       	brne	.-12     	; 0x744 <__unpack_f+0x54>
     750:	83 e0       	ldi	r24, 0x03	; 3
     752:	8c 93       	st	X, r24
     754:	0d c0       	rjmp	.+26     	; 0x770 <__unpack_f+0x80>
     756:	22 0f       	add	r18, r18
     758:	33 1f       	adc	r19, r19
     75a:	44 1f       	adc	r20, r20
     75c:	55 1f       	adc	r21, r21
     75e:	12 96       	adiw	r26, 0x02	; 2
     760:	8d 91       	ld	r24, X+
     762:	9c 91       	ld	r25, X
     764:	13 97       	sbiw	r26, 0x03	; 3
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	13 96       	adiw	r26, 0x03	; 3
     76a:	9c 93       	st	X, r25
     76c:	8e 93       	st	-X, r24
     76e:	12 97       	sbiw	r26, 0x02	; 2
     770:	20 30       	cpi	r18, 0x00	; 0
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	38 07       	cpc	r19, r24
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	48 07       	cpc	r20, r24
     77a:	80 e4       	ldi	r24, 0x40	; 64
     77c:	58 07       	cpc	r21, r24
     77e:	58 f3       	brcs	.-42     	; 0x756 <__unpack_f+0x66>
     780:	14 96       	adiw	r26, 0x04	; 4
     782:	2d 93       	st	X+, r18
     784:	3d 93       	st	X+, r19
     786:	4d 93       	st	X+, r20
     788:	5c 93       	st	X, r21
     78a:	17 97       	sbiw	r26, 0x07	; 7
     78c:	08 95       	ret
     78e:	2f 3f       	cpi	r18, 0xFF	; 255
     790:	31 05       	cpc	r19, r1
     792:	79 f4       	brne	.+30     	; 0x7b2 <__unpack_f+0xc2>
     794:	41 15       	cp	r20, r1
     796:	51 05       	cpc	r21, r1
     798:	61 05       	cpc	r22, r1
     79a:	71 05       	cpc	r23, r1
     79c:	19 f4       	brne	.+6      	; 0x7a4 <__unpack_f+0xb4>
     79e:	84 e0       	ldi	r24, 0x04	; 4
     7a0:	8c 93       	st	X, r24
     7a2:	08 95       	ret
     7a4:	64 ff       	sbrs	r22, 4
     7a6:	03 c0       	rjmp	.+6      	; 0x7ae <__unpack_f+0xbe>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	8c 93       	st	X, r24
     7ac:	12 c0       	rjmp	.+36     	; 0x7d2 <__unpack_f+0xe2>
     7ae:	1c 92       	st	X, r1
     7b0:	10 c0       	rjmp	.+32     	; 0x7d2 <__unpack_f+0xe2>
     7b2:	2f 57       	subi	r18, 0x7F	; 127
     7b4:	30 40       	sbci	r19, 0x00	; 0
     7b6:	13 96       	adiw	r26, 0x03	; 3
     7b8:	3c 93       	st	X, r19
     7ba:	2e 93       	st	-X, r18
     7bc:	12 97       	sbiw	r26, 0x02	; 2
     7be:	83 e0       	ldi	r24, 0x03	; 3
     7c0:	8c 93       	st	X, r24
     7c2:	87 e0       	ldi	r24, 0x07	; 7
     7c4:	44 0f       	add	r20, r20
     7c6:	55 1f       	adc	r21, r21
     7c8:	66 1f       	adc	r22, r22
     7ca:	77 1f       	adc	r23, r23
     7cc:	8a 95       	dec	r24
     7ce:	d1 f7       	brne	.-12     	; 0x7c4 <__unpack_f+0xd4>
     7d0:	70 64       	ori	r23, 0x40	; 64
     7d2:	14 96       	adiw	r26, 0x04	; 4
     7d4:	4d 93       	st	X+, r20
     7d6:	5d 93       	st	X+, r21
     7d8:	6d 93       	st	X+, r22
     7da:	7c 93       	st	X, r23
     7dc:	17 97       	sbiw	r26, 0x07	; 7
     7de:	08 95       	ret

000007e0 <__fpcmp_parts_f>:
     7e0:	1f 93       	push	r17
     7e2:	dc 01       	movw	r26, r24
     7e4:	fb 01       	movw	r30, r22
     7e6:	9c 91       	ld	r25, X
     7e8:	92 30       	cpi	r25, 0x02	; 2
     7ea:	08 f4       	brcc	.+2      	; 0x7ee <__fpcmp_parts_f+0xe>
     7ec:	47 c0       	rjmp	.+142    	; 0x87c <__stack+0x1d>
     7ee:	80 81       	ld	r24, Z
     7f0:	82 30       	cpi	r24, 0x02	; 2
     7f2:	08 f4       	brcc	.+2      	; 0x7f6 <__fpcmp_parts_f+0x16>
     7f4:	43 c0       	rjmp	.+134    	; 0x87c <__stack+0x1d>
     7f6:	94 30       	cpi	r25, 0x04	; 4
     7f8:	51 f4       	brne	.+20     	; 0x80e <__fpcmp_parts_f+0x2e>
     7fa:	11 96       	adiw	r26, 0x01	; 1
     7fc:	1c 91       	ld	r17, X
     7fe:	84 30       	cpi	r24, 0x04	; 4
     800:	99 f5       	brne	.+102    	; 0x868 <__stack+0x9>
     802:	81 81       	ldd	r24, Z+1	; 0x01
     804:	68 2f       	mov	r22, r24
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	61 1b       	sub	r22, r17
     80a:	71 09       	sbc	r23, r1
     80c:	3f c0       	rjmp	.+126    	; 0x88c <__stack+0x2d>
     80e:	84 30       	cpi	r24, 0x04	; 4
     810:	21 f0       	breq	.+8      	; 0x81a <__fpcmp_parts_f+0x3a>
     812:	92 30       	cpi	r25, 0x02	; 2
     814:	31 f4       	brne	.+12     	; 0x822 <__fpcmp_parts_f+0x42>
     816:	82 30       	cpi	r24, 0x02	; 2
     818:	b9 f1       	breq	.+110    	; 0x888 <__stack+0x29>
     81a:	81 81       	ldd	r24, Z+1	; 0x01
     81c:	88 23       	and	r24, r24
     81e:	89 f1       	breq	.+98     	; 0x882 <__stack+0x23>
     820:	2d c0       	rjmp	.+90     	; 0x87c <__stack+0x1d>
     822:	11 96       	adiw	r26, 0x01	; 1
     824:	1c 91       	ld	r17, X
     826:	11 97       	sbiw	r26, 0x01	; 1
     828:	82 30       	cpi	r24, 0x02	; 2
     82a:	f1 f0       	breq	.+60     	; 0x868 <__stack+0x9>
     82c:	81 81       	ldd	r24, Z+1	; 0x01
     82e:	18 17       	cp	r17, r24
     830:	d9 f4       	brne	.+54     	; 0x868 <__stack+0x9>
     832:	12 96       	adiw	r26, 0x02	; 2
     834:	2d 91       	ld	r18, X+
     836:	3c 91       	ld	r19, X
     838:	13 97       	sbiw	r26, 0x03	; 3
     83a:	82 81       	ldd	r24, Z+2	; 0x02
     83c:	93 81       	ldd	r25, Z+3	; 0x03
     83e:	82 17       	cp	r24, r18
     840:	93 07       	cpc	r25, r19
     842:	94 f0       	brlt	.+36     	; 0x868 <__stack+0x9>
     844:	28 17       	cp	r18, r24
     846:	39 07       	cpc	r19, r25
     848:	bc f0       	brlt	.+46     	; 0x878 <__stack+0x19>
     84a:	14 96       	adiw	r26, 0x04	; 4
     84c:	8d 91       	ld	r24, X+
     84e:	9d 91       	ld	r25, X+
     850:	0d 90       	ld	r0, X+
     852:	bc 91       	ld	r27, X
     854:	a0 2d       	mov	r26, r0
     856:	24 81       	ldd	r18, Z+4	; 0x04
     858:	35 81       	ldd	r19, Z+5	; 0x05
     85a:	46 81       	ldd	r20, Z+6	; 0x06
     85c:	57 81       	ldd	r21, Z+7	; 0x07
     85e:	28 17       	cp	r18, r24
     860:	39 07       	cpc	r19, r25
     862:	4a 07       	cpc	r20, r26
     864:	5b 07       	cpc	r21, r27
     866:	18 f4       	brcc	.+6      	; 0x86e <__stack+0xf>
     868:	11 23       	and	r17, r17
     86a:	41 f0       	breq	.+16     	; 0x87c <__stack+0x1d>
     86c:	0a c0       	rjmp	.+20     	; 0x882 <__stack+0x23>
     86e:	82 17       	cp	r24, r18
     870:	93 07       	cpc	r25, r19
     872:	a4 07       	cpc	r26, r20
     874:	b5 07       	cpc	r27, r21
     876:	40 f4       	brcc	.+16     	; 0x888 <__stack+0x29>
     878:	11 23       	and	r17, r17
     87a:	19 f0       	breq	.+6      	; 0x882 <__stack+0x23>
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	05 c0       	rjmp	.+10     	; 0x88c <__stack+0x2d>
     882:	6f ef       	ldi	r22, 0xFF	; 255
     884:	7f ef       	ldi	r23, 0xFF	; 255
     886:	02 c0       	rjmp	.+4      	; 0x88c <__stack+0x2d>
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	cb 01       	movw	r24, r22
     88e:	1f 91       	pop	r17
     890:	08 95       	ret

00000892 <ADC_VoidDisable>:
#include"ADC_private.h"

#define  ADC_MAX_NUMBER_OF_CHANNALE   32
#define  ADC_CHANNEL_CLEAR(REG)      REG &= (0b11100000)   
Void ADC_VoidDisable(Void)
{
     892:	df 93       	push	r29
     894:	cf 93       	push	r28
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
        /*1- Disable Peripheral */
        CLEAR_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADEN);
     89a:	a6 e2       	ldi	r26, 0x26	; 38
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e6 e2       	ldi	r30, 0x26	; 38
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 81       	ld	r24, Z
     8a4:	8f 77       	andi	r24, 0x7F	; 127
     8a6:	8c 93       	st	X, r24
        
}
     8a8:	cf 91       	pop	r28
     8aa:	df 91       	pop	r29
     8ac:	08 95       	ret

000008ae <ADC_VoidInit>:

Void ADC_VoidInit(Void)
{
     8ae:	df 93       	push	r29
     8b0:	cf 93       	push	r28
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
        /* 1-Select Vref = Vcc */
         SET_BIT(ADC_UINT8_ADMUX_REG,ADMUX_REFS0);
     8b6:	a7 e2       	ldi	r26, 0x27	; 39
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e7 e2       	ldi	r30, 0x27	; 39
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	80 64       	ori	r24, 0x40	; 64
     8c2:	8c 93       	st	X, r24
        /* 2-Select Right adjust */
		CLEAR_BIT(ADC_UINT8_ADMUX_REG,ADMUX_ADLAR);
     8c4:	a7 e2       	ldi	r26, 0x27	; 39
     8c6:	b0 e0       	ldi	r27, 0x00	; 0
     8c8:	e7 e2       	ldi	r30, 0x27	; 39
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	80 81       	ld	r24, Z
     8ce:	8f 7d       	andi	r24, 0xDF	; 223
     8d0:	8c 93       	st	X, r24
        /* 3-disable AutoTrigger  */ 
         CLEAR_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADATE);
     8d2:	a6 e2       	ldi	r26, 0x26	; 38
     8d4:	b0 e0       	ldi	r27, 0x00	; 0
     8d6:	e6 e2       	ldi	r30, 0x26	; 38
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	80 81       	ld	r24, Z
     8dc:	8f 7d       	andi	r24, 0xDF	; 223
     8de:	8c 93       	st	X, r24
        /* 4-CLK/64 */
         SET_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADPS2);
     8e0:	a6 e2       	ldi	r26, 0x26	; 38
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	e6 e2       	ldi	r30, 0x26	; 38
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	80 81       	ld	r24, Z
     8ea:	84 60       	ori	r24, 0x04	; 4
     8ec:	8c 93       	st	X, r24
         SET_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADPS1);
     8ee:	a6 e2       	ldi	r26, 0x26	; 38
     8f0:	b0 e0       	ldi	r27, 0x00	; 0
     8f2:	e6 e2       	ldi	r30, 0x26	; 38
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	80 81       	ld	r24, Z
     8f8:	82 60       	ori	r24, 0x02	; 2
     8fa:	8c 93       	st	X, r24
         CLEAR_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADPS0);
     8fc:	a6 e2       	ldi	r26, 0x26	; 38
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	e6 e2       	ldi	r30, 0x26	; 38
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	8e 7f       	andi	r24, 0xFE	; 254
     908:	8c 93       	st	X, r24
        /* 5-Enable ADC Peripheral */
        SET_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADEN);
     90a:	a6 e2       	ldi	r26, 0x26	; 38
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	e6 e2       	ldi	r30, 0x26	; 38
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	80 81       	ld	r24, Z
     914:	80 68       	ori	r24, 0x80	; 128
     916:	8c 93       	st	X, r24
}
     918:	cf 91       	pop	r28
     91a:	df 91       	pop	r29
     91c:	08 95       	ret

0000091e <ADC_CheckStatusGetDigigtalValueSynchNonBlocking>:

CheckStatus  ADC_CheckStatusGetDigigtalValueSynchNonBlocking ( _uint8 Copy__Uint8ChannelId, _uint16 *Copy__Uint8DigitalValue )
{
     91e:	df 93       	push	r29
     920:	cf 93       	push	r28
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	28 97       	sbiw	r28, 0x08	; 8
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	de bf       	out	0x3e, r29	; 62
     92e:	0f be       	out	0x3f, r0	; 63
     930:	cd bf       	out	0x3d, r28	; 61
     932:	8e 83       	std	Y+6, r24	; 0x06
     934:	78 87       	std	Y+8, r23	; 0x08
     936:	6f 83       	std	Y+7, r22	; 0x07
             CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
     938:	1d 82       	std	Y+5, r1	; 0x05
             _uint32   Local__Uint32TimeOutCounter = 0;
     93a:	19 82       	std	Y+1, r1	; 0x01
     93c:	1a 82       	std	Y+2, r1	; 0x02
     93e:	1b 82       	std	Y+3, r1	; 0x03
     940:	1c 82       	std	Y+4, r1	; 0x04
             if((Copy__Uint8ChannelId < ADC_MAX_NUMBER_OF_CHANNALE) && (Copy__Uint8DigitalValue != NULL)  )
     942:	8e 81       	ldd	r24, Y+6	; 0x06
     944:	80 32       	cpi	r24, 0x20	; 32
     946:	08 f0       	brcs	.+2      	; 0x94a <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0x2c>
     948:	68 c0       	rjmp	.+208    	; 0xa1a <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0xfc>
     94a:	8f 81       	ldd	r24, Y+7	; 0x07
     94c:	98 85       	ldd	r25, Y+8	; 0x08
     94e:	00 97       	sbiw	r24, 0x00	; 0
     950:	09 f4       	brne	.+2      	; 0x954 <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0x36>
     952:	63 c0       	rjmp	.+198    	; 0xa1a <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0xfc>
             {
                        /* empety ADMUX Reg */
                        ADC_CHANNEL_CLEAR(ADC_UINT8_ADMUX_REG);
     954:	a7 e2       	ldi	r26, 0x27	; 39
     956:	b0 e0       	ldi	r27, 0x00	; 0
     958:	e7 e2       	ldi	r30, 0x27	; 39
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	80 81       	ld	r24, Z
     95e:	80 7e       	andi	r24, 0xE0	; 224
     960:	8c 93       	st	X, r24
                        /* select channel */
                        ADC_UINT8_ADMUX_REG |= Copy__Uint8ChannelId;
     962:	a7 e2       	ldi	r26, 0x27	; 39
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e7 e2       	ldi	r30, 0x27	; 39
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	90 81       	ld	r25, Z
     96c:	8e 81       	ldd	r24, Y+6	; 0x06
     96e:	89 2b       	or	r24, r25
     970:	8c 93       	st	X, r24
                        /* start conversion */
                        SET_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADSC);
     972:	a6 e2       	ldi	r26, 0x26	; 38
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e6 e2       	ldi	r30, 0x26	; 38
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	80 81       	ld	r24, Z
     97c:	80 64       	ori	r24, 0x40	; 64
     97e:	8c 93       	st	X, r24
     980:	0b c0       	rjmp	.+22     	; 0x998 <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0x7a>
                        /* waiting flag = 1 */
                        while ((!GET_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADIF)) && (Local__Uint32TimeOutCounter < ADC__UINT32_TIME_OUT_RATE))
                        {
                                Local__Uint32TimeOutCounter++ ;
     982:	89 81       	ldd	r24, Y+1	; 0x01
     984:	9a 81       	ldd	r25, Y+2	; 0x02
     986:	ab 81       	ldd	r26, Y+3	; 0x03
     988:	bc 81       	ldd	r27, Y+4	; 0x04
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	a1 1d       	adc	r26, r1
     98e:	b1 1d       	adc	r27, r1
     990:	89 83       	std	Y+1, r24	; 0x01
     992:	9a 83       	std	Y+2, r25	; 0x02
     994:	ab 83       	std	Y+3, r26	; 0x03
     996:	bc 83       	std	Y+4, r27	; 0x04
                        /* select channel */
                        ADC_UINT8_ADMUX_REG |= Copy__Uint8ChannelId;
                        /* start conversion */
                        SET_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADSC);
                        /* waiting flag = 1 */
                        while ((!GET_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADIF)) && (Local__Uint32TimeOutCounter < ADC__UINT32_TIME_OUT_RATE))
     998:	e6 e2       	ldi	r30, 0x26	; 38
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	80 81       	ld	r24, Z
     99e:	82 95       	swap	r24
     9a0:	8f 70       	andi	r24, 0x0F	; 15
     9a2:	88 2f       	mov	r24, r24
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	81 70       	andi	r24, 0x01	; 1
     9a8:	90 70       	andi	r25, 0x00	; 0
     9aa:	00 97       	sbiw	r24, 0x00	; 0
     9ac:	61 f4       	brne	.+24     	; 0x9c6 <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0xa8>
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	9a 81       	ldd	r25, Y+2	; 0x02
     9b2:	ab 81       	ldd	r26, Y+3	; 0x03
     9b4:	bc 81       	ldd	r27, Y+4	; 0x04
     9b6:	80 35       	cpi	r24, 0x50	; 80
     9b8:	23 ec       	ldi	r18, 0xC3	; 195
     9ba:	92 07       	cpc	r25, r18
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	a2 07       	cpc	r26, r18
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	b2 07       	cpc	r27, r18
     9c4:	f0 f2       	brcs	.-68     	; 0x982 <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0x64>
                        {
                                Local__Uint32TimeOutCounter++ ;
                        }
                        if((Local__Uint32TimeOutCounter >= ADC__UINT32_TIME_OUT_RATE) || (GET_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADIF) == 0))
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ca:	ab 81       	ldd	r26, Y+3	; 0x03
     9cc:	bc 81       	ldd	r27, Y+4	; 0x04
     9ce:	80 35       	cpi	r24, 0x50	; 80
     9d0:	23 ec       	ldi	r18, 0xC3	; 195
     9d2:	92 07       	cpc	r25, r18
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	a2 07       	cpc	r26, r18
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	b2 07       	cpc	r27, r18
     9dc:	58 f4       	brcc	.+22     	; 0x9f4 <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0xd6>
     9de:	e6 e2       	ldi	r30, 0x26	; 38
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	82 95       	swap	r24
     9e6:	8f 70       	andi	r24, 0x0F	; 15
     9e8:	88 2f       	mov	r24, r24
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	81 70       	andi	r24, 0x01	; 1
     9ee:	90 70       	andi	r25, 0x00	; 0
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	19 f4       	brne	.+6      	; 0x9fa <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0xdc>
                        {
                        		Local_CheckStausReturnValue =CHECK_FAIL;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	8d 83       	std	Y+5, r24	; 0x05
     9f8:	12 c0       	rjmp	.+36     	; 0xa1e <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0x100>
                        }
                        else
                        {
                          *Copy__Uint8DigitalValue = ADC_UINT16_ADCL_REG;
     9fa:	e4 e2       	ldi	r30, 0x24	; 36
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	80 81       	ld	r24, Z
     a00:	91 81       	ldd	r25, Z+1	; 0x01
     a02:	ef 81       	ldd	r30, Y+7	; 0x07
     a04:	f8 85       	ldd	r31, Y+8	; 0x08
     a06:	91 83       	std	Z+1, r25	; 0x01
     a08:	80 83       	st	Z, r24
                          /* Clear Flag */
                          SET_BIT(ADC_UINT8_ADCSRA_REG,ADCSRA_ADIF);
     a0a:	a6 e2       	ldi	r26, 0x26	; 38
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	e6 e2       	ldi	r30, 0x26	; 38
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	80 61       	ori	r24, 0x10	; 16
     a16:	8c 93       	st	X, r24
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <ADC_CheckStatusGetDigigtalValueSynchNonBlocking+0x100>
                        }
             }
             else
             {
                Local_CheckStausReturnValue = CHECK_FAIL;                     
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	8d 83       	std	Y+5, r24	; 0x05
             }
             return Local_CheckStausReturnValue;
     a1e:	8d 81       	ldd	r24, Y+5	; 0x05
             
}
     a20:	28 96       	adiw	r28, 0x08	; 8
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	f8 94       	cli
     a26:	de bf       	out	0x3e, r29	; 62
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	cd bf       	out	0x3d, r28	; 61
     a2c:	cf 91       	pop	r28
     a2e:	df 91       	pop	r29
     a30:	08 95       	ret

00000a32 <DIO_VoidInit>:

/* HAL */

/* Defination Of Function  */
Void DIO_VoidInit(Void)
{
     a32:	df 93       	push	r29
     a34:	cf 93       	push	r28
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62

        /* intial direction */

        DDRA__UINT8_REG = CONC(DIO__UINT8_PA7_INITIAL_DIRECTION, DIO__UINT8_PA6_INITIAL_DIRECTION, DIO__UINT8_PA5_INITIAL_DIRECTION, DIO__UINT8_PA4_INITIAL_DIRECTION, DIO__UINT8_PA3_INITIAL_DIRECTION, DIO__UINT8_PA2_INITIAL_DIRECTION, DIO__UINT8_PA1_INITIAL_DIRECTION, DIO__UINT8_PA0_INITIAL_DIRECTION);
     a3a:	ea e3       	ldi	r30, 0x3A	; 58
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	8e ef       	ldi	r24, 0xFE	; 254
     a40:	80 83       	st	Z, r24
        DDRB__UINT8_REG = CONC(DIO__UINT8_PB7_INITIAL_DIRECTION, DIO__UINT8_PB6_INITIAL_DIRECTION, DIO__UINT8_PB5_INITIAL_DIRECTION, DIO__UINT8_PB4_INITIAL_DIRECTION, DIO__UINT8_PB3_INITIAL_DIRECTION, DIO__UINT8_PB2_INITIAL_DIRECTION, DIO__UINT8_PB1_INITIAL_DIRECTION, DIO__UINT8_PB0_INITIAL_DIRECTION);
     a42:	e7 e3       	ldi	r30, 0x37	; 55
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	8c e0       	ldi	r24, 0x0C	; 12
     a48:	80 83       	st	Z, r24
        DDRC__UINT8_REG = CONC(DIO__UINT8_PC7_INITIAL_DIRECTION, DIO__UINT8_PC6_INITIAL_DIRECTION, DIO__UINT8_PC5_INITIAL_DIRECTION, DIO__UINT8_PC4_INITIAL_DIRECTION, DIO__UINT8_PC3_INITIAL_DIRECTION, DIO__UINT8_PC2_INITIAL_DIRECTION, DIO__UINT8_PC1_INITIAL_DIRECTION, DIO__UINT8_PC0_INITIAL_DIRECTION);
     a4a:	e4 e3       	ldi	r30, 0x34	; 52
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	10 82       	st	Z, r1
        DDRD__UINT8_REG = CONC(DIO__UINT8_PD7_INITIAL_DIRECTION, DIO__UINT8_PD6_INITIAL_DIRECTION, DIO__UINT8_PD5_INITIAL_DIRECTION, DIO__UINT8_PD4_INITIAL_DIRECTION, DIO__UINT8_PD3_INITIAL_DIRECTION, DIO__UINT8_PD2_INITIAL_DIRECTION, DIO__UINT8_PD1_INITIAL_DIRECTION, DIO__UINT8_PD0_INITIAL_DIRECTION);
     a50:	e1 e3       	ldi	r30, 0x31	; 49
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	8f ef       	ldi	r24, 0xFF	; 255
     a56:	80 83       	st	Z, r24

        /* initial Value */

        PORTA__UINT8_REG = CONC(DIO__UINT8_PA7_INITIAL_VALUE, DIO__UINT8_PA6_INITIAL_VALUE, DIO__UINT8_PA5_INITIAL_VALUE, DIO__UINT8_PA4_INITIAL_VALUE, DIO__UINT8_PA3_INITIAL_VALUE, DIO__UINT8_PA2_INITIAL_VALUE, DIO__UINT8_PA1_INITIAL_VALUE, DIO__UINT8_PA0_INITIAL_VALUE);
     a58:	eb e3       	ldi	r30, 0x3B	; 59
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	10 82       	st	Z, r1
        PORTB__UINT8_REG = CONC(DIO__UINT8_PB7_INITIAL_VALUE, DIO__UINT8_PB6_INITIAL_VALUE, DIO__UINT8_PB5_INITIAL_VALUE, DIO__UINT8_PB4_INITIAL_VALUE, DIO__UINT8_PB3_INITIAL_VALUE, DIO__UINT8_PB2_INITIAL_VALUE, DIO__UINT8_PB1_INITIAL_VALUE, DIO__UINT8_PB0_INITIAL_VALUE);
     a5e:	e8 e3       	ldi	r30, 0x38	; 56
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	10 82       	st	Z, r1
        PORTC__UINT8_REG = CONC(DIO__UINT8_PC7_INITIAL_VALUE, DIO__UINT8_PC6_INITIAL_VALUE, DIO__UINT8_PC5_INITIAL_VALUE, DIO__UINT8_PC4_INITIAL_VALUE, DIO__UINT8_PC3_INITIAL_VALUE, DIO__UINT8_PC2_INITIAL_VALUE, DIO__UINT8_PC1_INITIAL_VALUE, DIO__UINT8_PC0_INITIAL_VALUE);
     a64:	e5 e3       	ldi	r30, 0x35	; 53
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	10 82       	st	Z, r1
        PORTD__UINT8_REG = CONC(DIO__UINT8_PD7_INITIAL_VALUE, DIO__UINT8_PD6_INITIAL_VALUE, DIO__UINT8_PD5_INITIAL_VALUE, DIO__UINT8_PD4_INITIAL_VALUE, DIO__UINT8_PD3_INITIAL_VALUE, DIO__UINT8_PD2_INITIAL_VALUE, DIO__UINT8_PD1_INITIAL_VALUE, DIO__UINT8_PD0_INITIAL_VALUE);
     a6a:	e2 e3       	ldi	r30, 0x32	; 50
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	10 82       	st	Z, r1
}
     a70:	cf 91       	pop	r28
     a72:	df 91       	pop	r29
     a74:	08 95       	ret

00000a76 <DIO__CheckStatusSetPinDirection>:

CheckStatus DIO__CheckStatusSetPinDirection(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 Copy__uint8PinDirection)
{
     a76:	df 93       	push	r29
     a78:	cf 93       	push	r28
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
     a7e:	2f 97       	sbiw	r28, 0x0f	; 15
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
     a8a:	8a 83       	std	Y+2, r24	; 0x02
     a8c:	6b 83       	std	Y+3, r22	; 0x03
     a8e:	4c 83       	std	Y+4, r20	; 0x04
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
     a90:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pin  Direction
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && ((Copy__uint8PinDirection == DIO__UINT8_OUTPUT) || (Copy__uint8PinDirection == DIO__UINT8_INPUT)))
     a92:	8a 81       	ldd	r24, Y+2	; 0x02
     a94:	84 30       	cpi	r24, 0x04	; 4
     a96:	08 f0       	brcs	.+2      	; 0xa9a <DIO__CheckStatusSetPinDirection+0x24>
     a98:	0e c1       	rjmp	.+540    	; 0xcb6 <DIO__CheckStatusSetPinDirection+0x240>
     a9a:	8b 81       	ldd	r24, Y+3	; 0x03
     a9c:	88 30       	cpi	r24, 0x08	; 8
     a9e:	08 f0       	brcs	.+2      	; 0xaa2 <DIO__CheckStatusSetPinDirection+0x2c>
     aa0:	0a c1       	rjmp	.+532    	; 0xcb6 <DIO__CheckStatusSetPinDirection+0x240>
     aa2:	8c 81       	ldd	r24, Y+4	; 0x04
     aa4:	81 30       	cpi	r24, 0x01	; 1
     aa6:	21 f0       	breq	.+8      	; 0xab0 <DIO__CheckStatusSetPinDirection+0x3a>
     aa8:	8c 81       	ldd	r24, Y+4	; 0x04
     aaa:	88 23       	and	r24, r24
     aac:	09 f0       	breq	.+2      	; 0xab0 <DIO__CheckStatusSetPinDirection+0x3a>
     aae:	03 c1       	rjmp	.+518    	; 0xcb6 <DIO__CheckStatusSetPinDirection+0x240>
        {
                switch (Copy__uint8PortId)
     ab0:	8a 81       	ldd	r24, Y+2	; 0x02
     ab2:	28 2f       	mov	r18, r24
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	3f 87       	std	Y+15, r19	; 0x0f
     ab8:	2e 87       	std	Y+14, r18	; 0x0e
     aba:	8e 85       	ldd	r24, Y+14	; 0x0e
     abc:	9f 85       	ldd	r25, Y+15	; 0x0f
     abe:	81 30       	cpi	r24, 0x01	; 1
     ac0:	91 05       	cpc	r25, r1
     ac2:	09 f4       	brne	.+2      	; 0xac6 <DIO__CheckStatusSetPinDirection+0x50>
     ac4:	4f c0       	rjmp	.+158    	; 0xb64 <DIO__CheckStatusSetPinDirection+0xee>
     ac6:	2e 85       	ldd	r18, Y+14	; 0x0e
     ac8:	3f 85       	ldd	r19, Y+15	; 0x0f
     aca:	22 30       	cpi	r18, 0x02	; 2
     acc:	31 05       	cpc	r19, r1
     ace:	2c f4       	brge	.+10     	; 0xada <DIO__CheckStatusSetPinDirection+0x64>
     ad0:	8e 85       	ldd	r24, Y+14	; 0x0e
     ad2:	9f 85       	ldd	r25, Y+15	; 0x0f
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	71 f0       	breq	.+28     	; 0xaf4 <DIO__CheckStatusSetPinDirection+0x7e>
     ad8:	eb c0       	rjmp	.+470    	; 0xcb0 <DIO__CheckStatusSetPinDirection+0x23a>
     ada:	2e 85       	ldd	r18, Y+14	; 0x0e
     adc:	3f 85       	ldd	r19, Y+15	; 0x0f
     ade:	22 30       	cpi	r18, 0x02	; 2
     ae0:	31 05       	cpc	r19, r1
     ae2:	09 f4       	brne	.+2      	; 0xae6 <DIO__CheckStatusSetPinDirection+0x70>
     ae4:	77 c0       	rjmp	.+238    	; 0xbd4 <DIO__CheckStatusSetPinDirection+0x15e>
     ae6:	8e 85       	ldd	r24, Y+14	; 0x0e
     ae8:	9f 85       	ldd	r25, Y+15	; 0x0f
     aea:	83 30       	cpi	r24, 0x03	; 3
     aec:	91 05       	cpc	r25, r1
     aee:	09 f4       	brne	.+2      	; 0xaf2 <DIO__CheckStatusSetPinDirection+0x7c>
     af0:	a9 c0       	rjmp	.+338    	; 0xc44 <DIO__CheckStatusSetPinDirection+0x1ce>
     af2:	de c0       	rjmp	.+444    	; 0xcb0 <DIO__CheckStatusSetPinDirection+0x23a>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PinDirection)
     af4:	8c 81       	ldd	r24, Y+4	; 0x04
     af6:	28 2f       	mov	r18, r24
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	3d 87       	std	Y+13, r19	; 0x0d
     afc:	2c 87       	std	Y+12, r18	; 0x0c
     afe:	8c 85       	ldd	r24, Y+12	; 0x0c
     b00:	9d 85       	ldd	r25, Y+13	; 0x0d
     b02:	00 97       	sbiw	r24, 0x00	; 0
     b04:	d1 f0       	breq	.+52     	; 0xb3a <DIO__CheckStatusSetPinDirection+0xc4>
     b06:	2c 85       	ldd	r18, Y+12	; 0x0c
     b08:	3d 85       	ldd	r19, Y+13	; 0x0d
     b0a:	21 30       	cpi	r18, 0x01	; 1
     b0c:	31 05       	cpc	r19, r1
     b0e:	09 f0       	breq	.+2      	; 0xb12 <DIO__CheckStatusSetPinDirection+0x9c>
     b10:	cf c0       	rjmp	.+414    	; 0xcb0 <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRA__UINT8_REG, Copy__uint8PinId);
     b12:	aa e3       	ldi	r26, 0x3A	; 58
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	ea e3       	ldi	r30, 0x3A	; 58
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	48 2f       	mov	r20, r24
     b1e:	8b 81       	ldd	r24, Y+3	; 0x03
     b20:	28 2f       	mov	r18, r24
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	02 2e       	mov	r0, r18
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <DIO__CheckStatusSetPinDirection+0xba>
     b2c:	88 0f       	add	r24, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	0a 94       	dec	r0
     b32:	e2 f7       	brpl	.-8      	; 0xb2c <DIO__CheckStatusSetPinDirection+0xb6>
     b34:	84 2b       	or	r24, r20
     b36:	8c 93       	st	X, r24
     b38:	bb c0       	rjmp	.+374    	; 0xcb0 <DIO__CheckStatusSetPinDirection+0x23a>
                                break;

                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRA__UINT8_REG, Copy__uint8PinId);
     b3a:	aa e3       	ldi	r26, 0x3A	; 58
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	ea e3       	ldi	r30, 0x3A	; 58
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	48 2f       	mov	r20, r24
     b46:	8b 81       	ldd	r24, Y+3	; 0x03
     b48:	28 2f       	mov	r18, r24
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	02 2e       	mov	r0, r18
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <DIO__CheckStatusSetPinDirection+0xe2>
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	0a 94       	dec	r0
     b5a:	e2 f7       	brpl	.-8      	; 0xb54 <DIO__CheckStatusSetPinDirection+0xde>
     b5c:	80 95       	com	r24
     b5e:	84 23       	and	r24, r20
     b60:	8c 93       	st	X, r24
     b62:	a6 c0       	rjmp	.+332    	; 0xcb0 <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PinDirection)
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	28 2f       	mov	r18, r24
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	3b 87       	std	Y+11, r19	; 0x0b
     b6c:	2a 87       	std	Y+10, r18	; 0x0a
     b6e:	8a 85       	ldd	r24, Y+10	; 0x0a
     b70:	9b 85       	ldd	r25, Y+11	; 0x0b
     b72:	00 97       	sbiw	r24, 0x00	; 0
     b74:	d1 f0       	breq	.+52     	; 0xbaa <DIO__CheckStatusSetPinDirection+0x134>
     b76:	2a 85       	ldd	r18, Y+10	; 0x0a
     b78:	3b 85       	ldd	r19, Y+11	; 0x0b
     b7a:	21 30       	cpi	r18, 0x01	; 1
     b7c:	31 05       	cpc	r19, r1
     b7e:	09 f0       	breq	.+2      	; 0xb82 <DIO__CheckStatusSetPinDirection+0x10c>
     b80:	97 c0       	rjmp	.+302    	; 0xcb0 <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRB__UINT8_REG, Copy__uint8PinId);
     b82:	a7 e3       	ldi	r26, 0x37	; 55
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e7 e3       	ldi	r30, 0x37	; 55
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	48 2f       	mov	r20, r24
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	28 2f       	mov	r18, r24
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	02 2e       	mov	r0, r18
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <DIO__CheckStatusSetPinDirection+0x12a>
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	0a 94       	dec	r0
     ba2:	e2 f7       	brpl	.-8      	; 0xb9c <DIO__CheckStatusSetPinDirection+0x126>
     ba4:	84 2b       	or	r24, r20
     ba6:	8c 93       	st	X, r24
     ba8:	83 c0       	rjmp	.+262    	; 0xcb0 <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRB__UINT8_REG, Copy__uint8PinId);
     baa:	a7 e3       	ldi	r26, 0x37	; 55
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e7 e3       	ldi	r30, 0x37	; 55
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	48 2f       	mov	r20, r24
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	02 2e       	mov	r0, r18
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <DIO__CheckStatusSetPinDirection+0x152>
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	0a 94       	dec	r0
     bca:	e2 f7       	brpl	.-8      	; 0xbc4 <DIO__CheckStatusSetPinDirection+0x14e>
     bcc:	80 95       	com	r24
     bce:	84 23       	and	r24, r20
     bd0:	8c 93       	st	X, r24
     bd2:	6e c0       	rjmp	.+220    	; 0xcb0 <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PinDirection)
     bd4:	8c 81       	ldd	r24, Y+4	; 0x04
     bd6:	28 2f       	mov	r18, r24
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	39 87       	std	Y+9, r19	; 0x09
     bdc:	28 87       	std	Y+8, r18	; 0x08
     bde:	88 85       	ldd	r24, Y+8	; 0x08
     be0:	99 85       	ldd	r25, Y+9	; 0x09
     be2:	00 97       	sbiw	r24, 0x00	; 0
     be4:	d1 f0       	breq	.+52     	; 0xc1a <DIO__CheckStatusSetPinDirection+0x1a4>
     be6:	28 85       	ldd	r18, Y+8	; 0x08
     be8:	39 85       	ldd	r19, Y+9	; 0x09
     bea:	21 30       	cpi	r18, 0x01	; 1
     bec:	31 05       	cpc	r19, r1
     bee:	09 f0       	breq	.+2      	; 0xbf2 <DIO__CheckStatusSetPinDirection+0x17c>
     bf0:	5f c0       	rjmp	.+190    	; 0xcb0 <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRC__UINT8_REG, Copy__uint8PinId);
     bf2:	a4 e3       	ldi	r26, 0x34	; 52
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e4 e3       	ldi	r30, 0x34	; 52
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	48 2f       	mov	r20, r24
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	28 2f       	mov	r18, r24
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	02 2e       	mov	r0, r18
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <DIO__CheckStatusSetPinDirection+0x19a>
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	0a 94       	dec	r0
     c12:	e2 f7       	brpl	.-8      	; 0xc0c <DIO__CheckStatusSetPinDirection+0x196>
     c14:	84 2b       	or	r24, r20
     c16:	8c 93       	st	X, r24
     c18:	4b c0       	rjmp	.+150    	; 0xcb0 <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRC__UINT8_REG, Copy__uint8PinId);
     c1a:	a4 e3       	ldi	r26, 0x34	; 52
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e4 e3       	ldi	r30, 0x34	; 52
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	48 2f       	mov	r20, r24
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	28 2f       	mov	r18, r24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	02 2e       	mov	r0, r18
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <DIO__CheckStatusSetPinDirection+0x1c2>
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	0a 94       	dec	r0
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <DIO__CheckStatusSetPinDirection+0x1be>
     c3c:	80 95       	com	r24
     c3e:	84 23       	and	r24, r20
     c40:	8c 93       	st	X, r24
     c42:	36 c0       	rjmp	.+108    	; 0xcb0 <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PinDirection)
     c44:	8c 81       	ldd	r24, Y+4	; 0x04
     c46:	28 2f       	mov	r18, r24
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	3f 83       	std	Y+7, r19	; 0x07
     c4c:	2e 83       	std	Y+6, r18	; 0x06
     c4e:	8e 81       	ldd	r24, Y+6	; 0x06
     c50:	9f 81       	ldd	r25, Y+7	; 0x07
     c52:	00 97       	sbiw	r24, 0x00	; 0
     c54:	c9 f0       	breq	.+50     	; 0xc88 <DIO__CheckStatusSetPinDirection+0x212>
     c56:	2e 81       	ldd	r18, Y+6	; 0x06
     c58:	3f 81       	ldd	r19, Y+7	; 0x07
     c5a:	21 30       	cpi	r18, 0x01	; 1
     c5c:	31 05       	cpc	r19, r1
     c5e:	41 f5       	brne	.+80     	; 0xcb0 <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRD__UINT8_REG, Copy__uint8PinId);
     c60:	a1 e3       	ldi	r26, 0x31	; 49
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e1 e3       	ldi	r30, 0x31	; 49
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	48 2f       	mov	r20, r24
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	28 2f       	mov	r18, r24
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	02 2e       	mov	r0, r18
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <DIO__CheckStatusSetPinDirection+0x208>
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	0a 94       	dec	r0
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <DIO__CheckStatusSetPinDirection+0x204>
     c82:	84 2b       	or	r24, r20
     c84:	8c 93       	st	X, r24
     c86:	14 c0       	rjmp	.+40     	; 0xcb0 <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRD__UINT8_REG, Copy__uint8PinId);
     c88:	a1 e3       	ldi	r26, 0x31	; 49
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e1 e3       	ldi	r30, 0x31	; 49
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	48 2f       	mov	r20, r24
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 2e       	mov	r0, r18
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <DIO__CheckStatusSetPinDirection+0x230>
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	0a 94       	dec	r0
     ca8:	e2 f7       	brpl	.-8      	; 0xca2 <DIO__CheckStatusSetPinDirection+0x22c>
     caa:	80 95       	com	r24
     cac:	84 23       	and	r24, r20
     cae:	8c 93       	st	X, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
     cb0:	39 81       	ldd	r19, Y+1	; 0x01
     cb2:	3d 83       	std	Y+5, r19	; 0x05
     cb4:	04 c0       	rjmp	.+8      	; 0xcbe <DIO__CheckStatusSetPinDirection+0x248>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	8d 83       	std	Y+5, r24	; 0x05
     cbe:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
     cc0:	2f 96       	adiw	r28, 0x0f	; 15
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <DIO__CheckStatusSetPinValue>:

CheckStatus DIO__CheckStatusSetPinValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 Copy__uint8PinValue)
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	2f 97       	sbiw	r28, 0x0f	; 15
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	8a 83       	std	Y+2, r24	; 0x02
     ce8:	6b 83       	std	Y+3, r22	; 0x03
     cea:	4c 83       	std	Y+4, r20	; 0x04
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
     cec:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pin  Value 
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && ((Copy__uint8PinValue == DIO__UINT8_HIGH) || (Copy__uint8PinValue == DIO__UINT8_LOW)))
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	84 30       	cpi	r24, 0x04	; 4
     cf2:	08 f0       	brcs	.+2      	; 0xcf6 <DIO__CheckStatusSetPinValue+0x24>
     cf4:	0e c1       	rjmp	.+540    	; 0xf12 <DIO__CheckStatusSetPinValue+0x240>
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	88 30       	cpi	r24, 0x08	; 8
     cfa:	08 f0       	brcs	.+2      	; 0xcfe <DIO__CheckStatusSetPinValue+0x2c>
     cfc:	0a c1       	rjmp	.+532    	; 0xf12 <DIO__CheckStatusSetPinValue+0x240>
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	21 f0       	breq	.+8      	; 0xd0c <DIO__CheckStatusSetPinValue+0x3a>
     d04:	8c 81       	ldd	r24, Y+4	; 0x04
     d06:	88 23       	and	r24, r24
     d08:	09 f0       	breq	.+2      	; 0xd0c <DIO__CheckStatusSetPinValue+0x3a>
     d0a:	03 c1       	rjmp	.+518    	; 0xf12 <DIO__CheckStatusSetPinValue+0x240>
        {
                switch (Copy__uint8PortId)
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	3f 87       	std	Y+15, r19	; 0x0f
     d14:	2e 87       	std	Y+14, r18	; 0x0e
     d16:	8e 85       	ldd	r24, Y+14	; 0x0e
     d18:	9f 85       	ldd	r25, Y+15	; 0x0f
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	91 05       	cpc	r25, r1
     d1e:	09 f4       	brne	.+2      	; 0xd22 <DIO__CheckStatusSetPinValue+0x50>
     d20:	4f c0       	rjmp	.+158    	; 0xdc0 <DIO__CheckStatusSetPinValue+0xee>
     d22:	2e 85       	ldd	r18, Y+14	; 0x0e
     d24:	3f 85       	ldd	r19, Y+15	; 0x0f
     d26:	22 30       	cpi	r18, 0x02	; 2
     d28:	31 05       	cpc	r19, r1
     d2a:	2c f4       	brge	.+10     	; 0xd36 <DIO__CheckStatusSetPinValue+0x64>
     d2c:	8e 85       	ldd	r24, Y+14	; 0x0e
     d2e:	9f 85       	ldd	r25, Y+15	; 0x0f
     d30:	00 97       	sbiw	r24, 0x00	; 0
     d32:	71 f0       	breq	.+28     	; 0xd50 <DIO__CheckStatusSetPinValue+0x7e>
     d34:	eb c0       	rjmp	.+470    	; 0xf0c <DIO__CheckStatusSetPinValue+0x23a>
     d36:	2e 85       	ldd	r18, Y+14	; 0x0e
     d38:	3f 85       	ldd	r19, Y+15	; 0x0f
     d3a:	22 30       	cpi	r18, 0x02	; 2
     d3c:	31 05       	cpc	r19, r1
     d3e:	09 f4       	brne	.+2      	; 0xd42 <DIO__CheckStatusSetPinValue+0x70>
     d40:	77 c0       	rjmp	.+238    	; 0xe30 <DIO__CheckStatusSetPinValue+0x15e>
     d42:	8e 85       	ldd	r24, Y+14	; 0x0e
     d44:	9f 85       	ldd	r25, Y+15	; 0x0f
     d46:	83 30       	cpi	r24, 0x03	; 3
     d48:	91 05       	cpc	r25, r1
     d4a:	09 f4       	brne	.+2      	; 0xd4e <DIO__CheckStatusSetPinValue+0x7c>
     d4c:	a9 c0       	rjmp	.+338    	; 0xea0 <DIO__CheckStatusSetPinValue+0x1ce>
     d4e:	de c0       	rjmp	.+444    	; 0xf0c <DIO__CheckStatusSetPinValue+0x23a>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PinValue)
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	3d 87       	std	Y+13, r19	; 0x0d
     d58:	2c 87       	std	Y+12, r18	; 0x0c
     d5a:	8c 85       	ldd	r24, Y+12	; 0x0c
     d5c:	9d 85       	ldd	r25, Y+13	; 0x0d
     d5e:	00 97       	sbiw	r24, 0x00	; 0
     d60:	d1 f0       	breq	.+52     	; 0xd96 <DIO__CheckStatusSetPinValue+0xc4>
     d62:	2c 85       	ldd	r18, Y+12	; 0x0c
     d64:	3d 85       	ldd	r19, Y+13	; 0x0d
     d66:	21 30       	cpi	r18, 0x01	; 1
     d68:	31 05       	cpc	r19, r1
     d6a:	09 f0       	breq	.+2      	; 0xd6e <DIO__CheckStatusSetPinValue+0x9c>
     d6c:	cf c0       	rjmp	.+414    	; 0xf0c <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTA__UINT8_REG, Copy__uint8PinId);
     d6e:	ab e3       	ldi	r26, 0x3B	; 59
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	eb e3       	ldi	r30, 0x3B	; 59
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <DIO__CheckStatusSetPinValue+0xba>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <DIO__CheckStatusSetPinValue+0xb6>
     d90:	84 2b       	or	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	bb c0       	rjmp	.+374    	; 0xf0c <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTA__UINT8_REG, Copy__uint8PinId);
     d96:	ab e3       	ldi	r26, 0x3B	; 59
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	eb e3       	ldi	r30, 0x3B	; 59
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DIO__CheckStatusSetPinValue+0xe2>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <DIO__CheckStatusSetPinValue+0xde>
     db8:	80 95       	com	r24
     dba:	84 23       	and	r24, r20
     dbc:	8c 93       	st	X, r24
     dbe:	a6 c0       	rjmp	.+332    	; 0xf0c <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PinValue)
     dc0:	8c 81       	ldd	r24, Y+4	; 0x04
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	3b 87       	std	Y+11, r19	; 0x0b
     dc8:	2a 87       	std	Y+10, r18	; 0x0a
     dca:	8a 85       	ldd	r24, Y+10	; 0x0a
     dcc:	9b 85       	ldd	r25, Y+11	; 0x0b
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	d1 f0       	breq	.+52     	; 0xe06 <DIO__CheckStatusSetPinValue+0x134>
     dd2:	2a 85       	ldd	r18, Y+10	; 0x0a
     dd4:	3b 85       	ldd	r19, Y+11	; 0x0b
     dd6:	21 30       	cpi	r18, 0x01	; 1
     dd8:	31 05       	cpc	r19, r1
     dda:	09 f0       	breq	.+2      	; 0xdde <DIO__CheckStatusSetPinValue+0x10c>
     ddc:	97 c0       	rjmp	.+302    	; 0xf0c <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTB__UINT8_REG, Copy__uint8PinId);
     dde:	a8 e3       	ldi	r26, 0x38	; 56
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e8 e3       	ldi	r30, 0x38	; 56
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO__CheckStatusSetPinValue+0x12a>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <DIO__CheckStatusSetPinValue+0x126>
     e00:	84 2b       	or	r24, r20
     e02:	8c 93       	st	X, r24
     e04:	83 c0       	rjmp	.+262    	; 0xf0c <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTB__UINT8_REG, Copy__uint8PinId);
     e06:	a8 e3       	ldi	r26, 0x38	; 56
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e8 e3       	ldi	r30, 0x38	; 56
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO__CheckStatusSetPinValue+0x152>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO__CheckStatusSetPinValue+0x14e>
     e28:	80 95       	com	r24
     e2a:	84 23       	and	r24, r20
     e2c:	8c 93       	st	X, r24
     e2e:	6e c0       	rjmp	.+220    	; 0xf0c <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PinValue)
     e30:	8c 81       	ldd	r24, Y+4	; 0x04
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	39 87       	std	Y+9, r19	; 0x09
     e38:	28 87       	std	Y+8, r18	; 0x08
     e3a:	88 85       	ldd	r24, Y+8	; 0x08
     e3c:	99 85       	ldd	r25, Y+9	; 0x09
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	d1 f0       	breq	.+52     	; 0xe76 <DIO__CheckStatusSetPinValue+0x1a4>
     e42:	28 85       	ldd	r18, Y+8	; 0x08
     e44:	39 85       	ldd	r19, Y+9	; 0x09
     e46:	21 30       	cpi	r18, 0x01	; 1
     e48:	31 05       	cpc	r19, r1
     e4a:	09 f0       	breq	.+2      	; 0xe4e <DIO__CheckStatusSetPinValue+0x17c>
     e4c:	5f c0       	rjmp	.+190    	; 0xf0c <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTC__UINT8_REG, Copy__uint8PinId);
     e4e:	a5 e3       	ldi	r26, 0x35	; 53
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e5 e3       	ldi	r30, 0x35	; 53
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 2e       	mov	r0, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO__CheckStatusSetPinValue+0x19a>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO__CheckStatusSetPinValue+0x196>
     e70:	84 2b       	or	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	4b c0       	rjmp	.+150    	; 0xf0c <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTC__UINT8_REG, Copy__uint8PinId);
     e76:	a5 e3       	ldi	r26, 0x35	; 53
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e5 e3       	ldi	r30, 0x35	; 53
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO__CheckStatusSetPinValue+0x1c2>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO__CheckStatusSetPinValue+0x1be>
     e98:	80 95       	com	r24
     e9a:	84 23       	and	r24, r20
     e9c:	8c 93       	st	X, r24
     e9e:	36 c0       	rjmp	.+108    	; 0xf0c <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PinValue)
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	3f 83       	std	Y+7, r19	; 0x07
     ea8:	2e 83       	std	Y+6, r18	; 0x06
     eaa:	8e 81       	ldd	r24, Y+6	; 0x06
     eac:	9f 81       	ldd	r25, Y+7	; 0x07
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	c9 f0       	breq	.+50     	; 0xee4 <DIO__CheckStatusSetPinValue+0x212>
     eb2:	2e 81       	ldd	r18, Y+6	; 0x06
     eb4:	3f 81       	ldd	r19, Y+7	; 0x07
     eb6:	21 30       	cpi	r18, 0x01	; 1
     eb8:	31 05       	cpc	r19, r1
     eba:	41 f5       	brne	.+80     	; 0xf0c <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTD__UINT8_REG, Copy__uint8PinId);
     ebc:	a2 e3       	ldi	r26, 0x32	; 50
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e2 e3       	ldi	r30, 0x32	; 50
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <DIO__CheckStatusSetPinValue+0x208>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <DIO__CheckStatusSetPinValue+0x204>
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	14 c0       	rjmp	.+40     	; 0xf0c <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTD__UINT8_REG, Copy__uint8PinId);
     ee4:	a2 e3       	ldi	r26, 0x32	; 50
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e2 e3       	ldi	r30, 0x32	; 50
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO__CheckStatusSetPinValue+0x230>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO__CheckStatusSetPinValue+0x22c>
     f06:	80 95       	com	r24
     f08:	84 23       	and	r24, r20
     f0a:	8c 93       	st	X, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
     f0c:	39 81       	ldd	r19, Y+1	; 0x01
     f0e:	3d 83       	std	Y+5, r19	; 0x05
     f10:	04 c0       	rjmp	.+8      	; 0xf1a <DIO__CheckStatusSetPinValue+0x248>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	8d 83       	std	Y+5, r24	; 0x05
     f1a:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
     f1c:	2f 96       	adiw	r28, 0x0f	; 15
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <DIO__CheckStatusGetPinValue>:

CheckStatus DIO__CheckStatusGetPinValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 *Copy_p_uint8ReturnPinValue)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	28 97       	sbiw	r28, 0x08	; 8
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	8a 83       	std	Y+2, r24	; 0x02
     f44:	6b 83       	std	Y+3, r22	; 0x03
     f46:	5d 83       	std	Y+5, r21	; 0x05
     f48:	4c 83       	std	Y+4, r20	; 0x04

        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
     f4a:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pointer != NULL
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && (Copy_p_uint8ReturnPinValue != NULL))
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	84 30       	cpi	r24, 0x04	; 4
     f50:	08 f0       	brcs	.+2      	; 0xf54 <DIO__CheckStatusGetPinValue+0x26>
     f52:	ec c0       	rjmp	.+472    	; 0x112c <DIO__CheckStatusGetPinValue+0x1fe>
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	88 30       	cpi	r24, 0x08	; 8
     f58:	08 f0       	brcs	.+2      	; 0xf5c <DIO__CheckStatusGetPinValue+0x2e>
     f5a:	e8 c0       	rjmp	.+464    	; 0x112c <DIO__CheckStatusGetPinValue+0x1fe>
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	9d 81       	ldd	r25, Y+5	; 0x05
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	09 f4       	brne	.+2      	; 0xf66 <DIO__CheckStatusGetPinValue+0x38>
     f64:	e3 c0       	rjmp	.+454    	; 0x112c <DIO__CheckStatusGetPinValue+0x1fe>
        {
                switch (Copy__uint8PortId)
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	38 87       	std	Y+8, r19	; 0x08
     f6e:	2f 83       	std	Y+7, r18	; 0x07
     f70:	4f 81       	ldd	r20, Y+7	; 0x07
     f72:	58 85       	ldd	r21, Y+8	; 0x08
     f74:	41 30       	cpi	r20, 0x01	; 1
     f76:	51 05       	cpc	r21, r1
     f78:	09 f4       	brne	.+2      	; 0xf7c <DIO__CheckStatusGetPinValue+0x4e>
     f7a:	48 c0       	rjmp	.+144    	; 0x100c <DIO__CheckStatusGetPinValue+0xde>
     f7c:	8f 81       	ldd	r24, Y+7	; 0x07
     f7e:	98 85       	ldd	r25, Y+8	; 0x08
     f80:	82 30       	cpi	r24, 0x02	; 2
     f82:	91 05       	cpc	r25, r1
     f84:	34 f4       	brge	.+12     	; 0xf92 <DIO__CheckStatusGetPinValue+0x64>
     f86:	2f 81       	ldd	r18, Y+7	; 0x07
     f88:	38 85       	ldd	r19, Y+8	; 0x08
     f8a:	21 15       	cp	r18, r1
     f8c:	31 05       	cpc	r19, r1
     f8e:	71 f0       	breq	.+28     	; 0xfac <DIO__CheckStatusGetPinValue+0x7e>
     f90:	ca c0       	rjmp	.+404    	; 0x1126 <DIO__CheckStatusGetPinValue+0x1f8>
     f92:	4f 81       	ldd	r20, Y+7	; 0x07
     f94:	58 85       	ldd	r21, Y+8	; 0x08
     f96:	42 30       	cpi	r20, 0x02	; 2
     f98:	51 05       	cpc	r21, r1
     f9a:	09 f4       	brne	.+2      	; 0xf9e <DIO__CheckStatusGetPinValue+0x70>
     f9c:	67 c0       	rjmp	.+206    	; 0x106c <DIO__CheckStatusGetPinValue+0x13e>
     f9e:	8f 81       	ldd	r24, Y+7	; 0x07
     fa0:	98 85       	ldd	r25, Y+8	; 0x08
     fa2:	83 30       	cpi	r24, 0x03	; 3
     fa4:	91 05       	cpc	r25, r1
     fa6:	09 f4       	brne	.+2      	; 0xfaa <DIO__CheckStatusGetPinValue+0x7c>
     fa8:	90 c0       	rjmp	.+288    	; 0x10ca <DIO__CheckStatusGetPinValue+0x19c>
     faa:	bd c0       	rjmp	.+378    	; 0x1126 <DIO__CheckStatusGetPinValue+0x1f8>
                {
                case DIO__UINT8_PORTA:
                        if (GET_BIT(PINA__UINT8_REG, Copy__uint8PinId) == 0)
     fac:	e9 e3       	ldi	r30, 0x39	; 57
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	88 2f       	mov	r24, r24
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	a9 01       	movw	r20, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO__CheckStatusGetPinValue+0x96>
     fc0:	55 95       	asr	r21
     fc2:	47 95       	ror	r20
     fc4:	8a 95       	dec	r24
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO__CheckStatusGetPinValue+0x92>
     fc8:	ca 01       	movw	r24, r20
     fca:	81 70       	andi	r24, 0x01	; 1
     fcc:	90 70       	andi	r25, 0x00	; 0
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	21 f4       	brne	.+8      	; 0xfda <DIO__CheckStatusGetPinValue+0xac>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
     fd2:	ec 81       	ldd	r30, Y+4	; 0x04
     fd4:	fd 81       	ldd	r31, Y+5	; 0x05
     fd6:	10 82       	st	Z, r1
     fd8:	a6 c0       	rjmp	.+332    	; 0x1126 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINA__UINT8_REG, Copy__uint8PinId) != 0)
     fda:	e9 e3       	ldi	r30, 0x39	; 57
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	88 2f       	mov	r24, r24
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	a9 01       	movw	r20, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO__CheckStatusGetPinValue+0xc4>
     fee:	55 95       	asr	r21
     ff0:	47 95       	ror	r20
     ff2:	8a 95       	dec	r24
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <DIO__CheckStatusGetPinValue+0xc0>
     ff6:	ca 01       	movw	r24, r20
     ff8:	81 70       	andi	r24, 0x01	; 1
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	88 23       	and	r24, r24
     ffe:	09 f4       	brne	.+2      	; 0x1002 <DIO__CheckStatusGetPinValue+0xd4>
    1000:	92 c0       	rjmp	.+292    	; 0x1126 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    1002:	ec 81       	ldd	r30, Y+4	; 0x04
    1004:	fd 81       	ldd	r31, Y+5	; 0x05
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	80 83       	st	Z, r24
    100a:	8d c0       	rjmp	.+282    	; 0x1126 <DIO__CheckStatusGetPinValue+0x1f8>
                                /* DO NOTHING */
                        }

                        break;
                case DIO__UINT8_PORTB:
                        if (GET_BIT(PINB__UINT8_REG, Copy__uint8PinId) == 0)
    100c:	e6 e3       	ldi	r30, 0x36	; 54
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	88 2f       	mov	r24, r24
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a9 01       	movw	r20, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DIO__CheckStatusGetPinValue+0xf6>
    1020:	55 95       	asr	r21
    1022:	47 95       	ror	r20
    1024:	8a 95       	dec	r24
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <DIO__CheckStatusGetPinValue+0xf2>
    1028:	ca 01       	movw	r24, r20
    102a:	81 70       	andi	r24, 0x01	; 1
    102c:	90 70       	andi	r25, 0x00	; 0
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	21 f4       	brne	.+8      	; 0x103a <DIO__CheckStatusGetPinValue+0x10c>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    1032:	ec 81       	ldd	r30, Y+4	; 0x04
    1034:	fd 81       	ldd	r31, Y+5	; 0x05
    1036:	10 82       	st	Z, r1
    1038:	76 c0       	rjmp	.+236    	; 0x1126 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINB__UINT8_REG, Copy__uint8PinId) != 0)
    103a:	e6 e3       	ldi	r30, 0x36	; 54
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	a9 01       	movw	r20, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO__CheckStatusGetPinValue+0x124>
    104e:	55 95       	asr	r21
    1050:	47 95       	ror	r20
    1052:	8a 95       	dec	r24
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO__CheckStatusGetPinValue+0x120>
    1056:	ca 01       	movw	r24, r20
    1058:	81 70       	andi	r24, 0x01	; 1
    105a:	90 70       	andi	r25, 0x00	; 0
    105c:	88 23       	and	r24, r24
    105e:	09 f4       	brne	.+2      	; 0x1062 <DIO__CheckStatusGetPinValue+0x134>
    1060:	62 c0       	rjmp	.+196    	; 0x1126 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    1062:	ec 81       	ldd	r30, Y+4	; 0x04
    1064:	fd 81       	ldd	r31, Y+5	; 0x05
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	80 83       	st	Z, r24
    106a:	5d c0       	rjmp	.+186    	; 0x1126 <DIO__CheckStatusGetPinValue+0x1f8>

                        break;

                case DIO__UINT8_PORTC:

                        if (GET_BIT(PINC__UINT8_REG, Copy__uint8PinId) == 0)
    106c:	e3 e3       	ldi	r30, 0x33	; 51
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	a9 01       	movw	r20, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO__CheckStatusGetPinValue+0x156>
    1080:	55 95       	asr	r21
    1082:	47 95       	ror	r20
    1084:	8a 95       	dec	r24
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO__CheckStatusGetPinValue+0x152>
    1088:	ca 01       	movw	r24, r20
    108a:	81 70       	andi	r24, 0x01	; 1
    108c:	90 70       	andi	r25, 0x00	; 0
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	21 f4       	brne	.+8      	; 0x109a <DIO__CheckStatusGetPinValue+0x16c>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    1092:	ec 81       	ldd	r30, Y+4	; 0x04
    1094:	fd 81       	ldd	r31, Y+5	; 0x05
    1096:	10 82       	st	Z, r1
    1098:	46 c0       	rjmp	.+140    	; 0x1126 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINC__UINT8_REG, Copy__uint8PinId) != 0)
    109a:	e3 e3       	ldi	r30, 0x33	; 51
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	88 2f       	mov	r24, r24
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	a9 01       	movw	r20, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO__CheckStatusGetPinValue+0x184>
    10ae:	55 95       	asr	r21
    10b0:	47 95       	ror	r20
    10b2:	8a 95       	dec	r24
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO__CheckStatusGetPinValue+0x180>
    10b6:	ca 01       	movw	r24, r20
    10b8:	81 70       	andi	r24, 0x01	; 1
    10ba:	90 70       	andi	r25, 0x00	; 0
    10bc:	88 23       	and	r24, r24
    10be:	99 f1       	breq	.+102    	; 0x1126 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    10c0:	ec 81       	ldd	r30, Y+4	; 0x04
    10c2:	fd 81       	ldd	r31, Y+5	; 0x05
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	80 83       	st	Z, r24
    10c8:	2e c0       	rjmp	.+92     	; 0x1126 <DIO__CheckStatusGetPinValue+0x1f8>
                                /* DO NOTHING */
                        }

                        break;
                case DIO__UINT8_PORTD:
                        if (GET_BIT(PIND__UINT8_REG, Copy__uint8PinId) == 0)
    10ca:	e0 e3       	ldi	r30, 0x30	; 48
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	a9 01       	movw	r20, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <DIO__CheckStatusGetPinValue+0x1b4>
    10de:	55 95       	asr	r21
    10e0:	47 95       	ror	r20
    10e2:	8a 95       	dec	r24
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <DIO__CheckStatusGetPinValue+0x1b0>
    10e6:	ca 01       	movw	r24, r20
    10e8:	81 70       	andi	r24, 0x01	; 1
    10ea:	90 70       	andi	r25, 0x00	; 0
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	21 f4       	brne	.+8      	; 0x10f8 <DIO__CheckStatusGetPinValue+0x1ca>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    10f0:	ec 81       	ldd	r30, Y+4	; 0x04
    10f2:	fd 81       	ldd	r31, Y+5	; 0x05
    10f4:	10 82       	st	Z, r1
    10f6:	17 c0       	rjmp	.+46     	; 0x1126 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PIND__UINT8_REG, Copy__uint8PinId) != 0)
    10f8:	e0 e3       	ldi	r30, 0x30	; 48
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	a9 01       	movw	r20, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <DIO__CheckStatusGetPinValue+0x1e2>
    110c:	55 95       	asr	r21
    110e:	47 95       	ror	r20
    1110:	8a 95       	dec	r24
    1112:	e2 f7       	brpl	.-8      	; 0x110c <DIO__CheckStatusGetPinValue+0x1de>
    1114:	ca 01       	movw	r24, r20
    1116:	81 70       	andi	r24, 0x01	; 1
    1118:	90 70       	andi	r25, 0x00	; 0
    111a:	88 23       	and	r24, r24
    111c:	21 f0       	breq	.+8      	; 0x1126 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    111e:	ec 81       	ldd	r30, Y+4	; 0x04
    1120:	fd 81       	ldd	r31, Y+5	; 0x05
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1126:	59 81       	ldd	r21, Y+1	; 0x01
    1128:	5e 83       	std	Y+6, r21	; 0x06
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <DIO__CheckStatusGetPinValue+0x206>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	8e 83       	std	Y+6, r24	; 0x06
    1134:	8e 81       	ldd	r24, Y+6	; 0x06
        }
}
    1136:	28 96       	adiw	r28, 0x08	; 8
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <DIO__CheckStatusSetPortDirection>:

CheckStatus DIO__CheckStatusSetPortDirection(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PortDirection)
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	2e 97       	sbiw	r28, 0x0e	; 14
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	cd bf       	out	0x3d, r28	; 61
    115c:	8a 83       	std	Y+2, r24	; 0x02
    115e:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    1160:	19 82       	std	Y+1, r1	; 0x01
        /* 
        Check 1-Valid Port Id
              2-Valid PORT diraction 
        */

        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && ((Copy__uint8PortDirection == DIO__UINT8_OUTPUT) || (Copy__uint8PortDirection == DIO__UINT8_INPUT)))
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	84 30       	cpi	r24, 0x04	; 4
    1166:	08 f0       	brcs	.+2      	; 0x116a <DIO__CheckStatusSetPortDirection+0x22>
    1168:	89 c0       	rjmp	.+274    	; 0x127c <DIO__CheckStatusSetPortDirection+0x134>
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	21 f0       	breq	.+8      	; 0x1178 <DIO__CheckStatusSetPortDirection+0x30>
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	88 23       	and	r24, r24
    1174:	09 f0       	breq	.+2      	; 0x1178 <DIO__CheckStatusSetPortDirection+0x30>
    1176:	82 c0       	rjmp	.+260    	; 0x127c <DIO__CheckStatusSetPortDirection+0x134>
        {
                switch (Copy__uint8PortId)
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	3e 87       	std	Y+14, r19	; 0x0e
    1180:	2d 87       	std	Y+13, r18	; 0x0d
    1182:	8d 85       	ldd	r24, Y+13	; 0x0d
    1184:	9e 85       	ldd	r25, Y+14	; 0x0e
    1186:	81 30       	cpi	r24, 0x01	; 1
    1188:	91 05       	cpc	r25, r1
    118a:	71 f1       	breq	.+92     	; 0x11e8 <DIO__CheckStatusSetPortDirection+0xa0>
    118c:	2d 85       	ldd	r18, Y+13	; 0x0d
    118e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1190:	22 30       	cpi	r18, 0x02	; 2
    1192:	31 05       	cpc	r19, r1
    1194:	2c f4       	brge	.+10     	; 0x11a0 <DIO__CheckStatusSetPortDirection+0x58>
    1196:	8d 85       	ldd	r24, Y+13	; 0x0d
    1198:	9e 85       	ldd	r25, Y+14	; 0x0e
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	69 f0       	breq	.+26     	; 0x11b8 <DIO__CheckStatusSetPortDirection+0x70>
    119e:	6b c0       	rjmp	.+214    	; 0x1276 <DIO__CheckStatusSetPortDirection+0x12e>
    11a0:	2d 85       	ldd	r18, Y+13	; 0x0d
    11a2:	3e 85       	ldd	r19, Y+14	; 0x0e
    11a4:	22 30       	cpi	r18, 0x02	; 2
    11a6:	31 05       	cpc	r19, r1
    11a8:	b9 f1       	breq	.+110    	; 0x1218 <DIO__CheckStatusSetPortDirection+0xd0>
    11aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ae:	83 30       	cpi	r24, 0x03	; 3
    11b0:	91 05       	cpc	r25, r1
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <DIO__CheckStatusSetPortDirection+0x6e>
    11b4:	49 c0       	rjmp	.+146    	; 0x1248 <DIO__CheckStatusSetPortDirection+0x100>
    11b6:	5f c0       	rjmp	.+190    	; 0x1276 <DIO__CheckStatusSetPortDirection+0x12e>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PortDirection)
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	3c 87       	std	Y+12, r19	; 0x0c
    11c0:	2b 87       	std	Y+11, r18	; 0x0b
    11c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    11c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	31 f0       	breq	.+12     	; 0x11d6 <DIO__CheckStatusSetPortDirection+0x8e>
    11ca:	2b 85       	ldd	r18, Y+11	; 0x0b
    11cc:	3c 85       	ldd	r19, Y+12	; 0x0c
    11ce:	21 30       	cpi	r18, 0x01	; 1
    11d0:	31 05       	cpc	r19, r1
    11d2:	29 f0       	breq	.+10     	; 0x11de <DIO__CheckStatusSetPortDirection+0x96>
    11d4:	50 c0       	rjmp	.+160    	; 0x1276 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTA__UINT8_REG = 0x00;
    11d6:	eb e3       	ldi	r30, 0x3B	; 59
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	10 82       	st	Z, r1
    11dc:	4c c0       	rjmp	.+152    	; 0x1276 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTA__UINT8_REG = 0xFF;
    11de:	eb e3       	ldi	r30, 0x3B	; 59
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	8f ef       	ldi	r24, 0xFF	; 255
    11e4:	80 83       	st	Z, r24
    11e6:	47 c0       	rjmp	.+142    	; 0x1276 <DIO__CheckStatusSetPortDirection+0x12e>
                                /* DO  NOTHING */
                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PortDirection)
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	3a 87       	std	Y+10, r19	; 0x0a
    11f0:	29 87       	std	Y+9, r18	; 0x09
    11f2:	89 85       	ldd	r24, Y+9	; 0x09
    11f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	31 f0       	breq	.+12     	; 0x1206 <DIO__CheckStatusSetPortDirection+0xbe>
    11fa:	29 85       	ldd	r18, Y+9	; 0x09
    11fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    11fe:	21 30       	cpi	r18, 0x01	; 1
    1200:	31 05       	cpc	r19, r1
    1202:	29 f0       	breq	.+10     	; 0x120e <DIO__CheckStatusSetPortDirection+0xc6>
    1204:	38 c0       	rjmp	.+112    	; 0x1276 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTB__UINT8_REG = 0x00;
    1206:	e8 e3       	ldi	r30, 0x38	; 56
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	10 82       	st	Z, r1
    120c:	34 c0       	rjmp	.+104    	; 0x1276 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTB__UINT8_REG = 0xFF;
    120e:	e8 e3       	ldi	r30, 0x38	; 56
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	8f ef       	ldi	r24, 0xFF	; 255
    1214:	80 83       	st	Z, r24
    1216:	2f c0       	rjmp	.+94     	; 0x1276 <DIO__CheckStatusSetPortDirection+0x12e>
                        }

                        break;

                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PortDirection)
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	38 87       	std	Y+8, r19	; 0x08
    1220:	2f 83       	std	Y+7, r18	; 0x07
    1222:	8f 81       	ldd	r24, Y+7	; 0x07
    1224:	98 85       	ldd	r25, Y+8	; 0x08
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	31 f0       	breq	.+12     	; 0x1236 <DIO__CheckStatusSetPortDirection+0xee>
    122a:	2f 81       	ldd	r18, Y+7	; 0x07
    122c:	38 85       	ldd	r19, Y+8	; 0x08
    122e:	21 30       	cpi	r18, 0x01	; 1
    1230:	31 05       	cpc	r19, r1
    1232:	29 f0       	breq	.+10     	; 0x123e <DIO__CheckStatusSetPortDirection+0xf6>
    1234:	20 c0       	rjmp	.+64     	; 0x1276 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTC__UINT8_REG = 0x00;
    1236:	e5 e3       	ldi	r30, 0x35	; 53
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	10 82       	st	Z, r1
    123c:	1c c0       	rjmp	.+56     	; 0x1276 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTC__UINT8_REG = 0xFF;
    123e:	e5 e3       	ldi	r30, 0x35	; 53
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	8f ef       	ldi	r24, 0xFF	; 255
    1244:	80 83       	st	Z, r24
    1246:	17 c0       	rjmp	.+46     	; 0x1276 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        }

                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PortDirection)
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	3e 83       	std	Y+6, r19	; 0x06
    1250:	2d 83       	std	Y+5, r18	; 0x05
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	9e 81       	ldd	r25, Y+6	; 0x06
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	31 f0       	breq	.+12     	; 0x1266 <DIO__CheckStatusSetPortDirection+0x11e>
    125a:	2d 81       	ldd	r18, Y+5	; 0x05
    125c:	3e 81       	ldd	r19, Y+6	; 0x06
    125e:	21 30       	cpi	r18, 0x01	; 1
    1260:	31 05       	cpc	r19, r1
    1262:	29 f0       	breq	.+10     	; 0x126e <DIO__CheckStatusSetPortDirection+0x126>
    1264:	08 c0       	rjmp	.+16     	; 0x1276 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTD__UINT8_REG = 0x00;
    1266:	e2 e3       	ldi	r30, 0x32	; 50
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	10 82       	st	Z, r1
    126c:	04 c0       	rjmp	.+8      	; 0x1276 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTD__UINT8_REG = 0xFF;
    126e:	e2 e3       	ldi	r30, 0x32	; 50
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	8f ef       	ldi	r24, 0xFF	; 255
    1274:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1276:	39 81       	ldd	r19, Y+1	; 0x01
    1278:	3c 83       	std	Y+4, r19	; 0x04
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <DIO__CheckStatusSetPortDirection+0x13c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	8c 83       	std	Y+4, r24	; 0x04
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    1286:	2e 96       	adiw	r28, 0x0e	; 14
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <DIO__CheckStatusSetPortValue>:

CheckStatus DIO__CheckStatusSetPortValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PortValue)
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	00 d0       	rcall	.+0      	; 0x129e <DIO__CheckStatusSetPortValue+0x6>
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <DIO__CheckStatusSetPortValue+0x8>
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <DIO__CheckStatusSetPortValue+0xa>
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	8a 83       	std	Y+2, r24	; 0x02
    12a8:	6b 83       	std	Y+3, r22	; 0x03

        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    12aa:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
               
        */
        if (Copy__uint8PortId <= DIO__UINT8_PORTD)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	84 30       	cpi	r24, 0x04	; 4
    12b0:	a8 f5       	brcc	.+106    	; 0x131c <DIO__CheckStatusSetPortValue+0x84>
        {
                switch (Copy__uint8PortId)
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	3e 83       	std	Y+6, r19	; 0x06
    12ba:	2d 83       	std	Y+5, r18	; 0x05
    12bc:	8d 81       	ldd	r24, Y+5	; 0x05
    12be:	9e 81       	ldd	r25, Y+6	; 0x06
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	91 05       	cpc	r25, r1
    12c4:	d1 f0       	breq	.+52     	; 0x12fa <DIO__CheckStatusSetPortValue+0x62>
    12c6:	2d 81       	ldd	r18, Y+5	; 0x05
    12c8:	3e 81       	ldd	r19, Y+6	; 0x06
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	2c f4       	brge	.+10     	; 0x12da <DIO__CheckStatusSetPortValue+0x42>
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	9e 81       	ldd	r25, Y+6	; 0x06
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	61 f0       	breq	.+24     	; 0x12f0 <DIO__CheckStatusSetPortValue+0x58>
    12d8:	1e c0       	rjmp	.+60     	; 0x1316 <DIO__CheckStatusSetPortValue+0x7e>
    12da:	2d 81       	ldd	r18, Y+5	; 0x05
    12dc:	3e 81       	ldd	r19, Y+6	; 0x06
    12de:	22 30       	cpi	r18, 0x02	; 2
    12e0:	31 05       	cpc	r19, r1
    12e2:	81 f0       	breq	.+32     	; 0x1304 <DIO__CheckStatusSetPortValue+0x6c>
    12e4:	8d 81       	ldd	r24, Y+5	; 0x05
    12e6:	9e 81       	ldd	r25, Y+6	; 0x06
    12e8:	83 30       	cpi	r24, 0x03	; 3
    12ea:	91 05       	cpc	r25, r1
    12ec:	81 f0       	breq	.+32     	; 0x130e <DIO__CheckStatusSetPortValue+0x76>
    12ee:	13 c0       	rjmp	.+38     	; 0x1316 <DIO__CheckStatusSetPortValue+0x7e>
                {
                case DIO__UINT8_PORTA:
                        PORTA__UINT8_REG = Copy__uint8PortValue;
    12f0:	eb e3       	ldi	r30, 0x3B	; 59
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	80 83       	st	Z, r24
    12f8:	0e c0       	rjmp	.+28     	; 0x1316 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTB:
                        PORTB__UINT8_REG = Copy__uint8PortValue;
    12fa:	e8 e3       	ldi	r30, 0x38	; 56
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	80 83       	st	Z, r24
    1302:	09 c0       	rjmp	.+18     	; 0x1316 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTC:
                        PORTC__UINT8_REG = Copy__uint8PortValue;
    1304:	e5 e3       	ldi	r30, 0x35	; 53
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	80 83       	st	Z, r24
    130c:	04 c0       	rjmp	.+8      	; 0x1316 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTD:
                        PORTD__UINT8_REG = Copy__uint8PortValue;
    130e:	e2 e3       	ldi	r30, 0x32	; 50
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1316:	99 81       	ldd	r25, Y+1	; 0x01
    1318:	9c 83       	std	Y+4, r25	; 0x04
    131a:	04 c0       	rjmp	.+8      	; 0x1324 <DIO__CheckStatusSetPortValue+0x8c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    1320:	29 81       	ldd	r18, Y+1	; 0x01
    1322:	2c 83       	std	Y+4, r18	; 0x04
    1324:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    1326:	26 96       	adiw	r28, 0x06	; 6
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <DIO__CheckStatusGetPortValue>:

CheckStatus DIO__CheckStatusGetPortValue(_uint8 Copy__uint8PortId, _uint8 *Copy_p_uint8ReturnPortValue)
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	27 97       	sbiw	r28, 0x07	; 7
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	8a 83       	std	Y+2, r24	; 0x02
    134e:	7c 83       	std	Y+4, r23	; 0x04
    1350:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    1352:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid Pointer != NULL
               
        */
        if (Copy_p_uint8ReturnPortValue != NULL)
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	e9 f1       	breq	.+122    	; 0x13d6 <DIO__CheckStatusGetPortValue+0x9e>
        {
                switch (Copy__uint8PortId)
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	3f 83       	std	Y+7, r19	; 0x07
    1364:	2e 83       	std	Y+6, r18	; 0x06
    1366:	8e 81       	ldd	r24, Y+6	; 0x06
    1368:	9f 81       	ldd	r25, Y+7	; 0x07
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	91 05       	cpc	r25, r1
    136e:	e1 f0       	breq	.+56     	; 0x13a8 <DIO__CheckStatusGetPortValue+0x70>
    1370:	2e 81       	ldd	r18, Y+6	; 0x06
    1372:	3f 81       	ldd	r19, Y+7	; 0x07
    1374:	22 30       	cpi	r18, 0x02	; 2
    1376:	31 05       	cpc	r19, r1
    1378:	2c f4       	brge	.+10     	; 0x1384 <DIO__CheckStatusGetPortValue+0x4c>
    137a:	8e 81       	ldd	r24, Y+6	; 0x06
    137c:	9f 81       	ldd	r25, Y+7	; 0x07
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	61 f0       	breq	.+24     	; 0x139a <DIO__CheckStatusGetPortValue+0x62>
    1382:	26 c0       	rjmp	.+76     	; 0x13d0 <DIO__CheckStatusGetPortValue+0x98>
    1384:	2e 81       	ldd	r18, Y+6	; 0x06
    1386:	3f 81       	ldd	r19, Y+7	; 0x07
    1388:	22 30       	cpi	r18, 0x02	; 2
    138a:	31 05       	cpc	r19, r1
    138c:	a1 f0       	breq	.+40     	; 0x13b6 <DIO__CheckStatusGetPortValue+0x7e>
    138e:	8e 81       	ldd	r24, Y+6	; 0x06
    1390:	9f 81       	ldd	r25, Y+7	; 0x07
    1392:	83 30       	cpi	r24, 0x03	; 3
    1394:	91 05       	cpc	r25, r1
    1396:	b1 f0       	breq	.+44     	; 0x13c4 <DIO__CheckStatusGetPortValue+0x8c>
    1398:	1b c0       	rjmp	.+54     	; 0x13d0 <DIO__CheckStatusGetPortValue+0x98>
                {
                case DIO__UINT8_PORTA:
                        *Copy_p_uint8ReturnPortValue = PINA__UINT8_REG;
    139a:	e9 e3       	ldi	r30, 0x39	; 57
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	eb 81       	ldd	r30, Y+3	; 0x03
    13a2:	fc 81       	ldd	r31, Y+4	; 0x04
    13a4:	80 83       	st	Z, r24
    13a6:	14 c0       	rjmp	.+40     	; 0x13d0 <DIO__CheckStatusGetPortValue+0x98>
                        break;
                case DIO__UINT8_PORTB:
                        *Copy_p_uint8ReturnPortValue = PINB__UINT8_REG;
    13a8:	e6 e3       	ldi	r30, 0x36	; 54
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	eb 81       	ldd	r30, Y+3	; 0x03
    13b0:	fc 81       	ldd	r31, Y+4	; 0x04
    13b2:	80 83       	st	Z, r24
    13b4:	0d c0       	rjmp	.+26     	; 0x13d0 <DIO__CheckStatusGetPortValue+0x98>

                        break;
                case DIO__UINT8_PORTC:
                        *Copy_p_uint8ReturnPortValue = PINC__UINT8_REG;
    13b6:	e3 e3       	ldi	r30, 0x33	; 51
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	eb 81       	ldd	r30, Y+3	; 0x03
    13be:	fc 81       	ldd	r31, Y+4	; 0x04
    13c0:	80 83       	st	Z, r24
    13c2:	06 c0       	rjmp	.+12     	; 0x13d0 <DIO__CheckStatusGetPortValue+0x98>
                        break;
                case DIO__UINT8_PORTD:
                        *Copy_p_uint8ReturnPortValue = PIND__UINT8_REG;
    13c4:	e0 e3       	ldi	r30, 0x30	; 48
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	eb 81       	ldd	r30, Y+3	; 0x03
    13cc:	fc 81       	ldd	r31, Y+4	; 0x04
    13ce:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    13d0:	99 81       	ldd	r25, Y+1	; 0x01
    13d2:	9d 83       	std	Y+5, r25	; 0x05
    13d4:	04 c0       	rjmp	.+8      	; 0x13de <DIO__CheckStatusGetPortValue+0xa6>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    13da:	29 81       	ldd	r18, Y+1	; 0x01
    13dc:	2d 83       	std	Y+5, r18	; 0x05
    13de:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    13e0:	27 96       	adiw	r28, 0x07	; 7
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <GIE_VoidEnable>:
#include"GIE_private.h"
#include"GIE_config.h"


Void  GIE_VoidEnable(Void) 
{
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
         SET_BIT(GIE_UINT8_STATUS_REG,GIE_GLOBAL_INT_STATE);
    13fa:	af e5       	ldi	r26, 0x5F	; 95
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	ef e5       	ldi	r30, 0x5F	; 95
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 68       	ori	r24, 0x80	; 128
    1406:	8c 93       	st	X, r24
}
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <GIE_VoidDisable>:

Void  GIE_VoidDisable(Void)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
        CLEAR_BIT(GIE_UINT8_STATUS_REG,GIE_GLOBAL_INT_STATE);
    1416:	af e5       	ldi	r26, 0x5F	; 95
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	ef e5       	ldi	r30, 0x5F	; 95
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	8f 77       	andi	r24, 0x7F	; 127
    1422:	8c 93       	st	X, r24
}
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <TMR_CheckSatusInit>:

static _float32 Local__Float32NumberOfOVF = 0.0;
static _uint8 Local__Uint8_PrloadNum = 0;

CheckStatus TMR_CheckSatusInit(_uint16 Copy__Uint16ActionTime)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	2f 97       	sbiw	r28, 0x0f	; 15
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	9f 87       	std	Y+15, r25	; 0x0f
    1440:	8e 87       	std	Y+14, r24	; 0x0e
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    1442:	1d 86       	std	Y+13, r1	; 0x0d
        _uint32 Local__Uint32FreqTime = 0x00;
    1444:	19 86       	std	Y+9, r1	; 0x09
    1446:	1a 86       	std	Y+10, r1	; 0x0a
    1448:	1b 86       	std	Y+11, r1	; 0x0b
    144a:	1c 86       	std	Y+12, r1	; 0x0c
        _uint32 Local_Uint32TimeOVF = 0x00;
    144c:	1d 82       	std	Y+5, r1	; 0x05
    144e:	1e 82       	std	Y+6, r1	; 0x06
    1450:	1f 82       	std	Y+7, r1	; 0x07
    1452:	18 86       	std	Y+8, r1	; 0x08

        _float32 Local__Float32Fraction = 0.0;
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	a0 e0       	ldi	r26, 0x00	; 0
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	89 83       	std	Y+1, r24	; 0x01
    145e:	9a 83       	std	Y+2, r25	; 0x02
    1460:	ab 83       	std	Y+3, r26	; 0x03
    1462:	bc 83       	std	Y+4, r27	; 0x04
                        }
                        TMR__UINT8_OCRO_REG = 99;
                        SET_BIT(TMR__UINT8_TIMSK_REG, TMR_TIMSK_OCIE0);
                        break;
                case TMR_IN_FAST_PWM_MODE:
                        SET_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_WGM00);
    1464:	a3 e5       	ldi	r26, 0x53	; 83
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e3 e5       	ldi	r30, 0x53	; 83
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	80 64       	ori	r24, 0x40	; 64
    1470:	8c 93       	st	X, r24
                        SET_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_WGM01);
    1472:	a3 e5       	ldi	r26, 0x53	; 83
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e3 e5       	ldi	r30, 0x53	; 83
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	88 60       	ori	r24, 0x08	; 8
    147e:	8c 93       	st	X, r24
                        case TMR_CMOMODE_OC0_DISCONNECTED:
                                CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_COM01);
                                CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_COM00);
                                break;
                        case TMR_CMOMODE_OC0_SET_FAST_PWM:
                                SET_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_COM01);
    1480:	a3 e5       	ldi	r26, 0x53	; 83
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e3 e5       	ldi	r30, 0x53	; 83
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	80 62       	ori	r24, 0x20	; 32
    148c:	8c 93       	st	X, r24
                                CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_COM00);
    148e:	a3 e5       	ldi	r26, 0x53	; 83
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e3 e5       	ldi	r30, 0x53	; 83
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	8f 7e       	andi	r24, 0xEF	; 239
    149a:	8c 93       	st	X, r24
                        CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_CS02);
                        CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_CS01);
                        SET_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_CS00);
                        break;
                case TMR_CLK_SOURCE_PRESCALER8:
                        CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_CS02);
    149c:	a3 e5       	ldi	r26, 0x53	; 83
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e3 e5       	ldi	r30, 0x53	; 83
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8b 7f       	andi	r24, 0xFB	; 251
    14a8:	8c 93       	st	X, r24
                        SET_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_CS01);
    14aa:	a3 e5       	ldi	r26, 0x53	; 83
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e3 e5       	ldi	r30, 0x53	; 83
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	82 60       	ori	r24, 0x02	; 2
    14b6:	8c 93       	st	X, r24
                        CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_CS00);
    14b8:	a3 e5       	ldi	r26, 0x53	; 83
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e3 e5       	ldi	r30, 0x53	; 83
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	8e 7f       	andi	r24, 0xFE	; 254
    14c4:	8c 93       	st	X, r24
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
        }
        return Local_CheckStatusReturnStatus;
    14c6:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    14c8:	2f 96       	adiw	r28, 0x0f	; 15
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <__vector_11>:
Void __vector_11(Void) __attribute__((signal));
Void __vector_11(Void)
{
    14da:	1f 92       	push	r1
    14dc:	0f 92       	push	r0
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	0f 92       	push	r0
    14e2:	11 24       	eor	r1, r1
    14e4:	2f 93       	push	r18
    14e6:	3f 93       	push	r19
    14e8:	4f 93       	push	r20
    14ea:	5f 93       	push	r21
    14ec:	6f 93       	push	r22
    14ee:	7f 93       	push	r23
    14f0:	8f 93       	push	r24
    14f2:	9f 93       	push	r25
    14f4:	af 93       	push	r26
    14f6:	bf 93       	push	r27
    14f8:	ef 93       	push	r30
    14fa:	ff 93       	push	r31
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
        static _uint16 Local__Uint16Counter = 0;

        Local__Uint16Counter++;
    1504:	80 91 6d 00 	lds	r24, 0x006D
    1508:	90 91 6e 00 	lds	r25, 0x006E
    150c:	01 96       	adiw	r24, 0x01	; 1
    150e:	90 93 6e 00 	sts	0x006E, r25
    1512:	80 93 6d 00 	sts	0x006D, r24
        if (Local__Uint16Counter == ((_uint16)Local__Float32NumberOfOVF + 1))
    1516:	80 91 68 00 	lds	r24, 0x0068
    151a:	90 91 69 00 	lds	r25, 0x0069
    151e:	a0 91 6a 00 	lds	r26, 0x006A
    1522:	b0 91 6b 00 	lds	r27, 0x006B
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9c 01       	movw	r18, r24
    1534:	2f 5f       	subi	r18, 0xFF	; 255
    1536:	3f 4f       	sbci	r19, 0xFF	; 255
    1538:	80 91 6d 00 	lds	r24, 0x006D
    153c:	90 91 6e 00 	lds	r25, 0x006E
    1540:	28 17       	cp	r18, r24
    1542:	39 07       	cpc	r19, r25
    1544:	a1 f4       	brne	.+40     	; 0x156e <__vector_11+0x94>
        {
                TMR__UINT8_TCNT0_REG = Local__Uint8_PrloadNum;
    1546:	e2 e5       	ldi	r30, 0x52	; 82
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 91 6c 00 	lds	r24, 0x006C
    154e:	80 83       	st	Z, r24
                Local__Uint16Counter = 0;
    1550:	10 92 6e 00 	sts	0x006E, r1
    1554:	10 92 6d 00 	sts	0x006D, r1
                if (TMR_PTF_VoidTIMEROVF != NULL)
    1558:	80 91 71 00 	lds	r24, 0x0071
    155c:	90 91 72 00 	lds	r25, 0x0072
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	29 f0       	breq	.+10     	; 0x156e <__vector_11+0x94>
                {
                        TMR_PTF_VoidTIMEROVF();
    1564:	e0 91 71 00 	lds	r30, 0x0071
    1568:	f0 91 72 00 	lds	r31, 0x0072
    156c:	09 95       	icall
        }
        else
        {
                /* DO NOTHING */
        }
}
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	ff 91       	pop	r31
    1574:	ef 91       	pop	r30
    1576:	bf 91       	pop	r27
    1578:	af 91       	pop	r26
    157a:	9f 91       	pop	r25
    157c:	8f 91       	pop	r24
    157e:	7f 91       	pop	r23
    1580:	6f 91       	pop	r22
    1582:	5f 91       	pop	r21
    1584:	4f 91       	pop	r20
    1586:	3f 91       	pop	r19
    1588:	2f 91       	pop	r18
    158a:	0f 90       	pop	r0
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	0f 90       	pop	r0
    1590:	1f 90       	pop	r1
    1592:	18 95       	reti

00001594 <__vector_10>:
Void __vector_10(Void) __attribute__((signal));
Void __vector_10(Void)
{
    1594:	1f 92       	push	r1
    1596:	0f 92       	push	r0
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	0f 92       	push	r0
    159c:	11 24       	eor	r1, r1
    159e:	2f 93       	push	r18
    15a0:	3f 93       	push	r19
    15a2:	4f 93       	push	r20
    15a4:	5f 93       	push	r21
    15a6:	6f 93       	push	r22
    15a8:	7f 93       	push	r23
    15aa:	8f 93       	push	r24
    15ac:	9f 93       	push	r25
    15ae:	af 93       	push	r26
    15b0:	bf 93       	push	r27
    15b2:	ef 93       	push	r30
    15b4:	ff 93       	push	r31
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
        static _uint16 Local__Uint16Counter = 0;

        Local__Uint16Counter++;
    15be:	80 91 6f 00 	lds	r24, 0x006F
    15c2:	90 91 70 00 	lds	r25, 0x0070
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	90 93 70 00 	sts	0x0070, r25
    15cc:	80 93 6f 00 	sts	0x006F, r24
        if (Local__Uint16Counter == 10000)
    15d0:	80 91 6f 00 	lds	r24, 0x006F
    15d4:	90 91 70 00 	lds	r25, 0x0070
    15d8:	27 e2       	ldi	r18, 0x27	; 39
    15da:	80 31       	cpi	r24, 0x10	; 16
    15dc:	92 07       	cpc	r25, r18
    15de:	79 f4       	brne	.+30     	; 0x15fe <__vector_10+0x6a>
        {
                Local__Uint16Counter = 0;
    15e0:	10 92 70 00 	sts	0x0070, r1
    15e4:	10 92 6f 00 	sts	0x006F, r1
                if (TMR_PTF_VoidTIMERCTC != NULL)
    15e8:	80 91 73 00 	lds	r24, 0x0073
    15ec:	90 91 74 00 	lds	r25, 0x0074
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	29 f0       	breq	.+10     	; 0x15fe <__vector_10+0x6a>
                {
                        TMR_PTF_VoidTIMERCTC();
    15f4:	e0 91 73 00 	lds	r30, 0x0073
    15f8:	f0 91 74 00 	lds	r31, 0x0074
    15fc:	09 95       	icall
        }
        else
        {
                /* DO NOTHING */
        }
}
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	ff 91       	pop	r31
    1604:	ef 91       	pop	r30
    1606:	bf 91       	pop	r27
    1608:	af 91       	pop	r26
    160a:	9f 91       	pop	r25
    160c:	8f 91       	pop	r24
    160e:	7f 91       	pop	r23
    1610:	6f 91       	pop	r22
    1612:	5f 91       	pop	r21
    1614:	4f 91       	pop	r20
    1616:	3f 91       	pop	r19
    1618:	2f 91       	pop	r18
    161a:	0f 90       	pop	r0
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	0f 90       	pop	r0
    1620:	1f 90       	pop	r1
    1622:	18 95       	reti

00001624 <TMR_CheckStatusTimer0OVFSetCallBack>:
CheckStatus TMR_CheckStatusTimer0OVFSetCallBack(Void (*Copy_PTF)(Void))
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	00 d0       	rcall	.+0      	; 0x162a <TMR_CheckStatusTimer0OVFSetCallBack+0x6>
    162a:	0f 92       	push	r0
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	9b 83       	std	Y+3, r25	; 0x03
    1632:	8a 83       	std	Y+2, r24	; 0x02
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    1634:	19 82       	std	Y+1, r1	; 0x01
        if (Copy_PTF != NULL)
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	9b 81       	ldd	r25, Y+3	; 0x03
    163a:	00 97       	sbiw	r24, 0x00	; 0
    163c:	39 f0       	breq	.+14     	; 0x164c <TMR_CheckStatusTimer0OVFSetCallBack+0x28>
        {
                TMR_PTF_VoidTIMEROVF = Copy_PTF;
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	9b 81       	ldd	r25, Y+3	; 0x03
    1642:	90 93 72 00 	sts	0x0072, r25
    1646:	80 93 71 00 	sts	0x0071, r24
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <TMR_CheckStatusTimer0OVFSetCallBack+0x2c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	89 83       	std	Y+1, r24	; 0x01
        }
        return Local_CheckStatusReturnStatus;
    1650:	89 81       	ldd	r24, Y+1	; 0x01
}
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <TMR_CheckStatusTimer0CTCSetCallBack>:
CheckStatus TMR_CheckStatusTimer0CTCSetCallBack(Void (*Copy_PTF)(Void))
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <TMR_CheckStatusTimer0CTCSetCallBack+0x6>
    1664:	0f 92       	push	r0
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	9b 83       	std	Y+3, r25	; 0x03
    166c:	8a 83       	std	Y+2, r24	; 0x02
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    166e:	19 82       	std	Y+1, r1	; 0x01
        if (Copy_PTF != NULL)
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	9b 81       	ldd	r25, Y+3	; 0x03
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	39 f0       	breq	.+14     	; 0x1686 <TMR_CheckStatusTimer0CTCSetCallBack+0x28>
        {
                TMR_PTF_VoidTIMERCTC = Copy_PTF;
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	9b 81       	ldd	r25, Y+3	; 0x03
    167c:	90 93 74 00 	sts	0x0074, r25
    1680:	80 93 73 00 	sts	0x0073, r24
    1684:	02 c0       	rjmp	.+4      	; 0x168a <TMR_CheckStatusTimer0CTCSetCallBack+0x2c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	89 83       	std	Y+1, r24	; 0x01
        }
        return Local_CheckStatusReturnStatus;
    168a:	89 81       	ldd	r24, Y+1	; 0x01
}
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <TMR_CHANGE_OCRC0>:

Void TMR_CHANGE_OCRC0(_uint8 Copy__Uint8OCR0Value)
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	0f 92       	push	r0
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	89 83       	std	Y+1, r24	; 0x01
TMR__UINT8_OCRO_REG = Copy__Uint8OCR0Value;
    16a4:	ec e5       	ldi	r30, 0x5C	; 92
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	80 83       	st	Z, r24
}
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <TMR_VoidTimer1INIT>:
Void TMR_VoidTimer1INIT(Void)
{
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62

/* timer1 selectmode 14=>ICR1 Top Value */
SET_BIT(TMR__UINT8_TCCR1A_REG,1);
    16bc:	af e4       	ldi	r26, 0x4F	; 79
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	ef e4       	ldi	r30, 0x4F	; 79
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	82 60       	ori	r24, 0x02	; 2
    16c8:	8c 93       	st	X, r24
CLEAR_BIT(TMR__UINT8_TCCR1A_REG,0);
    16ca:	af e4       	ldi	r26, 0x4F	; 79
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	ef e4       	ldi	r30, 0x4F	; 79
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	8e 7f       	andi	r24, 0xFE	; 254
    16d6:	8c 93       	st	X, r24
SET_BIT(TMR__UINT8_TCCR1B_REG,4);
    16d8:	ae e4       	ldi	r26, 0x4E	; 78
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	ee e4       	ldi	r30, 0x4E	; 78
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	80 61       	ori	r24, 0x10	; 16
    16e4:	8c 93       	st	X, r24
SET_BIT(TMR__UINT8_TCCR1B_REG,3);
    16e6:	ae e4       	ldi	r26, 0x4E	; 78
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	ee e4       	ldi	r30, 0x4E	; 78
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	88 60       	ori	r24, 0x08	; 8
    16f2:	8c 93       	st	X, r24

/*  Channel A => Noninverting */
SET_BIT(TMR__UINT8_TCCR1A_REG,7);
    16f4:	af e4       	ldi	r26, 0x4F	; 79
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	ef e4       	ldi	r30, 0x4F	; 79
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	80 68       	ori	r24, 0x80	; 128
    1700:	8c 93       	st	X, r24
CLEAR_BIT(TMR__UINT8_TCCR1A_REG,6);
    1702:	af e4       	ldi	r26, 0x4F	; 79
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	ef e4       	ldi	r30, 0x4F	; 79
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	8f 7b       	andi	r24, 0xBF	; 191
    170e:	8c 93       	st	X, r24

/* max value to overflow  */
TMR__UINT16_ICR1L_REG = 19999;
    1710:	e6 e4       	ldi	r30, 0x46	; 70
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	8f e1       	ldi	r24, 0x1F	; 31
    1716:	9e e4       	ldi	r25, 0x4E	; 78
    1718:	91 83       	std	Z+1, r25	; 0x01
    171a:	80 83       	st	Z, r24

/*  select  prescaler */
CLEAR_BIT(TMR__UINT8_TCCR1B_REG,2);
    171c:	ae e4       	ldi	r26, 0x4E	; 78
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	ee e4       	ldi	r30, 0x4E	; 78
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	8b 7f       	andi	r24, 0xFB	; 251
    1728:	8c 93       	st	X, r24
SET_BIT(TMR__UINT8_TCCR1B_REG,1);
    172a:	ae e4       	ldi	r26, 0x4E	; 78
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	ee e4       	ldi	r30, 0x4E	; 78
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	82 60       	ori	r24, 0x02	; 2
    1736:	8c 93       	st	X, r24
CLEAR_BIT(TMR__UINT8_TCCR1B_REG,0);
    1738:	ae e4       	ldi	r26, 0x4E	; 78
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	ee e4       	ldi	r30, 0x4E	; 78
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	8e 7f       	andi	r24, 0xFE	; 254
    1744:	8c 93       	st	X, r24
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <TMR_VOidTimer1SEtCompareMatchValue>:



Void TMR_VOidTimer1SEtCompareMatchValue(_uint16 copy_value)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	00 d0       	rcall	.+0      	; 0x1752 <TMR_VOidTimer1SEtCompareMatchValue+0x6>
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01
	TMR__UINT16_OCR1AL_REG =copy_value;
    175a:	ea e4       	ldi	r30, 0x4A	; 74
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	9a 81       	ldd	r25, Y+2	; 0x02
    1762:	91 83       	std	Z+1, r25	; 0x01
    1764:	80 83       	st	Z, r24
}
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <WDT_VoidWhatchDogEnable>:
/* MACRO FUN */
#define    WDT_SET_TWICEBIT(REG,BIT0,BIT1)     REG =  (1<<BIT0) | (1<<BIT1)
/* WATCH DOG*/ 

Void WDT_VoidWhatchDogEnable(Void)
{ 
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
     SET_BIT(WDT_UINT8_WDTCR_REG,WDT_WDTCR_WDE);
    1778:	a1 e4       	ldi	r26, 0x41	; 65
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e1 e4       	ldi	r30, 0x41	; 65
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	88 60       	ori	r24, 0x08	; 8
    1784:	8c 93       	st	X, r24
#if(WDT_UINT8_WDT_PRESCALER_TIMER == WDT_OSC_16K_CYCLE)
CLEAR_BIT(WDT_UINT8_WDTCR_REG,WDT_WDTCR_WDP0);
    1786:	a1 e4       	ldi	r26, 0x41	; 65
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e1 e4       	ldi	r30, 0x41	; 65
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	8e 7f       	andi	r24, 0xFE	; 254
    1792:	8c 93       	st	X, r24
CLEAR_BIT(WDT_UINT8_WDTCR_REG,WDT_WDTCR_WDP1);
    1794:	a1 e4       	ldi	r26, 0x41	; 65
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e1 e4       	ldi	r30, 0x41	; 65
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	8d 7f       	andi	r24, 0xFD	; 253
    17a0:	8c 93       	st	X, r24
CLEAR_BIT(WDT_UINT8_WDTCR_REG,WDT_WDTCR_WDP2);
    17a2:	a1 e4       	ldi	r26, 0x41	; 65
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e1 e4       	ldi	r30, 0x41	; 65
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	8b 7f       	andi	r24, 0xFB	; 251
    17ae:	8c 93       	st	X, r24
SET_BIT(WDT_UINT8_WDTCR_REG,WDT_WDTCR_WDP0);
SET_BIT(WDT_UINT8_WDTCR_REG,WDT_WDTCR_WDP1);
SET_BIT(WDT_UINT8_WDTCR_REG,WDT_WDTCR_WDP2);
#endif 
     
}
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <WDT_VoidWhatchDogDisable>:
Void WDT_VoidWhatchDogDisable(Void)
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
   WDT_SET_TWICEBIT(WDT_UINT8_WDTCR_REG,WDT_WDTCR_WDTOE,WDT_WDTCR_WDE);    
    17be:	e1 e4       	ldi	r30, 0x41	; 65
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	88 e1       	ldi	r24, 0x18	; 24
    17c4:	80 83       	st	Z, r24
   WDT_UINT8_WDTCR_REG = 0x00;     
    17c6:	e1 e4       	ldi	r30, 0x41	; 65
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	10 82       	st	Z, r1
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <main>:
#include"ADC_interface.h"


Void APP_VoidTOgLed(Void);
int main(Void)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	00 d0       	rcall	.+0      	; 0x17d8 <main+0x6>
    17d8:	00 d0       	rcall	.+0      	; 0x17da <main+0x8>
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
	_uint16  LOCAL_UINT16Value;
	_uint16  LOCAL_UINT16OCRValue;
	DIO_VoidInit();
    17de:	0e 94 19 05 	call	0xa32	; 0xa32 <DIO_VoidInit>
	ADC_VoidInit();
    17e2:	0e 94 57 04 	call	0x8ae	; 0x8ae <ADC_VoidInit>
	//  GIE_VoidEnable();
//    TMR_CheckStatusTimer0CTCSetCallBack(&APP_VoidTOgLed);
//    TMR_CheckSatusInit(0);
//    _uint8 count =0;

TMR_VoidTimer1INIT();
    17e6:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <TMR_VoidTimer1INIT>
//TMR_VOidTimer1SEtCompareMatchValue(500);
while(TRUE)
{

ADC_CheckStatusGetDigigtalValueSynchNonBlocking(ADC_CHANNEL_0,&LOCAL_UINT16Value);
    17ea:	9e 01       	movw	r18, r28
    17ec:	2d 5f       	subi	r18, 0xFD	; 253
    17ee:	3f 4f       	sbci	r19, 0xFF	; 255
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	b9 01       	movw	r22, r18
    17f4:	0e 94 8f 04 	call	0x91e	; 0x91e <ADC_CheckStatusGetDigigtalValueSynchNonBlocking>

LOCAL_UINT16OCRValue =(((2000UL*LOCAL_UINT16Value)/1023)+500);
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	9c 81       	ldd	r25, Y+4	; 0x04
    17fc:	cc 01       	movw	r24, r24
    17fe:	a0 e0       	ldi	r26, 0x00	; 0
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	20 ed       	ldi	r18, 0xD0	; 208
    1804:	37 e0       	ldi	r19, 0x07	; 7
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	bc 01       	movw	r22, r24
    180c:	cd 01       	movw	r24, r26
    180e:	0e 94 39 0c 	call	0x1872	; 0x1872 <__mulsi3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	2f ef       	ldi	r18, 0xFF	; 255
    1818:	33 e0       	ldi	r19, 0x03	; 3
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	50 e0       	ldi	r21, 0x00	; 0
    181e:	bc 01       	movw	r22, r24
    1820:	cd 01       	movw	r24, r26
    1822:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__udivmodsi4>
    1826:	da 01       	movw	r26, r20
    1828:	c9 01       	movw	r24, r18
    182a:	8c 50       	subi	r24, 0x0C	; 12
    182c:	9e 4f       	sbci	r25, 0xFE	; 254
    182e:	9a 83       	std	Y+2, r25	; 0x02
    1830:	89 83       	std	Y+1, r24	; 0x01

TMR_VOidTimer1SEtCompareMatchValue(LOCAL_UINT16OCRValue);
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	9a 81       	ldd	r25, Y+2	; 0x02
    1836:	0e 94 a6 0b 	call	0x174c	; 0x174c <TMR_VOidTimer1SEtCompareMatchValue>
    183a:	d7 cf       	rjmp	.-82     	; 0x17ea <main+0x18>

0000183c <APP_VoidTOgLed>:
//_delay_ms(50);
}
	return 0 ;
}
Void  APP_VoidTOgLed(Void)
{
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
      static _uint8 Local_Uint8Flag = 0 ;

      if(Local_Uint8Flag == 0)
    1844:	80 91 75 00 	lds	r24, 0x0075
    1848:	88 23       	and	r24, r24
    184a:	49 f4       	brne	.+18     	; 0x185e <APP_VoidTOgLed+0x22>
      {
    	  DIO__CheckStatusSetPinValue(DIO__UINT8_PORTA,DIO__UINT8_PIN1,DIO__UINT8_HIGH);
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	61 e0       	ldi	r22, 0x01	; 1
    1850:	41 e0       	ldi	r20, 0x01	; 1
    1852:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO__CheckStatusSetPinValue>
          Local_Uint8Flag = 1;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	80 93 75 00 	sts	0x0075, r24
    185c:	07 c0       	rjmp	.+14     	; 0x186c <APP_VoidTOgLed+0x30>
      }
      else
      {
    	  DIO__CheckStatusSetPinValue(DIO__UINT8_PORTA,DIO__UINT8_PIN1,DIO__UINT8_LOW);
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	61 e0       	ldi	r22, 0x01	; 1
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO__CheckStatusSetPinValue>
          Local_Uint8Flag = 0;
    1868:	10 92 75 00 	sts	0x0075, r1
      }

}
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <__mulsi3>:
    1872:	62 9f       	mul	r22, r18
    1874:	d0 01       	movw	r26, r0
    1876:	73 9f       	mul	r23, r19
    1878:	f0 01       	movw	r30, r0
    187a:	82 9f       	mul	r24, r18
    187c:	e0 0d       	add	r30, r0
    187e:	f1 1d       	adc	r31, r1
    1880:	64 9f       	mul	r22, r20
    1882:	e0 0d       	add	r30, r0
    1884:	f1 1d       	adc	r31, r1
    1886:	92 9f       	mul	r25, r18
    1888:	f0 0d       	add	r31, r0
    188a:	83 9f       	mul	r24, r19
    188c:	f0 0d       	add	r31, r0
    188e:	74 9f       	mul	r23, r20
    1890:	f0 0d       	add	r31, r0
    1892:	65 9f       	mul	r22, r21
    1894:	f0 0d       	add	r31, r0
    1896:	99 27       	eor	r25, r25
    1898:	72 9f       	mul	r23, r18
    189a:	b0 0d       	add	r27, r0
    189c:	e1 1d       	adc	r30, r1
    189e:	f9 1f       	adc	r31, r25
    18a0:	63 9f       	mul	r22, r19
    18a2:	b0 0d       	add	r27, r0
    18a4:	e1 1d       	adc	r30, r1
    18a6:	f9 1f       	adc	r31, r25
    18a8:	bd 01       	movw	r22, r26
    18aa:	cf 01       	movw	r24, r30
    18ac:	11 24       	eor	r1, r1
    18ae:	08 95       	ret

000018b0 <__udivmodsi4>:
    18b0:	a1 e2       	ldi	r26, 0x21	; 33
    18b2:	1a 2e       	mov	r1, r26
    18b4:	aa 1b       	sub	r26, r26
    18b6:	bb 1b       	sub	r27, r27
    18b8:	fd 01       	movw	r30, r26
    18ba:	0d c0       	rjmp	.+26     	; 0x18d6 <__udivmodsi4_ep>

000018bc <__udivmodsi4_loop>:
    18bc:	aa 1f       	adc	r26, r26
    18be:	bb 1f       	adc	r27, r27
    18c0:	ee 1f       	adc	r30, r30
    18c2:	ff 1f       	adc	r31, r31
    18c4:	a2 17       	cp	r26, r18
    18c6:	b3 07       	cpc	r27, r19
    18c8:	e4 07       	cpc	r30, r20
    18ca:	f5 07       	cpc	r31, r21
    18cc:	20 f0       	brcs	.+8      	; 0x18d6 <__udivmodsi4_ep>
    18ce:	a2 1b       	sub	r26, r18
    18d0:	b3 0b       	sbc	r27, r19
    18d2:	e4 0b       	sbc	r30, r20
    18d4:	f5 0b       	sbc	r31, r21

000018d6 <__udivmodsi4_ep>:
    18d6:	66 1f       	adc	r22, r22
    18d8:	77 1f       	adc	r23, r23
    18da:	88 1f       	adc	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	1a 94       	dec	r1
    18e0:	69 f7       	brne	.-38     	; 0x18bc <__udivmodsi4_loop>
    18e2:	60 95       	com	r22
    18e4:	70 95       	com	r23
    18e6:	80 95       	com	r24
    18e8:	90 95       	com	r25
    18ea:	9b 01       	movw	r18, r22
    18ec:	ac 01       	movw	r20, r24
    18ee:	bd 01       	movw	r22, r26
    18f0:	cf 01       	movw	r24, r30
    18f2:	08 95       	ret

000018f4 <__prologue_saves__>:
    18f4:	2f 92       	push	r2
    18f6:	3f 92       	push	r3
    18f8:	4f 92       	push	r4
    18fa:	5f 92       	push	r5
    18fc:	6f 92       	push	r6
    18fe:	7f 92       	push	r7
    1900:	8f 92       	push	r8
    1902:	9f 92       	push	r9
    1904:	af 92       	push	r10
    1906:	bf 92       	push	r11
    1908:	cf 92       	push	r12
    190a:	df 92       	push	r13
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	ca 1b       	sub	r28, r26
    191e:	db 0b       	sbc	r29, r27
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	09 94       	ijmp

0000192c <__epilogue_restores__>:
    192c:	2a 88       	ldd	r2, Y+18	; 0x12
    192e:	39 88       	ldd	r3, Y+17	; 0x11
    1930:	48 88       	ldd	r4, Y+16	; 0x10
    1932:	5f 84       	ldd	r5, Y+15	; 0x0f
    1934:	6e 84       	ldd	r6, Y+14	; 0x0e
    1936:	7d 84       	ldd	r7, Y+13	; 0x0d
    1938:	8c 84       	ldd	r8, Y+12	; 0x0c
    193a:	9b 84       	ldd	r9, Y+11	; 0x0b
    193c:	aa 84       	ldd	r10, Y+10	; 0x0a
    193e:	b9 84       	ldd	r11, Y+9	; 0x09
    1940:	c8 84       	ldd	r12, Y+8	; 0x08
    1942:	df 80       	ldd	r13, Y+7	; 0x07
    1944:	ee 80       	ldd	r14, Y+6	; 0x06
    1946:	fd 80       	ldd	r15, Y+5	; 0x05
    1948:	0c 81       	ldd	r16, Y+4	; 0x04
    194a:	1b 81       	ldd	r17, Y+3	; 0x03
    194c:	aa 81       	ldd	r26, Y+2	; 0x02
    194e:	b9 81       	ldd	r27, Y+1	; 0x01
    1950:	ce 0f       	add	r28, r30
    1952:	d1 1d       	adc	r29, r1
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	ed 01       	movw	r28, r26
    1960:	08 95       	ret

00001962 <_exit>:
    1962:	f8 94       	cli

00001964 <__stop_program>:
    1964:	ff cf       	rjmp	.-2      	; 0x1964 <__stop_program>
