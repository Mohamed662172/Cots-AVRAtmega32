
KPAD_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000475c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000168  00800060  0000475c  000047f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008001c8  008001c8  00004958  2**0
                  ALLOC
  3 .stab         00003504  00000000  00000000  00004958  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001058  00000000  00000000  00007e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009054  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009246  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b651  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c9d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000dbb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000dd70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e066  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e9d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3c       	cpi	r26, 0xC8	; 200
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ec       	ldi	r26, 0xC8	; 200
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3d       	cpi	r26, 0xD0	; 208
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1b 23 	call	0x4636	; 0x4636 <main>
      8a:	0c 94 ac 23 	jmp	0x4758	; 0x4758 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 75 23 	jmp	0x46ea	; 0x46ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 91 23 	jmp	0x4722	; 0x4722 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 81 23 	jmp	0x4702	; 0x4702 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9d 23 	jmp	0x473a	; 0x473a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 81 23 	jmp	0x4702	; 0x4702 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9d 23 	jmp	0x473a	; 0x473a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 75 23 	jmp	0x46ea	; 0x46ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 91 23 	jmp	0x4722	; 0x4722 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7d 23 	jmp	0x46fa	; 0x46fa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 99 23 	jmp	0x4732	; 0x4732 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 81 23 	jmp	0x4702	; 0x4702 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9d 23 	jmp	0x473a	; 0x473a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 81 23 	jmp	0x4702	; 0x4702 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9d 23 	jmp	0x473a	; 0x473a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 81 23 	jmp	0x4702	; 0x4702 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9d 23 	jmp	0x473a	; 0x473a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 85 23 	jmp	0x470a	; 0x470a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a1 23 	jmp	0x4742	; 0x4742 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 7d 23 	jmp	0x46fa	; 0x46fa <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 99 23 	jmp	0x4732	; 0x4732 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DIO__CheckStatusInit>:

/* HAL */

/* Defination Of Function  */
CheckStatus DIO__CheckStatusInit(Void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
     e38:	19 82       	std	Y+1, r1	; 0x01

        /* intial direction */

        {
                DDRA__UINT8_REG = CONC(DIO__UINT8_PA7_INITIAL_DIRECTION, DIO__UINT8_PA6_INITIAL_DIRECTION, DIO__UINT8_PA5_INITIAL_DIRECTION, DIO__UINT8_PA4_INITIAL_DIRECTION, DIO__UINT8_PA3_INITIAL_DIRECTION, DIO__UINT8_PA2_INITIAL_DIRECTION, DIO__UINT8_PA1_INITIAL_DIRECTION, DIO__UINT8_PA0_INITIAL_DIRECTION);
     e3a:	ea e3       	ldi	r30, 0x3A	; 58
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	8f e0       	ldi	r24, 0x0F	; 15
     e40:	80 83       	st	Z, r24
                DDRB__UINT8_REG = CONC(DIO__UINT8_PB7_INITIAL_DIRECTION, DIO__UINT8_PB6_INITIAL_DIRECTION, DIO__UINT8_PB5_INITIAL_DIRECTION, DIO__UINT8_PB4_INITIAL_DIRECTION, DIO__UINT8_PB3_INITIAL_DIRECTION, DIO__UINT8_PB2_INITIAL_DIRECTION, DIO__UINT8_PB1_INITIAL_DIRECTION, DIO__UINT8_PB0_INITIAL_DIRECTION);
     e42:	e7 e3       	ldi	r30, 0x37	; 55
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	80 83       	st	Z, r24
                DDRC__UINT8_REG = CONC(DIO__UINT8_PC7_INITIAL_DIRECTION, DIO__UINT8_PC6_INITIAL_DIRECTION, DIO__UINT8_PC5_INITIAL_DIRECTION, DIO__UINT8_PC4_INITIAL_DIRECTION, DIO__UINT8_PC3_INITIAL_DIRECTION, DIO__UINT8_PC2_INITIAL_DIRECTION, DIO__UINT8_PC1_INITIAL_DIRECTION, DIO__UINT8_PC0_INITIAL_DIRECTION);
     e4a:	e4 e3       	ldi	r30, 0x34	; 52
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 ef       	ldi	r24, 0xF0	; 240
     e50:	80 83       	st	Z, r24
                DDRD__UINT8_REG = CONC(DIO__UINT8_PD7_INITIAL_DIRECTION, DIO__UINT8_PD6_INITIAL_DIRECTION, DIO__UINT8_PD5_INITIAL_DIRECTION, DIO__UINT8_PD4_INITIAL_DIRECTION, DIO__UINT8_PD3_INITIAL_DIRECTION, DIO__UINT8_PD2_INITIAL_DIRECTION, DIO__UINT8_PD1_INITIAL_DIRECTION, DIO__UINT8_PD0_INITIAL_DIRECTION);
     e52:	e1 e3       	ldi	r30, 0x31	; 49
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	8f ef       	ldi	r24, 0xFF	; 255
     e58:	80 83       	st	Z, r24

                /* initial Value */

                PORTA__UINT8_REG = CONC(DIO__UINT8_PA7_INITIAL_VALUE, DIO__UINT8_PA6_INITIAL_VALUE, DIO__UINT8_PA5_INITIAL_VALUE, DIO__UINT8_PA4_INITIAL_VALUE, DIO__UINT8_PA3_INITIAL_VALUE, DIO__UINT8_PA2_INITIAL_VALUE, DIO__UINT8_PA1_INITIAL_VALUE, DIO__UINT8_PA0_INITIAL_VALUE);
     e5a:	eb e3       	ldi	r30, 0x3B	; 59
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	10 82       	st	Z, r1
                PORTB__UINT8_REG = CONC(DIO__UINT8_PB7_INITIAL_VALUE, DIO__UINT8_PB6_INITIAL_VALUE, DIO__UINT8_PB5_INITIAL_VALUE, DIO__UINT8_PB4_INITIAL_VALUE, DIO__UINT8_PB3_INITIAL_VALUE, DIO__UINT8_PB2_INITIAL_VALUE, DIO__UINT8_PB1_INITIAL_VALUE, DIO__UINT8_PB0_INITIAL_VALUE);
     e60:	e8 e3       	ldi	r30, 0x38	; 56
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	80 83       	st	Z, r24
                PORTC__UINT8_REG = CONC(DIO__UINT8_PC7_INITIAL_VALUE, DIO__UINT8_PC6_INITIAL_VALUE, DIO__UINT8_PC5_INITIAL_VALUE, DIO__UINT8_PC4_INITIAL_VALUE, DIO__UINT8_PC3_INITIAL_VALUE, DIO__UINT8_PC2_INITIAL_VALUE, DIO__UINT8_PC1_INITIAL_VALUE, DIO__UINT8_PC0_INITIAL_VALUE);
     e68:	e5 e3       	ldi	r30, 0x35	; 53
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	8f ef       	ldi	r24, 0xFF	; 255
     e6e:	80 83       	st	Z, r24
                PORTD__UINT8_REG = CONC(DIO__UINT8_PD7_INITIAL_VALUE, DIO__UINT8_PD6_INITIAL_VALUE, DIO__UINT8_PD5_INITIAL_VALUE, DIO__UINT8_PD4_INITIAL_VALUE, DIO__UINT8_PD3_INITIAL_VALUE, DIO__UINT8_PD2_INITIAL_VALUE, DIO__UINT8_PD1_INITIAL_VALUE, DIO__UINT8_PD0_INITIAL_VALUE);
     e70:	e2 e3       	ldi	r30, 0x32	; 50
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	10 82       	st	Z, r1
        }

        return Local_CheckStatusReturnStatus;
     e76:	89 81       	ldd	r24, Y+1	; 0x01
}
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <DIO__CheckStatusSetPinDirection>:

CheckStatus DIO__CheckStatusSetPinDirection(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 Copy__uint8PinDirection)
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	2f 97       	sbiw	r28, 0x0f	; 15
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61
     e94:	8a 83       	std	Y+2, r24	; 0x02
     e96:	6b 83       	std	Y+3, r22	; 0x03
     e98:	4c 83       	std	Y+4, r20	; 0x04
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
     e9a:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pin  Direction
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && ((Copy__uint8PinDirection == DIO__UINT8_OUTPUT) || (Copy__uint8PinDirection == DIO__UINT8_INPUT)))
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	84 30       	cpi	r24, 0x04	; 4
     ea0:	08 f0       	brcs	.+2      	; 0xea4 <DIO__CheckStatusSetPinDirection+0x24>
     ea2:	0e c1       	rjmp	.+540    	; 0x10c0 <DIO__CheckStatusSetPinDirection+0x240>
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	88 30       	cpi	r24, 0x08	; 8
     ea8:	08 f0       	brcs	.+2      	; 0xeac <DIO__CheckStatusSetPinDirection+0x2c>
     eaa:	0a c1       	rjmp	.+532    	; 0x10c0 <DIO__CheckStatusSetPinDirection+0x240>
     eac:	8c 81       	ldd	r24, Y+4	; 0x04
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	21 f0       	breq	.+8      	; 0xeba <DIO__CheckStatusSetPinDirection+0x3a>
     eb2:	8c 81       	ldd	r24, Y+4	; 0x04
     eb4:	88 23       	and	r24, r24
     eb6:	09 f0       	breq	.+2      	; 0xeba <DIO__CheckStatusSetPinDirection+0x3a>
     eb8:	03 c1       	rjmp	.+518    	; 0x10c0 <DIO__CheckStatusSetPinDirection+0x240>
        {
                switch (Copy__uint8PortId)
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	3f 87       	std	Y+15, r19	; 0x0f
     ec2:	2e 87       	std	Y+14, r18	; 0x0e
     ec4:	8e 85       	ldd	r24, Y+14	; 0x0e
     ec6:	9f 85       	ldd	r25, Y+15	; 0x0f
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	91 05       	cpc	r25, r1
     ecc:	09 f4       	brne	.+2      	; 0xed0 <DIO__CheckStatusSetPinDirection+0x50>
     ece:	4f c0       	rjmp	.+158    	; 0xf6e <DIO__CheckStatusSetPinDirection+0xee>
     ed0:	2e 85       	ldd	r18, Y+14	; 0x0e
     ed2:	3f 85       	ldd	r19, Y+15	; 0x0f
     ed4:	22 30       	cpi	r18, 0x02	; 2
     ed6:	31 05       	cpc	r19, r1
     ed8:	2c f4       	brge	.+10     	; 0xee4 <DIO__CheckStatusSetPinDirection+0x64>
     eda:	8e 85       	ldd	r24, Y+14	; 0x0e
     edc:	9f 85       	ldd	r25, Y+15	; 0x0f
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	71 f0       	breq	.+28     	; 0xefe <DIO__CheckStatusSetPinDirection+0x7e>
     ee2:	eb c0       	rjmp	.+470    	; 0x10ba <DIO__CheckStatusSetPinDirection+0x23a>
     ee4:	2e 85       	ldd	r18, Y+14	; 0x0e
     ee6:	3f 85       	ldd	r19, Y+15	; 0x0f
     ee8:	22 30       	cpi	r18, 0x02	; 2
     eea:	31 05       	cpc	r19, r1
     eec:	09 f4       	brne	.+2      	; 0xef0 <DIO__CheckStatusSetPinDirection+0x70>
     eee:	77 c0       	rjmp	.+238    	; 0xfde <DIO__CheckStatusSetPinDirection+0x15e>
     ef0:	8e 85       	ldd	r24, Y+14	; 0x0e
     ef2:	9f 85       	ldd	r25, Y+15	; 0x0f
     ef4:	83 30       	cpi	r24, 0x03	; 3
     ef6:	91 05       	cpc	r25, r1
     ef8:	09 f4       	brne	.+2      	; 0xefc <DIO__CheckStatusSetPinDirection+0x7c>
     efa:	a9 c0       	rjmp	.+338    	; 0x104e <DIO__CheckStatusSetPinDirection+0x1ce>
     efc:	de c0       	rjmp	.+444    	; 0x10ba <DIO__CheckStatusSetPinDirection+0x23a>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PinDirection)
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	3d 87       	std	Y+13, r19	; 0x0d
     f06:	2c 87       	std	Y+12, r18	; 0x0c
     f08:	8c 85       	ldd	r24, Y+12	; 0x0c
     f0a:	9d 85       	ldd	r25, Y+13	; 0x0d
     f0c:	00 97       	sbiw	r24, 0x00	; 0
     f0e:	d1 f0       	breq	.+52     	; 0xf44 <DIO__CheckStatusSetPinDirection+0xc4>
     f10:	2c 85       	ldd	r18, Y+12	; 0x0c
     f12:	3d 85       	ldd	r19, Y+13	; 0x0d
     f14:	21 30       	cpi	r18, 0x01	; 1
     f16:	31 05       	cpc	r19, r1
     f18:	09 f0       	breq	.+2      	; 0xf1c <DIO__CheckStatusSetPinDirection+0x9c>
     f1a:	cf c0       	rjmp	.+414    	; 0x10ba <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRA__UINT8_REG, Copy__uint8PinId);
     f1c:	aa e3       	ldi	r26, 0x3A	; 58
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	ea e3       	ldi	r30, 0x3A	; 58
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO__CheckStatusSetPinDirection+0xba>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DIO__CheckStatusSetPinDirection+0xb6>
     f3e:	84 2b       	or	r24, r20
     f40:	8c 93       	st	X, r24
     f42:	bb c0       	rjmp	.+374    	; 0x10ba <DIO__CheckStatusSetPinDirection+0x23a>
                                break;

                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRA__UINT8_REG, Copy__uint8PinId);
     f44:	aa e3       	ldi	r26, 0x3A	; 58
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	ea e3       	ldi	r30, 0x3A	; 58
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO__CheckStatusSetPinDirection+0xe2>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO__CheckStatusSetPinDirection+0xde>
     f66:	80 95       	com	r24
     f68:	84 23       	and	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	a6 c0       	rjmp	.+332    	; 0x10ba <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PinDirection)
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	3b 87       	std	Y+11, r19	; 0x0b
     f76:	2a 87       	std	Y+10, r18	; 0x0a
     f78:	8a 85       	ldd	r24, Y+10	; 0x0a
     f7a:	9b 85       	ldd	r25, Y+11	; 0x0b
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	d1 f0       	breq	.+52     	; 0xfb4 <DIO__CheckStatusSetPinDirection+0x134>
     f80:	2a 85       	ldd	r18, Y+10	; 0x0a
     f82:	3b 85       	ldd	r19, Y+11	; 0x0b
     f84:	21 30       	cpi	r18, 0x01	; 1
     f86:	31 05       	cpc	r19, r1
     f88:	09 f0       	breq	.+2      	; 0xf8c <DIO__CheckStatusSetPinDirection+0x10c>
     f8a:	97 c0       	rjmp	.+302    	; 0x10ba <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRB__UINT8_REG, Copy__uint8PinId);
     f8c:	a7 e3       	ldi	r26, 0x37	; 55
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e7 e3       	ldi	r30, 0x37	; 55
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO__CheckStatusSetPinDirection+0x12a>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO__CheckStatusSetPinDirection+0x126>
     fae:	84 2b       	or	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	83 c0       	rjmp	.+262    	; 0x10ba <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRB__UINT8_REG, Copy__uint8PinId);
     fb4:	a7 e3       	ldi	r26, 0x37	; 55
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e7 e3       	ldi	r30, 0x37	; 55
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO__CheckStatusSetPinDirection+0x152>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO__CheckStatusSetPinDirection+0x14e>
     fd6:	80 95       	com	r24
     fd8:	84 23       	and	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	6e c0       	rjmp	.+220    	; 0x10ba <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PinDirection)
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	39 87       	std	Y+9, r19	; 0x09
     fe6:	28 87       	std	Y+8, r18	; 0x08
     fe8:	88 85       	ldd	r24, Y+8	; 0x08
     fea:	99 85       	ldd	r25, Y+9	; 0x09
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	d1 f0       	breq	.+52     	; 0x1024 <DIO__CheckStatusSetPinDirection+0x1a4>
     ff0:	28 85       	ldd	r18, Y+8	; 0x08
     ff2:	39 85       	ldd	r19, Y+9	; 0x09
     ff4:	21 30       	cpi	r18, 0x01	; 1
     ff6:	31 05       	cpc	r19, r1
     ff8:	09 f0       	breq	.+2      	; 0xffc <DIO__CheckStatusSetPinDirection+0x17c>
     ffa:	5f c0       	rjmp	.+190    	; 0x10ba <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRC__UINT8_REG, Copy__uint8PinId);
     ffc:	a4 e3       	ldi	r26, 0x34	; 52
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e4 e3       	ldi	r30, 0x34	; 52
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <DIO__CheckStatusSetPinDirection+0x19a>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <DIO__CheckStatusSetPinDirection+0x196>
    101e:	84 2b       	or	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	4b c0       	rjmp	.+150    	; 0x10ba <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRC__UINT8_REG, Copy__uint8PinId);
    1024:	a4 e3       	ldi	r26, 0x34	; 52
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e4 e3       	ldi	r30, 0x34	; 52
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <DIO__CheckStatusSetPinDirection+0x1c2>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <DIO__CheckStatusSetPinDirection+0x1be>
    1046:	80 95       	com	r24
    1048:	84 23       	and	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	36 c0       	rjmp	.+108    	; 0x10ba <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PinDirection)
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	3f 83       	std	Y+7, r19	; 0x07
    1056:	2e 83       	std	Y+6, r18	; 0x06
    1058:	8e 81       	ldd	r24, Y+6	; 0x06
    105a:	9f 81       	ldd	r25, Y+7	; 0x07
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	c9 f0       	breq	.+50     	; 0x1092 <DIO__CheckStatusSetPinDirection+0x212>
    1060:	2e 81       	ldd	r18, Y+6	; 0x06
    1062:	3f 81       	ldd	r19, Y+7	; 0x07
    1064:	21 30       	cpi	r18, 0x01	; 1
    1066:	31 05       	cpc	r19, r1
    1068:	41 f5       	brne	.+80     	; 0x10ba <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRD__UINT8_REG, Copy__uint8PinId);
    106a:	a1 e3       	ldi	r26, 0x31	; 49
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e1 e3       	ldi	r30, 0x31	; 49
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO__CheckStatusSetPinDirection+0x208>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <DIO__CheckStatusSetPinDirection+0x204>
    108c:	84 2b       	or	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	14 c0       	rjmp	.+40     	; 0x10ba <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRD__UINT8_REG, Copy__uint8PinId);
    1092:	a1 e3       	ldi	r26, 0x31	; 49
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e1 e3       	ldi	r30, 0x31	; 49
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO__CheckStatusSetPinDirection+0x230>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO__CheckStatusSetPinDirection+0x22c>
    10b4:	80 95       	com	r24
    10b6:	84 23       	and	r24, r20
    10b8:	8c 93       	st	X, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    10ba:	39 81       	ldd	r19, Y+1	; 0x01
    10bc:	3d 83       	std	Y+5, r19	; 0x05
    10be:	04 c0       	rjmp	.+8      	; 0x10c8 <DIO__CheckStatusSetPinDirection+0x248>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	8d 83       	std	Y+5, r24	; 0x05
    10c8:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    10ca:	2f 96       	adiw	r28, 0x0f	; 15
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <DIO__CheckStatusSetPinValue>:

CheckStatus DIO__CheckStatusSetPinValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 Copy__uint8PinValue)
{
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	2f 97       	sbiw	r28, 0x0f	; 15
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	8a 83       	std	Y+2, r24	; 0x02
    10f2:	6b 83       	std	Y+3, r22	; 0x03
    10f4:	4c 83       	std	Y+4, r20	; 0x04
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    10f6:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pin  Value 
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && ((Copy__uint8PinValue == DIO__UINT8_HIGH) || (Copy__uint8PinValue == DIO__UINT8_LOW)))
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	84 30       	cpi	r24, 0x04	; 4
    10fc:	08 f0       	brcs	.+2      	; 0x1100 <DIO__CheckStatusSetPinValue+0x24>
    10fe:	0e c1       	rjmp	.+540    	; 0x131c <DIO__CheckStatusSetPinValue+0x240>
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	88 30       	cpi	r24, 0x08	; 8
    1104:	08 f0       	brcs	.+2      	; 0x1108 <DIO__CheckStatusSetPinValue+0x2c>
    1106:	0a c1       	rjmp	.+532    	; 0x131c <DIO__CheckStatusSetPinValue+0x240>
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	21 f0       	breq	.+8      	; 0x1116 <DIO__CheckStatusSetPinValue+0x3a>
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
    1110:	88 23       	and	r24, r24
    1112:	09 f0       	breq	.+2      	; 0x1116 <DIO__CheckStatusSetPinValue+0x3a>
    1114:	03 c1       	rjmp	.+518    	; 0x131c <DIO__CheckStatusSetPinValue+0x240>
        {
                switch (Copy__uint8PortId)
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	3f 87       	std	Y+15, r19	; 0x0f
    111e:	2e 87       	std	Y+14, r18	; 0x0e
    1120:	8e 85       	ldd	r24, Y+14	; 0x0e
    1122:	9f 85       	ldd	r25, Y+15	; 0x0f
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	91 05       	cpc	r25, r1
    1128:	09 f4       	brne	.+2      	; 0x112c <DIO__CheckStatusSetPinValue+0x50>
    112a:	4f c0       	rjmp	.+158    	; 0x11ca <DIO__CheckStatusSetPinValue+0xee>
    112c:	2e 85       	ldd	r18, Y+14	; 0x0e
    112e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1130:	22 30       	cpi	r18, 0x02	; 2
    1132:	31 05       	cpc	r19, r1
    1134:	2c f4       	brge	.+10     	; 0x1140 <DIO__CheckStatusSetPinValue+0x64>
    1136:	8e 85       	ldd	r24, Y+14	; 0x0e
    1138:	9f 85       	ldd	r25, Y+15	; 0x0f
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	71 f0       	breq	.+28     	; 0x115a <DIO__CheckStatusSetPinValue+0x7e>
    113e:	eb c0       	rjmp	.+470    	; 0x1316 <DIO__CheckStatusSetPinValue+0x23a>
    1140:	2e 85       	ldd	r18, Y+14	; 0x0e
    1142:	3f 85       	ldd	r19, Y+15	; 0x0f
    1144:	22 30       	cpi	r18, 0x02	; 2
    1146:	31 05       	cpc	r19, r1
    1148:	09 f4       	brne	.+2      	; 0x114c <DIO__CheckStatusSetPinValue+0x70>
    114a:	77 c0       	rjmp	.+238    	; 0x123a <DIO__CheckStatusSetPinValue+0x15e>
    114c:	8e 85       	ldd	r24, Y+14	; 0x0e
    114e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1150:	83 30       	cpi	r24, 0x03	; 3
    1152:	91 05       	cpc	r25, r1
    1154:	09 f4       	brne	.+2      	; 0x1158 <DIO__CheckStatusSetPinValue+0x7c>
    1156:	a9 c0       	rjmp	.+338    	; 0x12aa <DIO__CheckStatusSetPinValue+0x1ce>
    1158:	de c0       	rjmp	.+444    	; 0x1316 <DIO__CheckStatusSetPinValue+0x23a>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PinValue)
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	3d 87       	std	Y+13, r19	; 0x0d
    1162:	2c 87       	std	Y+12, r18	; 0x0c
    1164:	8c 85       	ldd	r24, Y+12	; 0x0c
    1166:	9d 85       	ldd	r25, Y+13	; 0x0d
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	d1 f0       	breq	.+52     	; 0x11a0 <DIO__CheckStatusSetPinValue+0xc4>
    116c:	2c 85       	ldd	r18, Y+12	; 0x0c
    116e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1170:	21 30       	cpi	r18, 0x01	; 1
    1172:	31 05       	cpc	r19, r1
    1174:	09 f0       	breq	.+2      	; 0x1178 <DIO__CheckStatusSetPinValue+0x9c>
    1176:	cf c0       	rjmp	.+414    	; 0x1316 <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTA__UINT8_REG, Copy__uint8PinId);
    1178:	ab e3       	ldi	r26, 0x3B	; 59
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	eb e3       	ldi	r30, 0x3B	; 59
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO__CheckStatusSetPinValue+0xba>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO__CheckStatusSetPinValue+0xb6>
    119a:	84 2b       	or	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	bb c0       	rjmp	.+374    	; 0x1316 <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTA__UINT8_REG, Copy__uint8PinId);
    11a0:	ab e3       	ldi	r26, 0x3B	; 59
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	eb e3       	ldi	r30, 0x3B	; 59
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <DIO__CheckStatusSetPinValue+0xe2>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <DIO__CheckStatusSetPinValue+0xde>
    11c2:	80 95       	com	r24
    11c4:	84 23       	and	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	a6 c0       	rjmp	.+332    	; 0x1316 <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PinValue)
    11ca:	8c 81       	ldd	r24, Y+4	; 0x04
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	3b 87       	std	Y+11, r19	; 0x0b
    11d2:	2a 87       	std	Y+10, r18	; 0x0a
    11d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    11d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	d1 f0       	breq	.+52     	; 0x1210 <DIO__CheckStatusSetPinValue+0x134>
    11dc:	2a 85       	ldd	r18, Y+10	; 0x0a
    11de:	3b 85       	ldd	r19, Y+11	; 0x0b
    11e0:	21 30       	cpi	r18, 0x01	; 1
    11e2:	31 05       	cpc	r19, r1
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <DIO__CheckStatusSetPinValue+0x10c>
    11e6:	97 c0       	rjmp	.+302    	; 0x1316 <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTB__UINT8_REG, Copy__uint8PinId);
    11e8:	a8 e3       	ldi	r26, 0x38	; 56
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e8 e3       	ldi	r30, 0x38	; 56
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <DIO__CheckStatusSetPinValue+0x12a>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <DIO__CheckStatusSetPinValue+0x126>
    120a:	84 2b       	or	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	83 c0       	rjmp	.+262    	; 0x1316 <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTB__UINT8_REG, Copy__uint8PinId);
    1210:	a8 e3       	ldi	r26, 0x38	; 56
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e8 e3       	ldi	r30, 0x38	; 56
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	48 2f       	mov	r20, r24
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 2e       	mov	r0, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <DIO__CheckStatusSetPinValue+0x152>
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	0a 94       	dec	r0
    1230:	e2 f7       	brpl	.-8      	; 0x122a <DIO__CheckStatusSetPinValue+0x14e>
    1232:	80 95       	com	r24
    1234:	84 23       	and	r24, r20
    1236:	8c 93       	st	X, r24
    1238:	6e c0       	rjmp	.+220    	; 0x1316 <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PinValue)
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	39 87       	std	Y+9, r19	; 0x09
    1242:	28 87       	std	Y+8, r18	; 0x08
    1244:	88 85       	ldd	r24, Y+8	; 0x08
    1246:	99 85       	ldd	r25, Y+9	; 0x09
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	d1 f0       	breq	.+52     	; 0x1280 <DIO__CheckStatusSetPinValue+0x1a4>
    124c:	28 85       	ldd	r18, Y+8	; 0x08
    124e:	39 85       	ldd	r19, Y+9	; 0x09
    1250:	21 30       	cpi	r18, 0x01	; 1
    1252:	31 05       	cpc	r19, r1
    1254:	09 f0       	breq	.+2      	; 0x1258 <DIO__CheckStatusSetPinValue+0x17c>
    1256:	5f c0       	rjmp	.+190    	; 0x1316 <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTC__UINT8_REG, Copy__uint8PinId);
    1258:	a5 e3       	ldi	r26, 0x35	; 53
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e5 e3       	ldi	r30, 0x35	; 53
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <DIO__CheckStatusSetPinValue+0x19a>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <DIO__CheckStatusSetPinValue+0x196>
    127a:	84 2b       	or	r24, r20
    127c:	8c 93       	st	X, r24
    127e:	4b c0       	rjmp	.+150    	; 0x1316 <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTC__UINT8_REG, Copy__uint8PinId);
    1280:	a5 e3       	ldi	r26, 0x35	; 53
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e5 e3       	ldi	r30, 0x35	; 53
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <DIO__CheckStatusSetPinValue+0x1c2>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <DIO__CheckStatusSetPinValue+0x1be>
    12a2:	80 95       	com	r24
    12a4:	84 23       	and	r24, r20
    12a6:	8c 93       	st	X, r24
    12a8:	36 c0       	rjmp	.+108    	; 0x1316 <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PinValue)
    12aa:	8c 81       	ldd	r24, Y+4	; 0x04
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	3f 83       	std	Y+7, r19	; 0x07
    12b2:	2e 83       	std	Y+6, r18	; 0x06
    12b4:	8e 81       	ldd	r24, Y+6	; 0x06
    12b6:	9f 81       	ldd	r25, Y+7	; 0x07
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	c9 f0       	breq	.+50     	; 0x12ee <DIO__CheckStatusSetPinValue+0x212>
    12bc:	2e 81       	ldd	r18, Y+6	; 0x06
    12be:	3f 81       	ldd	r19, Y+7	; 0x07
    12c0:	21 30       	cpi	r18, 0x01	; 1
    12c2:	31 05       	cpc	r19, r1
    12c4:	41 f5       	brne	.+80     	; 0x1316 <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTD__UINT8_REG, Copy__uint8PinId);
    12c6:	a2 e3       	ldi	r26, 0x32	; 50
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e2 e3       	ldi	r30, 0x32	; 50
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO__CheckStatusSetPinValue+0x208>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <DIO__CheckStatusSetPinValue+0x204>
    12e8:	84 2b       	or	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	14 c0       	rjmp	.+40     	; 0x1316 <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTD__UINT8_REG, Copy__uint8PinId);
    12ee:	a2 e3       	ldi	r26, 0x32	; 50
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e2 e3       	ldi	r30, 0x32	; 50
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	48 2f       	mov	r20, r24
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	02 2e       	mov	r0, r18
    1306:	02 c0       	rjmp	.+4      	; 0x130c <DIO__CheckStatusSetPinValue+0x230>
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	0a 94       	dec	r0
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <DIO__CheckStatusSetPinValue+0x22c>
    1310:	80 95       	com	r24
    1312:	84 23       	and	r24, r20
    1314:	8c 93       	st	X, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1316:	39 81       	ldd	r19, Y+1	; 0x01
    1318:	3d 83       	std	Y+5, r19	; 0x05
    131a:	04 c0       	rjmp	.+8      	; 0x1324 <DIO__CheckStatusSetPinValue+0x248>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	8d 83       	std	Y+5, r24	; 0x05
    1324:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    1326:	2f 96       	adiw	r28, 0x0f	; 15
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <DIO__CheckStatusGetPinValue>:

CheckStatus DIO__CheckStatusGetPinValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 *Copy_p_uint8ReturnPinValue)
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	28 97       	sbiw	r28, 0x08	; 8
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	8a 83       	std	Y+2, r24	; 0x02
    134e:	6b 83       	std	Y+3, r22	; 0x03
    1350:	5d 83       	std	Y+5, r21	; 0x05
    1352:	4c 83       	std	Y+4, r20	; 0x04

        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    1354:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pointer != NULL
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && (Copy_p_uint8ReturnPinValue != NULL))
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	84 30       	cpi	r24, 0x04	; 4
    135a:	08 f0       	brcs	.+2      	; 0x135e <DIO__CheckStatusGetPinValue+0x26>
    135c:	ec c0       	rjmp	.+472    	; 0x1536 <DIO__CheckStatusGetPinValue+0x1fe>
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	88 30       	cpi	r24, 0x08	; 8
    1362:	08 f0       	brcs	.+2      	; 0x1366 <DIO__CheckStatusGetPinValue+0x2e>
    1364:	e8 c0       	rjmp	.+464    	; 0x1536 <DIO__CheckStatusGetPinValue+0x1fe>
    1366:	8c 81       	ldd	r24, Y+4	; 0x04
    1368:	9d 81       	ldd	r25, Y+5	; 0x05
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	09 f4       	brne	.+2      	; 0x1370 <DIO__CheckStatusGetPinValue+0x38>
    136e:	e3 c0       	rjmp	.+454    	; 0x1536 <DIO__CheckStatusGetPinValue+0x1fe>
        {
                switch (Copy__uint8PortId)
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	38 87       	std	Y+8, r19	; 0x08
    1378:	2f 83       	std	Y+7, r18	; 0x07
    137a:	4f 81       	ldd	r20, Y+7	; 0x07
    137c:	58 85       	ldd	r21, Y+8	; 0x08
    137e:	41 30       	cpi	r20, 0x01	; 1
    1380:	51 05       	cpc	r21, r1
    1382:	09 f4       	brne	.+2      	; 0x1386 <DIO__CheckStatusGetPinValue+0x4e>
    1384:	48 c0       	rjmp	.+144    	; 0x1416 <DIO__CheckStatusGetPinValue+0xde>
    1386:	8f 81       	ldd	r24, Y+7	; 0x07
    1388:	98 85       	ldd	r25, Y+8	; 0x08
    138a:	82 30       	cpi	r24, 0x02	; 2
    138c:	91 05       	cpc	r25, r1
    138e:	34 f4       	brge	.+12     	; 0x139c <DIO__CheckStatusGetPinValue+0x64>
    1390:	2f 81       	ldd	r18, Y+7	; 0x07
    1392:	38 85       	ldd	r19, Y+8	; 0x08
    1394:	21 15       	cp	r18, r1
    1396:	31 05       	cpc	r19, r1
    1398:	71 f0       	breq	.+28     	; 0x13b6 <DIO__CheckStatusGetPinValue+0x7e>
    139a:	ca c0       	rjmp	.+404    	; 0x1530 <DIO__CheckStatusGetPinValue+0x1f8>
    139c:	4f 81       	ldd	r20, Y+7	; 0x07
    139e:	58 85       	ldd	r21, Y+8	; 0x08
    13a0:	42 30       	cpi	r20, 0x02	; 2
    13a2:	51 05       	cpc	r21, r1
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <DIO__CheckStatusGetPinValue+0x70>
    13a6:	67 c0       	rjmp	.+206    	; 0x1476 <DIO__CheckStatusGetPinValue+0x13e>
    13a8:	8f 81       	ldd	r24, Y+7	; 0x07
    13aa:	98 85       	ldd	r25, Y+8	; 0x08
    13ac:	83 30       	cpi	r24, 0x03	; 3
    13ae:	91 05       	cpc	r25, r1
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <DIO__CheckStatusGetPinValue+0x7c>
    13b2:	90 c0       	rjmp	.+288    	; 0x14d4 <DIO__CheckStatusGetPinValue+0x19c>
    13b4:	bd c0       	rjmp	.+378    	; 0x1530 <DIO__CheckStatusGetPinValue+0x1f8>
                {
                case DIO__UINT8_PORTA:
                        if (GET_BIT(PINA__UINT8_REG, Copy__uint8PinId) == 0)
    13b6:	e9 e3       	ldi	r30, 0x39	; 57
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	88 2f       	mov	r24, r24
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a9 01       	movw	r20, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <DIO__CheckStatusGetPinValue+0x96>
    13ca:	55 95       	asr	r21
    13cc:	47 95       	ror	r20
    13ce:	8a 95       	dec	r24
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <DIO__CheckStatusGetPinValue+0x92>
    13d2:	ca 01       	movw	r24, r20
    13d4:	81 70       	andi	r24, 0x01	; 1
    13d6:	90 70       	andi	r25, 0x00	; 0
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	21 f4       	brne	.+8      	; 0x13e4 <DIO__CheckStatusGetPinValue+0xac>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    13dc:	ec 81       	ldd	r30, Y+4	; 0x04
    13de:	fd 81       	ldd	r31, Y+5	; 0x05
    13e0:	10 82       	st	Z, r1
    13e2:	a6 c0       	rjmp	.+332    	; 0x1530 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINA__UINT8_REG, Copy__uint8PinId) != 0)
    13e4:	e9 e3       	ldi	r30, 0x39	; 57
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	88 2f       	mov	r24, r24
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	a9 01       	movw	r20, r18
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <DIO__CheckStatusGetPinValue+0xc4>
    13f8:	55 95       	asr	r21
    13fa:	47 95       	ror	r20
    13fc:	8a 95       	dec	r24
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <DIO__CheckStatusGetPinValue+0xc0>
    1400:	ca 01       	movw	r24, r20
    1402:	81 70       	andi	r24, 0x01	; 1
    1404:	90 70       	andi	r25, 0x00	; 0
    1406:	88 23       	and	r24, r24
    1408:	09 f4       	brne	.+2      	; 0x140c <DIO__CheckStatusGetPinValue+0xd4>
    140a:	92 c0       	rjmp	.+292    	; 0x1530 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    140c:	ec 81       	ldd	r30, Y+4	; 0x04
    140e:	fd 81       	ldd	r31, Y+5	; 0x05
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	80 83       	st	Z, r24
    1414:	8d c0       	rjmp	.+282    	; 0x1530 <DIO__CheckStatusGetPinValue+0x1f8>
                                /* DO NOTHING */
                        }

                        break;
                case DIO__UINT8_PORTB:
                        if (GET_BIT(PINB__UINT8_REG, Copy__uint8PinId) == 0)
    1416:	e6 e3       	ldi	r30, 0x36	; 54
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	88 2f       	mov	r24, r24
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a9 01       	movw	r20, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO__CheckStatusGetPinValue+0xf6>
    142a:	55 95       	asr	r21
    142c:	47 95       	ror	r20
    142e:	8a 95       	dec	r24
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO__CheckStatusGetPinValue+0xf2>
    1432:	ca 01       	movw	r24, r20
    1434:	81 70       	andi	r24, 0x01	; 1
    1436:	90 70       	andi	r25, 0x00	; 0
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	21 f4       	brne	.+8      	; 0x1444 <DIO__CheckStatusGetPinValue+0x10c>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    143c:	ec 81       	ldd	r30, Y+4	; 0x04
    143e:	fd 81       	ldd	r31, Y+5	; 0x05
    1440:	10 82       	st	Z, r1
    1442:	76 c0       	rjmp	.+236    	; 0x1530 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINB__UINT8_REG, Copy__uint8PinId) != 0)
    1444:	e6 e3       	ldi	r30, 0x36	; 54
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a9 01       	movw	r20, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO__CheckStatusGetPinValue+0x124>
    1458:	55 95       	asr	r21
    145a:	47 95       	ror	r20
    145c:	8a 95       	dec	r24
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO__CheckStatusGetPinValue+0x120>
    1460:	ca 01       	movw	r24, r20
    1462:	81 70       	andi	r24, 0x01	; 1
    1464:	90 70       	andi	r25, 0x00	; 0
    1466:	88 23       	and	r24, r24
    1468:	09 f4       	brne	.+2      	; 0x146c <DIO__CheckStatusGetPinValue+0x134>
    146a:	62 c0       	rjmp	.+196    	; 0x1530 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    146c:	ec 81       	ldd	r30, Y+4	; 0x04
    146e:	fd 81       	ldd	r31, Y+5	; 0x05
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	80 83       	st	Z, r24
    1474:	5d c0       	rjmp	.+186    	; 0x1530 <DIO__CheckStatusGetPinValue+0x1f8>

                        break;

                case DIO__UINT8_PORTC:

                        if (GET_BIT(PINC__UINT8_REG, Copy__uint8PinId) == 0)
    1476:	e3 e3       	ldi	r30, 0x33	; 51
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	88 2f       	mov	r24, r24
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	a9 01       	movw	r20, r18
    1488:	02 c0       	rjmp	.+4      	; 0x148e <DIO__CheckStatusGetPinValue+0x156>
    148a:	55 95       	asr	r21
    148c:	47 95       	ror	r20
    148e:	8a 95       	dec	r24
    1490:	e2 f7       	brpl	.-8      	; 0x148a <DIO__CheckStatusGetPinValue+0x152>
    1492:	ca 01       	movw	r24, r20
    1494:	81 70       	andi	r24, 0x01	; 1
    1496:	90 70       	andi	r25, 0x00	; 0
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	21 f4       	brne	.+8      	; 0x14a4 <DIO__CheckStatusGetPinValue+0x16c>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    149c:	ec 81       	ldd	r30, Y+4	; 0x04
    149e:	fd 81       	ldd	r31, Y+5	; 0x05
    14a0:	10 82       	st	Z, r1
    14a2:	46 c0       	rjmp	.+140    	; 0x1530 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINC__UINT8_REG, Copy__uint8PinId) != 0)
    14a4:	e3 e3       	ldi	r30, 0x33	; 51
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	88 2f       	mov	r24, r24
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a9 01       	movw	r20, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <DIO__CheckStatusGetPinValue+0x184>
    14b8:	55 95       	asr	r21
    14ba:	47 95       	ror	r20
    14bc:	8a 95       	dec	r24
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <DIO__CheckStatusGetPinValue+0x180>
    14c0:	ca 01       	movw	r24, r20
    14c2:	81 70       	andi	r24, 0x01	; 1
    14c4:	90 70       	andi	r25, 0x00	; 0
    14c6:	88 23       	and	r24, r24
    14c8:	99 f1       	breq	.+102    	; 0x1530 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    14ca:	ec 81       	ldd	r30, Y+4	; 0x04
    14cc:	fd 81       	ldd	r31, Y+5	; 0x05
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	80 83       	st	Z, r24
    14d2:	2e c0       	rjmp	.+92     	; 0x1530 <DIO__CheckStatusGetPinValue+0x1f8>
                                /* DO NOTHING */
                        }

                        break;
                case DIO__UINT8_PORTD:
                        if (GET_BIT(PIND__UINT8_REG, Copy__uint8PinId) == 0)
    14d4:	e0 e3       	ldi	r30, 0x30	; 48
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a9 01       	movw	r20, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO__CheckStatusGetPinValue+0x1b4>
    14e8:	55 95       	asr	r21
    14ea:	47 95       	ror	r20
    14ec:	8a 95       	dec	r24
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <DIO__CheckStatusGetPinValue+0x1b0>
    14f0:	ca 01       	movw	r24, r20
    14f2:	81 70       	andi	r24, 0x01	; 1
    14f4:	90 70       	andi	r25, 0x00	; 0
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	21 f4       	brne	.+8      	; 0x1502 <DIO__CheckStatusGetPinValue+0x1ca>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    14fa:	ec 81       	ldd	r30, Y+4	; 0x04
    14fc:	fd 81       	ldd	r31, Y+5	; 0x05
    14fe:	10 82       	st	Z, r1
    1500:	17 c0       	rjmp	.+46     	; 0x1530 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PIND__UINT8_REG, Copy__uint8PinId) != 0)
    1502:	e0 e3       	ldi	r30, 0x30	; 48
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	a9 01       	movw	r20, r18
    1514:	02 c0       	rjmp	.+4      	; 0x151a <DIO__CheckStatusGetPinValue+0x1e2>
    1516:	55 95       	asr	r21
    1518:	47 95       	ror	r20
    151a:	8a 95       	dec	r24
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <DIO__CheckStatusGetPinValue+0x1de>
    151e:	ca 01       	movw	r24, r20
    1520:	81 70       	andi	r24, 0x01	; 1
    1522:	90 70       	andi	r25, 0x00	; 0
    1524:	88 23       	and	r24, r24
    1526:	21 f0       	breq	.+8      	; 0x1530 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    1528:	ec 81       	ldd	r30, Y+4	; 0x04
    152a:	fd 81       	ldd	r31, Y+5	; 0x05
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1530:	59 81       	ldd	r21, Y+1	; 0x01
    1532:	5e 83       	std	Y+6, r21	; 0x06
    1534:	04 c0       	rjmp	.+8      	; 0x153e <DIO__CheckStatusGetPinValue+0x206>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	8e 83       	std	Y+6, r24	; 0x06
    153e:	8e 81       	ldd	r24, Y+6	; 0x06
        }
}
    1540:	28 96       	adiw	r28, 0x08	; 8
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <DIO__CheckStatusSetPortDirection>:

CheckStatus DIO__CheckStatusSetPortDirection(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PortDirection)
{
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	2e 97       	sbiw	r28, 0x0e	; 14
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	8a 83       	std	Y+2, r24	; 0x02
    1568:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    156a:	19 82       	std	Y+1, r1	; 0x01
        /* 
        Check 1-Valid Port Id
              2-Valid PORT diraction 
        */

        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && ((Copy__uint8PortDirection == DIO__UINT8_OUTPUT) || (Copy__uint8PortDirection == DIO__UINT8_INPUT)))
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	84 30       	cpi	r24, 0x04	; 4
    1570:	08 f0       	brcs	.+2      	; 0x1574 <DIO__CheckStatusSetPortDirection+0x22>
    1572:	89 c0       	rjmp	.+274    	; 0x1686 <DIO__CheckStatusSetPortDirection+0x134>
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	21 f0       	breq	.+8      	; 0x1582 <DIO__CheckStatusSetPortDirection+0x30>
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	88 23       	and	r24, r24
    157e:	09 f0       	breq	.+2      	; 0x1582 <DIO__CheckStatusSetPortDirection+0x30>
    1580:	82 c0       	rjmp	.+260    	; 0x1686 <DIO__CheckStatusSetPortDirection+0x134>
        {
                switch (Copy__uint8PortId)
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	3e 87       	std	Y+14, r19	; 0x0e
    158a:	2d 87       	std	Y+13, r18	; 0x0d
    158c:	8d 85       	ldd	r24, Y+13	; 0x0d
    158e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	91 05       	cpc	r25, r1
    1594:	71 f1       	breq	.+92     	; 0x15f2 <DIO__CheckStatusSetPortDirection+0xa0>
    1596:	2d 85       	ldd	r18, Y+13	; 0x0d
    1598:	3e 85       	ldd	r19, Y+14	; 0x0e
    159a:	22 30       	cpi	r18, 0x02	; 2
    159c:	31 05       	cpc	r19, r1
    159e:	2c f4       	brge	.+10     	; 0x15aa <DIO__CheckStatusSetPortDirection+0x58>
    15a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	69 f0       	breq	.+26     	; 0x15c2 <DIO__CheckStatusSetPortDirection+0x70>
    15a8:	6b c0       	rjmp	.+214    	; 0x1680 <DIO__CheckStatusSetPortDirection+0x12e>
    15aa:	2d 85       	ldd	r18, Y+13	; 0x0d
    15ac:	3e 85       	ldd	r19, Y+14	; 0x0e
    15ae:	22 30       	cpi	r18, 0x02	; 2
    15b0:	31 05       	cpc	r19, r1
    15b2:	b9 f1       	breq	.+110    	; 0x1622 <DIO__CheckStatusSetPortDirection+0xd0>
    15b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b8:	83 30       	cpi	r24, 0x03	; 3
    15ba:	91 05       	cpc	r25, r1
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <DIO__CheckStatusSetPortDirection+0x6e>
    15be:	49 c0       	rjmp	.+146    	; 0x1652 <DIO__CheckStatusSetPortDirection+0x100>
    15c0:	5f c0       	rjmp	.+190    	; 0x1680 <DIO__CheckStatusSetPortDirection+0x12e>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PortDirection)
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	3c 87       	std	Y+12, r19	; 0x0c
    15ca:	2b 87       	std	Y+11, r18	; 0x0b
    15cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    15ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	31 f0       	breq	.+12     	; 0x15e0 <DIO__CheckStatusSetPortDirection+0x8e>
    15d4:	2b 85       	ldd	r18, Y+11	; 0x0b
    15d6:	3c 85       	ldd	r19, Y+12	; 0x0c
    15d8:	21 30       	cpi	r18, 0x01	; 1
    15da:	31 05       	cpc	r19, r1
    15dc:	29 f0       	breq	.+10     	; 0x15e8 <DIO__CheckStatusSetPortDirection+0x96>
    15de:	50 c0       	rjmp	.+160    	; 0x1680 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTA__UINT8_REG = 0x00;
    15e0:	eb e3       	ldi	r30, 0x3B	; 59
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	10 82       	st	Z, r1
    15e6:	4c c0       	rjmp	.+152    	; 0x1680 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTA__UINT8_REG = 0xFF;
    15e8:	eb e3       	ldi	r30, 0x3B	; 59
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	80 83       	st	Z, r24
    15f0:	47 c0       	rjmp	.+142    	; 0x1680 <DIO__CheckStatusSetPortDirection+0x12e>
                                /* DO  NOTHING */
                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PortDirection)
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	3a 87       	std	Y+10, r19	; 0x0a
    15fa:	29 87       	std	Y+9, r18	; 0x09
    15fc:	89 85       	ldd	r24, Y+9	; 0x09
    15fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	31 f0       	breq	.+12     	; 0x1610 <DIO__CheckStatusSetPortDirection+0xbe>
    1604:	29 85       	ldd	r18, Y+9	; 0x09
    1606:	3a 85       	ldd	r19, Y+10	; 0x0a
    1608:	21 30       	cpi	r18, 0x01	; 1
    160a:	31 05       	cpc	r19, r1
    160c:	29 f0       	breq	.+10     	; 0x1618 <DIO__CheckStatusSetPortDirection+0xc6>
    160e:	38 c0       	rjmp	.+112    	; 0x1680 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTB__UINT8_REG = 0x00;
    1610:	e8 e3       	ldi	r30, 0x38	; 56
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	10 82       	st	Z, r1
    1616:	34 c0       	rjmp	.+104    	; 0x1680 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTB__UINT8_REG = 0xFF;
    1618:	e8 e3       	ldi	r30, 0x38	; 56
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	8f ef       	ldi	r24, 0xFF	; 255
    161e:	80 83       	st	Z, r24
    1620:	2f c0       	rjmp	.+94     	; 0x1680 <DIO__CheckStatusSetPortDirection+0x12e>
                        }

                        break;

                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PortDirection)
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	38 87       	std	Y+8, r19	; 0x08
    162a:	2f 83       	std	Y+7, r18	; 0x07
    162c:	8f 81       	ldd	r24, Y+7	; 0x07
    162e:	98 85       	ldd	r25, Y+8	; 0x08
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	31 f0       	breq	.+12     	; 0x1640 <DIO__CheckStatusSetPortDirection+0xee>
    1634:	2f 81       	ldd	r18, Y+7	; 0x07
    1636:	38 85       	ldd	r19, Y+8	; 0x08
    1638:	21 30       	cpi	r18, 0x01	; 1
    163a:	31 05       	cpc	r19, r1
    163c:	29 f0       	breq	.+10     	; 0x1648 <DIO__CheckStatusSetPortDirection+0xf6>
    163e:	20 c0       	rjmp	.+64     	; 0x1680 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTC__UINT8_REG = 0x00;
    1640:	e5 e3       	ldi	r30, 0x35	; 53
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	10 82       	st	Z, r1
    1646:	1c c0       	rjmp	.+56     	; 0x1680 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTC__UINT8_REG = 0xFF;
    1648:	e5 e3       	ldi	r30, 0x35	; 53
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	8f ef       	ldi	r24, 0xFF	; 255
    164e:	80 83       	st	Z, r24
    1650:	17 c0       	rjmp	.+46     	; 0x1680 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        }

                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PortDirection)
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	3e 83       	std	Y+6, r19	; 0x06
    165a:	2d 83       	std	Y+5, r18	; 0x05
    165c:	8d 81       	ldd	r24, Y+5	; 0x05
    165e:	9e 81       	ldd	r25, Y+6	; 0x06
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	31 f0       	breq	.+12     	; 0x1670 <DIO__CheckStatusSetPortDirection+0x11e>
    1664:	2d 81       	ldd	r18, Y+5	; 0x05
    1666:	3e 81       	ldd	r19, Y+6	; 0x06
    1668:	21 30       	cpi	r18, 0x01	; 1
    166a:	31 05       	cpc	r19, r1
    166c:	29 f0       	breq	.+10     	; 0x1678 <DIO__CheckStatusSetPortDirection+0x126>
    166e:	08 c0       	rjmp	.+16     	; 0x1680 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTD__UINT8_REG = 0x00;
    1670:	e2 e3       	ldi	r30, 0x32	; 50
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	10 82       	st	Z, r1
    1676:	04 c0       	rjmp	.+8      	; 0x1680 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTD__UINT8_REG = 0xFF;
    1678:	e2 e3       	ldi	r30, 0x32	; 50
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	8f ef       	ldi	r24, 0xFF	; 255
    167e:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1680:	39 81       	ldd	r19, Y+1	; 0x01
    1682:	3c 83       	std	Y+4, r19	; 0x04
    1684:	04 c0       	rjmp	.+8      	; 0x168e <DIO__CheckStatusSetPortDirection+0x13c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	8c 83       	std	Y+4, r24	; 0x04
    168e:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    1690:	2e 96       	adiw	r28, 0x0e	; 14
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <DIO__CheckStatusSetPortValue>:

CheckStatus DIO__CheckStatusSetPortValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PortValue)
{
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <DIO__CheckStatusSetPortValue+0x6>
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <DIO__CheckStatusSetPortValue+0x8>
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <DIO__CheckStatusSetPortValue+0xa>
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	8a 83       	std	Y+2, r24	; 0x02
    16b2:	6b 83       	std	Y+3, r22	; 0x03

        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    16b4:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
               
        */
        if (Copy__uint8PortId <= DIO__UINT8_PORTD)
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	84 30       	cpi	r24, 0x04	; 4
    16ba:	a8 f5       	brcc	.+106    	; 0x1726 <DIO__CheckStatusSetPortValue+0x84>
        {
                switch (Copy__uint8PortId)
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	3e 83       	std	Y+6, r19	; 0x06
    16c4:	2d 83       	std	Y+5, r18	; 0x05
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ca:	81 30       	cpi	r24, 0x01	; 1
    16cc:	91 05       	cpc	r25, r1
    16ce:	d1 f0       	breq	.+52     	; 0x1704 <DIO__CheckStatusSetPortValue+0x62>
    16d0:	2d 81       	ldd	r18, Y+5	; 0x05
    16d2:	3e 81       	ldd	r19, Y+6	; 0x06
    16d4:	22 30       	cpi	r18, 0x02	; 2
    16d6:	31 05       	cpc	r19, r1
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <DIO__CheckStatusSetPortValue+0x42>
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	9e 81       	ldd	r25, Y+6	; 0x06
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	61 f0       	breq	.+24     	; 0x16fa <DIO__CheckStatusSetPortValue+0x58>
    16e2:	1e c0       	rjmp	.+60     	; 0x1720 <DIO__CheckStatusSetPortValue+0x7e>
    16e4:	2d 81       	ldd	r18, Y+5	; 0x05
    16e6:	3e 81       	ldd	r19, Y+6	; 0x06
    16e8:	22 30       	cpi	r18, 0x02	; 2
    16ea:	31 05       	cpc	r19, r1
    16ec:	81 f0       	breq	.+32     	; 0x170e <DIO__CheckStatusSetPortValue+0x6c>
    16ee:	8d 81       	ldd	r24, Y+5	; 0x05
    16f0:	9e 81       	ldd	r25, Y+6	; 0x06
    16f2:	83 30       	cpi	r24, 0x03	; 3
    16f4:	91 05       	cpc	r25, r1
    16f6:	81 f0       	breq	.+32     	; 0x1718 <DIO__CheckStatusSetPortValue+0x76>
    16f8:	13 c0       	rjmp	.+38     	; 0x1720 <DIO__CheckStatusSetPortValue+0x7e>
                {
                case DIO__UINT8_PORTA:
                        PORTA__UINT8_REG = Copy__uint8PortValue;
    16fa:	eb e3       	ldi	r30, 0x3B	; 59
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	80 83       	st	Z, r24
    1702:	0e c0       	rjmp	.+28     	; 0x1720 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTB:
                        PORTB__UINT8_REG = Copy__uint8PortValue;
    1704:	e8 e3       	ldi	r30, 0x38	; 56
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	80 83       	st	Z, r24
    170c:	09 c0       	rjmp	.+18     	; 0x1720 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTC:
                        PORTC__UINT8_REG = Copy__uint8PortValue;
    170e:	e5 e3       	ldi	r30, 0x35	; 53
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	80 83       	st	Z, r24
    1716:	04 c0       	rjmp	.+8      	; 0x1720 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTD:
                        PORTD__UINT8_REG = Copy__uint8PortValue;
    1718:	e2 e3       	ldi	r30, 0x32	; 50
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1720:	99 81       	ldd	r25, Y+1	; 0x01
    1722:	9c 83       	std	Y+4, r25	; 0x04
    1724:	04 c0       	rjmp	.+8      	; 0x172e <DIO__CheckStatusSetPortValue+0x8c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    172a:	29 81       	ldd	r18, Y+1	; 0x01
    172c:	2c 83       	std	Y+4, r18	; 0x04
    172e:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    1730:	26 96       	adiw	r28, 0x06	; 6
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <DIO__CheckStatusGetPortValue>:

CheckStatus DIO__CheckStatusGetPortValue(_uint8 Copy__uint8PortId, _uint8 *Copy_p_uint8ReturnPortValue)
{
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	27 97       	sbiw	r28, 0x07	; 7
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	8a 83       	std	Y+2, r24	; 0x02
    1758:	7c 83       	std	Y+4, r23	; 0x04
    175a:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    175c:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid Pointer != NULL
               
        */
        if (Copy_p_uint8ReturnPortValue != NULL)
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	9c 81       	ldd	r25, Y+4	; 0x04
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	e9 f1       	breq	.+122    	; 0x17e0 <DIO__CheckStatusGetPortValue+0x9e>
        {
                switch (Copy__uint8PortId)
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	3f 83       	std	Y+7, r19	; 0x07
    176e:	2e 83       	std	Y+6, r18	; 0x06
    1770:	8e 81       	ldd	r24, Y+6	; 0x06
    1772:	9f 81       	ldd	r25, Y+7	; 0x07
    1774:	81 30       	cpi	r24, 0x01	; 1
    1776:	91 05       	cpc	r25, r1
    1778:	e1 f0       	breq	.+56     	; 0x17b2 <DIO__CheckStatusGetPortValue+0x70>
    177a:	2e 81       	ldd	r18, Y+6	; 0x06
    177c:	3f 81       	ldd	r19, Y+7	; 0x07
    177e:	22 30       	cpi	r18, 0x02	; 2
    1780:	31 05       	cpc	r19, r1
    1782:	2c f4       	brge	.+10     	; 0x178e <DIO__CheckStatusGetPortValue+0x4c>
    1784:	8e 81       	ldd	r24, Y+6	; 0x06
    1786:	9f 81       	ldd	r25, Y+7	; 0x07
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	61 f0       	breq	.+24     	; 0x17a4 <DIO__CheckStatusGetPortValue+0x62>
    178c:	26 c0       	rjmp	.+76     	; 0x17da <DIO__CheckStatusGetPortValue+0x98>
    178e:	2e 81       	ldd	r18, Y+6	; 0x06
    1790:	3f 81       	ldd	r19, Y+7	; 0x07
    1792:	22 30       	cpi	r18, 0x02	; 2
    1794:	31 05       	cpc	r19, r1
    1796:	a1 f0       	breq	.+40     	; 0x17c0 <DIO__CheckStatusGetPortValue+0x7e>
    1798:	8e 81       	ldd	r24, Y+6	; 0x06
    179a:	9f 81       	ldd	r25, Y+7	; 0x07
    179c:	83 30       	cpi	r24, 0x03	; 3
    179e:	91 05       	cpc	r25, r1
    17a0:	b1 f0       	breq	.+44     	; 0x17ce <DIO__CheckStatusGetPortValue+0x8c>
    17a2:	1b c0       	rjmp	.+54     	; 0x17da <DIO__CheckStatusGetPortValue+0x98>
                {
                case DIO__UINT8_PORTA:
                        *Copy_p_uint8ReturnPortValue = PINA__UINT8_REG;
    17a4:	e9 e3       	ldi	r30, 0x39	; 57
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	eb 81       	ldd	r30, Y+3	; 0x03
    17ac:	fc 81       	ldd	r31, Y+4	; 0x04
    17ae:	80 83       	st	Z, r24
    17b0:	14 c0       	rjmp	.+40     	; 0x17da <DIO__CheckStatusGetPortValue+0x98>
                        break;
                case DIO__UINT8_PORTB:
                        *Copy_p_uint8ReturnPortValue = PINB__UINT8_REG;
    17b2:	e6 e3       	ldi	r30, 0x36	; 54
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	eb 81       	ldd	r30, Y+3	; 0x03
    17ba:	fc 81       	ldd	r31, Y+4	; 0x04
    17bc:	80 83       	st	Z, r24
    17be:	0d c0       	rjmp	.+26     	; 0x17da <DIO__CheckStatusGetPortValue+0x98>

                        break;
                case DIO__UINT8_PORTC:
                        *Copy_p_uint8ReturnPortValue = PINC__UINT8_REG;
    17c0:	e3 e3       	ldi	r30, 0x33	; 51
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	eb 81       	ldd	r30, Y+3	; 0x03
    17c8:	fc 81       	ldd	r31, Y+4	; 0x04
    17ca:	80 83       	st	Z, r24
    17cc:	06 c0       	rjmp	.+12     	; 0x17da <DIO__CheckStatusGetPortValue+0x98>
                        break;
                case DIO__UINT8_PORTD:
                        *Copy_p_uint8ReturnPortValue = PIND__UINT8_REG;
    17ce:	e0 e3       	ldi	r30, 0x30	; 48
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	eb 81       	ldd	r30, Y+3	; 0x03
    17d6:	fc 81       	ldd	r31, Y+4	; 0x04
    17d8:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    17da:	99 81       	ldd	r25, Y+1	; 0x01
    17dc:	9d 83       	std	Y+5, r25	; 0x05
    17de:	04 c0       	rjmp	.+8      	; 0x17e8 <DIO__CheckStatusGetPortValue+0xa6>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    17e4:	29 81       	ldd	r18, Y+1	; 0x01
    17e6:	2d 83       	std	Y+5, r18	; 0x05
    17e8:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    17ea:	27 96       	adiw	r28, 0x07	; 7
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <KPAD_CheckStatusGetKey>:
_uint8 KPAD_A_UINT8ROWSPINS[4] = {KPAD__UINT8_ROW1,KPAD__UINT8_ROW2,KPAD__UINT8_ROW3,KPAD__UINT8_ROW4};
_uint8 KPAD_A_UINT8COLSPINS[4] = {KPAD__UINT8_COL1,KPAD__UINT8_COL2,KPAD__UINT8_COL3,KPAD__UINT8_COL4};
_uint8 KPAD_A_UINT8KEYS[4][4] = KPAD_A_UINT8VALUE  ;

CheckStatus KPAD_CheckStatusGetKey(_uint8 *Copy_P_Uint8ReturnValue)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	65 97       	sbiw	r28, 0x15	; 21
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	9d 8b       	std	Y+21, r25	; 0x15
    1812:	8c 8b       	std	Y+20, r24	; 0x14
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    1814:	1a 8a       	std	Y+18, r1	; 0x12

        _uint8 Local__Uint8RowsCounter;
        _uint8 Local__Uint8ColsCounter;
        _uint8 Local__Uint8ReturnPinValue;
        _uint8 Local__Uint8Flag = 0;
    1816:	1f 86       	std	Y+15, r1	; 0x0f

        if (Copy_P_Uint8ReturnValue != NULL)
    1818:	8c 89       	ldd	r24, Y+20	; 0x14
    181a:	9d 89       	ldd	r25, Y+21	; 0x15
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	09 f4       	brne	.+2      	; 0x1822 <KPAD_CheckStatusGetKey+0x26>
    1820:	e1 c0       	rjmp	.+450    	; 0x19e4 <KPAD_CheckStatusGetKey+0x1e8>
        {  
               *Copy_P_Uint8ReturnValue= KPAD__UINT8_KEY_NOT_PRESSED;     
    1822:	ec 89       	ldd	r30, Y+20	; 0x14
    1824:	fd 89       	ldd	r31, Y+21	; 0x15
    1826:	8f ef       	ldi	r24, 0xFF	; 255
    1828:	80 83       	st	Z, r24
                for (Local__Uint8RowsCounter = 0; Local__Uint8RowsCounter <= 3; ++Local__Uint8RowsCounter)
    182a:	19 8a       	std	Y+17, r1	; 0x11
    182c:	d6 c0       	rjmp	.+428    	; 0x19da <KPAD_CheckStatusGetKey+0x1de>
                {
                        DIO__CheckStatusSetPinValue(KPAD__UINT8_PORT, KPAD_A_UINT8ROWSPINS[Local__Uint8RowsCounter], DIO__UINT8_LOW);
    182e:	89 89       	ldd	r24, Y+17	; 0x11
    1830:	88 2f       	mov	r24, r24
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	fc 01       	movw	r30, r24
    1836:	e8 59       	subi	r30, 0x98	; 152
    1838:	fe 4f       	sbci	r31, 0xFE	; 254
    183a:	90 81       	ld	r25, Z
    183c:	82 e0       	ldi	r24, 0x02	; 2
    183e:	69 2f       	mov	r22, r25
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>
                        for (Local__Uint8ColsCounter = 0; Local__Uint8ColsCounter <= 3; ++Local__Uint8ColsCounter)
    1846:	18 8a       	std	Y+16, r1	; 0x10
    1848:	b2 c0       	rjmp	.+356    	; 0x19ae <KPAD_CheckStatusGetKey+0x1b2>
                        {

                                DIO__CheckStatusGetPinValue(KPAD__UINT8_PORT, KPAD_A_UINT8COLSPINS[Local__Uint8ColsCounter], &Local__Uint8ReturnPinValue);
    184a:	88 89       	ldd	r24, Y+16	; 0x10
    184c:	88 2f       	mov	r24, r24
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	fc 01       	movw	r30, r24
    1852:	e4 59       	subi	r30, 0x94	; 148
    1854:	fe 4f       	sbci	r31, 0xFE	; 254
    1856:	90 81       	ld	r25, Z
    1858:	9e 01       	movw	r18, r28
    185a:	2d 5e       	subi	r18, 0xED	; 237
    185c:	3f 4f       	sbci	r19, 0xFF	; 255
    185e:	82 e0       	ldi	r24, 0x02	; 2
    1860:	69 2f       	mov	r22, r25
    1862:	a9 01       	movw	r20, r18
    1864:	0e 94 9c 09 	call	0x1338	; 0x1338 <DIO__CheckStatusGetPinValue>

                                /*Check if switch is pressed */
                                if (Local__Uint8ReturnPinValue == DIO__UINT8_LOW)
    1868:	8b 89       	ldd	r24, Y+19	; 0x13
    186a:	88 23       	and	r24, r24
    186c:	09 f0       	breq	.+2      	; 0x1870 <KPAD_CheckStatusGetKey+0x74>
    186e:	9c c0       	rjmp	.+312    	; 0x19a8 <KPAD_CheckStatusGetKey+0x1ac>
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a0 ea       	ldi	r26, 0xA0	; 160
    1876:	b1 e4       	ldi	r27, 0x41	; 65
    1878:	8b 87       	std	Y+11, r24	; 0x0b
    187a:	9c 87       	std	Y+12, r25	; 0x0c
    187c:	ad 87       	std	Y+13, r26	; 0x0d
    187e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1880:	6b 85       	ldd	r22, Y+11	; 0x0b
    1882:	7c 85       	ldd	r23, Y+12	; 0x0c
    1884:	8d 85       	ldd	r24, Y+13	; 0x0d
    1886:	9e 85       	ldd	r25, Y+14	; 0x0e
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	4a ef       	ldi	r20, 0xFA	; 250
    188e:	54 e4       	ldi	r21, 0x44	; 68
    1890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	8f 83       	std	Y+7, r24	; 0x07
    189a:	98 87       	std	Y+8, r25	; 0x08
    189c:	a9 87       	std	Y+9, r26	; 0x09
    189e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18a0:	6f 81       	ldd	r22, Y+7	; 0x07
    18a2:	78 85       	ldd	r23, Y+8	; 0x08
    18a4:	89 85       	ldd	r24, Y+9	; 0x09
    18a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e8       	ldi	r20, 0x80	; 128
    18ae:	5f e3       	ldi	r21, 0x3F	; 63
    18b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18b4:	88 23       	and	r24, r24
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <KPAD_CheckStatusGetKey+0xc6>
		__ticks = 1;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	9e 83       	std	Y+6, r25	; 0x06
    18be:	8d 83       	std	Y+5, r24	; 0x05
    18c0:	3f c0       	rjmp	.+126    	; 0x1940 <KPAD_CheckStatusGetKey+0x144>
	else if (__tmp > 65535)
    18c2:	6f 81       	ldd	r22, Y+7	; 0x07
    18c4:	78 85       	ldd	r23, Y+8	; 0x08
    18c6:	89 85       	ldd	r24, Y+9	; 0x09
    18c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	3f ef       	ldi	r19, 0xFF	; 255
    18ce:	4f e7       	ldi	r20, 0x7F	; 127
    18d0:	57 e4       	ldi	r21, 0x47	; 71
    18d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18d6:	18 16       	cp	r1, r24
    18d8:	4c f5       	brge	.+82     	; 0x192c <KPAD_CheckStatusGetKey+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18da:	6b 85       	ldd	r22, Y+11	; 0x0b
    18dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18de:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e2       	ldi	r20, 0x20	; 32
    18e8:	51 e4       	ldi	r21, 0x41	; 65
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9e 83       	std	Y+6, r25	; 0x06
    1900:	8d 83       	std	Y+5, r24	; 0x05
    1902:	0f c0       	rjmp	.+30     	; 0x1922 <KPAD_CheckStatusGetKey+0x126>
    1904:	88 ec       	ldi	r24, 0xC8	; 200
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	9c 83       	std	Y+4, r25	; 0x04
    190a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	9c 81       	ldd	r25, Y+4	; 0x04
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <KPAD_CheckStatusGetKey+0x114>
    1914:	9c 83       	std	Y+4, r25	; 0x04
    1916:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1918:	8d 81       	ldd	r24, Y+5	; 0x05
    191a:	9e 81       	ldd	r25, Y+6	; 0x06
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	9e 83       	std	Y+6, r25	; 0x06
    1920:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1922:	8d 81       	ldd	r24, Y+5	; 0x05
    1924:	9e 81       	ldd	r25, Y+6	; 0x06
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	69 f7       	brne	.-38     	; 0x1904 <KPAD_CheckStatusGetKey+0x108>
    192a:	24 c0       	rjmp	.+72     	; 0x1974 <KPAD_CheckStatusGetKey+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192c:	6f 81       	ldd	r22, Y+7	; 0x07
    192e:	78 85       	ldd	r23, Y+8	; 0x08
    1930:	89 85       	ldd	r24, Y+9	; 0x09
    1932:	9a 85       	ldd	r25, Y+10	; 0x0a
    1934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	8d 83       	std	Y+5, r24	; 0x05
    1940:	8d 81       	ldd	r24, Y+5	; 0x05
    1942:	9e 81       	ldd	r25, Y+6	; 0x06
    1944:	9a 83       	std	Y+2, r25	; 0x02
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	9a 81       	ldd	r25, Y+2	; 0x02
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <KPAD_CheckStatusGetKey+0x150>
    1950:	9a 83       	std	Y+2, r25	; 0x02
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <KPAD_CheckStatusGetKey+0x178>
                                {
                                        /* debouncing */
                                        _delay_ms(20);
                                        while (Local__Uint8ReturnPinValue == DIO__UINT8_LOW)
                                        {
                                                DIO__CheckStatusGetPinValue(KPAD__UINT8_PORT, KPAD_A_UINT8COLSPINS[Local__Uint8ColsCounter], &Local__Uint8ReturnPinValue);
    1956:	88 89       	ldd	r24, Y+16	; 0x10
    1958:	88 2f       	mov	r24, r24
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	fc 01       	movw	r30, r24
    195e:	e4 59       	subi	r30, 0x94	; 148
    1960:	fe 4f       	sbci	r31, 0xFE	; 254
    1962:	90 81       	ld	r25, Z
    1964:	9e 01       	movw	r18, r28
    1966:	2d 5e       	subi	r18, 0xED	; 237
    1968:	3f 4f       	sbci	r19, 0xFF	; 255
    196a:	82 e0       	ldi	r24, 0x02	; 2
    196c:	69 2f       	mov	r22, r25
    196e:	a9 01       	movw	r20, r18
    1970:	0e 94 9c 09 	call	0x1338	; 0x1338 <DIO__CheckStatusGetPinValue>
                                /*Check if switch is pressed */
                                if (Local__Uint8ReturnPinValue == DIO__UINT8_LOW)
                                {
                                        /* debouncing */
                                        _delay_ms(20);
                                        while (Local__Uint8ReturnPinValue == DIO__UINT8_LOW)
    1974:	8b 89       	ldd	r24, Y+19	; 0x13
    1976:	88 23       	and	r24, r24
    1978:	71 f3       	breq	.-36     	; 0x1956 <KPAD_CheckStatusGetKey+0x15a>
                                        {
                                                DIO__CheckStatusGetPinValue(KPAD__UINT8_PORT, KPAD_A_UINT8COLSPINS[Local__Uint8ColsCounter], &Local__Uint8ReturnPinValue);
                                        }
                                           *Copy_P_Uint8ReturnValue = KPAD_A_UINT8KEYS[Local__Uint8RowsCounter][Local__Uint8ColsCounter];
    197a:	89 89       	ldd	r24, Y+17	; 0x11
    197c:	48 2f       	mov	r20, r24
    197e:	50 e0       	ldi	r21, 0x00	; 0
    1980:	88 89       	ldd	r24, Y+16	; 0x10
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	ca 01       	movw	r24, r20
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	82 0f       	add	r24, r18
    1992:	93 1f       	adc	r25, r19
    1994:	fc 01       	movw	r30, r24
    1996:	e0 59       	subi	r30, 0x90	; 144
    1998:	fe 4f       	sbci	r31, 0xFE	; 254
    199a:	80 81       	ld	r24, Z
    199c:	ec 89       	ldd	r30, Y+20	; 0x14
    199e:	fd 89       	ldd	r31, Y+21	; 0x15
    19a0:	80 83       	st	Z, r24
                                           Local__Uint8Flag = 1;
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	8f 87       	std	Y+15, r24	; 0x0f
    19a6:	07 c0       	rjmp	.+14     	; 0x19b6 <KPAD_CheckStatusGetKey+0x1ba>
        {  
               *Copy_P_Uint8ReturnValue= KPAD__UINT8_KEY_NOT_PRESSED;     
                for (Local__Uint8RowsCounter = 0; Local__Uint8RowsCounter <= 3; ++Local__Uint8RowsCounter)
                {
                        DIO__CheckStatusSetPinValue(KPAD__UINT8_PORT, KPAD_A_UINT8ROWSPINS[Local__Uint8RowsCounter], DIO__UINT8_LOW);
                        for (Local__Uint8ColsCounter = 0; Local__Uint8ColsCounter <= 3; ++Local__Uint8ColsCounter)
    19a8:	88 89       	ldd	r24, Y+16	; 0x10
    19aa:	8f 5f       	subi	r24, 0xFF	; 255
    19ac:	88 8b       	std	Y+16, r24	; 0x10
    19ae:	88 89       	ldd	r24, Y+16	; 0x10
    19b0:	84 30       	cpi	r24, 0x04	; 4
    19b2:	08 f4       	brcc	.+2      	; 0x19b6 <KPAD_CheckStatusGetKey+0x1ba>
    19b4:	4a cf       	rjmp	.-364    	; 0x184a <KPAD_CheckStatusGetKey+0x4e>
                                           *Copy_P_Uint8ReturnValue = KPAD_A_UINT8KEYS[Local__Uint8RowsCounter][Local__Uint8ColsCounter];
                                           Local__Uint8Flag = 1;
                                           break;
                                }
                        }
                        DIO__CheckStatusSetPinValue(KPAD__UINT8_PORT, KPAD_A_UINT8ROWSPINS[Local__Uint8RowsCounter], DIO__UINT8_HIGH);
    19b6:	89 89       	ldd	r24, Y+17	; 0x11
    19b8:	88 2f       	mov	r24, r24
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	fc 01       	movw	r30, r24
    19be:	e8 59       	subi	r30, 0x98	; 152
    19c0:	fe 4f       	sbci	r31, 0xFE	; 254
    19c2:	90 81       	ld	r25, Z
    19c4:	82 e0       	ldi	r24, 0x02	; 2
    19c6:	69 2f       	mov	r22, r25
    19c8:	41 e0       	ldi	r20, 0x01	; 1
    19ca:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>
                        if (Local__Uint8Flag == 1)
    19ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	51 f0       	breq	.+20     	; 0x19e8 <KPAD_CheckStatusGetKey+0x1ec>
        _uint8 Local__Uint8Flag = 0;

        if (Copy_P_Uint8ReturnValue != NULL)
        {  
               *Copy_P_Uint8ReturnValue= KPAD__UINT8_KEY_NOT_PRESSED;     
                for (Local__Uint8RowsCounter = 0; Local__Uint8RowsCounter <= 3; ++Local__Uint8RowsCounter)
    19d4:	89 89       	ldd	r24, Y+17	; 0x11
    19d6:	8f 5f       	subi	r24, 0xFF	; 255
    19d8:	89 8b       	std	Y+17, r24	; 0x11
    19da:	89 89       	ldd	r24, Y+17	; 0x11
    19dc:	84 30       	cpi	r24, 0x04	; 4
    19de:	08 f4       	brcc	.+2      	; 0x19e2 <KPAD_CheckStatusGetKey+0x1e6>
    19e0:	26 cf       	rjmp	.-436    	; 0x182e <KPAD_CheckStatusGetKey+0x32>
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <KPAD_CheckStatusGetKey+0x1ec>
                        }
                }
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	8a 8b       	std	Y+18, r24	; 0x12
        }

        return Local_CheckStausReturnValue;
    19e8:	8a 89       	ldd	r24, Y+18	; 0x12
}
    19ea:	65 96       	adiw	r28, 0x15	; 21
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <LCD_VoidInit>:
                                     LCD_A_UINT8CHAR6,
                                     LCD_A_UINT8CHAR7,
                                     LCD_A_UINT8CHAR8};
/* Defination Of Function  */
Void LCD_VoidInit(Void)
{
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	cc 54       	subi	r28, 0x4C	; 76
    1a0a:	d0 40       	sbci	r29, 0x00	; 0
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	fe 01       	movw	r30, r28
    1a18:	e7 5b       	subi	r30, 0xB7	; 183
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	ac e0       	ldi	r26, 0x0C	; 12
    1a22:	b2 e4       	ldi	r27, 0x42	; 66
    1a24:	80 83       	st	Z, r24
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	a2 83       	std	Z+2, r26	; 0x02
    1a2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2c:	8e 01       	movw	r16, r28
    1a2e:	0b 5b       	subi	r16, 0xBB	; 187
    1a30:	1f 4f       	sbci	r17, 0xFF	; 255
    1a32:	fe 01       	movw	r30, r28
    1a34:	e7 5b       	subi	r30, 0xB7	; 183
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	82 81       	ldd	r24, Z+2	; 0x02
    1a3e:	93 81       	ldd	r25, Z+3	; 0x03
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	4a ef       	ldi	r20, 0xFA	; 250
    1a46:	54 e4       	ldi	r21, 0x44	; 68
    1a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	f8 01       	movw	r30, r16
    1a52:	80 83       	st	Z, r24
    1a54:	91 83       	std	Z+1, r25	; 0x01
    1a56:	a2 83       	std	Z+2, r26	; 0x02
    1a58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	eb 5b       	subi	r30, 0xBB	; 187
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	60 81       	ld	r22, Z
    1a62:	71 81       	ldd	r23, Z+1	; 0x01
    1a64:	82 81       	ldd	r24, Z+2	; 0x02
    1a66:	93 81       	ldd	r25, Z+3	; 0x03
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e8       	ldi	r20, 0x80	; 128
    1a6e:	5f e3       	ldi	r21, 0x3F	; 63
    1a70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a74:	88 23       	and	r24, r24
    1a76:	44 f4       	brge	.+16     	; 0x1a88 <LCD_VoidInit+0x8c>
		__ticks = 1;
    1a78:	fe 01       	movw	r30, r28
    1a7a:	ed 5b       	subi	r30, 0xBD	; 189
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	91 83       	std	Z+1, r25	; 0x01
    1a84:	80 83       	st	Z, r24
    1a86:	64 c0       	rjmp	.+200    	; 0x1b50 <LCD_VoidInit+0x154>
	else if (__tmp > 65535)
    1a88:	fe 01       	movw	r30, r28
    1a8a:	eb 5b       	subi	r30, 0xBB	; 187
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	60 81       	ld	r22, Z
    1a90:	71 81       	ldd	r23, Z+1	; 0x01
    1a92:	82 81       	ldd	r24, Z+2	; 0x02
    1a94:	93 81       	ldd	r25, Z+3	; 0x03
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	3f ef       	ldi	r19, 0xFF	; 255
    1a9a:	4f e7       	ldi	r20, 0x7F	; 127
    1a9c:	57 e4       	ldi	r21, 0x47	; 71
    1a9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aa2:	18 16       	cp	r1, r24
    1aa4:	0c f0       	brlt	.+2      	; 0x1aa8 <LCD_VoidInit+0xac>
    1aa6:	43 c0       	rjmp	.+134    	; 0x1b2e <LCD_VoidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e7 5b       	subi	r30, 0xB7	; 183
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	60 81       	ld	r22, Z
    1ab0:	71 81       	ldd	r23, Z+1	; 0x01
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e2       	ldi	r20, 0x20	; 32
    1abc:	51 e4       	ldi	r21, 0x41	; 65
    1abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	8e 01       	movw	r16, r28
    1ac8:	0d 5b       	subi	r16, 0xBD	; 189
    1aca:	1f 4f       	sbci	r17, 0xFF	; 255
    1acc:	bc 01       	movw	r22, r24
    1ace:	cd 01       	movw	r24, r26
    1ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	f8 01       	movw	r30, r16
    1ada:	91 83       	std	Z+1, r25	; 0x01
    1adc:	80 83       	st	Z, r24
    1ade:	1f c0       	rjmp	.+62     	; 0x1b1e <LCD_VoidInit+0x122>
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	ef 5b       	subi	r30, 0xBF	; 191
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	88 ec       	ldi	r24, 0xC8	; 200
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	91 83       	std	Z+1, r25	; 0x01
    1aec:	80 83       	st	Z, r24
    1aee:	fe 01       	movw	r30, r28
    1af0:	ef 5b       	subi	r30, 0xBF	; 191
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	80 81       	ld	r24, Z
    1af6:	91 81       	ldd	r25, Z+1	; 0x01
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <LCD_VoidInit+0xfc>
    1afc:	fe 01       	movw	r30, r28
    1afe:	ef 5b       	subi	r30, 0xBF	; 191
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b06:	de 01       	movw	r26, r28
    1b08:	ad 5b       	subi	r26, 0xBD	; 189
    1b0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	ed 5b       	subi	r30, 0xBD	; 189
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	80 81       	ld	r24, Z
    1b14:	91 81       	ldd	r25, Z+1	; 0x01
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	11 96       	adiw	r26, 0x01	; 1
    1b1a:	9c 93       	st	X, r25
    1b1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1e:	fe 01       	movw	r30, r28
    1b20:	ed 5b       	subi	r30, 0xBD	; 189
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 81       	ld	r24, Z
    1b26:	91 81       	ldd	r25, Z+1	; 0x01
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	d1 f6       	brne	.-76     	; 0x1ae0 <LCD_VoidInit+0xe4>
    1b2c:	24 c0       	rjmp	.+72     	; 0x1b76 <LCD_VoidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2e:	8e 01       	movw	r16, r28
    1b30:	0d 5b       	subi	r16, 0xBD	; 189
    1b32:	1f 4f       	sbci	r17, 0xFF	; 255
    1b34:	fe 01       	movw	r30, r28
    1b36:	eb 5b       	subi	r30, 0xBB	; 187
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	91 83       	std	Z+1, r25	; 0x01
    1b4e:	80 83       	st	Z, r24
    1b50:	fe 01       	movw	r30, r28
    1b52:	ed 5b       	subi	r30, 0xBD	; 189
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	80 81       	ld	r24, Z
    1b58:	91 81       	ldd	r25, Z+1	; 0x01
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	ff 96       	adiw	r30, 0x3f	; 63
    1b5e:	91 83       	std	Z+1, r25	; 0x01
    1b60:	80 83       	st	Z, r24
    1b62:	fe 01       	movw	r30, r28
    1b64:	ff 96       	adiw	r30, 0x3f	; 63
    1b66:	80 81       	ld	r24, Z
    1b68:	91 81       	ldd	r25, Z+1	; 0x01
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <LCD_VoidInit+0x16e>
    1b6e:	fe 01       	movw	r30, r28
    1b70:	ff 96       	adiw	r30, 0x3f	; 63
    1b72:	91 83       	std	Z+1, r25	; 0x01
    1b74:	80 83       	st	Z, r24

        _delay_ms(35);
        /* Function Set Cmnd 0b00111000*/

        LCD_CheckStatusSendCmnd(0b00111000);
    1b76:	88 e3       	ldi	r24, 0x38	; 56
    1b78:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_CheckStatusSendCmnd>
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	a0 e2       	ldi	r26, 0x20	; 32
    1b82:	b2 e4       	ldi	r27, 0x42	; 66
    1b84:	8b af       	std	Y+59, r24	; 0x3b
    1b86:	9c af       	std	Y+60, r25	; 0x3c
    1b88:	ad af       	std	Y+61, r26	; 0x3d
    1b8a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b8c:	6b ad       	ldd	r22, Y+59	; 0x3b
    1b8e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1b90:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b92:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b94:	2b ea       	ldi	r18, 0xAB	; 171
    1b96:	3a ea       	ldi	r19, 0xAA	; 170
    1b98:	4a e2       	ldi	r20, 0x2A	; 42
    1b9a:	50 e4       	ldi	r21, 0x40	; 64
    1b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	8f ab       	std	Y+55, r24	; 0x37
    1ba6:	98 af       	std	Y+56, r25	; 0x38
    1ba8:	a9 af       	std	Y+57, r26	; 0x39
    1baa:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1bac:	6f a9       	ldd	r22, Y+55	; 0x37
    1bae:	78 ad       	ldd	r23, Y+56	; 0x38
    1bb0:	89 ad       	ldd	r24, Y+57	; 0x39
    1bb2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e8       	ldi	r20, 0x80	; 128
    1bba:	5f e3       	ldi	r21, 0x3F	; 63
    1bbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bc0:	88 23       	and	r24, r24
    1bc2:	1c f4       	brge	.+6      	; 0x1bca <LCD_VoidInit+0x1ce>
		__ticks = 1;
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	8e ab       	std	Y+54, r24	; 0x36
    1bc8:	91 c0       	rjmp	.+290    	; 0x1cec <LCD_VoidInit+0x2f0>
	else if (__tmp > 255)
    1bca:	6f a9       	ldd	r22, Y+55	; 0x37
    1bcc:	78 ad       	ldd	r23, Y+56	; 0x38
    1bce:	89 ad       	ldd	r24, Y+57	; 0x39
    1bd0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	4f e7       	ldi	r20, 0x7F	; 127
    1bd8:	53 e4       	ldi	r21, 0x43	; 67
    1bda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bde:	18 16       	cp	r1, r24
    1be0:	0c f0       	brlt	.+2      	; 0x1be4 <LCD_VoidInit+0x1e8>
    1be2:	7b c0       	rjmp	.+246    	; 0x1cda <LCD_VoidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1be4:	6b ad       	ldd	r22, Y+59	; 0x3b
    1be6:	7c ad       	ldd	r23, Y+60	; 0x3c
    1be8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bea:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	4a e7       	ldi	r20, 0x7A	; 122
    1bf2:	54 e4       	ldi	r21, 0x44	; 68
    1bf4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	8a ab       	std	Y+50, r24	; 0x32
    1bfe:	9b ab       	std	Y+51, r25	; 0x33
    1c00:	ac ab       	std	Y+52, r26	; 0x34
    1c02:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c04:	6a a9       	ldd	r22, Y+50	; 0x32
    1c06:	7b a9       	ldd	r23, Y+51	; 0x33
    1c08:	8c a9       	ldd	r24, Y+52	; 0x34
    1c0a:	9d a9       	ldd	r25, Y+53	; 0x35
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	4a ef       	ldi	r20, 0xFA	; 250
    1c12:	54 e4       	ldi	r21, 0x44	; 68
    1c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	8e a7       	std	Y+46, r24	; 0x2e
    1c1e:	9f a7       	std	Y+47, r25	; 0x2f
    1c20:	a8 ab       	std	Y+48, r26	; 0x30
    1c22:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1c24:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c26:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c28:	88 a9       	ldd	r24, Y+48	; 0x30
    1c2a:	99 a9       	ldd	r25, Y+49	; 0x31
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e8       	ldi	r20, 0x80	; 128
    1c32:	5f e3       	ldi	r21, 0x3F	; 63
    1c34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c38:	88 23       	and	r24, r24
    1c3a:	2c f4       	brge	.+10     	; 0x1c46 <LCD_VoidInit+0x24a>
		__ticks = 1;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	9d a7       	std	Y+45, r25	; 0x2d
    1c42:	8c a7       	std	Y+44, r24	; 0x2c
    1c44:	3f c0       	rjmp	.+126    	; 0x1cc4 <LCD_VoidInit+0x2c8>
	else if (__tmp > 65535)
    1c46:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c48:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c4a:	88 a9       	ldd	r24, Y+48	; 0x30
    1c4c:	99 a9       	ldd	r25, Y+49	; 0x31
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	3f ef       	ldi	r19, 0xFF	; 255
    1c52:	4f e7       	ldi	r20, 0x7F	; 127
    1c54:	57 e4       	ldi	r21, 0x47	; 71
    1c56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c5a:	18 16       	cp	r1, r24
    1c5c:	4c f5       	brge	.+82     	; 0x1cb0 <LCD_VoidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5e:	6a a9       	ldd	r22, Y+50	; 0x32
    1c60:	7b a9       	ldd	r23, Y+51	; 0x33
    1c62:	8c a9       	ldd	r24, Y+52	; 0x34
    1c64:	9d a9       	ldd	r25, Y+53	; 0x35
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e2       	ldi	r20, 0x20	; 32
    1c6c:	51 e4       	ldi	r21, 0x41	; 65
    1c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	bc 01       	movw	r22, r24
    1c78:	cd 01       	movw	r24, r26
    1c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	9d a7       	std	Y+45, r25	; 0x2d
    1c84:	8c a7       	std	Y+44, r24	; 0x2c
    1c86:	0f c0       	rjmp	.+30     	; 0x1ca6 <LCD_VoidInit+0x2aa>
    1c88:	88 ec       	ldi	r24, 0xC8	; 200
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	9b a7       	std	Y+43, r25	; 0x2b
    1c8e:	8a a7       	std	Y+42, r24	; 0x2a
    1c90:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c92:	9b a5       	ldd	r25, Y+43	; 0x2b
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <LCD_VoidInit+0x298>
    1c98:	9b a7       	std	Y+43, r25	; 0x2b
    1c9a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c9e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	9d a7       	std	Y+45, r25	; 0x2d
    1ca4:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ca8:	9d a5       	ldd	r25, Y+45	; 0x2d
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	69 f7       	brne	.-38     	; 0x1c88 <LCD_VoidInit+0x28c>
    1cae:	24 c0       	rjmp	.+72     	; 0x1cf8 <LCD_VoidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb0:	6e a5       	ldd	r22, Y+46	; 0x2e
    1cb2:	7f a5       	ldd	r23, Y+47	; 0x2f
    1cb4:	88 a9       	ldd	r24, Y+48	; 0x30
    1cb6:	99 a9       	ldd	r25, Y+49	; 0x31
    1cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	9d a7       	std	Y+45, r25	; 0x2d
    1cc2:	8c a7       	std	Y+44, r24	; 0x2c
    1cc4:	8c a5       	ldd	r24, Y+44	; 0x2c
    1cc6:	9d a5       	ldd	r25, Y+45	; 0x2d
    1cc8:	99 a7       	std	Y+41, r25	; 0x29
    1cca:	88 a7       	std	Y+40, r24	; 0x28
    1ccc:	88 a5       	ldd	r24, Y+40	; 0x28
    1cce:	99 a5       	ldd	r25, Y+41	; 0x29
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <LCD_VoidInit+0x2d4>
    1cd4:	99 a7       	std	Y+41, r25	; 0x29
    1cd6:	88 a7       	std	Y+40, r24	; 0x28
    1cd8:	0f c0       	rjmp	.+30     	; 0x1cf8 <LCD_VoidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cda:	6f a9       	ldd	r22, Y+55	; 0x37
    1cdc:	78 ad       	ldd	r23, Y+56	; 0x38
    1cde:	89 ad       	ldd	r24, Y+57	; 0x39
    1ce0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	8e ab       	std	Y+54, r24	; 0x36
    1cec:	8e a9       	ldd	r24, Y+54	; 0x36
    1cee:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cf0:	8f a1       	ldd	r24, Y+39	; 0x27
    1cf2:	8a 95       	dec	r24
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <LCD_VoidInit+0x2f6>
    1cf6:	8f a3       	std	Y+39, r24	; 0x27
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00001111);
    1cf8:	8f e0       	ldi	r24, 0x0F	; 15
    1cfa:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_CheckStatusSendCmnd>
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	a0 e2       	ldi	r26, 0x20	; 32
    1d04:	b2 e4       	ldi	r27, 0x42	; 66
    1d06:	8b a3       	std	Y+35, r24	; 0x23
    1d08:	9c a3       	std	Y+36, r25	; 0x24
    1d0a:	ad a3       	std	Y+37, r26	; 0x25
    1d0c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d10:	7c a1       	ldd	r23, Y+36	; 0x24
    1d12:	8d a1       	ldd	r24, Y+37	; 0x25
    1d14:	9e a1       	ldd	r25, Y+38	; 0x26
    1d16:	2b ea       	ldi	r18, 0xAB	; 171
    1d18:	3a ea       	ldi	r19, 0xAA	; 170
    1d1a:	4a e2       	ldi	r20, 0x2A	; 42
    1d1c:	50 e4       	ldi	r21, 0x40	; 64
    1d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	8f 8f       	std	Y+31, r24	; 0x1f
    1d28:	98 a3       	std	Y+32, r25	; 0x20
    1d2a:	a9 a3       	std	Y+33, r26	; 0x21
    1d2c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1d2e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d30:	78 a1       	ldd	r23, Y+32	; 0x20
    1d32:	89 a1       	ldd	r24, Y+33	; 0x21
    1d34:	9a a1       	ldd	r25, Y+34	; 0x22
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e8       	ldi	r20, 0x80	; 128
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d42:	88 23       	and	r24, r24
    1d44:	1c f4       	brge	.+6      	; 0x1d4c <LCD_VoidInit+0x350>
		__ticks = 1;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	8e 8f       	std	Y+30, r24	; 0x1e
    1d4a:	91 c0       	rjmp	.+290    	; 0x1e6e <LCD_VoidInit+0x472>
	else if (__tmp > 255)
    1d4c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d4e:	78 a1       	ldd	r23, Y+32	; 0x20
    1d50:	89 a1       	ldd	r24, Y+33	; 0x21
    1d52:	9a a1       	ldd	r25, Y+34	; 0x22
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	4f e7       	ldi	r20, 0x7F	; 127
    1d5a:	53 e4       	ldi	r21, 0x43	; 67
    1d5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d60:	18 16       	cp	r1, r24
    1d62:	0c f0       	brlt	.+2      	; 0x1d66 <LCD_VoidInit+0x36a>
    1d64:	7b c0       	rjmp	.+246    	; 0x1e5c <LCD_VoidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1d66:	6b a1       	ldd	r22, Y+35	; 0x23
    1d68:	7c a1       	ldd	r23, Y+36	; 0x24
    1d6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	4a e7       	ldi	r20, 0x7A	; 122
    1d74:	54 e4       	ldi	r21, 0x44	; 68
    1d76:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	8a 8f       	std	Y+26, r24	; 0x1a
    1d80:	9b 8f       	std	Y+27, r25	; 0x1b
    1d82:	ac 8f       	std	Y+28, r26	; 0x1c
    1d84:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d86:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1d88:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1d8a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d8c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	4a ef       	ldi	r20, 0xFA	; 250
    1d94:	54 e4       	ldi	r21, 0x44	; 68
    1d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	8e 8b       	std	Y+22, r24	; 0x16
    1da0:	9f 8b       	std	Y+23, r25	; 0x17
    1da2:	a8 8f       	std	Y+24, r26	; 0x18
    1da4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1da6:	6e 89       	ldd	r22, Y+22	; 0x16
    1da8:	7f 89       	ldd	r23, Y+23	; 0x17
    1daa:	88 8d       	ldd	r24, Y+24	; 0x18
    1dac:	99 8d       	ldd	r25, Y+25	; 0x19
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e8       	ldi	r20, 0x80	; 128
    1db4:	5f e3       	ldi	r21, 0x3F	; 63
    1db6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dba:	88 23       	and	r24, r24
    1dbc:	2c f4       	brge	.+10     	; 0x1dc8 <LCD_VoidInit+0x3cc>
		__ticks = 1;
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	9d 8b       	std	Y+21, r25	; 0x15
    1dc4:	8c 8b       	std	Y+20, r24	; 0x14
    1dc6:	3f c0       	rjmp	.+126    	; 0x1e46 <LCD_VoidInit+0x44a>
	else if (__tmp > 65535)
    1dc8:	6e 89       	ldd	r22, Y+22	; 0x16
    1dca:	7f 89       	ldd	r23, Y+23	; 0x17
    1dcc:	88 8d       	ldd	r24, Y+24	; 0x18
    1dce:	99 8d       	ldd	r25, Y+25	; 0x19
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	3f ef       	ldi	r19, 0xFF	; 255
    1dd4:	4f e7       	ldi	r20, 0x7F	; 127
    1dd6:	57 e4       	ldi	r21, 0x47	; 71
    1dd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ddc:	18 16       	cp	r1, r24
    1dde:	4c f5       	brge	.+82     	; 0x1e32 <LCD_VoidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1de2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1de4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1de6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e2       	ldi	r20, 0x20	; 32
    1dee:	51 e4       	ldi	r21, 0x41	; 65
    1df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	bc 01       	movw	r22, r24
    1dfa:	cd 01       	movw	r24, r26
    1dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	9d 8b       	std	Y+21, r25	; 0x15
    1e06:	8c 8b       	std	Y+20, r24	; 0x14
    1e08:	0f c0       	rjmp	.+30     	; 0x1e28 <LCD_VoidInit+0x42c>
    1e0a:	88 ec       	ldi	r24, 0xC8	; 200
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	9b 8b       	std	Y+19, r25	; 0x13
    1e10:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e12:	8a 89       	ldd	r24, Y+18	; 0x12
    1e14:	9b 89       	ldd	r25, Y+19	; 0x13
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <LCD_VoidInit+0x41a>
    1e1a:	9b 8b       	std	Y+19, r25	; 0x13
    1e1c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1e:	8c 89       	ldd	r24, Y+20	; 0x14
    1e20:	9d 89       	ldd	r25, Y+21	; 0x15
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	9d 8b       	std	Y+21, r25	; 0x15
    1e26:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e28:	8c 89       	ldd	r24, Y+20	; 0x14
    1e2a:	9d 89       	ldd	r25, Y+21	; 0x15
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	69 f7       	brne	.-38     	; 0x1e0a <LCD_VoidInit+0x40e>
    1e30:	24 c0       	rjmp	.+72     	; 0x1e7a <LCD_VoidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e32:	6e 89       	ldd	r22, Y+22	; 0x16
    1e34:	7f 89       	ldd	r23, Y+23	; 0x17
    1e36:	88 8d       	ldd	r24, Y+24	; 0x18
    1e38:	99 8d       	ldd	r25, Y+25	; 0x19
    1e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	9d 8b       	std	Y+21, r25	; 0x15
    1e44:	8c 8b       	std	Y+20, r24	; 0x14
    1e46:	8c 89       	ldd	r24, Y+20	; 0x14
    1e48:	9d 89       	ldd	r25, Y+21	; 0x15
    1e4a:	99 8b       	std	Y+17, r25	; 0x11
    1e4c:	88 8b       	std	Y+16, r24	; 0x10
    1e4e:	88 89       	ldd	r24, Y+16	; 0x10
    1e50:	99 89       	ldd	r25, Y+17	; 0x11
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <LCD_VoidInit+0x456>
    1e56:	99 8b       	std	Y+17, r25	; 0x11
    1e58:	88 8b       	std	Y+16, r24	; 0x10
    1e5a:	0f c0       	rjmp	.+30     	; 0x1e7a <LCD_VoidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e5c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e5e:	78 a1       	ldd	r23, Y+32	; 0x20
    1e60:	89 a1       	ldd	r24, Y+33	; 0x21
    1e62:	9a a1       	ldd	r25, Y+34	; 0x22
    1e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	8e 8f       	std	Y+30, r24	; 0x1e
    1e6e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e70:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e72:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e74:	8a 95       	dec	r24
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <LCD_VoidInit+0x478>
    1e78:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00000001);
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_CheckStatusSendCmnd>
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	a0 e0       	ldi	r26, 0x00	; 0
    1e86:	b0 e4       	ldi	r27, 0x40	; 64
    1e88:	8b 87       	std	Y+11, r24	; 0x0b
    1e8a:	9c 87       	std	Y+12, r25	; 0x0c
    1e8c:	ad 87       	std	Y+13, r26	; 0x0d
    1e8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	4a ef       	ldi	r20, 0xFA	; 250
    1e9e:	54 e4       	ldi	r21, 0x44	; 68
    1ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	8f 83       	std	Y+7, r24	; 0x07
    1eaa:	98 87       	std	Y+8, r25	; 0x08
    1eac:	a9 87       	std	Y+9, r26	; 0x09
    1eae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb2:	78 85       	ldd	r23, Y+8	; 0x08
    1eb4:	89 85       	ldd	r24, Y+9	; 0x09
    1eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e8       	ldi	r20, 0x80	; 128
    1ebe:	5f e3       	ldi	r21, 0x3F	; 63
    1ec0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ec4:	88 23       	and	r24, r24
    1ec6:	2c f4       	brge	.+10     	; 0x1ed2 <LCD_VoidInit+0x4d6>
		__ticks = 1;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	9e 83       	std	Y+6, r25	; 0x06
    1ece:	8d 83       	std	Y+5, r24	; 0x05
    1ed0:	3f c0       	rjmp	.+126    	; 0x1f50 <LCD_VoidInit+0x554>
	else if (__tmp > 65535)
    1ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed4:	78 85       	ldd	r23, Y+8	; 0x08
    1ed6:	89 85       	ldd	r24, Y+9	; 0x09
    1ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	3f ef       	ldi	r19, 0xFF	; 255
    1ede:	4f e7       	ldi	r20, 0x7F	; 127
    1ee0:	57 e4       	ldi	r21, 0x47	; 71
    1ee2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee6:	18 16       	cp	r1, r24
    1ee8:	4c f5       	brge	.+82     	; 0x1f3c <LCD_VoidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e2       	ldi	r20, 0x20	; 32
    1ef8:	51 e4       	ldi	r21, 0x41	; 65
    1efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	bc 01       	movw	r22, r24
    1f04:	cd 01       	movw	r24, r26
    1f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	9e 83       	std	Y+6, r25	; 0x06
    1f10:	8d 83       	std	Y+5, r24	; 0x05
    1f12:	0f c0       	rjmp	.+30     	; 0x1f32 <LCD_VoidInit+0x536>
    1f14:	88 ec       	ldi	r24, 0xC8	; 200
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9c 83       	std	Y+4, r25	; 0x04
    1f1a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <LCD_VoidInit+0x524>
    1f24:	9c 83       	std	Y+4, r25	; 0x04
    1f26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f28:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	9e 83       	std	Y+6, r25	; 0x06
    1f30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	9e 81       	ldd	r25, Y+6	; 0x06
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	69 f7       	brne	.-38     	; 0x1f14 <LCD_VoidInit+0x518>
    1f3a:	14 c0       	rjmp	.+40     	; 0x1f64 <LCD_VoidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3e:	78 85       	ldd	r23, Y+8	; 0x08
    1f40:	89 85       	ldd	r24, Y+9	; 0x09
    1f42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9e 83       	std	Y+6, r25	; 0x06
    1f4e:	8d 83       	std	Y+5, r24	; 0x05
    1f50:	8d 81       	ldd	r24, Y+5	; 0x05
    1f52:	9e 81       	ldd	r25, Y+6	; 0x06
    1f54:	9a 83       	std	Y+2, r25	; 0x02
    1f56:	89 83       	std	Y+1, r24	; 0x01
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <LCD_VoidInit+0x560>
    1f60:	9a 83       	std	Y+2, r25	; 0x02
    1f62:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
        LCD_CheckStatusSendCmnd(0b00000110);
    1f64:	86 e0       	ldi	r24, 0x06	; 6
    1f66:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_CheckStatusSendCmnd>
}
    1f6a:	c4 5b       	subi	r28, 0xB4	; 180
    1f6c:	df 4f       	sbci	r29, 0xFF	; 255
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	1f 91       	pop	r17
    1f7e:	0f 91       	pop	r16
    1f80:	08 95       	ret

00001f82 <LCD_CheckStatusSendCmnd>:
CheckStatus LCD_CheckStatusSendCmnd(_uint8 Copy__Uint8Cmnd)
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	e2 97       	sbiw	r28, 0x32	; 50
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	8a ab       	std	Y+50, r24	; 0x32
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    1f98:	19 aa       	std	Y+49, r1	; 0x31
         3-Send CMND byte  to the Data Pins of LCD
         4-PULSE of Enable E = 1 ,E = 0
        */
        if (Copy__Uint8Cmnd <= 255)
        {
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_LOW);
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	61 e0       	ldi	r22, 0x01	; 1
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, Copy__Uint8Cmnd);
    1fae:	83 e0       	ldi	r24, 0x03	; 3
    1fb0:	6a a9       	ldd	r22, Y+50	; 0x32
    1fb2:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	62 e0       	ldi	r22, 0x02	; 2
    1fba:	41 e0       	ldi	r20, 0x01	; 1
    1fbc:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	a0 e8       	ldi	r26, 0x80	; 128
    1fc6:	bf e3       	ldi	r27, 0x3F	; 63
    1fc8:	8d a7       	std	Y+45, r24	; 0x2d
    1fca:	9e a7       	std	Y+46, r25	; 0x2e
    1fcc:	af a7       	std	Y+47, r26	; 0x2f
    1fce:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fd0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1fd2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1fd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fd6:	98 a9       	ldd	r25, Y+48	; 0x30
    1fd8:	2b ea       	ldi	r18, 0xAB	; 171
    1fda:	3a ea       	ldi	r19, 0xAA	; 170
    1fdc:	4a e2       	ldi	r20, 0x2A	; 42
    1fde:	50 e4       	ldi	r21, 0x40	; 64
    1fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	89 a7       	std	Y+41, r24	; 0x29
    1fea:	9a a7       	std	Y+42, r25	; 0x2a
    1fec:	ab a7       	std	Y+43, r26	; 0x2b
    1fee:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ff0:	69 a5       	ldd	r22, Y+41	; 0x29
    1ff2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ff4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ff6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e8       	ldi	r20, 0x80	; 128
    1ffe:	5f e3       	ldi	r21, 0x3F	; 63
    2000:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2004:	88 23       	and	r24, r24
    2006:	1c f4       	brge	.+6      	; 0x200e <LCD_CheckStatusSendCmnd+0x8c>
		__ticks = 1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	88 a7       	std	Y+40, r24	; 0x28
    200c:	91 c0       	rjmp	.+290    	; 0x2130 <LCD_CheckStatusSendCmnd+0x1ae>
	else if (__tmp > 255)
    200e:	69 a5       	ldd	r22, Y+41	; 0x29
    2010:	7a a5       	ldd	r23, Y+42	; 0x2a
    2012:	8b a5       	ldd	r24, Y+43	; 0x2b
    2014:	9c a5       	ldd	r25, Y+44	; 0x2c
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	4f e7       	ldi	r20, 0x7F	; 127
    201c:	53 e4       	ldi	r21, 0x43	; 67
    201e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2022:	18 16       	cp	r1, r24
    2024:	0c f0       	brlt	.+2      	; 0x2028 <LCD_CheckStatusSendCmnd+0xa6>
    2026:	7b c0       	rjmp	.+246    	; 0x211e <LCD_CheckStatusSendCmnd+0x19c>
	{
		_delay_ms(__us / 1000.0);
    2028:	6d a5       	ldd	r22, Y+45	; 0x2d
    202a:	7e a5       	ldd	r23, Y+46	; 0x2e
    202c:	8f a5       	ldd	r24, Y+47	; 0x2f
    202e:	98 a9       	ldd	r25, Y+48	; 0x30
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	4a e7       	ldi	r20, 0x7A	; 122
    2036:	54 e4       	ldi	r21, 0x44	; 68
    2038:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	8c a3       	std	Y+36, r24	; 0x24
    2042:	9d a3       	std	Y+37, r25	; 0x25
    2044:	ae a3       	std	Y+38, r26	; 0x26
    2046:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2048:	6c a1       	ldd	r22, Y+36	; 0x24
    204a:	7d a1       	ldd	r23, Y+37	; 0x25
    204c:	8e a1       	ldd	r24, Y+38	; 0x26
    204e:	9f a1       	ldd	r25, Y+39	; 0x27
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	4a ef       	ldi	r20, 0xFA	; 250
    2056:	54 e4       	ldi	r21, 0x44	; 68
    2058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	88 a3       	std	Y+32, r24	; 0x20
    2062:	99 a3       	std	Y+33, r25	; 0x21
    2064:	aa a3       	std	Y+34, r26	; 0x22
    2066:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2068:	68 a1       	ldd	r22, Y+32	; 0x20
    206a:	79 a1       	ldd	r23, Y+33	; 0x21
    206c:	8a a1       	ldd	r24, Y+34	; 0x22
    206e:	9b a1       	ldd	r25, Y+35	; 0x23
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e8       	ldi	r20, 0x80	; 128
    2076:	5f e3       	ldi	r21, 0x3F	; 63
    2078:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    207c:	88 23       	and	r24, r24
    207e:	2c f4       	brge	.+10     	; 0x208a <LCD_CheckStatusSendCmnd+0x108>
		__ticks = 1;
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	9f 8f       	std	Y+31, r25	; 0x1f
    2086:	8e 8f       	std	Y+30, r24	; 0x1e
    2088:	3f c0       	rjmp	.+126    	; 0x2108 <LCD_CheckStatusSendCmnd+0x186>
	else if (__tmp > 65535)
    208a:	68 a1       	ldd	r22, Y+32	; 0x20
    208c:	79 a1       	ldd	r23, Y+33	; 0x21
    208e:	8a a1       	ldd	r24, Y+34	; 0x22
    2090:	9b a1       	ldd	r25, Y+35	; 0x23
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	3f ef       	ldi	r19, 0xFF	; 255
    2096:	4f e7       	ldi	r20, 0x7F	; 127
    2098:	57 e4       	ldi	r21, 0x47	; 71
    209a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    209e:	18 16       	cp	r1, r24
    20a0:	4c f5       	brge	.+82     	; 0x20f4 <LCD_CheckStatusSendCmnd+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a2:	6c a1       	ldd	r22, Y+36	; 0x24
    20a4:	7d a1       	ldd	r23, Y+37	; 0x25
    20a6:	8e a1       	ldd	r24, Y+38	; 0x26
    20a8:	9f a1       	ldd	r25, Y+39	; 0x27
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e2       	ldi	r20, 0x20	; 32
    20b0:	51 e4       	ldi	r21, 0x41	; 65
    20b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	bc 01       	movw	r22, r24
    20bc:	cd 01       	movw	r24, r26
    20be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	9f 8f       	std	Y+31, r25	; 0x1f
    20c8:	8e 8f       	std	Y+30, r24	; 0x1e
    20ca:	0f c0       	rjmp	.+30     	; 0x20ea <LCD_CheckStatusSendCmnd+0x168>
    20cc:	88 ec       	ldi	r24, 0xC8	; 200
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	9d 8f       	std	Y+29, r25	; 0x1d
    20d2:	8c 8f       	std	Y+28, r24	; 0x1c
    20d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20d6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <LCD_CheckStatusSendCmnd+0x156>
    20dc:	9d 8f       	std	Y+29, r25	; 0x1d
    20de:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20e2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	9f 8f       	std	Y+31, r25	; 0x1f
    20e8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	69 f7       	brne	.-38     	; 0x20cc <LCD_CheckStatusSendCmnd+0x14a>
    20f2:	24 c0       	rjmp	.+72     	; 0x213c <LCD_CheckStatusSendCmnd+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f4:	68 a1       	ldd	r22, Y+32	; 0x20
    20f6:	79 a1       	ldd	r23, Y+33	; 0x21
    20f8:	8a a1       	ldd	r24, Y+34	; 0x22
    20fa:	9b a1       	ldd	r25, Y+35	; 0x23
    20fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	9f 8f       	std	Y+31, r25	; 0x1f
    2106:	8e 8f       	std	Y+30, r24	; 0x1e
    2108:	8e 8d       	ldd	r24, Y+30	; 0x1e
    210a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    210c:	9b 8f       	std	Y+27, r25	; 0x1b
    210e:	8a 8f       	std	Y+26, r24	; 0x1a
    2110:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2112:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <LCD_CheckStatusSendCmnd+0x192>
    2118:	9b 8f       	std	Y+27, r25	; 0x1b
    211a:	8a 8f       	std	Y+26, r24	; 0x1a
    211c:	0f c0       	rjmp	.+30     	; 0x213c <LCD_CheckStatusSendCmnd+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    211e:	69 a5       	ldd	r22, Y+41	; 0x29
    2120:	7a a5       	ldd	r23, Y+42	; 0x2a
    2122:	8b a5       	ldd	r24, Y+43	; 0x2b
    2124:	9c a5       	ldd	r25, Y+44	; 0x2c
    2126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	88 a7       	std	Y+40, r24	; 0x28
    2130:	88 a5       	ldd	r24, Y+40	; 0x28
    2132:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2134:	89 8d       	ldd	r24, Y+25	; 0x19
    2136:	8a 95       	dec	r24
    2138:	f1 f7       	brne	.-4      	; 0x2136 <LCD_CheckStatusSendCmnd+0x1b4>
    213a:	89 8f       	std	Y+25, r24	; 0x19
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	62 e0       	ldi	r22, 0x02	; 2
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	a0 e8       	ldi	r26, 0x80	; 128
    214c:	bf e3       	ldi	r27, 0x3F	; 63
    214e:	8d 8b       	std	Y+21, r24	; 0x15
    2150:	9e 8b       	std	Y+22, r25	; 0x16
    2152:	af 8b       	std	Y+23, r26	; 0x17
    2154:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2156:	6d 89       	ldd	r22, Y+21	; 0x15
    2158:	7e 89       	ldd	r23, Y+22	; 0x16
    215a:	8f 89       	ldd	r24, Y+23	; 0x17
    215c:	98 8d       	ldd	r25, Y+24	; 0x18
    215e:	2b ea       	ldi	r18, 0xAB	; 171
    2160:	3a ea       	ldi	r19, 0xAA	; 170
    2162:	4a e2       	ldi	r20, 0x2A	; 42
    2164:	50 e4       	ldi	r21, 0x40	; 64
    2166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	89 8b       	std	Y+17, r24	; 0x11
    2170:	9a 8b       	std	Y+18, r25	; 0x12
    2172:	ab 8b       	std	Y+19, r26	; 0x13
    2174:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2176:	69 89       	ldd	r22, Y+17	; 0x11
    2178:	7a 89       	ldd	r23, Y+18	; 0x12
    217a:	8b 89       	ldd	r24, Y+19	; 0x13
    217c:	9c 89       	ldd	r25, Y+20	; 0x14
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	40 e8       	ldi	r20, 0x80	; 128
    2184:	5f e3       	ldi	r21, 0x3F	; 63
    2186:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    218a:	88 23       	and	r24, r24
    218c:	1c f4       	brge	.+6      	; 0x2194 <LCD_CheckStatusSendCmnd+0x212>
		__ticks = 1;
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	88 8b       	std	Y+16, r24	; 0x10
    2192:	91 c0       	rjmp	.+290    	; 0x22b6 <LCD_CheckStatusSendCmnd+0x334>
	else if (__tmp > 255)
    2194:	69 89       	ldd	r22, Y+17	; 0x11
    2196:	7a 89       	ldd	r23, Y+18	; 0x12
    2198:	8b 89       	ldd	r24, Y+19	; 0x13
    219a:	9c 89       	ldd	r25, Y+20	; 0x14
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	4f e7       	ldi	r20, 0x7F	; 127
    21a2:	53 e4       	ldi	r21, 0x43	; 67
    21a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21a8:	18 16       	cp	r1, r24
    21aa:	0c f0       	brlt	.+2      	; 0x21ae <LCD_CheckStatusSendCmnd+0x22c>
    21ac:	7b c0       	rjmp	.+246    	; 0x22a4 <LCD_CheckStatusSendCmnd+0x322>
	{
		_delay_ms(__us / 1000.0);
    21ae:	6d 89       	ldd	r22, Y+21	; 0x15
    21b0:	7e 89       	ldd	r23, Y+22	; 0x16
    21b2:	8f 89       	ldd	r24, Y+23	; 0x17
    21b4:	98 8d       	ldd	r25, Y+24	; 0x18
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	4a e7       	ldi	r20, 0x7A	; 122
    21bc:	54 e4       	ldi	r21, 0x44	; 68
    21be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	8c 87       	std	Y+12, r24	; 0x0c
    21c8:	9d 87       	std	Y+13, r25	; 0x0d
    21ca:	ae 87       	std	Y+14, r26	; 0x0e
    21cc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    21d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    21d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    21d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	4a ef       	ldi	r20, 0xFA	; 250
    21dc:	54 e4       	ldi	r21, 0x44	; 68
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	88 87       	std	Y+8, r24	; 0x08
    21e8:	99 87       	std	Y+9, r25	; 0x09
    21ea:	aa 87       	std	Y+10, r26	; 0x0a
    21ec:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    21ee:	68 85       	ldd	r22, Y+8	; 0x08
    21f0:	79 85       	ldd	r23, Y+9	; 0x09
    21f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    21f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e8       	ldi	r20, 0x80	; 128
    21fc:	5f e3       	ldi	r21, 0x3F	; 63
    21fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2202:	88 23       	and	r24, r24
    2204:	2c f4       	brge	.+10     	; 0x2210 <LCD_CheckStatusSendCmnd+0x28e>
		__ticks = 1;
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	9f 83       	std	Y+7, r25	; 0x07
    220c:	8e 83       	std	Y+6, r24	; 0x06
    220e:	3f c0       	rjmp	.+126    	; 0x228e <LCD_CheckStatusSendCmnd+0x30c>
	else if (__tmp > 65535)
    2210:	68 85       	ldd	r22, Y+8	; 0x08
    2212:	79 85       	ldd	r23, Y+9	; 0x09
    2214:	8a 85       	ldd	r24, Y+10	; 0x0a
    2216:	9b 85       	ldd	r25, Y+11	; 0x0b
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	3f ef       	ldi	r19, 0xFF	; 255
    221c:	4f e7       	ldi	r20, 0x7F	; 127
    221e:	57 e4       	ldi	r21, 0x47	; 71
    2220:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2224:	18 16       	cp	r1, r24
    2226:	4c f5       	brge	.+82     	; 0x227a <LCD_CheckStatusSendCmnd+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2228:	6c 85       	ldd	r22, Y+12	; 0x0c
    222a:	7d 85       	ldd	r23, Y+13	; 0x0d
    222c:	8e 85       	ldd	r24, Y+14	; 0x0e
    222e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e2       	ldi	r20, 0x20	; 32
    2236:	51 e4       	ldi	r21, 0x41	; 65
    2238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	bc 01       	movw	r22, r24
    2242:	cd 01       	movw	r24, r26
    2244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	9f 83       	std	Y+7, r25	; 0x07
    224e:	8e 83       	std	Y+6, r24	; 0x06
    2250:	0f c0       	rjmp	.+30     	; 0x2270 <LCD_CheckStatusSendCmnd+0x2ee>
    2252:	88 ec       	ldi	r24, 0xC8	; 200
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	9d 83       	std	Y+5, r25	; 0x05
    2258:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    225a:	8c 81       	ldd	r24, Y+4	; 0x04
    225c:	9d 81       	ldd	r25, Y+5	; 0x05
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <LCD_CheckStatusSendCmnd+0x2dc>
    2262:	9d 83       	std	Y+5, r25	; 0x05
    2264:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2266:	8e 81       	ldd	r24, Y+6	; 0x06
    2268:	9f 81       	ldd	r25, Y+7	; 0x07
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	9f 83       	std	Y+7, r25	; 0x07
    226e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2270:	8e 81       	ldd	r24, Y+6	; 0x06
    2272:	9f 81       	ldd	r25, Y+7	; 0x07
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	69 f7       	brne	.-38     	; 0x2252 <LCD_CheckStatusSendCmnd+0x2d0>
    2278:	24 c0       	rjmp	.+72     	; 0x22c2 <LCD_CheckStatusSendCmnd+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227a:	68 85       	ldd	r22, Y+8	; 0x08
    227c:	79 85       	ldd	r23, Y+9	; 0x09
    227e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2280:	9b 85       	ldd	r25, Y+11	; 0x0b
    2282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	9f 83       	std	Y+7, r25	; 0x07
    228c:	8e 83       	std	Y+6, r24	; 0x06
    228e:	8e 81       	ldd	r24, Y+6	; 0x06
    2290:	9f 81       	ldd	r25, Y+7	; 0x07
    2292:	9b 83       	std	Y+3, r25	; 0x03
    2294:	8a 83       	std	Y+2, r24	; 0x02
    2296:	8a 81       	ldd	r24, Y+2	; 0x02
    2298:	9b 81       	ldd	r25, Y+3	; 0x03
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	f1 f7       	brne	.-4      	; 0x229a <LCD_CheckStatusSendCmnd+0x318>
    229e:	9b 83       	std	Y+3, r25	; 0x03
    22a0:	8a 83       	std	Y+2, r24	; 0x02
    22a2:	0f c0       	rjmp	.+30     	; 0x22c2 <LCD_CheckStatusSendCmnd+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22a4:	69 89       	ldd	r22, Y+17	; 0x11
    22a6:	7a 89       	ldd	r23, Y+18	; 0x12
    22a8:	8b 89       	ldd	r24, Y+19	; 0x13
    22aa:	9c 89       	ldd	r25, Y+20	; 0x14
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	88 8b       	std	Y+16, r24	; 0x10
    22b6:	88 89       	ldd	r24, Y+16	; 0x10
    22b8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	8a 95       	dec	r24
    22be:	f1 f7       	brne	.-4      	; 0x22bc <LCD_CheckStatusSendCmnd+0x33a>
    22c0:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    22c2:	89 a9       	ldd	r24, Y+49	; 0x31
}
    22c4:	e2 96       	adiw	r28, 0x32	; 50
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	de bf       	out	0x3e, r29	; 62
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	cd bf       	out	0x3d, r28	; 61
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <LCD_CheckStatusSendChar>:
CheckStatus LCD_CheckStatusSendChar(_uint8 Copy__Uint8Char)
{
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	e2 97       	sbiw	r28, 0x32	; 50
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	8a ab       	std	Y+50, r24	; 0x32
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    22ec:	19 aa       	std	Y+49, r1	; 0x31
         3-Send CMND byte  to the Data Pins of LCD
         4-PULSE of Enable E = 1 ,E = 0
        */
        if (Copy__Uint8Char <= 255)
        {
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_HIGH);
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	60 e0       	ldi	r22, 0x00	; 0
    22f2:	41 e0       	ldi	r20, 0x01	; 1
    22f4:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	61 e0       	ldi	r22, 0x01	; 1
    22fc:	40 e0       	ldi	r20, 0x00	; 0
    22fe:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, Copy__Uint8Char);
    2302:	83 e0       	ldi	r24, 0x03	; 3
    2304:	6a a9       	ldd	r22, Y+50	; 0x32
    2306:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	62 e0       	ldi	r22, 0x02	; 2
    230e:	41 e0       	ldi	r20, 0x01	; 1
    2310:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	a0 e8       	ldi	r26, 0x80	; 128
    231a:	bf e3       	ldi	r27, 0x3F	; 63
    231c:	8d a7       	std	Y+45, r24	; 0x2d
    231e:	9e a7       	std	Y+46, r25	; 0x2e
    2320:	af a7       	std	Y+47, r26	; 0x2f
    2322:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2324:	6d a5       	ldd	r22, Y+45	; 0x2d
    2326:	7e a5       	ldd	r23, Y+46	; 0x2e
    2328:	8f a5       	ldd	r24, Y+47	; 0x2f
    232a:	98 a9       	ldd	r25, Y+48	; 0x30
    232c:	2b ea       	ldi	r18, 0xAB	; 171
    232e:	3a ea       	ldi	r19, 0xAA	; 170
    2330:	4a e2       	ldi	r20, 0x2A	; 42
    2332:	50 e4       	ldi	r21, 0x40	; 64
    2334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	89 a7       	std	Y+41, r24	; 0x29
    233e:	9a a7       	std	Y+42, r25	; 0x2a
    2340:	ab a7       	std	Y+43, r26	; 0x2b
    2342:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2344:	69 a5       	ldd	r22, Y+41	; 0x29
    2346:	7a a5       	ldd	r23, Y+42	; 0x2a
    2348:	8b a5       	ldd	r24, Y+43	; 0x2b
    234a:	9c a5       	ldd	r25, Y+44	; 0x2c
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	40 e8       	ldi	r20, 0x80	; 128
    2352:	5f e3       	ldi	r21, 0x3F	; 63
    2354:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2358:	88 23       	and	r24, r24
    235a:	1c f4       	brge	.+6      	; 0x2362 <LCD_CheckStatusSendChar+0x8c>
		__ticks = 1;
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	88 a7       	std	Y+40, r24	; 0x28
    2360:	91 c0       	rjmp	.+290    	; 0x2484 <LCD_CheckStatusSendChar+0x1ae>
	else if (__tmp > 255)
    2362:	69 a5       	ldd	r22, Y+41	; 0x29
    2364:	7a a5       	ldd	r23, Y+42	; 0x2a
    2366:	8b a5       	ldd	r24, Y+43	; 0x2b
    2368:	9c a5       	ldd	r25, Y+44	; 0x2c
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	4f e7       	ldi	r20, 0x7F	; 127
    2370:	53 e4       	ldi	r21, 0x43	; 67
    2372:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2376:	18 16       	cp	r1, r24
    2378:	0c f0       	brlt	.+2      	; 0x237c <LCD_CheckStatusSendChar+0xa6>
    237a:	7b c0       	rjmp	.+246    	; 0x2472 <LCD_CheckStatusSendChar+0x19c>
	{
		_delay_ms(__us / 1000.0);
    237c:	6d a5       	ldd	r22, Y+45	; 0x2d
    237e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2380:	8f a5       	ldd	r24, Y+47	; 0x2f
    2382:	98 a9       	ldd	r25, Y+48	; 0x30
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	4a e7       	ldi	r20, 0x7A	; 122
    238a:	54 e4       	ldi	r21, 0x44	; 68
    238c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	8c a3       	std	Y+36, r24	; 0x24
    2396:	9d a3       	std	Y+37, r25	; 0x25
    2398:	ae a3       	std	Y+38, r26	; 0x26
    239a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239c:	6c a1       	ldd	r22, Y+36	; 0x24
    239e:	7d a1       	ldd	r23, Y+37	; 0x25
    23a0:	8e a1       	ldd	r24, Y+38	; 0x26
    23a2:	9f a1       	ldd	r25, Y+39	; 0x27
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	4a ef       	ldi	r20, 0xFA	; 250
    23aa:	54 e4       	ldi	r21, 0x44	; 68
    23ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	88 a3       	std	Y+32, r24	; 0x20
    23b6:	99 a3       	std	Y+33, r25	; 0x21
    23b8:	aa a3       	std	Y+34, r26	; 0x22
    23ba:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    23bc:	68 a1       	ldd	r22, Y+32	; 0x20
    23be:	79 a1       	ldd	r23, Y+33	; 0x21
    23c0:	8a a1       	ldd	r24, Y+34	; 0x22
    23c2:	9b a1       	ldd	r25, Y+35	; 0x23
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e8       	ldi	r20, 0x80	; 128
    23ca:	5f e3       	ldi	r21, 0x3F	; 63
    23cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23d0:	88 23       	and	r24, r24
    23d2:	2c f4       	brge	.+10     	; 0x23de <LCD_CheckStatusSendChar+0x108>
		__ticks = 1;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	9f 8f       	std	Y+31, r25	; 0x1f
    23da:	8e 8f       	std	Y+30, r24	; 0x1e
    23dc:	3f c0       	rjmp	.+126    	; 0x245c <LCD_CheckStatusSendChar+0x186>
	else if (__tmp > 65535)
    23de:	68 a1       	ldd	r22, Y+32	; 0x20
    23e0:	79 a1       	ldd	r23, Y+33	; 0x21
    23e2:	8a a1       	ldd	r24, Y+34	; 0x22
    23e4:	9b a1       	ldd	r25, Y+35	; 0x23
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	3f ef       	ldi	r19, 0xFF	; 255
    23ea:	4f e7       	ldi	r20, 0x7F	; 127
    23ec:	57 e4       	ldi	r21, 0x47	; 71
    23ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23f2:	18 16       	cp	r1, r24
    23f4:	4c f5       	brge	.+82     	; 0x2448 <LCD_CheckStatusSendChar+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f6:	6c a1       	ldd	r22, Y+36	; 0x24
    23f8:	7d a1       	ldd	r23, Y+37	; 0x25
    23fa:	8e a1       	ldd	r24, Y+38	; 0x26
    23fc:	9f a1       	ldd	r25, Y+39	; 0x27
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e2       	ldi	r20, 0x20	; 32
    2404:	51 e4       	ldi	r21, 0x41	; 65
    2406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	bc 01       	movw	r22, r24
    2410:	cd 01       	movw	r24, r26
    2412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9f 8f       	std	Y+31, r25	; 0x1f
    241c:	8e 8f       	std	Y+30, r24	; 0x1e
    241e:	0f c0       	rjmp	.+30     	; 0x243e <LCD_CheckStatusSendChar+0x168>
    2420:	88 ec       	ldi	r24, 0xC8	; 200
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	9d 8f       	std	Y+29, r25	; 0x1d
    2426:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2428:	8c 8d       	ldd	r24, Y+28	; 0x1c
    242a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <LCD_CheckStatusSendChar+0x156>
    2430:	9d 8f       	std	Y+29, r25	; 0x1d
    2432:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2434:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2436:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	9f 8f       	std	Y+31, r25	; 0x1f
    243c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2440:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	69 f7       	brne	.-38     	; 0x2420 <LCD_CheckStatusSendChar+0x14a>
    2446:	24 c0       	rjmp	.+72     	; 0x2490 <LCD_CheckStatusSendChar+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2448:	68 a1       	ldd	r22, Y+32	; 0x20
    244a:	79 a1       	ldd	r23, Y+33	; 0x21
    244c:	8a a1       	ldd	r24, Y+34	; 0x22
    244e:	9b a1       	ldd	r25, Y+35	; 0x23
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9f 8f       	std	Y+31, r25	; 0x1f
    245a:	8e 8f       	std	Y+30, r24	; 0x1e
    245c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    245e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2460:	9b 8f       	std	Y+27, r25	; 0x1b
    2462:	8a 8f       	std	Y+26, r24	; 0x1a
    2464:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2466:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <LCD_CheckStatusSendChar+0x192>
    246c:	9b 8f       	std	Y+27, r25	; 0x1b
    246e:	8a 8f       	std	Y+26, r24	; 0x1a
    2470:	0f c0       	rjmp	.+30     	; 0x2490 <LCD_CheckStatusSendChar+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2472:	69 a5       	ldd	r22, Y+41	; 0x29
    2474:	7a a5       	ldd	r23, Y+42	; 0x2a
    2476:	8b a5       	ldd	r24, Y+43	; 0x2b
    2478:	9c a5       	ldd	r25, Y+44	; 0x2c
    247a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	88 a7       	std	Y+40, r24	; 0x28
    2484:	88 a5       	ldd	r24, Y+40	; 0x28
    2486:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2488:	89 8d       	ldd	r24, Y+25	; 0x19
    248a:	8a 95       	dec	r24
    248c:	f1 f7       	brne	.-4      	; 0x248a <LCD_CheckStatusSendChar+0x1b4>
    248e:	89 8f       	std	Y+25, r24	; 0x19
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	62 e0       	ldi	r22, 0x02	; 2
    2494:	40 e0       	ldi	r20, 0x00	; 0
    2496:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	a0 e8       	ldi	r26, 0x80	; 128
    24a0:	bf e3       	ldi	r27, 0x3F	; 63
    24a2:	8d 8b       	std	Y+21, r24	; 0x15
    24a4:	9e 8b       	std	Y+22, r25	; 0x16
    24a6:	af 8b       	std	Y+23, r26	; 0x17
    24a8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24aa:	6d 89       	ldd	r22, Y+21	; 0x15
    24ac:	7e 89       	ldd	r23, Y+22	; 0x16
    24ae:	8f 89       	ldd	r24, Y+23	; 0x17
    24b0:	98 8d       	ldd	r25, Y+24	; 0x18
    24b2:	2b ea       	ldi	r18, 0xAB	; 171
    24b4:	3a ea       	ldi	r19, 0xAA	; 170
    24b6:	4a e2       	ldi	r20, 0x2A	; 42
    24b8:	50 e4       	ldi	r21, 0x40	; 64
    24ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	89 8b       	std	Y+17, r24	; 0x11
    24c4:	9a 8b       	std	Y+18, r25	; 0x12
    24c6:	ab 8b       	std	Y+19, r26	; 0x13
    24c8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    24ca:	69 89       	ldd	r22, Y+17	; 0x11
    24cc:	7a 89       	ldd	r23, Y+18	; 0x12
    24ce:	8b 89       	ldd	r24, Y+19	; 0x13
    24d0:	9c 89       	ldd	r25, Y+20	; 0x14
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e8       	ldi	r20, 0x80	; 128
    24d8:	5f e3       	ldi	r21, 0x3F	; 63
    24da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24de:	88 23       	and	r24, r24
    24e0:	1c f4       	brge	.+6      	; 0x24e8 <LCD_CheckStatusSendChar+0x212>
		__ticks = 1;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	88 8b       	std	Y+16, r24	; 0x10
    24e6:	91 c0       	rjmp	.+290    	; 0x260a <LCD_CheckStatusSendChar+0x334>
	else if (__tmp > 255)
    24e8:	69 89       	ldd	r22, Y+17	; 0x11
    24ea:	7a 89       	ldd	r23, Y+18	; 0x12
    24ec:	8b 89       	ldd	r24, Y+19	; 0x13
    24ee:	9c 89       	ldd	r25, Y+20	; 0x14
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	4f e7       	ldi	r20, 0x7F	; 127
    24f6:	53 e4       	ldi	r21, 0x43	; 67
    24f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24fc:	18 16       	cp	r1, r24
    24fe:	0c f0       	brlt	.+2      	; 0x2502 <LCD_CheckStatusSendChar+0x22c>
    2500:	7b c0       	rjmp	.+246    	; 0x25f8 <LCD_CheckStatusSendChar+0x322>
	{
		_delay_ms(__us / 1000.0);
    2502:	6d 89       	ldd	r22, Y+21	; 0x15
    2504:	7e 89       	ldd	r23, Y+22	; 0x16
    2506:	8f 89       	ldd	r24, Y+23	; 0x17
    2508:	98 8d       	ldd	r25, Y+24	; 0x18
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	4a e7       	ldi	r20, 0x7A	; 122
    2510:	54 e4       	ldi	r21, 0x44	; 68
    2512:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	8c 87       	std	Y+12, r24	; 0x0c
    251c:	9d 87       	std	Y+13, r25	; 0x0d
    251e:	ae 87       	std	Y+14, r26	; 0x0e
    2520:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2522:	6c 85       	ldd	r22, Y+12	; 0x0c
    2524:	7d 85       	ldd	r23, Y+13	; 0x0d
    2526:	8e 85       	ldd	r24, Y+14	; 0x0e
    2528:	9f 85       	ldd	r25, Y+15	; 0x0f
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	4a ef       	ldi	r20, 0xFA	; 250
    2530:	54 e4       	ldi	r21, 0x44	; 68
    2532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	88 87       	std	Y+8, r24	; 0x08
    253c:	99 87       	std	Y+9, r25	; 0x09
    253e:	aa 87       	std	Y+10, r26	; 0x0a
    2540:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2542:	68 85       	ldd	r22, Y+8	; 0x08
    2544:	79 85       	ldd	r23, Y+9	; 0x09
    2546:	8a 85       	ldd	r24, Y+10	; 0x0a
    2548:	9b 85       	ldd	r25, Y+11	; 0x0b
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	40 e8       	ldi	r20, 0x80	; 128
    2550:	5f e3       	ldi	r21, 0x3F	; 63
    2552:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2556:	88 23       	and	r24, r24
    2558:	2c f4       	brge	.+10     	; 0x2564 <LCD_CheckStatusSendChar+0x28e>
		__ticks = 1;
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	9f 83       	std	Y+7, r25	; 0x07
    2560:	8e 83       	std	Y+6, r24	; 0x06
    2562:	3f c0       	rjmp	.+126    	; 0x25e2 <LCD_CheckStatusSendChar+0x30c>
	else if (__tmp > 65535)
    2564:	68 85       	ldd	r22, Y+8	; 0x08
    2566:	79 85       	ldd	r23, Y+9	; 0x09
    2568:	8a 85       	ldd	r24, Y+10	; 0x0a
    256a:	9b 85       	ldd	r25, Y+11	; 0x0b
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	3f ef       	ldi	r19, 0xFF	; 255
    2570:	4f e7       	ldi	r20, 0x7F	; 127
    2572:	57 e4       	ldi	r21, 0x47	; 71
    2574:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2578:	18 16       	cp	r1, r24
    257a:	4c f5       	brge	.+82     	; 0x25ce <LCD_CheckStatusSendChar+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257c:	6c 85       	ldd	r22, Y+12	; 0x0c
    257e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2580:	8e 85       	ldd	r24, Y+14	; 0x0e
    2582:	9f 85       	ldd	r25, Y+15	; 0x0f
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	40 e2       	ldi	r20, 0x20	; 32
    258a:	51 e4       	ldi	r21, 0x41	; 65
    258c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	bc 01       	movw	r22, r24
    2596:	cd 01       	movw	r24, r26
    2598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	9f 83       	std	Y+7, r25	; 0x07
    25a2:	8e 83       	std	Y+6, r24	; 0x06
    25a4:	0f c0       	rjmp	.+30     	; 0x25c4 <LCD_CheckStatusSendChar+0x2ee>
    25a6:	88 ec       	ldi	r24, 0xC8	; 200
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	9d 83       	std	Y+5, r25	; 0x05
    25ac:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25ae:	8c 81       	ldd	r24, Y+4	; 0x04
    25b0:	9d 81       	ldd	r25, Y+5	; 0x05
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <LCD_CheckStatusSendChar+0x2dc>
    25b6:	9d 83       	std	Y+5, r25	; 0x05
    25b8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ba:	8e 81       	ldd	r24, Y+6	; 0x06
    25bc:	9f 81       	ldd	r25, Y+7	; 0x07
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	9f 83       	std	Y+7, r25	; 0x07
    25c2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c4:	8e 81       	ldd	r24, Y+6	; 0x06
    25c6:	9f 81       	ldd	r25, Y+7	; 0x07
    25c8:	00 97       	sbiw	r24, 0x00	; 0
    25ca:	69 f7       	brne	.-38     	; 0x25a6 <LCD_CheckStatusSendChar+0x2d0>
    25cc:	24 c0       	rjmp	.+72     	; 0x2616 <LCD_CheckStatusSendChar+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ce:	68 85       	ldd	r22, Y+8	; 0x08
    25d0:	79 85       	ldd	r23, Y+9	; 0x09
    25d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    25d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	9f 83       	std	Y+7, r25	; 0x07
    25e0:	8e 83       	std	Y+6, r24	; 0x06
    25e2:	8e 81       	ldd	r24, Y+6	; 0x06
    25e4:	9f 81       	ldd	r25, Y+7	; 0x07
    25e6:	9b 83       	std	Y+3, r25	; 0x03
    25e8:	8a 83       	std	Y+2, r24	; 0x02
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	9b 81       	ldd	r25, Y+3	; 0x03
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <LCD_CheckStatusSendChar+0x318>
    25f2:	9b 83       	std	Y+3, r25	; 0x03
    25f4:	8a 83       	std	Y+2, r24	; 0x02
    25f6:	0f c0       	rjmp	.+30     	; 0x2616 <LCD_CheckStatusSendChar+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25f8:	69 89       	ldd	r22, Y+17	; 0x11
    25fa:	7a 89       	ldd	r23, Y+18	; 0x12
    25fc:	8b 89       	ldd	r24, Y+19	; 0x13
    25fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	88 8b       	std	Y+16, r24	; 0x10
    260a:	88 89       	ldd	r24, Y+16	; 0x10
    260c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	8a 95       	dec	r24
    2612:	f1 f7       	brne	.-4      	; 0x2610 <LCD_CheckStatusSendChar+0x33a>
    2614:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    2616:	89 a9       	ldd	r24, Y+49	; 0x31
}
    2618:	e2 96       	adiw	r28, 0x32	; 50
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	de bf       	out	0x3e, r29	; 62
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	cd bf       	out	0x3d, r28	; 61
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <LCD_CheckStatusWriteString>:

CheckStatus LCD_CheckStatusWriteString(_uint8 *Copy_p__Uint8String)
{
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	00 d0       	rcall	.+0      	; 0x2630 <LCD_CheckStatusWriteString+0x6>
    2630:	00 d0       	rcall	.+0      	; 0x2632 <LCD_CheckStatusWriteString+0x8>
    2632:	0f 92       	push	r0
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	9c 83       	std	Y+4, r25	; 0x04
    263a:	8b 83       	std	Y+3, r24	; 0x03
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    263c:	1a 82       	std	Y+2, r1	; 0x02
        _uint8 Local__Uint8Index = DIO__UINT8_LOW;
    263e:	19 82       	std	Y+1, r1	; 0x01

        if (Copy_p__Uint8String != NULL)
    2640:	8b 81       	ldd	r24, Y+3	; 0x03
    2642:	9c 81       	ldd	r25, Y+4	; 0x04
    2644:	00 97       	sbiw	r24, 0x00	; 0
    2646:	f1 f0       	breq	.+60     	; 0x2684 <LCD_CheckStatusWriteString+0x5a>
        {
                for (Local__Uint8Index = DIO__UINT8_LOW; *(Copy_p__Uint8String + Local__Uint8Index) != '\0'; ++Local__Uint8Index)
    2648:	19 82       	std	Y+1, r1	; 0x01
    264a:	0e c0       	rjmp	.+28     	; 0x2668 <LCD_CheckStatusWriteString+0x3e>
                {
                        LCD_CheckStatusSendChar4bit(*(Copy_p__Uint8String + Local__Uint8Index));
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	28 2f       	mov	r18, r24
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	9c 81       	ldd	r25, Y+4	; 0x04
    2656:	fc 01       	movw	r30, r24
    2658:	e2 0f       	add	r30, r18
    265a:	f3 1f       	adc	r31, r19
    265c:	80 81       	ld	r24, Z
    265e:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
        _uint8 Local__Uint8Index = DIO__UINT8_LOW;

        if (Copy_p__Uint8String != NULL)
        {
                for (Local__Uint8Index = DIO__UINT8_LOW; *(Copy_p__Uint8String + Local__Uint8Index) != '\0'; ++Local__Uint8Index)
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	8f 5f       	subi	r24, 0xFF	; 255
    2666:	89 83       	std	Y+1, r24	; 0x01
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	28 2f       	mov	r18, r24
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	9c 81       	ldd	r25, Y+4	; 0x04
    2672:	fc 01       	movw	r30, r24
    2674:	e2 0f       	add	r30, r18
    2676:	f3 1f       	adc	r31, r19
    2678:	80 81       	ld	r24, Z
    267a:	88 23       	and	r24, r24
    267c:	39 f7       	brne	.-50     	; 0x264c <LCD_CheckStatusWriteString+0x22>
                {
                        LCD_CheckStatusSendChar4bit(*(Copy_p__Uint8String + Local__Uint8Index));
                }

                return Local_CheckStausReturnValue;
    267e:	8a 81       	ldd	r24, Y+2	; 0x02
    2680:	8d 83       	std	Y+5, r24	; 0x05
    2682:	04 c0       	rjmp	.+8      	; 0x268c <LCD_CheckStatusWriteString+0x62>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	8a 83       	std	Y+2, r24	; 0x02
                return Local_CheckStausReturnValue;
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	8d 83       	std	Y+5, r24	; 0x05
    268c:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <LCD_CheckStatusGoToXY>:
CheckStatus LCD_CheckStatusGoToXY(_uint8 Copy__Uint8LineNumber, _uint8 Copy__Uint8LocationNumber)
{
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <LCD_CheckStatusGoToXY+0x6>
    26a4:	00 d0       	rcall	.+0      	; 0x26a6 <LCD_CheckStatusGoToXY+0x8>
    26a6:	00 d0       	rcall	.+0      	; 0x26a8 <LCD_CheckStatusGoToXY+0xa>
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
    26ac:	8a 83       	std	Y+2, r24	; 0x02
    26ae:	6b 83       	std	Y+3, r22	; 0x03

        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    26b0:	19 82       	std	Y+1, r1	; 0x01

        if ((Copy__Uint8LineNumber <= 1) && (Copy__Uint8LocationNumber <= 39))
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	82 30       	cpi	r24, 0x02	; 2
    26b6:	f0 f4       	brcc	.+60     	; 0x26f4 <LCD_CheckStatusGoToXY+0x56>
    26b8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ba:	88 32       	cpi	r24, 0x28	; 40
    26bc:	d8 f4       	brcc	.+54     	; 0x26f4 <LCD_CheckStatusGoToXY+0x56>
        {

                switch (Copy__Uint8LineNumber)
    26be:	8a 81       	ldd	r24, Y+2	; 0x02
    26c0:	28 2f       	mov	r18, r24
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	3e 83       	std	Y+6, r19	; 0x06
    26c6:	2d 83       	std	Y+5, r18	; 0x05
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	9e 81       	ldd	r25, Y+6	; 0x06
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	31 f0       	breq	.+12     	; 0x26dc <LCD_CheckStatusGoToXY+0x3e>
    26d0:	2d 81       	ldd	r18, Y+5	; 0x05
    26d2:	3e 81       	ldd	r19, Y+6	; 0x06
    26d4:	21 30       	cpi	r18, 0x01	; 1
    26d6:	31 05       	cpc	r19, r1
    26d8:	31 f0       	breq	.+12     	; 0x26e6 <LCD_CheckStatusGoToXY+0x48>
    26da:	09 c0       	rjmp	.+18     	; 0x26ee <LCD_CheckStatusGoToXY+0x50>
                {
                case LCD__UINT8_LINE1:
                        LCD_CheckStatusSendCmnd4bit(0x80 + Copy__Uint8LocationNumber); //BASE +OFFSET
    26dc:	8b 81       	ldd	r24, Y+3	; 0x03
    26de:	80 58       	subi	r24, 0x80	; 128
    26e0:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <LCD_CheckStatusSendCmnd4bit>
    26e4:	04 c0       	rjmp	.+8      	; 0x26ee <LCD_CheckStatusGoToXY+0x50>
                        break;
                case LCD__UINT8_LINE2:
                        LCD_CheckStatusSendCmnd4bit(0xc0 + Copy__Uint8LocationNumber);
    26e6:	8b 81       	ldd	r24, Y+3	; 0x03
    26e8:	80 54       	subi	r24, 0x40	; 64
    26ea:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <LCD_CheckStatusSendCmnd4bit>
                        break;
                default:
                        break;
                }
                return Local_CheckStausReturnValue;
    26ee:	39 81       	ldd	r19, Y+1	; 0x01
    26f0:	3c 83       	std	Y+4, r19	; 0x04
    26f2:	04 c0       	rjmp	.+8      	; 0x26fc <LCD_CheckStatusGoToXY+0x5e>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStausReturnValue;
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	8c 83       	std	Y+4, r24	; 0x04
    26fc:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    26fe:	26 96       	adiw	r28, 0x06	; 6
    2700:	0f b6       	in	r0, 0x3f	; 63
    2702:	f8 94       	cli
    2704:	de bf       	out	0x3e, r29	; 62
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	cd bf       	out	0x3d, r28	; 61
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	08 95       	ret

00002710 <LCD_VoidClearDisplay>:

Void LCD_VoidClearDisplay(Void)
{
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	2e 97       	sbiw	r28, 0x0e	; 14
    271a:	0f b6       	in	r0, 0x3f	; 63
    271c:	f8 94       	cli
    271e:	de bf       	out	0x3e, r29	; 62
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	cd bf       	out	0x3d, r28	; 61
        LCD_CheckStatusSendCmnd4bit(0x01);
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <LCD_CheckStatusSendCmnd4bit>
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	a0 e0       	ldi	r26, 0x00	; 0
    2730:	b0 e4       	ldi	r27, 0x40	; 64
    2732:	8b 87       	std	Y+11, r24	; 0x0b
    2734:	9c 87       	std	Y+12, r25	; 0x0c
    2736:	ad 87       	std	Y+13, r26	; 0x0d
    2738:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273a:	6b 85       	ldd	r22, Y+11	; 0x0b
    273c:	7c 85       	ldd	r23, Y+12	; 0x0c
    273e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2740:	9e 85       	ldd	r25, Y+14	; 0x0e
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	4a ef       	ldi	r20, 0xFA	; 250
    2748:	54 e4       	ldi	r21, 0x44	; 68
    274a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	8f 83       	std	Y+7, r24	; 0x07
    2754:	98 87       	std	Y+8, r25	; 0x08
    2756:	a9 87       	std	Y+9, r26	; 0x09
    2758:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    275a:	6f 81       	ldd	r22, Y+7	; 0x07
    275c:	78 85       	ldd	r23, Y+8	; 0x08
    275e:	89 85       	ldd	r24, Y+9	; 0x09
    2760:	9a 85       	ldd	r25, Y+10	; 0x0a
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e8       	ldi	r20, 0x80	; 128
    2768:	5f e3       	ldi	r21, 0x3F	; 63
    276a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    276e:	88 23       	and	r24, r24
    2770:	2c f4       	brge	.+10     	; 0x277c <LCD_VoidClearDisplay+0x6c>
		__ticks = 1;
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	9e 83       	std	Y+6, r25	; 0x06
    2778:	8d 83       	std	Y+5, r24	; 0x05
    277a:	3f c0       	rjmp	.+126    	; 0x27fa <LCD_VoidClearDisplay+0xea>
	else if (__tmp > 65535)
    277c:	6f 81       	ldd	r22, Y+7	; 0x07
    277e:	78 85       	ldd	r23, Y+8	; 0x08
    2780:	89 85       	ldd	r24, Y+9	; 0x09
    2782:	9a 85       	ldd	r25, Y+10	; 0x0a
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	3f ef       	ldi	r19, 0xFF	; 255
    2788:	4f e7       	ldi	r20, 0x7F	; 127
    278a:	57 e4       	ldi	r21, 0x47	; 71
    278c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2790:	18 16       	cp	r1, r24
    2792:	4c f5       	brge	.+82     	; 0x27e6 <LCD_VoidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2794:	6b 85       	ldd	r22, Y+11	; 0x0b
    2796:	7c 85       	ldd	r23, Y+12	; 0x0c
    2798:	8d 85       	ldd	r24, Y+13	; 0x0d
    279a:	9e 85       	ldd	r25, Y+14	; 0x0e
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e2       	ldi	r20, 0x20	; 32
    27a2:	51 e4       	ldi	r21, 0x41	; 65
    27a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	bc 01       	movw	r22, r24
    27ae:	cd 01       	movw	r24, r26
    27b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	9e 83       	std	Y+6, r25	; 0x06
    27ba:	8d 83       	std	Y+5, r24	; 0x05
    27bc:	0f c0       	rjmp	.+30     	; 0x27dc <LCD_VoidClearDisplay+0xcc>
    27be:	88 ec       	ldi	r24, 0xC8	; 200
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	9c 83       	std	Y+4, r25	; 0x04
    27c4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <LCD_VoidClearDisplay+0xba>
    27ce:	9c 83       	std	Y+4, r25	; 0x04
    27d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d2:	8d 81       	ldd	r24, Y+5	; 0x05
    27d4:	9e 81       	ldd	r25, Y+6	; 0x06
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	9e 83       	std	Y+6, r25	; 0x06
    27da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	69 f7       	brne	.-38     	; 0x27be <LCD_VoidClearDisplay+0xae>
    27e4:	14 c0       	rjmp	.+40     	; 0x280e <LCD_VoidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e6:	6f 81       	ldd	r22, Y+7	; 0x07
    27e8:	78 85       	ldd	r23, Y+8	; 0x08
    27ea:	89 85       	ldd	r24, Y+9	; 0x09
    27ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
    27fa:	8d 81       	ldd	r24, Y+5	; 0x05
    27fc:	9e 81       	ldd	r25, Y+6	; 0x06
    27fe:	9a 83       	std	Y+2, r25	; 0x02
    2800:	89 83       	std	Y+1, r24	; 0x01
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	9a 81       	ldd	r25, Y+2	; 0x02
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	f1 f7       	brne	.-4      	; 0x2806 <LCD_VoidClearDisplay+0xf6>
    280a:	9a 83       	std	Y+2, r25	; 0x02
    280c:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
}
    280e:	2e 96       	adiw	r28, 0x0e	; 14
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	de bf       	out	0x3e, r29	; 62
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	cd bf       	out	0x3d, r28	; 61
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <LCD_CheckStatusSendNumber>:
CheckStatus LCD_CheckStatusSendNumber(_uint32 Copy__Uint32Number)
{
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
    2828:	2d 97       	sbiw	r28, 0x0d	; 13
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	f8 94       	cli
    282e:	de bf       	out	0x3e, r29	; 62
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	cd bf       	out	0x3d, r28	; 61
    2834:	68 87       	std	Y+8, r22	; 0x08
    2836:	79 87       	std	Y+9, r23	; 0x09
    2838:	8a 87       	std	Y+10, r24	; 0x0a
    283a:	9b 87       	std	Y+11, r25	; 0x0b
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    283c:	1f 82       	std	Y+7, r1	; 0x07

        _uint8 Local__Uint8Remendier = 0x00;
    283e:	1e 82       	std	Y+6, r1	; 0x06
        _uint8 Local__Uint8Counter = 0x00;
    2840:	1d 82       	std	Y+5, r1	; 0x05
        _uint32 Local__Uint32Temporary = 0;
    2842:	19 82       	std	Y+1, r1	; 0x01
    2844:	1a 82       	std	Y+2, r1	; 0x02
    2846:	1b 82       	std	Y+3, r1	; 0x03
    2848:	1c 82       	std	Y+4, r1	; 0x04
    284a:	40 c0       	rjmp	.+128    	; 0x28cc <LCD_CheckStatusSendNumber+0xac>
        if (Copy__Uint32Number <= 4294967296)
        {
                while (Copy__Uint32Number != 0)
                {
                        Local__Uint32Temporary = Local__Uint32Temporary * 0x0A;
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	9a 81       	ldd	r25, Y+2	; 0x02
    2850:	ab 81       	ldd	r26, Y+3	; 0x03
    2852:	bc 81       	ldd	r27, Y+4	; 0x04
    2854:	2a e0       	ldi	r18, 0x0A	; 10
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e0       	ldi	r20, 0x00	; 0
    285a:	50 e0       	ldi	r21, 0x00	; 0
    285c:	bc 01       	movw	r22, r24
    285e:	cd 01       	movw	r24, r26
    2860:	0e 94 34 23 	call	0x4668	; 0x4668 <__mulsi3>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	89 83       	std	Y+1, r24	; 0x01
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	ab 83       	std	Y+3, r26	; 0x03
    286e:	bc 83       	std	Y+4, r27	; 0x04
                        Local__Uint32Temporary = Local__Uint32Temporary + Copy__Uint32Number % 0x0A;
    2870:	88 85       	ldd	r24, Y+8	; 0x08
    2872:	99 85       	ldd	r25, Y+9	; 0x09
    2874:	aa 85       	ldd	r26, Y+10	; 0x0a
    2876:	bb 85       	ldd	r27, Y+11	; 0x0b
    2878:	2a e0       	ldi	r18, 0x0A	; 10
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e0       	ldi	r20, 0x00	; 0
    287e:	50 e0       	ldi	r21, 0x00	; 0
    2880:	bc 01       	movw	r22, r24
    2882:	cd 01       	movw	r24, r26
    2884:	0e 94 53 23 	call	0x46a6	; 0x46a6 <__udivmodsi4>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	9c 01       	movw	r18, r24
    288e:	ad 01       	movw	r20, r26
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	9a 81       	ldd	r25, Y+2	; 0x02
    2894:	ab 81       	ldd	r26, Y+3	; 0x03
    2896:	bc 81       	ldd	r27, Y+4	; 0x04
    2898:	82 0f       	add	r24, r18
    289a:	93 1f       	adc	r25, r19
    289c:	a4 1f       	adc	r26, r20
    289e:	b5 1f       	adc	r27, r21
    28a0:	89 83       	std	Y+1, r24	; 0x01
    28a2:	9a 83       	std	Y+2, r25	; 0x02
    28a4:	ab 83       	std	Y+3, r26	; 0x03
    28a6:	bc 83       	std	Y+4, r27	; 0x04
                        Copy__Uint32Number = Copy__Uint32Number / 0x0A;
    28a8:	88 85       	ldd	r24, Y+8	; 0x08
    28aa:	99 85       	ldd	r25, Y+9	; 0x09
    28ac:	aa 85       	ldd	r26, Y+10	; 0x0a
    28ae:	bb 85       	ldd	r27, Y+11	; 0x0b
    28b0:	2a e0       	ldi	r18, 0x0A	; 10
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e0       	ldi	r20, 0x00	; 0
    28b6:	50 e0       	ldi	r21, 0x00	; 0
    28b8:	bc 01       	movw	r22, r24
    28ba:	cd 01       	movw	r24, r26
    28bc:	0e 94 53 23 	call	0x46a6	; 0x46a6 <__udivmodsi4>
    28c0:	da 01       	movw	r26, r20
    28c2:	c9 01       	movw	r24, r18
    28c4:	88 87       	std	Y+8, r24	; 0x08
    28c6:	99 87       	std	Y+9, r25	; 0x09
    28c8:	aa 87       	std	Y+10, r26	; 0x0a
    28ca:	bb 87       	std	Y+11, r27	; 0x0b
        _uint8 Local__Uint8Remendier = 0x00;
        _uint8 Local__Uint8Counter = 0x00;
        _uint32 Local__Uint32Temporary = 0;
        if (Copy__Uint32Number <= 4294967296)
        {
                while (Copy__Uint32Number != 0)
    28cc:	88 85       	ldd	r24, Y+8	; 0x08
    28ce:	99 85       	ldd	r25, Y+9	; 0x09
    28d0:	aa 85       	ldd	r26, Y+10	; 0x0a
    28d2:	bb 85       	ldd	r27, Y+11	; 0x0b
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	a1 05       	cpc	r26, r1
    28d8:	b1 05       	cpc	r27, r1
    28da:	09 f0       	breq	.+2      	; 0x28de <LCD_CheckStatusSendNumber+0xbe>
    28dc:	b7 cf       	rjmp	.-146    	; 0x284c <LCD_CheckStatusSendNumber+0x2c>
                        Local__Uint32Temporary = Local__Uint32Temporary * 0x0A;
                        Local__Uint32Temporary = Local__Uint32Temporary + Copy__Uint32Number % 0x0A;
                        Copy__Uint32Number = Copy__Uint32Number / 0x0A;
                }

                for (Local__Uint8Counter = 0; Local__Uint32Temporary != 0; ++Local__Uint8Counter)
    28de:	1d 82       	std	Y+5, r1	; 0x05
    28e0:	95 c0       	rjmp	.+298    	; 0x2a0c <LCD_CheckStatusSendNumber+0x1ec>
                {
                        Local__Uint8Remendier = Local__Uint32Temporary % 0x0A;
    28e2:	89 81       	ldd	r24, Y+1	; 0x01
    28e4:	9a 81       	ldd	r25, Y+2	; 0x02
    28e6:	ab 81       	ldd	r26, Y+3	; 0x03
    28e8:	bc 81       	ldd	r27, Y+4	; 0x04
    28ea:	2a e0       	ldi	r18, 0x0A	; 10
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e0       	ldi	r20, 0x00	; 0
    28f0:	50 e0       	ldi	r21, 0x00	; 0
    28f2:	bc 01       	movw	r22, r24
    28f4:	cd 01       	movw	r24, r26
    28f6:	0e 94 53 23 	call	0x46a6	; 0x46a6 <__udivmodsi4>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	8e 83       	std	Y+6, r24	; 0x06
                        Local__Uint32Temporary = Local__Uint32Temporary / 0x0A;
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	ab 81       	ldd	r26, Y+3	; 0x03
    2906:	bc 81       	ldd	r27, Y+4	; 0x04
    2908:	2a e0       	ldi	r18, 0x0A	; 10
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e0       	ldi	r20, 0x00	; 0
    290e:	50 e0       	ldi	r21, 0x00	; 0
    2910:	bc 01       	movw	r22, r24
    2912:	cd 01       	movw	r24, r26
    2914:	0e 94 53 23 	call	0x46a6	; 0x46a6 <__udivmodsi4>
    2918:	da 01       	movw	r26, r20
    291a:	c9 01       	movw	r24, r18
    291c:	89 83       	std	Y+1, r24	; 0x01
    291e:	9a 83       	std	Y+2, r25	; 0x02
    2920:	ab 83       	std	Y+3, r26	; 0x03
    2922:	bc 83       	std	Y+4, r27	; 0x04
                        switch (Local__Uint8Remendier)
    2924:	8e 81       	ldd	r24, Y+6	; 0x06
    2926:	28 2f       	mov	r18, r24
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	3d 87       	std	Y+13, r19	; 0x0d
    292c:	2c 87       	std	Y+12, r18	; 0x0c
    292e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2930:	9d 85       	ldd	r25, Y+13	; 0x0d
    2932:	84 30       	cpi	r24, 0x04	; 4
    2934:	91 05       	cpc	r25, r1
    2936:	09 f4       	brne	.+2      	; 0x293a <LCD_CheckStatusSendNumber+0x11a>
    2938:	4f c0       	rjmp	.+158    	; 0x29d8 <LCD_CheckStatusSendNumber+0x1b8>
    293a:	2c 85       	ldd	r18, Y+12	; 0x0c
    293c:	3d 85       	ldd	r19, Y+13	; 0x0d
    293e:	25 30       	cpi	r18, 0x05	; 5
    2940:	31 05       	cpc	r19, r1
    2942:	d4 f4       	brge	.+52     	; 0x2978 <LCD_CheckStatusSendNumber+0x158>
    2944:	8c 85       	ldd	r24, Y+12	; 0x0c
    2946:	9d 85       	ldd	r25, Y+13	; 0x0d
    2948:	81 30       	cpi	r24, 0x01	; 1
    294a:	91 05       	cpc	r25, r1
    294c:	c9 f1       	breq	.+114    	; 0x29c0 <LCD_CheckStatusSendNumber+0x1a0>
    294e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2950:	3d 85       	ldd	r19, Y+13	; 0x0d
    2952:	22 30       	cpi	r18, 0x02	; 2
    2954:	31 05       	cpc	r19, r1
    2956:	2c f4       	brge	.+10     	; 0x2962 <LCD_CheckStatusSendNumber+0x142>
    2958:	8c 85       	ldd	r24, Y+12	; 0x0c
    295a:	9d 85       	ldd	r25, Y+13	; 0x0d
    295c:	00 97       	sbiw	r24, 0x00	; 0
    295e:	61 f1       	breq	.+88     	; 0x29b8 <LCD_CheckStatusSendNumber+0x198>
    2960:	52 c0       	rjmp	.+164    	; 0x2a06 <LCD_CheckStatusSendNumber+0x1e6>
    2962:	2c 85       	ldd	r18, Y+12	; 0x0c
    2964:	3d 85       	ldd	r19, Y+13	; 0x0d
    2966:	22 30       	cpi	r18, 0x02	; 2
    2968:	31 05       	cpc	r19, r1
    296a:	71 f1       	breq	.+92     	; 0x29c8 <LCD_CheckStatusSendNumber+0x1a8>
    296c:	8c 85       	ldd	r24, Y+12	; 0x0c
    296e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2970:	83 30       	cpi	r24, 0x03	; 3
    2972:	91 05       	cpc	r25, r1
    2974:	69 f1       	breq	.+90     	; 0x29d0 <LCD_CheckStatusSendNumber+0x1b0>
    2976:	47 c0       	rjmp	.+142    	; 0x2a06 <LCD_CheckStatusSendNumber+0x1e6>
    2978:	2c 85       	ldd	r18, Y+12	; 0x0c
    297a:	3d 85       	ldd	r19, Y+13	; 0x0d
    297c:	27 30       	cpi	r18, 0x07	; 7
    297e:	31 05       	cpc	r19, r1
    2980:	b9 f1       	breq	.+110    	; 0x29f0 <LCD_CheckStatusSendNumber+0x1d0>
    2982:	8c 85       	ldd	r24, Y+12	; 0x0c
    2984:	9d 85       	ldd	r25, Y+13	; 0x0d
    2986:	88 30       	cpi	r24, 0x08	; 8
    2988:	91 05       	cpc	r25, r1
    298a:	5c f4       	brge	.+22     	; 0x29a2 <LCD_CheckStatusSendNumber+0x182>
    298c:	2c 85       	ldd	r18, Y+12	; 0x0c
    298e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2990:	25 30       	cpi	r18, 0x05	; 5
    2992:	31 05       	cpc	r19, r1
    2994:	29 f1       	breq	.+74     	; 0x29e0 <LCD_CheckStatusSendNumber+0x1c0>
    2996:	8c 85       	ldd	r24, Y+12	; 0x0c
    2998:	9d 85       	ldd	r25, Y+13	; 0x0d
    299a:	86 30       	cpi	r24, 0x06	; 6
    299c:	91 05       	cpc	r25, r1
    299e:	21 f1       	breq	.+72     	; 0x29e8 <LCD_CheckStatusSendNumber+0x1c8>
    29a0:	32 c0       	rjmp	.+100    	; 0x2a06 <LCD_CheckStatusSendNumber+0x1e6>
    29a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    29a4:	3d 85       	ldd	r19, Y+13	; 0x0d
    29a6:	28 30       	cpi	r18, 0x08	; 8
    29a8:	31 05       	cpc	r19, r1
    29aa:	31 f1       	breq	.+76     	; 0x29f8 <LCD_CheckStatusSendNumber+0x1d8>
    29ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    29ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    29b0:	89 30       	cpi	r24, 0x09	; 9
    29b2:	91 05       	cpc	r25, r1
    29b4:	29 f1       	breq	.+74     	; 0x2a00 <LCD_CheckStatusSendNumber+0x1e0>
    29b6:	27 c0       	rjmp	.+78     	; 0x2a06 <LCD_CheckStatusSendNumber+0x1e6>
                        {
                        case 0:
                                LCD_CheckStatusSendChar4bit('0');
    29b8:	80 e3       	ldi	r24, 0x30	; 48
    29ba:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
    29be:	23 c0       	rjmp	.+70     	; 0x2a06 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 1:
                                LCD_CheckStatusSendChar4bit('1');
    29c0:	81 e3       	ldi	r24, 0x31	; 49
    29c2:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
    29c6:	1f c0       	rjmp	.+62     	; 0x2a06 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 2:
                                LCD_CheckStatusSendChar4bit('2');
    29c8:	82 e3       	ldi	r24, 0x32	; 50
    29ca:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
    29ce:	1b c0       	rjmp	.+54     	; 0x2a06 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 3:
                                LCD_CheckStatusSendChar4bit('3');
    29d0:	83 e3       	ldi	r24, 0x33	; 51
    29d2:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
    29d6:	17 c0       	rjmp	.+46     	; 0x2a06 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 4:
                                LCD_CheckStatusSendChar4bit('4');
    29d8:	84 e3       	ldi	r24, 0x34	; 52
    29da:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
    29de:	13 c0       	rjmp	.+38     	; 0x2a06 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 5:
                                LCD_CheckStatusSendChar4bit('5');
    29e0:	85 e3       	ldi	r24, 0x35	; 53
    29e2:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
    29e6:	0f c0       	rjmp	.+30     	; 0x2a06 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 6:
                                LCD_CheckStatusSendChar4bit('6');
    29e8:	86 e3       	ldi	r24, 0x36	; 54
    29ea:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
    29ee:	0b c0       	rjmp	.+22     	; 0x2a06 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 7:
                                LCD_CheckStatusSendChar4bit('7');
    29f0:	87 e3       	ldi	r24, 0x37	; 55
    29f2:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
    29f6:	07 c0       	rjmp	.+14     	; 0x2a06 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 8:
                                LCD_CheckStatusSendChar4bit('8');
    29f8:	88 e3       	ldi	r24, 0x38	; 56
    29fa:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
    29fe:	03 c0       	rjmp	.+6      	; 0x2a06 <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 9:
                                LCD_CheckStatusSendChar4bit('9');
    2a00:	89 e3       	ldi	r24, 0x39	; 57
    2a02:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
                        Local__Uint32Temporary = Local__Uint32Temporary * 0x0A;
                        Local__Uint32Temporary = Local__Uint32Temporary + Copy__Uint32Number % 0x0A;
                        Copy__Uint32Number = Copy__Uint32Number / 0x0A;
                }

                for (Local__Uint8Counter = 0; Local__Uint32Temporary != 0; ++Local__Uint8Counter)
    2a06:	8d 81       	ldd	r24, Y+5	; 0x05
    2a08:	8f 5f       	subi	r24, 0xFF	; 255
    2a0a:	8d 83       	std	Y+5, r24	; 0x05
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a10:	ab 81       	ldd	r26, Y+3	; 0x03
    2a12:	bc 81       	ldd	r27, Y+4	; 0x04
    2a14:	00 97       	sbiw	r24, 0x00	; 0
    2a16:	a1 05       	cpc	r26, r1
    2a18:	b1 05       	cpc	r27, r1
    2a1a:	09 f0       	breq	.+2      	; 0x2a1e <LCD_CheckStatusSendNumber+0x1fe>
    2a1c:	62 cf       	rjmp	.-316    	; 0x28e2 <LCD_CheckStatusSendNumber+0xc2>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    2a1e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2a20:	2d 96       	adiw	r28, 0x0d	; 13
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	de bf       	out	0x3e, r29	; 62
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	cf 91       	pop	r28
    2a2e:	df 91       	pop	r29
    2a30:	08 95       	ret

00002a32 <LCD_CheckStatusSpecialChar>:

CheckStatus LCD_CheckStatusSpecialChar(_uint8 Copy__Uint8CGRamLocation, _uint8 Copy__Uint8LCDLine, _uint8 Copy__Uint8DDRamLocation)
{
    2a32:	df 93       	push	r29
    2a34:	cf 93       	push	r28
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
    2a3a:	27 97       	sbiw	r28, 0x07	; 7
    2a3c:	0f b6       	in	r0, 0x3f	; 63
    2a3e:	f8 94       	cli
    2a40:	de bf       	out	0x3e, r29	; 62
    2a42:	0f be       	out	0x3f, r0	; 63
    2a44:	cd bf       	out	0x3d, r28	; 61
    2a46:	8b 83       	std	Y+3, r24	; 0x03
    2a48:	6c 83       	std	Y+4, r22	; 0x04
    2a4a:	4d 83       	std	Y+5, r20	; 0x05
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2a4c:	1a 82       	std	Y+2, r1	; 0x02

        _uint8 Local__Uint8CounterJ = 0x00;
    2a4e:	19 82       	std	Y+1, r1	; 0x01
        if ((Copy__Uint8CGRamLocation <= LCD__UINT8_CG_RAMLOCATION7) && (Copy__Uint8DDRamLocation <= LCD__UINT8_LOCATION_NUMBER39))
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	88 30       	cpi	r24, 0x08	; 8
    2a54:	08 f0       	brcs	.+2      	; 0x2a58 <LCD_CheckStatusSpecialChar+0x26>
    2a56:	0b c1       	rjmp	.+534    	; 0x2c6e <LCD_CheckStatusSpecialChar+0x23c>
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	88 32       	cpi	r24, 0x28	; 40
    2a5c:	08 f0       	brcs	.+2      	; 0x2a60 <LCD_CheckStatusSpecialChar+0x2e>
    2a5e:	07 c1       	rjmp	.+526    	; 0x2c6e <LCD_CheckStatusSpecialChar+0x23c>
        {

                switch (Copy__Uint8CGRamLocation)
    2a60:	8b 81       	ldd	r24, Y+3	; 0x03
    2a62:	28 2f       	mov	r18, r24
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	3f 83       	std	Y+7, r19	; 0x07
    2a68:	2e 83       	std	Y+6, r18	; 0x06
    2a6a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a6c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a6e:	84 30       	cpi	r24, 0x04	; 4
    2a70:	91 05       	cpc	r25, r1
    2a72:	09 f4       	brne	.+2      	; 0x2a76 <LCD_CheckStatusSpecialChar+0x44>
    2a74:	7b c0       	rjmp	.+246    	; 0x2b6c <LCD_CheckStatusSpecialChar+0x13a>
    2a76:	2e 81       	ldd	r18, Y+6	; 0x06
    2a78:	3f 81       	ldd	r19, Y+7	; 0x07
    2a7a:	25 30       	cpi	r18, 0x05	; 5
    2a7c:	31 05       	cpc	r19, r1
    2a7e:	94 f4       	brge	.+36     	; 0x2aa4 <LCD_CheckStatusSpecialChar+0x72>
    2a80:	8e 81       	ldd	r24, Y+6	; 0x06
    2a82:	9f 81       	ldd	r25, Y+7	; 0x07
    2a84:	82 30       	cpi	r24, 0x02	; 2
    2a86:	91 05       	cpc	r25, r1
    2a88:	09 f4       	brne	.+2      	; 0x2a8c <LCD_CheckStatusSpecialChar+0x5a>
    2a8a:	3e c0       	rjmp	.+124    	; 0x2b08 <LCD_CheckStatusSpecialChar+0xd6>
    2a8c:	2e 81       	ldd	r18, Y+6	; 0x06
    2a8e:	3f 81       	ldd	r19, Y+7	; 0x07
    2a90:	23 30       	cpi	r18, 0x03	; 3
    2a92:	31 05       	cpc	r19, r1
    2a94:	0c f0       	brlt	.+2      	; 0x2a98 <LCD_CheckStatusSpecialChar+0x66>
    2a96:	51 c0       	rjmp	.+162    	; 0x2b3a <LCD_CheckStatusSpecialChar+0x108>
    2a98:	8e 81       	ldd	r24, Y+6	; 0x06
    2a9a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a9c:	81 30       	cpi	r24, 0x01	; 1
    2a9e:	91 05       	cpc	r25, r1
    2aa0:	d1 f0       	breq	.+52     	; 0x2ad6 <LCD_CheckStatusSpecialChar+0xa4>
    2aa2:	e0 c0       	rjmp	.+448    	; 0x2c64 <LCD_CheckStatusSpecialChar+0x232>
    2aa4:	2e 81       	ldd	r18, Y+6	; 0x06
    2aa6:	3f 81       	ldd	r19, Y+7	; 0x07
    2aa8:	26 30       	cpi	r18, 0x06	; 6
    2aaa:	31 05       	cpc	r19, r1
    2aac:	09 f4       	brne	.+2      	; 0x2ab0 <LCD_CheckStatusSpecialChar+0x7e>
    2aae:	90 c0       	rjmp	.+288    	; 0x2bd0 <LCD_CheckStatusSpecialChar+0x19e>
    2ab0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ab2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ab4:	86 30       	cpi	r24, 0x06	; 6
    2ab6:	91 05       	cpc	r25, r1
    2ab8:	0c f4       	brge	.+2      	; 0x2abc <LCD_CheckStatusSpecialChar+0x8a>
    2aba:	71 c0       	rjmp	.+226    	; 0x2b9e <LCD_CheckStatusSpecialChar+0x16c>
    2abc:	2e 81       	ldd	r18, Y+6	; 0x06
    2abe:	3f 81       	ldd	r19, Y+7	; 0x07
    2ac0:	27 30       	cpi	r18, 0x07	; 7
    2ac2:	31 05       	cpc	r19, r1
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <LCD_CheckStatusSpecialChar+0x96>
    2ac6:	9d c0       	rjmp	.+314    	; 0x2c02 <LCD_CheckStatusSpecialChar+0x1d0>
    2ac8:	8e 81       	ldd	r24, Y+6	; 0x06
    2aca:	9f 81       	ldd	r25, Y+7	; 0x07
    2acc:	88 30       	cpi	r24, 0x08	; 8
    2ace:	91 05       	cpc	r25, r1
    2ad0:	09 f4       	brne	.+2      	; 0x2ad4 <LCD_CheckStatusSpecialChar+0xa2>
    2ad2:	b0 c0       	rjmp	.+352    	; 0x2c34 <LCD_CheckStatusSpecialChar+0x202>
    2ad4:	c7 c0       	rjmp	.+398    	; 0x2c64 <LCD_CheckStatusSpecialChar+0x232>
                {

                case 1:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE0);
    2ad6:	80 e4       	ldi	r24, 0x40	; 64
    2ad8:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2adc:	19 82       	std	Y+1, r1	; 0x01
    2ade:	10 c0       	rjmp	.+32     	; 0x2b00 <LCD_CheckStatusSpecialChar+0xce>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[0][Local__Uint8CounterJ]);
    2ae0:	20 91 b8 01 	lds	r18, 0x01B8
    2ae4:	30 91 b9 01 	lds	r19, 0x01B9
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	88 2f       	mov	r24, r24
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	f9 01       	movw	r30, r18
    2af0:	e8 0f       	add	r30, r24
    2af2:	f9 1f       	adc	r31, r25
    2af4:	80 81       	ld	r24, Z
    2af6:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
                switch (Copy__Uint8CGRamLocation)
                {

                case 1:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE0);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
    2afc:	8f 5f       	subi	r24, 0xFF	; 255
    2afe:	89 83       	std	Y+1, r24	; 0x01
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	88 30       	cpi	r24, 0x08	; 8
    2b04:	68 f3       	brcs	.-38     	; 0x2ae0 <LCD_CheckStatusSpecialChar+0xae>
    2b06:	ae c0       	rjmp	.+348    	; 0x2c64 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[0][Local__Uint8CounterJ]);
                        }
                        break;
                case 2:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE1);
    2b08:	88 e4       	ldi	r24, 0x48	; 72
    2b0a:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2b0e:	19 82       	std	Y+1, r1	; 0x01
    2b10:	10 c0       	rjmp	.+32     	; 0x2b32 <LCD_CheckStatusSpecialChar+0x100>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[1][Local__Uint8CounterJ]);
    2b12:	20 91 ba 01 	lds	r18, 0x01BA
    2b16:	30 91 bb 01 	lds	r19, 0x01BB
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	88 2f       	mov	r24, r24
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	f9 01       	movw	r30, r18
    2b22:	e8 0f       	add	r30, r24
    2b24:	f9 1f       	adc	r31, r25
    2b26:	80 81       	ld	r24, Z
    2b28:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[0][Local__Uint8CounterJ]);
                        }
                        break;
                case 2:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE1);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	8f 5f       	subi	r24, 0xFF	; 255
    2b30:	89 83       	std	Y+1, r24	; 0x01
    2b32:	89 81       	ldd	r24, Y+1	; 0x01
    2b34:	88 30       	cpi	r24, 0x08	; 8
    2b36:	68 f3       	brcs	.-38     	; 0x2b12 <LCD_CheckStatusSpecialChar+0xe0>
    2b38:	95 c0       	rjmp	.+298    	; 0x2c64 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[1][Local__Uint8CounterJ]);
                        }
                        break;
                case 3:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE2);
    2b3a:	80 e5       	ldi	r24, 0x50	; 80
    2b3c:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2b40:	19 82       	std	Y+1, r1	; 0x01
    2b42:	10 c0       	rjmp	.+32     	; 0x2b64 <LCD_CheckStatusSpecialChar+0x132>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[2][Local__Uint8CounterJ]);
    2b44:	20 91 bc 01 	lds	r18, 0x01BC
    2b48:	30 91 bd 01 	lds	r19, 0x01BD
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	88 2f       	mov	r24, r24
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	f9 01       	movw	r30, r18
    2b54:	e8 0f       	add	r30, r24
    2b56:	f9 1f       	adc	r31, r25
    2b58:	80 81       	ld	r24, Z
    2b5a:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[1][Local__Uint8CounterJ]);
                        }
                        break;
                case 3:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE2);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	8f 5f       	subi	r24, 0xFF	; 255
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	88 30       	cpi	r24, 0x08	; 8
    2b68:	68 f3       	brcs	.-38     	; 0x2b44 <LCD_CheckStatusSpecialChar+0x112>
    2b6a:	7c c0       	rjmp	.+248    	; 0x2c64 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[2][Local__Uint8CounterJ]);
                        }
                        break;
                case 4:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE3);
    2b6c:	88 e5       	ldi	r24, 0x58	; 88
    2b6e:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2b72:	19 82       	std	Y+1, r1	; 0x01
    2b74:	10 c0       	rjmp	.+32     	; 0x2b96 <LCD_CheckStatusSpecialChar+0x164>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[3][Local__Uint8CounterJ]);
    2b76:	20 91 be 01 	lds	r18, 0x01BE
    2b7a:	30 91 bf 01 	lds	r19, 0x01BF
    2b7e:	89 81       	ldd	r24, Y+1	; 0x01
    2b80:	88 2f       	mov	r24, r24
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	f9 01       	movw	r30, r18
    2b86:	e8 0f       	add	r30, r24
    2b88:	f9 1f       	adc	r31, r25
    2b8a:	80 81       	ld	r24, Z
    2b8c:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[2][Local__Uint8CounterJ]);
                        }
                        break;
                case 4:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE3);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2b90:	89 81       	ldd	r24, Y+1	; 0x01
    2b92:	8f 5f       	subi	r24, 0xFF	; 255
    2b94:	89 83       	std	Y+1, r24	; 0x01
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	88 30       	cpi	r24, 0x08	; 8
    2b9a:	68 f3       	brcs	.-38     	; 0x2b76 <LCD_CheckStatusSpecialChar+0x144>
    2b9c:	63 c0       	rjmp	.+198    	; 0x2c64 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[3][Local__Uint8CounterJ]);
                        }
                        break;
                case 5:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE4);
    2b9e:	80 e6       	ldi	r24, 0x60	; 96
    2ba0:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2ba4:	19 82       	std	Y+1, r1	; 0x01
    2ba6:	10 c0       	rjmp	.+32     	; 0x2bc8 <LCD_CheckStatusSpecialChar+0x196>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[4][Local__Uint8CounterJ]);
    2ba8:	20 91 c0 01 	lds	r18, 0x01C0
    2bac:	30 91 c1 01 	lds	r19, 0x01C1
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	88 2f       	mov	r24, r24
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	f9 01       	movw	r30, r18
    2bb8:	e8 0f       	add	r30, r24
    2bba:	f9 1f       	adc	r31, r25
    2bbc:	80 81       	ld	r24, Z
    2bbe:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[3][Local__Uint8CounterJ]);
                        }
                        break;
                case 5:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE4);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2bc2:	89 81       	ldd	r24, Y+1	; 0x01
    2bc4:	8f 5f       	subi	r24, 0xFF	; 255
    2bc6:	89 83       	std	Y+1, r24	; 0x01
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	88 30       	cpi	r24, 0x08	; 8
    2bcc:	68 f3       	brcs	.-38     	; 0x2ba8 <LCD_CheckStatusSpecialChar+0x176>
    2bce:	4a c0       	rjmp	.+148    	; 0x2c64 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[4][Local__Uint8CounterJ]);
                        }
                        break;
                case 6:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE5);
    2bd0:	88 e6       	ldi	r24, 0x68	; 104
    2bd2:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2bd6:	19 82       	std	Y+1, r1	; 0x01
    2bd8:	10 c0       	rjmp	.+32     	; 0x2bfa <LCD_CheckStatusSpecialChar+0x1c8>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[5][Local__Uint8CounterJ]);
    2bda:	20 91 c2 01 	lds	r18, 0x01C2
    2bde:	30 91 c3 01 	lds	r19, 0x01C3
    2be2:	89 81       	ldd	r24, Y+1	; 0x01
    2be4:	88 2f       	mov	r24, r24
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	f9 01       	movw	r30, r18
    2bea:	e8 0f       	add	r30, r24
    2bec:	f9 1f       	adc	r31, r25
    2bee:	80 81       	ld	r24, Z
    2bf0:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[4][Local__Uint8CounterJ]);
                        }
                        break;
                case 6:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE5);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	8f 5f       	subi	r24, 0xFF	; 255
    2bf8:	89 83       	std	Y+1, r24	; 0x01
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	88 30       	cpi	r24, 0x08	; 8
    2bfe:	68 f3       	brcs	.-38     	; 0x2bda <LCD_CheckStatusSpecialChar+0x1a8>
    2c00:	31 c0       	rjmp	.+98     	; 0x2c64 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[5][Local__Uint8CounterJ]);
                        }
                        break;
                case 7:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE6);
    2c02:	80 e7       	ldi	r24, 0x70	; 112
    2c04:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2c08:	19 82       	std	Y+1, r1	; 0x01
    2c0a:	10 c0       	rjmp	.+32     	; 0x2c2c <LCD_CheckStatusSpecialChar+0x1fa>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[6][Local__Uint8CounterJ]);
    2c0c:	20 91 c4 01 	lds	r18, 0x01C4
    2c10:	30 91 c5 01 	lds	r19, 0x01C5
    2c14:	89 81       	ldd	r24, Y+1	; 0x01
    2c16:	88 2f       	mov	r24, r24
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	f9 01       	movw	r30, r18
    2c1c:	e8 0f       	add	r30, r24
    2c1e:	f9 1f       	adc	r31, r25
    2c20:	80 81       	ld	r24, Z
    2c22:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[5][Local__Uint8CounterJ]);
                        }
                        break;
                case 7:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE6);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2c26:	89 81       	ldd	r24, Y+1	; 0x01
    2c28:	8f 5f       	subi	r24, 0xFF	; 255
    2c2a:	89 83       	std	Y+1, r24	; 0x01
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	88 30       	cpi	r24, 0x08	; 8
    2c30:	68 f3       	brcs	.-38     	; 0x2c0c <LCD_CheckStatusSpecialChar+0x1da>
    2c32:	18 c0       	rjmp	.+48     	; 0x2c64 <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[6][Local__Uint8CounterJ]);
                        }
                        break;
                case 8:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE7);
    2c34:	88 e7       	ldi	r24, 0x78	; 120
    2c36:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2c3a:	19 82       	std	Y+1, r1	; 0x01
    2c3c:	10 c0       	rjmp	.+32     	; 0x2c5e <LCD_CheckStatusSpecialChar+0x22c>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[8][Local__Uint8CounterJ]);
    2c3e:	20 91 c8 01 	lds	r18, 0x01C8
    2c42:	30 91 c9 01 	lds	r19, 0x01C9
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	88 2f       	mov	r24, r24
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	f9 01       	movw	r30, r18
    2c4e:	e8 0f       	add	r30, r24
    2c50:	f9 1f       	adc	r31, r25
    2c52:	80 81       	ld	r24, Z
    2c54:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[6][Local__Uint8CounterJ]);
                        }
                        break;
                case 8:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE7);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	8f 5f       	subi	r24, 0xFF	; 255
    2c5c:	89 83       	std	Y+1, r24	; 0x01
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	88 30       	cpi	r24, 0x08	; 8
    2c62:	68 f3       	brcs	.-38     	; 0x2c3e <LCD_CheckStatusSpecialChar+0x20c>
                        break;
                default:
                        break;
                }

                LCD_CheckStatusGoToXY(Copy__Uint8LCDLine, Copy__Uint8DDRamLocation);
    2c64:	8c 81       	ldd	r24, Y+4	; 0x04
    2c66:	6d 81       	ldd	r22, Y+5	; 0x05
    2c68:	0e 94 4f 13 	call	0x269e	; 0x269e <LCD_CheckStatusGoToXY>
    2c6c:	02 c0       	rjmp	.+4      	; 0x2c72 <LCD_CheckStatusSpecialChar+0x240>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	8a 83       	std	Y+2, r24	; 0x02
        }
        return Local_CheckStausReturnValue;
    2c72:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2c74:	27 96       	adiw	r28, 0x07	; 7
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	cf 91       	pop	r28
    2c82:	df 91       	pop	r29
    2c84:	08 95       	ret

00002c86 <LCD_VoidShiftRight>:
Void LCD_VoidShiftRight(_uint8 Copy__Uint8PositionValue, _uint32 Copy__Uint32DelayValue)
{
    2c86:	df 93       	push	r29
    2c88:	cf 93       	push	r28
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	64 97       	sbiw	r28, 0x14	; 20
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	f8 94       	cli
    2c94:	de bf       	out	0x3e, r29	; 62
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	cd bf       	out	0x3d, r28	; 61
    2c9a:	88 8b       	std	Y+16, r24	; 0x10
    2c9c:	49 8b       	std	Y+17, r20	; 0x11
    2c9e:	5a 8b       	std	Y+18, r21	; 0x12
    2ca0:	6b 8b       	std	Y+19, r22	; 0x13
    2ca2:	7c 8b       	std	Y+20, r23	; 0x14
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    2ca4:	1f 86       	std	Y+15, r1	; 0x0f
    2ca6:	7c c0       	rjmp	.+248    	; 0x2da0 <LCD_VoidShiftRight+0x11a>
        {
                LCD_CheckStatusSendCmnd4bit(0b00011100);
    2ca8:	8c e1       	ldi	r24, 0x1C	; 28
    2caa:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <LCD_CheckStatusSendCmnd4bit>
                _delay_ms(Copy__Uint32DelayValue);
    2cae:	69 89       	ldd	r22, Y+17	; 0x11
    2cb0:	7a 89       	ldd	r23, Y+18	; 0x12
    2cb2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cb4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cb6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	8b 87       	std	Y+11, r24	; 0x0b
    2cc0:	9c 87       	std	Y+12, r25	; 0x0c
    2cc2:	ad 87       	std	Y+13, r26	; 0x0d
    2cc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	4a ef       	ldi	r20, 0xFA	; 250
    2cd4:	54 e4       	ldi	r21, 0x44	; 68
    2cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	8f 83       	std	Y+7, r24	; 0x07
    2ce0:	98 87       	std	Y+8, r25	; 0x08
    2ce2:	a9 87       	std	Y+9, r26	; 0x09
    2ce4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce8:	78 85       	ldd	r23, Y+8	; 0x08
    2cea:	89 85       	ldd	r24, Y+9	; 0x09
    2cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	40 e8       	ldi	r20, 0x80	; 128
    2cf4:	5f e3       	ldi	r21, 0x3F	; 63
    2cf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cfa:	88 23       	and	r24, r24
    2cfc:	2c f4       	brge	.+10     	; 0x2d08 <LCD_VoidShiftRight+0x82>
		__ticks = 1;
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	9e 83       	std	Y+6, r25	; 0x06
    2d04:	8d 83       	std	Y+5, r24	; 0x05
    2d06:	3f c0       	rjmp	.+126    	; 0x2d86 <LCD_VoidShiftRight+0x100>
	else if (__tmp > 65535)
    2d08:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0a:	78 85       	ldd	r23, Y+8	; 0x08
    2d0c:	89 85       	ldd	r24, Y+9	; 0x09
    2d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	3f ef       	ldi	r19, 0xFF	; 255
    2d14:	4f e7       	ldi	r20, 0x7F	; 127
    2d16:	57 e4       	ldi	r21, 0x47	; 71
    2d18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d1c:	18 16       	cp	r1, r24
    2d1e:	4c f5       	brge	.+82     	; 0x2d72 <LCD_VoidShiftRight+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	40 e2       	ldi	r20, 0x20	; 32
    2d2e:	51 e4       	ldi	r21, 0x41	; 65
    2d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	bc 01       	movw	r22, r24
    2d3a:	cd 01       	movw	r24, r26
    2d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	9e 83       	std	Y+6, r25	; 0x06
    2d46:	8d 83       	std	Y+5, r24	; 0x05
    2d48:	0f c0       	rjmp	.+30     	; 0x2d68 <LCD_VoidShiftRight+0xe2>
    2d4a:	88 ec       	ldi	r24, 0xC8	; 200
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	9c 83       	std	Y+4, r25	; 0x04
    2d50:	8b 83       	std	Y+3, r24	; 0x03
    2d52:	8b 81       	ldd	r24, Y+3	; 0x03
    2d54:	9c 81       	ldd	r25, Y+4	; 0x04
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	f1 f7       	brne	.-4      	; 0x2d56 <LCD_VoidShiftRight+0xd0>
    2d5a:	9c 83       	std	Y+4, r25	; 0x04
    2d5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d60:	9e 81       	ldd	r25, Y+6	; 0x06
    2d62:	01 97       	sbiw	r24, 0x01	; 1
    2d64:	9e 83       	std	Y+6, r25	; 0x06
    2d66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d68:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6c:	00 97       	sbiw	r24, 0x00	; 0
    2d6e:	69 f7       	brne	.-38     	; 0x2d4a <LCD_VoidShiftRight+0xc4>
    2d70:	14 c0       	rjmp	.+40     	; 0x2d9a <LCD_VoidShiftRight+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d72:	6f 81       	ldd	r22, Y+7	; 0x07
    2d74:	78 85       	ldd	r23, Y+8	; 0x08
    2d76:	89 85       	ldd	r24, Y+9	; 0x09
    2d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	9e 83       	std	Y+6, r25	; 0x06
    2d84:	8d 83       	std	Y+5, r24	; 0x05
    2d86:	8d 81       	ldd	r24, Y+5	; 0x05
    2d88:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8a:	9a 83       	std	Y+2, r25	; 0x02
    2d8c:	89 83       	std	Y+1, r24	; 0x01
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	9a 81       	ldd	r25, Y+2	; 0x02
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	f1 f7       	brne	.-4      	; 0x2d92 <LCD_VoidShiftRight+0x10c>
    2d96:	9a 83       	std	Y+2, r25	; 0x02
    2d98:	89 83       	std	Y+1, r24	; 0x01
        return Local_CheckStausReturnValue;
}
Void LCD_VoidShiftRight(_uint8 Copy__Uint8PositionValue, _uint32 Copy__Uint32DelayValue)
{
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    2d9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d9c:	8f 5f       	subi	r24, 0xFF	; 255
    2d9e:	8f 87       	std	Y+15, r24	; 0x0f
    2da0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2da2:	88 89       	ldd	r24, Y+16	; 0x10
    2da4:	98 17       	cp	r25, r24
    2da6:	08 f4       	brcc	.+2      	; 0x2daa <LCD_VoidShiftRight+0x124>
    2da8:	7f cf       	rjmp	.-258    	; 0x2ca8 <LCD_VoidShiftRight+0x22>
        {
                LCD_CheckStatusSendCmnd4bit(0b00011100);
                _delay_ms(Copy__Uint32DelayValue);
        }
}
    2daa:	64 96       	adiw	r28, 0x14	; 20
    2dac:	0f b6       	in	r0, 0x3f	; 63
    2dae:	f8 94       	cli
    2db0:	de bf       	out	0x3e, r29	; 62
    2db2:	0f be       	out	0x3f, r0	; 63
    2db4:	cd bf       	out	0x3d, r28	; 61
    2db6:	cf 91       	pop	r28
    2db8:	df 91       	pop	r29
    2dba:	08 95       	ret

00002dbc <LCD_CheckStatusShiftRightOrLeft>:
CheckStatus LCD_CheckStatusShiftRightOrLeft(_uint32 Copy__Uint32DelayValue)
{
    2dbc:	df 93       	push	r29
    2dbe:	cf 93       	push	r28
    2dc0:	cd b7       	in	r28, 0x3d	; 61
    2dc2:	de b7       	in	r29, 0x3e	; 62
    2dc4:	63 97       	sbiw	r28, 0x13	; 19
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	f8 94       	cli
    2dca:	de bf       	out	0x3e, r29	; 62
    2dcc:	0f be       	out	0x3f, r0	; 63
    2dce:	cd bf       	out	0x3d, r28	; 61
    2dd0:	68 8b       	std	Y+16, r22	; 0x10
    2dd2:	79 8b       	std	Y+17, r23	; 0x11
    2dd4:	8a 8b       	std	Y+18, r24	; 0x12
    2dd6:	9b 8b       	std	Y+19, r25	; 0x13
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2dd8:	1f 86       	std	Y+15, r1	; 0x0f
                        _delay_ms(Copy__Uint32DelayValue);
                }
                else if (LCD__UINT8_SHIFT_ACTIVATE == 1)
                {
                        //Left
                        LCD_CheckStatusSendCmnd4bit(0b00011000);
    2dda:	88 e1       	ldi	r24, 0x18	; 24
    2ddc:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <LCD_CheckStatusSendCmnd4bit>
                        _delay_ms(Copy__Uint32DelayValue);
    2de0:	68 89       	ldd	r22, Y+16	; 0x10
    2de2:	79 89       	ldd	r23, Y+17	; 0x11
    2de4:	8a 89       	ldd	r24, Y+18	; 0x12
    2de6:	9b 89       	ldd	r25, Y+19	; 0x13
    2de8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	8b 87       	std	Y+11, r24	; 0x0b
    2df2:	9c 87       	std	Y+12, r25	; 0x0c
    2df4:	ad 87       	std	Y+13, r26	; 0x0d
    2df6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	4a ef       	ldi	r20, 0xFA	; 250
    2e06:	54 e4       	ldi	r21, 0x44	; 68
    2e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	8f 83       	std	Y+7, r24	; 0x07
    2e12:	98 87       	std	Y+8, r25	; 0x08
    2e14:	a9 87       	std	Y+9, r26	; 0x09
    2e16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e18:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1a:	78 85       	ldd	r23, Y+8	; 0x08
    2e1c:	89 85       	ldd	r24, Y+9	; 0x09
    2e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e8       	ldi	r20, 0x80	; 128
    2e26:	5f e3       	ldi	r21, 0x3F	; 63
    2e28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e2c:	88 23       	and	r24, r24
    2e2e:	2c f4       	brge	.+10     	; 0x2e3a <LCD_CheckStatusShiftRightOrLeft+0x7e>
		__ticks = 1;
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	9e 83       	std	Y+6, r25	; 0x06
    2e36:	8d 83       	std	Y+5, r24	; 0x05
    2e38:	3f c0       	rjmp	.+126    	; 0x2eb8 <LCD_CheckStatusShiftRightOrLeft+0xfc>
	else if (__tmp > 65535)
    2e3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e3c:	78 85       	ldd	r23, Y+8	; 0x08
    2e3e:	89 85       	ldd	r24, Y+9	; 0x09
    2e40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	3f ef       	ldi	r19, 0xFF	; 255
    2e46:	4f e7       	ldi	r20, 0x7F	; 127
    2e48:	57 e4       	ldi	r21, 0x47	; 71
    2e4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e4e:	18 16       	cp	r1, r24
    2e50:	4c f5       	brge	.+82     	; 0x2ea4 <LCD_CheckStatusShiftRightOrLeft+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	40 e2       	ldi	r20, 0x20	; 32
    2e60:	51 e4       	ldi	r21, 0x41	; 65
    2e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	bc 01       	movw	r22, r24
    2e6c:	cd 01       	movw	r24, r26
    2e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	9e 83       	std	Y+6, r25	; 0x06
    2e78:	8d 83       	std	Y+5, r24	; 0x05
    2e7a:	0f c0       	rjmp	.+30     	; 0x2e9a <LCD_CheckStatusShiftRightOrLeft+0xde>
    2e7c:	88 ec       	ldi	r24, 0xC8	; 200
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	9c 83       	std	Y+4, r25	; 0x04
    2e82:	8b 83       	std	Y+3, r24	; 0x03
    2e84:	8b 81       	ldd	r24, Y+3	; 0x03
    2e86:	9c 81       	ldd	r25, Y+4	; 0x04
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	f1 f7       	brne	.-4      	; 0x2e88 <LCD_CheckStatusShiftRightOrLeft+0xcc>
    2e8c:	9c 83       	std	Y+4, r25	; 0x04
    2e8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e90:	8d 81       	ldd	r24, Y+5	; 0x05
    2e92:	9e 81       	ldd	r25, Y+6	; 0x06
    2e94:	01 97       	sbiw	r24, 0x01	; 1
    2e96:	9e 83       	std	Y+6, r25	; 0x06
    2e98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9e:	00 97       	sbiw	r24, 0x00	; 0
    2ea0:	69 f7       	brne	.-38     	; 0x2e7c <LCD_CheckStatusShiftRightOrLeft+0xc0>
    2ea2:	14 c0       	rjmp	.+40     	; 0x2ecc <LCD_CheckStatusShiftRightOrLeft+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea6:	78 85       	ldd	r23, Y+8	; 0x08
    2ea8:	89 85       	ldd	r24, Y+9	; 0x09
    2eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	9e 83       	std	Y+6, r25	; 0x06
    2eb6:	8d 83       	std	Y+5, r24	; 0x05
    2eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eba:	9e 81       	ldd	r25, Y+6	; 0x06
    2ebc:	9a 83       	std	Y+2, r25	; 0x02
    2ebe:	89 83       	std	Y+1, r24	; 0x01
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
    2ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec4:	01 97       	sbiw	r24, 0x01	; 1
    2ec6:	f1 f7       	brne	.-4      	; 0x2ec4 <LCD_CheckStatusShiftRightOrLeft+0x108>
    2ec8:	9a 83       	std	Y+2, r25	; 0x02
    2eca:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    2ecc:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2ece:	63 96       	adiw	r28, 0x13	; 19
    2ed0:	0f b6       	in	r0, 0x3f	; 63
    2ed2:	f8 94       	cli
    2ed4:	de bf       	out	0x3e, r29	; 62
    2ed6:	0f be       	out	0x3f, r0	; 63
    2ed8:	cd bf       	out	0x3d, r28	; 61
    2eda:	cf 91       	pop	r28
    2edc:	df 91       	pop	r29
    2ede:	08 95       	ret

00002ee0 <LCD_VoidShiftLeft>:
Void LCD_VoidShiftLeft(_uint8 Copy__Uint8PositionValue, _uint32 Copy__Uint32DelayValue)
{
    2ee0:	df 93       	push	r29
    2ee2:	cf 93       	push	r28
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
    2ee8:	64 97       	sbiw	r28, 0x14	; 20
    2eea:	0f b6       	in	r0, 0x3f	; 63
    2eec:	f8 94       	cli
    2eee:	de bf       	out	0x3e, r29	; 62
    2ef0:	0f be       	out	0x3f, r0	; 63
    2ef2:	cd bf       	out	0x3d, r28	; 61
    2ef4:	88 8b       	std	Y+16, r24	; 0x10
    2ef6:	49 8b       	std	Y+17, r20	; 0x11
    2ef8:	5a 8b       	std	Y+18, r21	; 0x12
    2efa:	6b 8b       	std	Y+19, r22	; 0x13
    2efc:	7c 8b       	std	Y+20, r23	; 0x14
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    2efe:	1f 86       	std	Y+15, r1	; 0x0f
    2f00:	7c c0       	rjmp	.+248    	; 0x2ffa <LCD_VoidShiftLeft+0x11a>
        {
                LCD_CheckStatusSendCmnd4bit(0b00011000);
    2f02:	88 e1       	ldi	r24, 0x18	; 24
    2f04:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <LCD_CheckStatusSendCmnd4bit>
                _delay_ms(Copy__Uint32DelayValue);
    2f08:	69 89       	ldd	r22, Y+17	; 0x11
    2f0a:	7a 89       	ldd	r23, Y+18	; 0x12
    2f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f10:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	8b 87       	std	Y+11, r24	; 0x0b
    2f1a:	9c 87       	std	Y+12, r25	; 0x0c
    2f1c:	ad 87       	std	Y+13, r26	; 0x0d
    2f1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	4a ef       	ldi	r20, 0xFA	; 250
    2f2e:	54 e4       	ldi	r21, 0x44	; 68
    2f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	8f 83       	std	Y+7, r24	; 0x07
    2f3a:	98 87       	std	Y+8, r25	; 0x08
    2f3c:	a9 87       	std	Y+9, r26	; 0x09
    2f3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f40:	6f 81       	ldd	r22, Y+7	; 0x07
    2f42:	78 85       	ldd	r23, Y+8	; 0x08
    2f44:	89 85       	ldd	r24, Y+9	; 0x09
    2f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e8       	ldi	r20, 0x80	; 128
    2f4e:	5f e3       	ldi	r21, 0x3F	; 63
    2f50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f54:	88 23       	and	r24, r24
    2f56:	2c f4       	brge	.+10     	; 0x2f62 <LCD_VoidShiftLeft+0x82>
		__ticks = 1;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	9e 83       	std	Y+6, r25	; 0x06
    2f5e:	8d 83       	std	Y+5, r24	; 0x05
    2f60:	3f c0       	rjmp	.+126    	; 0x2fe0 <LCD_VoidShiftLeft+0x100>
	else if (__tmp > 65535)
    2f62:	6f 81       	ldd	r22, Y+7	; 0x07
    2f64:	78 85       	ldd	r23, Y+8	; 0x08
    2f66:	89 85       	ldd	r24, Y+9	; 0x09
    2f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	3f ef       	ldi	r19, 0xFF	; 255
    2f6e:	4f e7       	ldi	r20, 0x7F	; 127
    2f70:	57 e4       	ldi	r21, 0x47	; 71
    2f72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f76:	18 16       	cp	r1, r24
    2f78:	4c f5       	brge	.+82     	; 0x2fcc <LCD_VoidShiftLeft+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e2       	ldi	r20, 0x20	; 32
    2f88:	51 e4       	ldi	r21, 0x41	; 65
    2f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	bc 01       	movw	r22, r24
    2f94:	cd 01       	movw	r24, r26
    2f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	9e 83       	std	Y+6, r25	; 0x06
    2fa0:	8d 83       	std	Y+5, r24	; 0x05
    2fa2:	0f c0       	rjmp	.+30     	; 0x2fc2 <LCD_VoidShiftLeft+0xe2>
    2fa4:	88 ec       	ldi	r24, 0xC8	; 200
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	9c 83       	std	Y+4, r25	; 0x04
    2faa:	8b 83       	std	Y+3, r24	; 0x03
    2fac:	8b 81       	ldd	r24, Y+3	; 0x03
    2fae:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <LCD_VoidShiftLeft+0xd0>
    2fb4:	9c 83       	std	Y+4, r25	; 0x04
    2fb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fba:	9e 81       	ldd	r25, Y+6	; 0x06
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	9e 83       	std	Y+6, r25	; 0x06
    2fc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	69 f7       	brne	.-38     	; 0x2fa4 <LCD_VoidShiftLeft+0xc4>
    2fca:	14 c0       	rjmp	.+40     	; 0x2ff4 <LCD_VoidShiftLeft+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2fce:	78 85       	ldd	r23, Y+8	; 0x08
    2fd0:	89 85       	ldd	r24, Y+9	; 0x09
    2fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	9e 83       	std	Y+6, r25	; 0x06
    2fde:	8d 83       	std	Y+5, r24	; 0x05
    2fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe4:	9a 83       	std	Y+2, r25	; 0x02
    2fe6:	89 83       	std	Y+1, r24	; 0x01
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	9a 81       	ldd	r25, Y+2	; 0x02
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	f1 f7       	brne	.-4      	; 0x2fec <LCD_VoidShiftLeft+0x10c>
    2ff0:	9a 83       	std	Y+2, r25	; 0x02
    2ff2:	89 83       	std	Y+1, r24	; 0x01
        return Local_CheckStausReturnValue;
}
Void LCD_VoidShiftLeft(_uint8 Copy__Uint8PositionValue, _uint32 Copy__Uint32DelayValue)
{
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    2ff4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ff6:	8f 5f       	subi	r24, 0xFF	; 255
    2ff8:	8f 87       	std	Y+15, r24	; 0x0f
    2ffa:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ffc:	88 89       	ldd	r24, Y+16	; 0x10
    2ffe:	98 17       	cp	r25, r24
    3000:	08 f4       	brcc	.+2      	; 0x3004 <LCD_VoidShiftLeft+0x124>
    3002:	7f cf       	rjmp	.-258    	; 0x2f02 <LCD_VoidShiftLeft+0x22>
        {
                LCD_CheckStatusSendCmnd4bit(0b00011000);
                _delay_ms(Copy__Uint32DelayValue);
        }
}
    3004:	64 96       	adiw	r28, 0x14	; 20
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	f8 94       	cli
    300a:	de bf       	out	0x3e, r29	; 62
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	cd bf       	out	0x3d, r28	; 61
    3010:	cf 91       	pop	r28
    3012:	df 91       	pop	r29
    3014:	08 95       	ret

00003016 <LCD_CheckStatusDisplaySpecialChar>:
CheckStatus LCD_CheckStatusDisplaySpecialChar(_uint8 Copy__Uint8Char)
{
    3016:	df 93       	push	r29
    3018:	cf 93       	push	r28
    301a:	00 d0       	rcall	.+0      	; 0x301c <LCD_CheckStatusDisplaySpecialChar+0x6>
    301c:	00 d0       	rcall	.+0      	; 0x301e <LCD_CheckStatusDisplaySpecialChar+0x8>
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
    3022:	8a 83       	std	Y+2, r24	; 0x02
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    3024:	19 82       	std	Y+1, r1	; 0x01
        if (Copy__Uint8Char <= 8)
    3026:	8a 81       	ldd	r24, Y+2	; 0x02
    3028:	89 30       	cpi	r24, 0x09	; 9
    302a:	08 f0       	brcs	.+2      	; 0x302e <LCD_CheckStatusDisplaySpecialChar+0x18>
    302c:	54 c0       	rjmp	.+168    	; 0x30d6 <LCD_CheckStatusDisplaySpecialChar+0xc0>
        {
                switch (Copy__Uint8Char)
    302e:	8a 81       	ldd	r24, Y+2	; 0x02
    3030:	28 2f       	mov	r18, r24
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	3c 83       	std	Y+4, r19	; 0x04
    3036:	2b 83       	std	Y+3, r18	; 0x03
    3038:	8b 81       	ldd	r24, Y+3	; 0x03
    303a:	9c 81       	ldd	r25, Y+4	; 0x04
    303c:	84 30       	cpi	r24, 0x04	; 4
    303e:	91 05       	cpc	r25, r1
    3040:	b1 f1       	breq	.+108    	; 0x30ae <LCD_CheckStatusDisplaySpecialChar+0x98>
    3042:	2b 81       	ldd	r18, Y+3	; 0x03
    3044:	3c 81       	ldd	r19, Y+4	; 0x04
    3046:	25 30       	cpi	r18, 0x05	; 5
    3048:	31 05       	cpc	r19, r1
    304a:	84 f4       	brge	.+32     	; 0x306c <LCD_CheckStatusDisplaySpecialChar+0x56>
    304c:	8b 81       	ldd	r24, Y+3	; 0x03
    304e:	9c 81       	ldd	r25, Y+4	; 0x04
    3050:	82 30       	cpi	r24, 0x02	; 2
    3052:	91 05       	cpc	r25, r1
    3054:	21 f1       	breq	.+72     	; 0x309e <LCD_CheckStatusDisplaySpecialChar+0x88>
    3056:	2b 81       	ldd	r18, Y+3	; 0x03
    3058:	3c 81       	ldd	r19, Y+4	; 0x04
    305a:	23 30       	cpi	r18, 0x03	; 3
    305c:	31 05       	cpc	r19, r1
    305e:	1c f5       	brge	.+70     	; 0x30a6 <LCD_CheckStatusDisplaySpecialChar+0x90>
    3060:	8b 81       	ldd	r24, Y+3	; 0x03
    3062:	9c 81       	ldd	r25, Y+4	; 0x04
    3064:	81 30       	cpi	r24, 0x01	; 1
    3066:	91 05       	cpc	r25, r1
    3068:	b1 f0       	breq	.+44     	; 0x3096 <LCD_CheckStatusDisplaySpecialChar+0x80>
    306a:	37 c0       	rjmp	.+110    	; 0x30da <LCD_CheckStatusDisplaySpecialChar+0xc4>
    306c:	2b 81       	ldd	r18, Y+3	; 0x03
    306e:	3c 81       	ldd	r19, Y+4	; 0x04
    3070:	26 30       	cpi	r18, 0x06	; 6
    3072:	31 05       	cpc	r19, r1
    3074:	21 f1       	breq	.+72     	; 0x30be <LCD_CheckStatusDisplaySpecialChar+0xa8>
    3076:	8b 81       	ldd	r24, Y+3	; 0x03
    3078:	9c 81       	ldd	r25, Y+4	; 0x04
    307a:	86 30       	cpi	r24, 0x06	; 6
    307c:	91 05       	cpc	r25, r1
    307e:	dc f0       	brlt	.+54     	; 0x30b6 <LCD_CheckStatusDisplaySpecialChar+0xa0>
    3080:	2b 81       	ldd	r18, Y+3	; 0x03
    3082:	3c 81       	ldd	r19, Y+4	; 0x04
    3084:	27 30       	cpi	r18, 0x07	; 7
    3086:	31 05       	cpc	r19, r1
    3088:	f1 f0       	breq	.+60     	; 0x30c6 <LCD_CheckStatusDisplaySpecialChar+0xb0>
    308a:	8b 81       	ldd	r24, Y+3	; 0x03
    308c:	9c 81       	ldd	r25, Y+4	; 0x04
    308e:	88 30       	cpi	r24, 0x08	; 8
    3090:	91 05       	cpc	r25, r1
    3092:	e9 f0       	breq	.+58     	; 0x30ce <LCD_CheckStatusDisplaySpecialChar+0xb8>
    3094:	22 c0       	rjmp	.+68     	; 0x30da <LCD_CheckStatusDisplaySpecialChar+0xc4>
                {

                case 1:
                        LCD_CheckStatusSendChar4bit(0);
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
    309c:	1e c0       	rjmp	.+60     	; 0x30da <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 2:
                        LCD_CheckStatusSendChar4bit(1);
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
    30a4:	1a c0       	rjmp	.+52     	; 0x30da <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 3:
                        LCD_CheckStatusSendChar4bit(2);
    30a6:	82 e0       	ldi	r24, 0x02	; 2
    30a8:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
    30ac:	16 c0       	rjmp	.+44     	; 0x30da <LCD_CheckStatusDisplaySpecialChar+0xc4>

                        break;
                case 4:
                        LCD_CheckStatusSendChar4bit(3);
    30ae:	83 e0       	ldi	r24, 0x03	; 3
    30b0:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
    30b4:	12 c0       	rjmp	.+36     	; 0x30da <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 5:
                        LCD_CheckStatusSendChar4bit(4);
    30b6:	84 e0       	ldi	r24, 0x04	; 4
    30b8:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
    30bc:	0e c0       	rjmp	.+28     	; 0x30da <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 6:
                        LCD_CheckStatusSendChar4bit(5);
    30be:	85 e0       	ldi	r24, 0x05	; 5
    30c0:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
    30c4:	0a c0       	rjmp	.+20     	; 0x30da <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 7:
                        LCD_CheckStatusSendChar4bit(6);
    30c6:	86 e0       	ldi	r24, 0x06	; 6
    30c8:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
    30cc:	06 c0       	rjmp	.+12     	; 0x30da <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 8:
                        LCD_CheckStatusSendChar4bit(7);
    30ce:	87 e0       	ldi	r24, 0x07	; 7
    30d0:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
    30d4:	02 c0       	rjmp	.+4      	; 0x30da <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                }
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	89 83       	std	Y+1, r24	; 0x01
        }
        return Local_CheckStausReturnValue;
    30da:	89 81       	ldd	r24, Y+1	; 0x01
}
    30dc:	0f 90       	pop	r0
    30de:	0f 90       	pop	r0
    30e0:	0f 90       	pop	r0
    30e2:	0f 90       	pop	r0
    30e4:	cf 91       	pop	r28
    30e6:	df 91       	pop	r29
    30e8:	08 95       	ret

000030ea <LCD_VoidInit4bit>:
Void LCD_VoidInit4bit(Void)
{
    30ea:	0f 93       	push	r16
    30ec:	1f 93       	push	r17
    30ee:	df 93       	push	r29
    30f0:	cf 93       	push	r28
    30f2:	cd b7       	in	r28, 0x3d	; 61
    30f4:	de b7       	in	r29, 0x3e	; 62
    30f6:	cc 54       	subi	r28, 0x4C	; 76
    30f8:	d0 40       	sbci	r29, 0x00	; 0
    30fa:	0f b6       	in	r0, 0x3f	; 63
    30fc:	f8 94       	cli
    30fe:	de bf       	out	0x3e, r29	; 62
    3100:	0f be       	out	0x3f, r0	; 63
    3102:	cd bf       	out	0x3d, r28	; 61
    3104:	fe 01       	movw	r30, r28
    3106:	e7 5b       	subi	r30, 0xB7	; 183
    3108:	ff 4f       	sbci	r31, 0xFF	; 255
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	ac e0       	ldi	r26, 0x0C	; 12
    3110:	b2 e4       	ldi	r27, 0x42	; 66
    3112:	80 83       	st	Z, r24
    3114:	91 83       	std	Z+1, r25	; 0x01
    3116:	a2 83       	std	Z+2, r26	; 0x02
    3118:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    311a:	8e 01       	movw	r16, r28
    311c:	0b 5b       	subi	r16, 0xBB	; 187
    311e:	1f 4f       	sbci	r17, 0xFF	; 255
    3120:	fe 01       	movw	r30, r28
    3122:	e7 5b       	subi	r30, 0xB7	; 183
    3124:	ff 4f       	sbci	r31, 0xFF	; 255
    3126:	60 81       	ld	r22, Z
    3128:	71 81       	ldd	r23, Z+1	; 0x01
    312a:	82 81       	ldd	r24, Z+2	; 0x02
    312c:	93 81       	ldd	r25, Z+3	; 0x03
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	4a ef       	ldi	r20, 0xFA	; 250
    3134:	54 e4       	ldi	r21, 0x44	; 68
    3136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	f8 01       	movw	r30, r16
    3140:	80 83       	st	Z, r24
    3142:	91 83       	std	Z+1, r25	; 0x01
    3144:	a2 83       	std	Z+2, r26	; 0x02
    3146:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3148:	fe 01       	movw	r30, r28
    314a:	eb 5b       	subi	r30, 0xBB	; 187
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	60 81       	ld	r22, Z
    3150:	71 81       	ldd	r23, Z+1	; 0x01
    3152:	82 81       	ldd	r24, Z+2	; 0x02
    3154:	93 81       	ldd	r25, Z+3	; 0x03
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	40 e8       	ldi	r20, 0x80	; 128
    315c:	5f e3       	ldi	r21, 0x3F	; 63
    315e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3162:	88 23       	and	r24, r24
    3164:	44 f4       	brge	.+16     	; 0x3176 <LCD_VoidInit4bit+0x8c>
		__ticks = 1;
    3166:	fe 01       	movw	r30, r28
    3168:	ed 5b       	subi	r30, 0xBD	; 189
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	91 83       	std	Z+1, r25	; 0x01
    3172:	80 83       	st	Z, r24
    3174:	64 c0       	rjmp	.+200    	; 0x323e <LCD_VoidInit4bit+0x154>
	else if (__tmp > 65535)
    3176:	fe 01       	movw	r30, r28
    3178:	eb 5b       	subi	r30, 0xBB	; 187
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	60 81       	ld	r22, Z
    317e:	71 81       	ldd	r23, Z+1	; 0x01
    3180:	82 81       	ldd	r24, Z+2	; 0x02
    3182:	93 81       	ldd	r25, Z+3	; 0x03
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	3f ef       	ldi	r19, 0xFF	; 255
    3188:	4f e7       	ldi	r20, 0x7F	; 127
    318a:	57 e4       	ldi	r21, 0x47	; 71
    318c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3190:	18 16       	cp	r1, r24
    3192:	0c f0       	brlt	.+2      	; 0x3196 <LCD_VoidInit4bit+0xac>
    3194:	43 c0       	rjmp	.+134    	; 0x321c <LCD_VoidInit4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3196:	fe 01       	movw	r30, r28
    3198:	e7 5b       	subi	r30, 0xB7	; 183
    319a:	ff 4f       	sbci	r31, 0xFF	; 255
    319c:	60 81       	ld	r22, Z
    319e:	71 81       	ldd	r23, Z+1	; 0x01
    31a0:	82 81       	ldd	r24, Z+2	; 0x02
    31a2:	93 81       	ldd	r25, Z+3	; 0x03
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	40 e2       	ldi	r20, 0x20	; 32
    31aa:	51 e4       	ldi	r21, 0x41	; 65
    31ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	8e 01       	movw	r16, r28
    31b6:	0d 5b       	subi	r16, 0xBD	; 189
    31b8:	1f 4f       	sbci	r17, 0xFF	; 255
    31ba:	bc 01       	movw	r22, r24
    31bc:	cd 01       	movw	r24, r26
    31be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	f8 01       	movw	r30, r16
    31c8:	91 83       	std	Z+1, r25	; 0x01
    31ca:	80 83       	st	Z, r24
    31cc:	1f c0       	rjmp	.+62     	; 0x320c <LCD_VoidInit4bit+0x122>
    31ce:	fe 01       	movw	r30, r28
    31d0:	ef 5b       	subi	r30, 0xBF	; 191
    31d2:	ff 4f       	sbci	r31, 0xFF	; 255
    31d4:	88 ec       	ldi	r24, 0xC8	; 200
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	91 83       	std	Z+1, r25	; 0x01
    31da:	80 83       	st	Z, r24
    31dc:	fe 01       	movw	r30, r28
    31de:	ef 5b       	subi	r30, 0xBF	; 191
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	80 81       	ld	r24, Z
    31e4:	91 81       	ldd	r25, Z+1	; 0x01
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	f1 f7       	brne	.-4      	; 0x31e6 <LCD_VoidInit4bit+0xfc>
    31ea:	fe 01       	movw	r30, r28
    31ec:	ef 5b       	subi	r30, 0xBF	; 191
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	91 83       	std	Z+1, r25	; 0x01
    31f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f4:	de 01       	movw	r26, r28
    31f6:	ad 5b       	subi	r26, 0xBD	; 189
    31f8:	bf 4f       	sbci	r27, 0xFF	; 255
    31fa:	fe 01       	movw	r30, r28
    31fc:	ed 5b       	subi	r30, 0xBD	; 189
    31fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3200:	80 81       	ld	r24, Z
    3202:	91 81       	ldd	r25, Z+1	; 0x01
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	11 96       	adiw	r26, 0x01	; 1
    3208:	9c 93       	st	X, r25
    320a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    320c:	fe 01       	movw	r30, r28
    320e:	ed 5b       	subi	r30, 0xBD	; 189
    3210:	ff 4f       	sbci	r31, 0xFF	; 255
    3212:	80 81       	ld	r24, Z
    3214:	91 81       	ldd	r25, Z+1	; 0x01
    3216:	00 97       	sbiw	r24, 0x00	; 0
    3218:	d1 f6       	brne	.-76     	; 0x31ce <LCD_VoidInit4bit+0xe4>
    321a:	24 c0       	rjmp	.+72     	; 0x3264 <LCD_VoidInit4bit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321c:	8e 01       	movw	r16, r28
    321e:	0d 5b       	subi	r16, 0xBD	; 189
    3220:	1f 4f       	sbci	r17, 0xFF	; 255
    3222:	fe 01       	movw	r30, r28
    3224:	eb 5b       	subi	r30, 0xBB	; 187
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	60 81       	ld	r22, Z
    322a:	71 81       	ldd	r23, Z+1	; 0x01
    322c:	82 81       	ldd	r24, Z+2	; 0x02
    322e:	93 81       	ldd	r25, Z+3	; 0x03
    3230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	f8 01       	movw	r30, r16
    323a:	91 83       	std	Z+1, r25	; 0x01
    323c:	80 83       	st	Z, r24
    323e:	fe 01       	movw	r30, r28
    3240:	ed 5b       	subi	r30, 0xBD	; 189
    3242:	ff 4f       	sbci	r31, 0xFF	; 255
    3244:	80 81       	ld	r24, Z
    3246:	91 81       	ldd	r25, Z+1	; 0x01
    3248:	fe 01       	movw	r30, r28
    324a:	ff 96       	adiw	r30, 0x3f	; 63
    324c:	91 83       	std	Z+1, r25	; 0x01
    324e:	80 83       	st	Z, r24
    3250:	fe 01       	movw	r30, r28
    3252:	ff 96       	adiw	r30, 0x3f	; 63
    3254:	80 81       	ld	r24, Z
    3256:	91 81       	ldd	r25, Z+1	; 0x01
    3258:	01 97       	sbiw	r24, 0x01	; 1
    325a:	f1 f7       	brne	.-4      	; 0x3258 <LCD_VoidInit4bit+0x16e>
    325c:	fe 01       	movw	r30, r28
    325e:	ff 96       	adiw	r30, 0x3f	; 63
    3260:	91 83       	std	Z+1, r25	; 0x01
    3262:	80 83       	st	Z, r24
        _delay_ms(35);
        LCD_CheckStatusSendCmnd(0b00100000);
    3264:	80 e2       	ldi	r24, 0x20	; 32
    3266:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b00100000);
    326a:	80 e2       	ldi	r24, 0x20	; 32
    326c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b11000000);
    3270:	80 ec       	ldi	r24, 0xC0	; 192
    3272:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_CheckStatusSendCmnd>
    3276:	80 e0       	ldi	r24, 0x00	; 0
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	a0 e2       	ldi	r26, 0x20	; 32
    327c:	b2 e4       	ldi	r27, 0x42	; 66
    327e:	8b af       	std	Y+59, r24	; 0x3b
    3280:	9c af       	std	Y+60, r25	; 0x3c
    3282:	ad af       	std	Y+61, r26	; 0x3d
    3284:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3286:	6b ad       	ldd	r22, Y+59	; 0x3b
    3288:	7c ad       	ldd	r23, Y+60	; 0x3c
    328a:	8d ad       	ldd	r24, Y+61	; 0x3d
    328c:	9e ad       	ldd	r25, Y+62	; 0x3e
    328e:	2b ea       	ldi	r18, 0xAB	; 171
    3290:	3a ea       	ldi	r19, 0xAA	; 170
    3292:	4a e2       	ldi	r20, 0x2A	; 42
    3294:	50 e4       	ldi	r21, 0x40	; 64
    3296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	8f ab       	std	Y+55, r24	; 0x37
    32a0:	98 af       	std	Y+56, r25	; 0x38
    32a2:	a9 af       	std	Y+57, r26	; 0x39
    32a4:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    32a6:	6f a9       	ldd	r22, Y+55	; 0x37
    32a8:	78 ad       	ldd	r23, Y+56	; 0x38
    32aa:	89 ad       	ldd	r24, Y+57	; 0x39
    32ac:	9a ad       	ldd	r25, Y+58	; 0x3a
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	40 e8       	ldi	r20, 0x80	; 128
    32b4:	5f e3       	ldi	r21, 0x3F	; 63
    32b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32ba:	88 23       	and	r24, r24
    32bc:	1c f4       	brge	.+6      	; 0x32c4 <LCD_VoidInit4bit+0x1da>
		__ticks = 1;
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	8e ab       	std	Y+54, r24	; 0x36
    32c2:	91 c0       	rjmp	.+290    	; 0x33e6 <LCD_VoidInit4bit+0x2fc>
	else if (__tmp > 255)
    32c4:	6f a9       	ldd	r22, Y+55	; 0x37
    32c6:	78 ad       	ldd	r23, Y+56	; 0x38
    32c8:	89 ad       	ldd	r24, Y+57	; 0x39
    32ca:	9a ad       	ldd	r25, Y+58	; 0x3a
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	4f e7       	ldi	r20, 0x7F	; 127
    32d2:	53 e4       	ldi	r21, 0x43	; 67
    32d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32d8:	18 16       	cp	r1, r24
    32da:	0c f0       	brlt	.+2      	; 0x32de <LCD_VoidInit4bit+0x1f4>
    32dc:	7b c0       	rjmp	.+246    	; 0x33d4 <LCD_VoidInit4bit+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    32de:	6b ad       	ldd	r22, Y+59	; 0x3b
    32e0:	7c ad       	ldd	r23, Y+60	; 0x3c
    32e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    32e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	4a e7       	ldi	r20, 0x7A	; 122
    32ec:	54 e4       	ldi	r21, 0x44	; 68
    32ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	8a ab       	std	Y+50, r24	; 0x32
    32f8:	9b ab       	std	Y+51, r25	; 0x33
    32fa:	ac ab       	std	Y+52, r26	; 0x34
    32fc:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fe:	6a a9       	ldd	r22, Y+50	; 0x32
    3300:	7b a9       	ldd	r23, Y+51	; 0x33
    3302:	8c a9       	ldd	r24, Y+52	; 0x34
    3304:	9d a9       	ldd	r25, Y+53	; 0x35
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	4a ef       	ldi	r20, 0xFA	; 250
    330c:	54 e4       	ldi	r21, 0x44	; 68
    330e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	8e a7       	std	Y+46, r24	; 0x2e
    3318:	9f a7       	std	Y+47, r25	; 0x2f
    331a:	a8 ab       	std	Y+48, r26	; 0x30
    331c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    331e:	6e a5       	ldd	r22, Y+46	; 0x2e
    3320:	7f a5       	ldd	r23, Y+47	; 0x2f
    3322:	88 a9       	ldd	r24, Y+48	; 0x30
    3324:	99 a9       	ldd	r25, Y+49	; 0x31
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e8       	ldi	r20, 0x80	; 128
    332c:	5f e3       	ldi	r21, 0x3F	; 63
    332e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3332:	88 23       	and	r24, r24
    3334:	2c f4       	brge	.+10     	; 0x3340 <LCD_VoidInit4bit+0x256>
		__ticks = 1;
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	9d a7       	std	Y+45, r25	; 0x2d
    333c:	8c a7       	std	Y+44, r24	; 0x2c
    333e:	3f c0       	rjmp	.+126    	; 0x33be <LCD_VoidInit4bit+0x2d4>
	else if (__tmp > 65535)
    3340:	6e a5       	ldd	r22, Y+46	; 0x2e
    3342:	7f a5       	ldd	r23, Y+47	; 0x2f
    3344:	88 a9       	ldd	r24, Y+48	; 0x30
    3346:	99 a9       	ldd	r25, Y+49	; 0x31
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	3f ef       	ldi	r19, 0xFF	; 255
    334c:	4f e7       	ldi	r20, 0x7F	; 127
    334e:	57 e4       	ldi	r21, 0x47	; 71
    3350:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3354:	18 16       	cp	r1, r24
    3356:	4c f5       	brge	.+82     	; 0x33aa <LCD_VoidInit4bit+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3358:	6a a9       	ldd	r22, Y+50	; 0x32
    335a:	7b a9       	ldd	r23, Y+51	; 0x33
    335c:	8c a9       	ldd	r24, Y+52	; 0x34
    335e:	9d a9       	ldd	r25, Y+53	; 0x35
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	40 e2       	ldi	r20, 0x20	; 32
    3366:	51 e4       	ldi	r21, 0x41	; 65
    3368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	bc 01       	movw	r22, r24
    3372:	cd 01       	movw	r24, r26
    3374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	9d a7       	std	Y+45, r25	; 0x2d
    337e:	8c a7       	std	Y+44, r24	; 0x2c
    3380:	0f c0       	rjmp	.+30     	; 0x33a0 <LCD_VoidInit4bit+0x2b6>
    3382:	88 ec       	ldi	r24, 0xC8	; 200
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	9b a7       	std	Y+43, r25	; 0x2b
    3388:	8a a7       	std	Y+42, r24	; 0x2a
    338a:	8a a5       	ldd	r24, Y+42	; 0x2a
    338c:	9b a5       	ldd	r25, Y+43	; 0x2b
    338e:	01 97       	sbiw	r24, 0x01	; 1
    3390:	f1 f7       	brne	.-4      	; 0x338e <LCD_VoidInit4bit+0x2a4>
    3392:	9b a7       	std	Y+43, r25	; 0x2b
    3394:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3396:	8c a5       	ldd	r24, Y+44	; 0x2c
    3398:	9d a5       	ldd	r25, Y+45	; 0x2d
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	9d a7       	std	Y+45, r25	; 0x2d
    339e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a0:	8c a5       	ldd	r24, Y+44	; 0x2c
    33a2:	9d a5       	ldd	r25, Y+45	; 0x2d
    33a4:	00 97       	sbiw	r24, 0x00	; 0
    33a6:	69 f7       	brne	.-38     	; 0x3382 <LCD_VoidInit4bit+0x298>
    33a8:	24 c0       	rjmp	.+72     	; 0x33f2 <LCD_VoidInit4bit+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33aa:	6e a5       	ldd	r22, Y+46	; 0x2e
    33ac:	7f a5       	ldd	r23, Y+47	; 0x2f
    33ae:	88 a9       	ldd	r24, Y+48	; 0x30
    33b0:	99 a9       	ldd	r25, Y+49	; 0x31
    33b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	9d a7       	std	Y+45, r25	; 0x2d
    33bc:	8c a7       	std	Y+44, r24	; 0x2c
    33be:	8c a5       	ldd	r24, Y+44	; 0x2c
    33c0:	9d a5       	ldd	r25, Y+45	; 0x2d
    33c2:	99 a7       	std	Y+41, r25	; 0x29
    33c4:	88 a7       	std	Y+40, r24	; 0x28
    33c6:	88 a5       	ldd	r24, Y+40	; 0x28
    33c8:	99 a5       	ldd	r25, Y+41	; 0x29
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	f1 f7       	brne	.-4      	; 0x33ca <LCD_VoidInit4bit+0x2e0>
    33ce:	99 a7       	std	Y+41, r25	; 0x29
    33d0:	88 a7       	std	Y+40, r24	; 0x28
    33d2:	0f c0       	rjmp	.+30     	; 0x33f2 <LCD_VoidInit4bit+0x308>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33d4:	6f a9       	ldd	r22, Y+55	; 0x37
    33d6:	78 ad       	ldd	r23, Y+56	; 0x38
    33d8:	89 ad       	ldd	r24, Y+57	; 0x39
    33da:	9a ad       	ldd	r25, Y+58	; 0x3a
    33dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	8e ab       	std	Y+54, r24	; 0x36
    33e6:	8e a9       	ldd	r24, Y+54	; 0x36
    33e8:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33ea:	8f a1       	ldd	r24, Y+39	; 0x27
    33ec:	8a 95       	dec	r24
    33ee:	f1 f7       	brne	.-4      	; 0x33ec <LCD_VoidInit4bit+0x302>
    33f0:	8f a3       	std	Y+39, r24	; 0x27
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00000000);
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b11110000);
    33f8:	80 ef       	ldi	r24, 0xF0	; 240
    33fa:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_CheckStatusSendCmnd>
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	a0 e2       	ldi	r26, 0x20	; 32
    3404:	b2 e4       	ldi	r27, 0x42	; 66
    3406:	8b a3       	std	Y+35, r24	; 0x23
    3408:	9c a3       	std	Y+36, r25	; 0x24
    340a:	ad a3       	std	Y+37, r26	; 0x25
    340c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    340e:	6b a1       	ldd	r22, Y+35	; 0x23
    3410:	7c a1       	ldd	r23, Y+36	; 0x24
    3412:	8d a1       	ldd	r24, Y+37	; 0x25
    3414:	9e a1       	ldd	r25, Y+38	; 0x26
    3416:	2b ea       	ldi	r18, 0xAB	; 171
    3418:	3a ea       	ldi	r19, 0xAA	; 170
    341a:	4a e2       	ldi	r20, 0x2A	; 42
    341c:	50 e4       	ldi	r21, 0x40	; 64
    341e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	8f 8f       	std	Y+31, r24	; 0x1f
    3428:	98 a3       	std	Y+32, r25	; 0x20
    342a:	a9 a3       	std	Y+33, r26	; 0x21
    342c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    342e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3430:	78 a1       	ldd	r23, Y+32	; 0x20
    3432:	89 a1       	ldd	r24, Y+33	; 0x21
    3434:	9a a1       	ldd	r25, Y+34	; 0x22
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	40 e8       	ldi	r20, 0x80	; 128
    343c:	5f e3       	ldi	r21, 0x3F	; 63
    343e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3442:	88 23       	and	r24, r24
    3444:	1c f4       	brge	.+6      	; 0x344c <LCD_VoidInit4bit+0x362>
		__ticks = 1;
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	8e 8f       	std	Y+30, r24	; 0x1e
    344a:	91 c0       	rjmp	.+290    	; 0x356e <LCD_VoidInit4bit+0x484>
	else if (__tmp > 255)
    344c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    344e:	78 a1       	ldd	r23, Y+32	; 0x20
    3450:	89 a1       	ldd	r24, Y+33	; 0x21
    3452:	9a a1       	ldd	r25, Y+34	; 0x22
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	4f e7       	ldi	r20, 0x7F	; 127
    345a:	53 e4       	ldi	r21, 0x43	; 67
    345c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3460:	18 16       	cp	r1, r24
    3462:	0c f0       	brlt	.+2      	; 0x3466 <LCD_VoidInit4bit+0x37c>
    3464:	7b c0       	rjmp	.+246    	; 0x355c <LCD_VoidInit4bit+0x472>
	{
		_delay_ms(__us / 1000.0);
    3466:	6b a1       	ldd	r22, Y+35	; 0x23
    3468:	7c a1       	ldd	r23, Y+36	; 0x24
    346a:	8d a1       	ldd	r24, Y+37	; 0x25
    346c:	9e a1       	ldd	r25, Y+38	; 0x26
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	4a e7       	ldi	r20, 0x7A	; 122
    3474:	54 e4       	ldi	r21, 0x44	; 68
    3476:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	8a 8f       	std	Y+26, r24	; 0x1a
    3480:	9b 8f       	std	Y+27, r25	; 0x1b
    3482:	ac 8f       	std	Y+28, r26	; 0x1c
    3484:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3486:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3488:	7b 8d       	ldd	r23, Y+27	; 0x1b
    348a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    348c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	4a ef       	ldi	r20, 0xFA	; 250
    3494:	54 e4       	ldi	r21, 0x44	; 68
    3496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	8e 8b       	std	Y+22, r24	; 0x16
    34a0:	9f 8b       	std	Y+23, r25	; 0x17
    34a2:	a8 8f       	std	Y+24, r26	; 0x18
    34a4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    34a6:	6e 89       	ldd	r22, Y+22	; 0x16
    34a8:	7f 89       	ldd	r23, Y+23	; 0x17
    34aa:	88 8d       	ldd	r24, Y+24	; 0x18
    34ac:	99 8d       	ldd	r25, Y+25	; 0x19
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	40 e8       	ldi	r20, 0x80	; 128
    34b4:	5f e3       	ldi	r21, 0x3F	; 63
    34b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34ba:	88 23       	and	r24, r24
    34bc:	2c f4       	brge	.+10     	; 0x34c8 <LCD_VoidInit4bit+0x3de>
		__ticks = 1;
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	9d 8b       	std	Y+21, r25	; 0x15
    34c4:	8c 8b       	std	Y+20, r24	; 0x14
    34c6:	3f c0       	rjmp	.+126    	; 0x3546 <LCD_VoidInit4bit+0x45c>
	else if (__tmp > 65535)
    34c8:	6e 89       	ldd	r22, Y+22	; 0x16
    34ca:	7f 89       	ldd	r23, Y+23	; 0x17
    34cc:	88 8d       	ldd	r24, Y+24	; 0x18
    34ce:	99 8d       	ldd	r25, Y+25	; 0x19
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	3f ef       	ldi	r19, 0xFF	; 255
    34d4:	4f e7       	ldi	r20, 0x7F	; 127
    34d6:	57 e4       	ldi	r21, 0x47	; 71
    34d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34dc:	18 16       	cp	r1, r24
    34de:	4c f5       	brge	.+82     	; 0x3532 <LCD_VoidInit4bit+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    34e2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    34e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    34e6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	40 e2       	ldi	r20, 0x20	; 32
    34ee:	51 e4       	ldi	r21, 0x41	; 65
    34f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f4:	dc 01       	movw	r26, r24
    34f6:	cb 01       	movw	r24, r22
    34f8:	bc 01       	movw	r22, r24
    34fa:	cd 01       	movw	r24, r26
    34fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	9d 8b       	std	Y+21, r25	; 0x15
    3506:	8c 8b       	std	Y+20, r24	; 0x14
    3508:	0f c0       	rjmp	.+30     	; 0x3528 <LCD_VoidInit4bit+0x43e>
    350a:	88 ec       	ldi	r24, 0xC8	; 200
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	9b 8b       	std	Y+19, r25	; 0x13
    3510:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3512:	8a 89       	ldd	r24, Y+18	; 0x12
    3514:	9b 89       	ldd	r25, Y+19	; 0x13
    3516:	01 97       	sbiw	r24, 0x01	; 1
    3518:	f1 f7       	brne	.-4      	; 0x3516 <LCD_VoidInit4bit+0x42c>
    351a:	9b 8b       	std	Y+19, r25	; 0x13
    351c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    351e:	8c 89       	ldd	r24, Y+20	; 0x14
    3520:	9d 89       	ldd	r25, Y+21	; 0x15
    3522:	01 97       	sbiw	r24, 0x01	; 1
    3524:	9d 8b       	std	Y+21, r25	; 0x15
    3526:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3528:	8c 89       	ldd	r24, Y+20	; 0x14
    352a:	9d 89       	ldd	r25, Y+21	; 0x15
    352c:	00 97       	sbiw	r24, 0x00	; 0
    352e:	69 f7       	brne	.-38     	; 0x350a <LCD_VoidInit4bit+0x420>
    3530:	24 c0       	rjmp	.+72     	; 0x357a <LCD_VoidInit4bit+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3532:	6e 89       	ldd	r22, Y+22	; 0x16
    3534:	7f 89       	ldd	r23, Y+23	; 0x17
    3536:	88 8d       	ldd	r24, Y+24	; 0x18
    3538:	99 8d       	ldd	r25, Y+25	; 0x19
    353a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	9d 8b       	std	Y+21, r25	; 0x15
    3544:	8c 8b       	std	Y+20, r24	; 0x14
    3546:	8c 89       	ldd	r24, Y+20	; 0x14
    3548:	9d 89       	ldd	r25, Y+21	; 0x15
    354a:	99 8b       	std	Y+17, r25	; 0x11
    354c:	88 8b       	std	Y+16, r24	; 0x10
    354e:	88 89       	ldd	r24, Y+16	; 0x10
    3550:	99 89       	ldd	r25, Y+17	; 0x11
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	f1 f7       	brne	.-4      	; 0x3552 <LCD_VoidInit4bit+0x468>
    3556:	99 8b       	std	Y+17, r25	; 0x11
    3558:	88 8b       	std	Y+16, r24	; 0x10
    355a:	0f c0       	rjmp	.+30     	; 0x357a <LCD_VoidInit4bit+0x490>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    355c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    355e:	78 a1       	ldd	r23, Y+32	; 0x20
    3560:	89 a1       	ldd	r24, Y+33	; 0x21
    3562:	9a a1       	ldd	r25, Y+34	; 0x22
    3564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3568:	dc 01       	movw	r26, r24
    356a:	cb 01       	movw	r24, r22
    356c:	8e 8f       	std	Y+30, r24	; 0x1e
    356e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3570:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3572:	8f 85       	ldd	r24, Y+15	; 0x0f
    3574:	8a 95       	dec	r24
    3576:	f1 f7       	brne	.-4      	; 0x3574 <LCD_VoidInit4bit+0x48a>
    3578:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00000000);
    357a:	80 e0       	ldi	r24, 0x00	; 0
    357c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b00010000);
    3580:	80 e1       	ldi	r24, 0x10	; 16
    3582:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_CheckStatusSendCmnd>
    3586:	80 e0       	ldi	r24, 0x00	; 0
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	a0 e0       	ldi	r26, 0x00	; 0
    358c:	b0 e4       	ldi	r27, 0x40	; 64
    358e:	8b 87       	std	Y+11, r24	; 0x0b
    3590:	9c 87       	std	Y+12, r25	; 0x0c
    3592:	ad 87       	std	Y+13, r26	; 0x0d
    3594:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3596:	6b 85       	ldd	r22, Y+11	; 0x0b
    3598:	7c 85       	ldd	r23, Y+12	; 0x0c
    359a:	8d 85       	ldd	r24, Y+13	; 0x0d
    359c:	9e 85       	ldd	r25, Y+14	; 0x0e
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	4a ef       	ldi	r20, 0xFA	; 250
    35a4:	54 e4       	ldi	r21, 0x44	; 68
    35a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	8f 83       	std	Y+7, r24	; 0x07
    35b0:	98 87       	std	Y+8, r25	; 0x08
    35b2:	a9 87       	std	Y+9, r26	; 0x09
    35b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35b6:	6f 81       	ldd	r22, Y+7	; 0x07
    35b8:	78 85       	ldd	r23, Y+8	; 0x08
    35ba:	89 85       	ldd	r24, Y+9	; 0x09
    35bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35be:	20 e0       	ldi	r18, 0x00	; 0
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	40 e8       	ldi	r20, 0x80	; 128
    35c4:	5f e3       	ldi	r21, 0x3F	; 63
    35c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35ca:	88 23       	and	r24, r24
    35cc:	2c f4       	brge	.+10     	; 0x35d8 <LCD_VoidInit4bit+0x4ee>
		__ticks = 1;
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	9e 83       	std	Y+6, r25	; 0x06
    35d4:	8d 83       	std	Y+5, r24	; 0x05
    35d6:	3f c0       	rjmp	.+126    	; 0x3656 <LCD_VoidInit4bit+0x56c>
	else if (__tmp > 65535)
    35d8:	6f 81       	ldd	r22, Y+7	; 0x07
    35da:	78 85       	ldd	r23, Y+8	; 0x08
    35dc:	89 85       	ldd	r24, Y+9	; 0x09
    35de:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	3f ef       	ldi	r19, 0xFF	; 255
    35e4:	4f e7       	ldi	r20, 0x7F	; 127
    35e6:	57 e4       	ldi	r21, 0x47	; 71
    35e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ec:	18 16       	cp	r1, r24
    35ee:	4c f5       	brge	.+82     	; 0x3642 <LCD_VoidInit4bit+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	40 e2       	ldi	r20, 0x20	; 32
    35fe:	51 e4       	ldi	r21, 0x41	; 65
    3600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3604:	dc 01       	movw	r26, r24
    3606:	cb 01       	movw	r24, r22
    3608:	bc 01       	movw	r22, r24
    360a:	cd 01       	movw	r24, r26
    360c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3610:	dc 01       	movw	r26, r24
    3612:	cb 01       	movw	r24, r22
    3614:	9e 83       	std	Y+6, r25	; 0x06
    3616:	8d 83       	std	Y+5, r24	; 0x05
    3618:	0f c0       	rjmp	.+30     	; 0x3638 <LCD_VoidInit4bit+0x54e>
    361a:	88 ec       	ldi	r24, 0xC8	; 200
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	9c 83       	std	Y+4, r25	; 0x04
    3620:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3622:	8b 81       	ldd	r24, Y+3	; 0x03
    3624:	9c 81       	ldd	r25, Y+4	; 0x04
    3626:	01 97       	sbiw	r24, 0x01	; 1
    3628:	f1 f7       	brne	.-4      	; 0x3626 <LCD_VoidInit4bit+0x53c>
    362a:	9c 83       	std	Y+4, r25	; 0x04
    362c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362e:	8d 81       	ldd	r24, Y+5	; 0x05
    3630:	9e 81       	ldd	r25, Y+6	; 0x06
    3632:	01 97       	sbiw	r24, 0x01	; 1
    3634:	9e 83       	std	Y+6, r25	; 0x06
    3636:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3638:	8d 81       	ldd	r24, Y+5	; 0x05
    363a:	9e 81       	ldd	r25, Y+6	; 0x06
    363c:	00 97       	sbiw	r24, 0x00	; 0
    363e:	69 f7       	brne	.-38     	; 0x361a <LCD_VoidInit4bit+0x530>
    3640:	14 c0       	rjmp	.+40     	; 0x366a <LCD_VoidInit4bit+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3642:	6f 81       	ldd	r22, Y+7	; 0x07
    3644:	78 85       	ldd	r23, Y+8	; 0x08
    3646:	89 85       	ldd	r24, Y+9	; 0x09
    3648:	9a 85       	ldd	r25, Y+10	; 0x0a
    364a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	9e 83       	std	Y+6, r25	; 0x06
    3654:	8d 83       	std	Y+5, r24	; 0x05
    3656:	8d 81       	ldd	r24, Y+5	; 0x05
    3658:	9e 81       	ldd	r25, Y+6	; 0x06
    365a:	9a 83       	std	Y+2, r25	; 0x02
    365c:	89 83       	std	Y+1, r24	; 0x01
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	9a 81       	ldd	r25, Y+2	; 0x02
    3662:	01 97       	sbiw	r24, 0x01	; 1
    3664:	f1 f7       	brne	.-4      	; 0x3662 <LCD_VoidInit4bit+0x578>
    3666:	9a 83       	std	Y+2, r25	; 0x02
    3668:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
        LCD_CheckStatusSendCmnd(0b00000000);
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b01100000);
    3670:	80 e6       	ldi	r24, 0x60	; 96
    3672:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_CheckStatusSendCmnd>
}
    3676:	c4 5b       	subi	r28, 0xB4	; 180
    3678:	df 4f       	sbci	r29, 0xFF	; 255
    367a:	0f b6       	in	r0, 0x3f	; 63
    367c:	f8 94       	cli
    367e:	de bf       	out	0x3e, r29	; 62
    3680:	0f be       	out	0x3f, r0	; 63
    3682:	cd bf       	out	0x3d, r28	; 61
    3684:	cf 91       	pop	r28
    3686:	df 91       	pop	r29
    3688:	1f 91       	pop	r17
    368a:	0f 91       	pop	r16
    368c:	08 95       	ret

0000368e <LCD_CheckStatusSendChar4bit>:

CheckStatus LCD_CheckStatusSendChar4bit(_uint8 Copy__Uint8Char)
{
    368e:	0f 93       	push	r16
    3690:	1f 93       	push	r17
    3692:	df 93       	push	r29
    3694:	cf 93       	push	r28
    3696:	cd b7       	in	r28, 0x3d	; 61
    3698:	de b7       	in	r29, 0x3e	; 62
    369a:	c2 56       	subi	r28, 0x62	; 98
    369c:	d0 40       	sbci	r29, 0x00	; 0
    369e:	0f b6       	in	r0, 0x3f	; 63
    36a0:	f8 94       	cli
    36a2:	de bf       	out	0x3e, r29	; 62
    36a4:	0f be       	out	0x3f, r0	; 63
    36a6:	cd bf       	out	0x3d, r28	; 61
    36a8:	fe 01       	movw	r30, r28
    36aa:	ee 59       	subi	r30, 0x9E	; 158
    36ac:	ff 4f       	sbci	r31, 0xFF	; 255
    36ae:	80 83       	st	Z, r24
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    36b0:	fe 01       	movw	r30, r28
    36b2:	ef 59       	subi	r30, 0x9F	; 159
    36b4:	ff 4f       	sbci	r31, 0xFF	; 255
    36b6:	10 82       	st	Z, r1
	         3-Send CHAR byte  to the Data Pins of LCD
	         4-PULSE of Enable E = 1 ,E = 0
	        */
        if (Copy__Uint8Char <= 255)
        {
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_HIGH);
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	60 e0       	ldi	r22, 0x00	; 0
    36bc:	41 e0       	ldi	r20, 0x01	; 1
    36be:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    36c2:	80 e0       	ldi	r24, 0x00	; 0
    36c4:	61 e0       	ldi	r22, 0x01	; 1
    36c6:	40 e0       	ldi	r20, 0x00	; 0
    36c8:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, Copy__Uint8Char & 0xF0);
    36cc:	fe 01       	movw	r30, r28
    36ce:	ee 59       	subi	r30, 0x9E	; 158
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	80 81       	ld	r24, Z
    36d4:	98 2f       	mov	r25, r24
    36d6:	90 7f       	andi	r25, 0xF0	; 240
    36d8:	83 e0       	ldi	r24, 0x03	; 3
    36da:	69 2f       	mov	r22, r25
    36dc:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    36e0:	80 e0       	ldi	r24, 0x00	; 0
    36e2:	62 e0       	ldi	r22, 0x02	; 2
    36e4:	41 e0       	ldi	r20, 0x01	; 1
    36e6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>
    36ea:	fe 01       	movw	r30, r28
    36ec:	e3 5a       	subi	r30, 0xA3	; 163
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	a0 e8       	ldi	r26, 0x80	; 128
    36f6:	bf e3       	ldi	r27, 0x3F	; 63
    36f8:	80 83       	st	Z, r24
    36fa:	91 83       	std	Z+1, r25	; 0x01
    36fc:	a2 83       	std	Z+2, r26	; 0x02
    36fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3700:	8e 01       	movw	r16, r28
    3702:	07 5a       	subi	r16, 0xA7	; 167
    3704:	1f 4f       	sbci	r17, 0xFF	; 255
    3706:	fe 01       	movw	r30, r28
    3708:	e3 5a       	subi	r30, 0xA3	; 163
    370a:	ff 4f       	sbci	r31, 0xFF	; 255
    370c:	60 81       	ld	r22, Z
    370e:	71 81       	ldd	r23, Z+1	; 0x01
    3710:	82 81       	ldd	r24, Z+2	; 0x02
    3712:	93 81       	ldd	r25, Z+3	; 0x03
    3714:	2b ea       	ldi	r18, 0xAB	; 171
    3716:	3a ea       	ldi	r19, 0xAA	; 170
    3718:	4a e2       	ldi	r20, 0x2A	; 42
    371a:	50 e4       	ldi	r21, 0x40	; 64
    371c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3720:	dc 01       	movw	r26, r24
    3722:	cb 01       	movw	r24, r22
    3724:	f8 01       	movw	r30, r16
    3726:	80 83       	st	Z, r24
    3728:	91 83       	std	Z+1, r25	; 0x01
    372a:	a2 83       	std	Z+2, r26	; 0x02
    372c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    372e:	fe 01       	movw	r30, r28
    3730:	e7 5a       	subi	r30, 0xA7	; 167
    3732:	ff 4f       	sbci	r31, 0xFF	; 255
    3734:	60 81       	ld	r22, Z
    3736:	71 81       	ldd	r23, Z+1	; 0x01
    3738:	82 81       	ldd	r24, Z+2	; 0x02
    373a:	93 81       	ldd	r25, Z+3	; 0x03
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	40 e8       	ldi	r20, 0x80	; 128
    3742:	5f e3       	ldi	r21, 0x3F	; 63
    3744:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3748:	88 23       	and	r24, r24
    374a:	34 f4       	brge	.+12     	; 0x3758 <LCD_CheckStatusSendChar4bit+0xca>
		__ticks = 1;
    374c:	fe 01       	movw	r30, r28
    374e:	e8 5a       	subi	r30, 0xA8	; 168
    3750:	ff 4f       	sbci	r31, 0xFF	; 255
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	80 83       	st	Z, r24
    3756:	e0 c0       	rjmp	.+448    	; 0x3918 <LCD_CheckStatusSendChar4bit+0x28a>
	else if (__tmp > 255)
    3758:	fe 01       	movw	r30, r28
    375a:	e7 5a       	subi	r30, 0xA7	; 167
    375c:	ff 4f       	sbci	r31, 0xFF	; 255
    375e:	60 81       	ld	r22, Z
    3760:	71 81       	ldd	r23, Z+1	; 0x01
    3762:	82 81       	ldd	r24, Z+2	; 0x02
    3764:	93 81       	ldd	r25, Z+3	; 0x03
    3766:	20 e0       	ldi	r18, 0x00	; 0
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	4f e7       	ldi	r20, 0x7F	; 127
    376c:	53 e4       	ldi	r21, 0x43	; 67
    376e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3772:	18 16       	cp	r1, r24
    3774:	0c f0       	brlt	.+2      	; 0x3778 <LCD_CheckStatusSendChar4bit+0xea>
    3776:	c0 c0       	rjmp	.+384    	; 0x38f8 <LCD_CheckStatusSendChar4bit+0x26a>
	{
		_delay_ms(__us / 1000.0);
    3778:	fe 01       	movw	r30, r28
    377a:	e3 5a       	subi	r30, 0xA3	; 163
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	60 81       	ld	r22, Z
    3780:	71 81       	ldd	r23, Z+1	; 0x01
    3782:	82 81       	ldd	r24, Z+2	; 0x02
    3784:	93 81       	ldd	r25, Z+3	; 0x03
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	4a e7       	ldi	r20, 0x7A	; 122
    378c:	54 e4       	ldi	r21, 0x44	; 68
    378e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	fe 01       	movw	r30, r28
    3798:	ec 5a       	subi	r30, 0xAC	; 172
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	80 83       	st	Z, r24
    379e:	91 83       	std	Z+1, r25	; 0x01
    37a0:	a2 83       	std	Z+2, r26	; 0x02
    37a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37a4:	8e 01       	movw	r16, r28
    37a6:	00 5b       	subi	r16, 0xB0	; 176
    37a8:	1f 4f       	sbci	r17, 0xFF	; 255
    37aa:	fe 01       	movw	r30, r28
    37ac:	ec 5a       	subi	r30, 0xAC	; 172
    37ae:	ff 4f       	sbci	r31, 0xFF	; 255
    37b0:	60 81       	ld	r22, Z
    37b2:	71 81       	ldd	r23, Z+1	; 0x01
    37b4:	82 81       	ldd	r24, Z+2	; 0x02
    37b6:	93 81       	ldd	r25, Z+3	; 0x03
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	4a ef       	ldi	r20, 0xFA	; 250
    37be:	54 e4       	ldi	r21, 0x44	; 68
    37c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c4:	dc 01       	movw	r26, r24
    37c6:	cb 01       	movw	r24, r22
    37c8:	f8 01       	movw	r30, r16
    37ca:	80 83       	st	Z, r24
    37cc:	91 83       	std	Z+1, r25	; 0x01
    37ce:	a2 83       	std	Z+2, r26	; 0x02
    37d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37d2:	fe 01       	movw	r30, r28
    37d4:	e0 5b       	subi	r30, 0xB0	; 176
    37d6:	ff 4f       	sbci	r31, 0xFF	; 255
    37d8:	60 81       	ld	r22, Z
    37da:	71 81       	ldd	r23, Z+1	; 0x01
    37dc:	82 81       	ldd	r24, Z+2	; 0x02
    37de:	93 81       	ldd	r25, Z+3	; 0x03
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	40 e8       	ldi	r20, 0x80	; 128
    37e6:	5f e3       	ldi	r21, 0x3F	; 63
    37e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37ec:	88 23       	and	r24, r24
    37ee:	44 f4       	brge	.+16     	; 0x3800 <LCD_CheckStatusSendChar4bit+0x172>
		__ticks = 1;
    37f0:	fe 01       	movw	r30, r28
    37f2:	e2 5b       	subi	r30, 0xB2	; 178
    37f4:	ff 4f       	sbci	r31, 0xFF	; 255
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	91 83       	std	Z+1, r25	; 0x01
    37fc:	80 83       	st	Z, r24
    37fe:	64 c0       	rjmp	.+200    	; 0x38c8 <LCD_CheckStatusSendChar4bit+0x23a>
	else if (__tmp > 65535)
    3800:	fe 01       	movw	r30, r28
    3802:	e0 5b       	subi	r30, 0xB0	; 176
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	60 81       	ld	r22, Z
    3808:	71 81       	ldd	r23, Z+1	; 0x01
    380a:	82 81       	ldd	r24, Z+2	; 0x02
    380c:	93 81       	ldd	r25, Z+3	; 0x03
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	3f ef       	ldi	r19, 0xFF	; 255
    3812:	4f e7       	ldi	r20, 0x7F	; 127
    3814:	57 e4       	ldi	r21, 0x47	; 71
    3816:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    381a:	18 16       	cp	r1, r24
    381c:	0c f0       	brlt	.+2      	; 0x3820 <LCD_CheckStatusSendChar4bit+0x192>
    381e:	43 c0       	rjmp	.+134    	; 0x38a6 <LCD_CheckStatusSendChar4bit+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3820:	fe 01       	movw	r30, r28
    3822:	ec 5a       	subi	r30, 0xAC	; 172
    3824:	ff 4f       	sbci	r31, 0xFF	; 255
    3826:	60 81       	ld	r22, Z
    3828:	71 81       	ldd	r23, Z+1	; 0x01
    382a:	82 81       	ldd	r24, Z+2	; 0x02
    382c:	93 81       	ldd	r25, Z+3	; 0x03
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	40 e2       	ldi	r20, 0x20	; 32
    3834:	51 e4       	ldi	r21, 0x41	; 65
    3836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	8e 01       	movw	r16, r28
    3840:	02 5b       	subi	r16, 0xB2	; 178
    3842:	1f 4f       	sbci	r17, 0xFF	; 255
    3844:	bc 01       	movw	r22, r24
    3846:	cd 01       	movw	r24, r26
    3848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22
    3850:	f8 01       	movw	r30, r16
    3852:	91 83       	std	Z+1, r25	; 0x01
    3854:	80 83       	st	Z, r24
    3856:	1f c0       	rjmp	.+62     	; 0x3896 <LCD_CheckStatusSendChar4bit+0x208>
    3858:	fe 01       	movw	r30, r28
    385a:	e4 5b       	subi	r30, 0xB4	; 180
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	88 ec       	ldi	r24, 0xC8	; 200
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	91 83       	std	Z+1, r25	; 0x01
    3864:	80 83       	st	Z, r24
    3866:	fe 01       	movw	r30, r28
    3868:	e4 5b       	subi	r30, 0xB4	; 180
    386a:	ff 4f       	sbci	r31, 0xFF	; 255
    386c:	80 81       	ld	r24, Z
    386e:	91 81       	ldd	r25, Z+1	; 0x01
    3870:	01 97       	sbiw	r24, 0x01	; 1
    3872:	f1 f7       	brne	.-4      	; 0x3870 <LCD_CheckStatusSendChar4bit+0x1e2>
    3874:	fe 01       	movw	r30, r28
    3876:	e4 5b       	subi	r30, 0xB4	; 180
    3878:	ff 4f       	sbci	r31, 0xFF	; 255
    387a:	91 83       	std	Z+1, r25	; 0x01
    387c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    387e:	de 01       	movw	r26, r28
    3880:	a2 5b       	subi	r26, 0xB2	; 178
    3882:	bf 4f       	sbci	r27, 0xFF	; 255
    3884:	fe 01       	movw	r30, r28
    3886:	e2 5b       	subi	r30, 0xB2	; 178
    3888:	ff 4f       	sbci	r31, 0xFF	; 255
    388a:	80 81       	ld	r24, Z
    388c:	91 81       	ldd	r25, Z+1	; 0x01
    388e:	01 97       	sbiw	r24, 0x01	; 1
    3890:	11 96       	adiw	r26, 0x01	; 1
    3892:	9c 93       	st	X, r25
    3894:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3896:	fe 01       	movw	r30, r28
    3898:	e2 5b       	subi	r30, 0xB2	; 178
    389a:	ff 4f       	sbci	r31, 0xFF	; 255
    389c:	80 81       	ld	r24, Z
    389e:	91 81       	ldd	r25, Z+1	; 0x01
    38a0:	00 97       	sbiw	r24, 0x00	; 0
    38a2:	d1 f6       	brne	.-76     	; 0x3858 <LCD_CheckStatusSendChar4bit+0x1ca>
    38a4:	4b c0       	rjmp	.+150    	; 0x393c <LCD_CheckStatusSendChar4bit+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38a6:	8e 01       	movw	r16, r28
    38a8:	02 5b       	subi	r16, 0xB2	; 178
    38aa:	1f 4f       	sbci	r17, 0xFF	; 255
    38ac:	fe 01       	movw	r30, r28
    38ae:	e0 5b       	subi	r30, 0xB0	; 176
    38b0:	ff 4f       	sbci	r31, 0xFF	; 255
    38b2:	60 81       	ld	r22, Z
    38b4:	71 81       	ldd	r23, Z+1	; 0x01
    38b6:	82 81       	ldd	r24, Z+2	; 0x02
    38b8:	93 81       	ldd	r25, Z+3	; 0x03
    38ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38be:	dc 01       	movw	r26, r24
    38c0:	cb 01       	movw	r24, r22
    38c2:	f8 01       	movw	r30, r16
    38c4:	91 83       	std	Z+1, r25	; 0x01
    38c6:	80 83       	st	Z, r24
    38c8:	de 01       	movw	r26, r28
    38ca:	a6 5b       	subi	r26, 0xB6	; 182
    38cc:	bf 4f       	sbci	r27, 0xFF	; 255
    38ce:	fe 01       	movw	r30, r28
    38d0:	e2 5b       	subi	r30, 0xB2	; 178
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	80 81       	ld	r24, Z
    38d6:	91 81       	ldd	r25, Z+1	; 0x01
    38d8:	11 96       	adiw	r26, 0x01	; 1
    38da:	9c 93       	st	X, r25
    38dc:	8e 93       	st	-X, r24
    38de:	fe 01       	movw	r30, r28
    38e0:	e6 5b       	subi	r30, 0xB6	; 182
    38e2:	ff 4f       	sbci	r31, 0xFF	; 255
    38e4:	80 81       	ld	r24, Z
    38e6:	91 81       	ldd	r25, Z+1	; 0x01
    38e8:	01 97       	sbiw	r24, 0x01	; 1
    38ea:	f1 f7       	brne	.-4      	; 0x38e8 <LCD_CheckStatusSendChar4bit+0x25a>
    38ec:	fe 01       	movw	r30, r28
    38ee:	e6 5b       	subi	r30, 0xB6	; 182
    38f0:	ff 4f       	sbci	r31, 0xFF	; 255
    38f2:	91 83       	std	Z+1, r25	; 0x01
    38f4:	80 83       	st	Z, r24
    38f6:	22 c0       	rjmp	.+68     	; 0x393c <LCD_CheckStatusSendChar4bit+0x2ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    38f8:	8e 01       	movw	r16, r28
    38fa:	08 5a       	subi	r16, 0xA8	; 168
    38fc:	1f 4f       	sbci	r17, 0xFF	; 255
    38fe:	fe 01       	movw	r30, r28
    3900:	e7 5a       	subi	r30, 0xA7	; 167
    3902:	ff 4f       	sbci	r31, 0xFF	; 255
    3904:	60 81       	ld	r22, Z
    3906:	71 81       	ldd	r23, Z+1	; 0x01
    3908:	82 81       	ldd	r24, Z+2	; 0x02
    390a:	93 81       	ldd	r25, Z+3	; 0x03
    390c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	f8 01       	movw	r30, r16
    3916:	80 83       	st	Z, r24
    3918:	de 01       	movw	r26, r28
    391a:	a7 5b       	subi	r26, 0xB7	; 183
    391c:	bf 4f       	sbci	r27, 0xFF	; 255
    391e:	fe 01       	movw	r30, r28
    3920:	e8 5a       	subi	r30, 0xA8	; 168
    3922:	ff 4f       	sbci	r31, 0xFF	; 255
    3924:	80 81       	ld	r24, Z
    3926:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3928:	fe 01       	movw	r30, r28
    392a:	e7 5b       	subi	r30, 0xB7	; 183
    392c:	ff 4f       	sbci	r31, 0xFF	; 255
    392e:	80 81       	ld	r24, Z
    3930:	8a 95       	dec	r24
    3932:	f1 f7       	brne	.-4      	; 0x3930 <LCD_CheckStatusSendChar4bit+0x2a2>
    3934:	fe 01       	movw	r30, r28
    3936:	e7 5b       	subi	r30, 0xB7	; 183
    3938:	ff 4f       	sbci	r31, 0xFF	; 255
    393a:	80 83       	st	Z, r24
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	62 e0       	ldi	r22, 0x02	; 2
    3940:	40 e0       	ldi	r20, 0x00	; 0
    3942:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>
    3946:	fe 01       	movw	r30, r28
    3948:	eb 5b       	subi	r30, 0xBB	; 187
    394a:	ff 4f       	sbci	r31, 0xFF	; 255
    394c:	80 e0       	ldi	r24, 0x00	; 0
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	a0 e8       	ldi	r26, 0x80	; 128
    3952:	bf e3       	ldi	r27, 0x3F	; 63
    3954:	80 83       	st	Z, r24
    3956:	91 83       	std	Z+1, r25	; 0x01
    3958:	a2 83       	std	Z+2, r26	; 0x02
    395a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    395c:	8e 01       	movw	r16, r28
    395e:	0f 5b       	subi	r16, 0xBF	; 191
    3960:	1f 4f       	sbci	r17, 0xFF	; 255
    3962:	fe 01       	movw	r30, r28
    3964:	eb 5b       	subi	r30, 0xBB	; 187
    3966:	ff 4f       	sbci	r31, 0xFF	; 255
    3968:	60 81       	ld	r22, Z
    396a:	71 81       	ldd	r23, Z+1	; 0x01
    396c:	82 81       	ldd	r24, Z+2	; 0x02
    396e:	93 81       	ldd	r25, Z+3	; 0x03
    3970:	2b ea       	ldi	r18, 0xAB	; 171
    3972:	3a ea       	ldi	r19, 0xAA	; 170
    3974:	4a e2       	ldi	r20, 0x2A	; 42
    3976:	50 e4       	ldi	r21, 0x40	; 64
    3978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    397c:	dc 01       	movw	r26, r24
    397e:	cb 01       	movw	r24, r22
    3980:	f8 01       	movw	r30, r16
    3982:	80 83       	st	Z, r24
    3984:	91 83       	std	Z+1, r25	; 0x01
    3986:	a2 83       	std	Z+2, r26	; 0x02
    3988:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    398a:	fe 01       	movw	r30, r28
    398c:	ef 5b       	subi	r30, 0xBF	; 191
    398e:	ff 4f       	sbci	r31, 0xFF	; 255
    3990:	60 81       	ld	r22, Z
    3992:	71 81       	ldd	r23, Z+1	; 0x01
    3994:	82 81       	ldd	r24, Z+2	; 0x02
    3996:	93 81       	ldd	r25, Z+3	; 0x03
    3998:	20 e0       	ldi	r18, 0x00	; 0
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	40 e8       	ldi	r20, 0x80	; 128
    399e:	5f e3       	ldi	r21, 0x3F	; 63
    39a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39a4:	88 23       	and	r24, r24
    39a6:	34 f4       	brge	.+12     	; 0x39b4 <LCD_CheckStatusSendChar4bit+0x326>
		__ticks = 1;
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	fe 01       	movw	r30, r28
    39ac:	e0 5c       	subi	r30, 0xC0	; 192
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	80 83       	st	Z, r24
    39b2:	9d c0       	rjmp	.+314    	; 0x3aee <LCD_CheckStatusSendChar4bit+0x460>
	else if (__tmp > 255)
    39b4:	fe 01       	movw	r30, r28
    39b6:	ef 5b       	subi	r30, 0xBF	; 191
    39b8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ba:	60 81       	ld	r22, Z
    39bc:	71 81       	ldd	r23, Z+1	; 0x01
    39be:	82 81       	ldd	r24, Z+2	; 0x02
    39c0:	93 81       	ldd	r25, Z+3	; 0x03
    39c2:	20 e0       	ldi	r18, 0x00	; 0
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	4f e7       	ldi	r20, 0x7F	; 127
    39c8:	53 e4       	ldi	r21, 0x43	; 67
    39ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39ce:	18 16       	cp	r1, r24
    39d0:	0c f0       	brlt	.+2      	; 0x39d4 <LCD_CheckStatusSendChar4bit+0x346>
    39d2:	7e c0       	rjmp	.+252    	; 0x3ad0 <LCD_CheckStatusSendChar4bit+0x442>
	{
		_delay_ms(__us / 1000.0);
    39d4:	fe 01       	movw	r30, r28
    39d6:	eb 5b       	subi	r30, 0xBB	; 187
    39d8:	ff 4f       	sbci	r31, 0xFF	; 255
    39da:	60 81       	ld	r22, Z
    39dc:	71 81       	ldd	r23, Z+1	; 0x01
    39de:	82 81       	ldd	r24, Z+2	; 0x02
    39e0:	93 81       	ldd	r25, Z+3	; 0x03
    39e2:	20 e0       	ldi	r18, 0x00	; 0
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	4a e7       	ldi	r20, 0x7A	; 122
    39e8:	54 e4       	ldi	r21, 0x44	; 68
    39ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39ee:	dc 01       	movw	r26, r24
    39f0:	cb 01       	movw	r24, r22
    39f2:	8c af       	std	Y+60, r24	; 0x3c
    39f4:	9d af       	std	Y+61, r25	; 0x3d
    39f6:	ae af       	std	Y+62, r26	; 0x3e
    39f8:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39fa:	6c ad       	ldd	r22, Y+60	; 0x3c
    39fc:	7d ad       	ldd	r23, Y+61	; 0x3d
    39fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a00:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	4a ef       	ldi	r20, 0xFA	; 250
    3a08:	54 e4       	ldi	r21, 0x44	; 68
    3a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	88 af       	std	Y+56, r24	; 0x38
    3a14:	99 af       	std	Y+57, r25	; 0x39
    3a16:	aa af       	std	Y+58, r26	; 0x3a
    3a18:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3a1a:	68 ad       	ldd	r22, Y+56	; 0x38
    3a1c:	79 ad       	ldd	r23, Y+57	; 0x39
    3a1e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a20:	9b ad       	ldd	r25, Y+59	; 0x3b
    3a22:	20 e0       	ldi	r18, 0x00	; 0
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	40 e8       	ldi	r20, 0x80	; 128
    3a28:	5f e3       	ldi	r21, 0x3F	; 63
    3a2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a2e:	88 23       	and	r24, r24
    3a30:	2c f4       	brge	.+10     	; 0x3a3c <LCD_CheckStatusSendChar4bit+0x3ae>
		__ticks = 1;
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	9f ab       	std	Y+55, r25	; 0x37
    3a38:	8e ab       	std	Y+54, r24	; 0x36
    3a3a:	3f c0       	rjmp	.+126    	; 0x3aba <LCD_CheckStatusSendChar4bit+0x42c>
	else if (__tmp > 65535)
    3a3c:	68 ad       	ldd	r22, Y+56	; 0x38
    3a3e:	79 ad       	ldd	r23, Y+57	; 0x39
    3a40:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a42:	9b ad       	ldd	r25, Y+59	; 0x3b
    3a44:	20 e0       	ldi	r18, 0x00	; 0
    3a46:	3f ef       	ldi	r19, 0xFF	; 255
    3a48:	4f e7       	ldi	r20, 0x7F	; 127
    3a4a:	57 e4       	ldi	r21, 0x47	; 71
    3a4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a50:	18 16       	cp	r1, r24
    3a52:	4c f5       	brge	.+82     	; 0x3aa6 <LCD_CheckStatusSendChar4bit+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a54:	6c ad       	ldd	r22, Y+60	; 0x3c
    3a56:	7d ad       	ldd	r23, Y+61	; 0x3d
    3a58:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a5c:	20 e0       	ldi	r18, 0x00	; 0
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	40 e2       	ldi	r20, 0x20	; 32
    3a62:	51 e4       	ldi	r21, 0x41	; 65
    3a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	bc 01       	movw	r22, r24
    3a6e:	cd 01       	movw	r24, r26
    3a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	9f ab       	std	Y+55, r25	; 0x37
    3a7a:	8e ab       	std	Y+54, r24	; 0x36
    3a7c:	0f c0       	rjmp	.+30     	; 0x3a9c <LCD_CheckStatusSendChar4bit+0x40e>
    3a7e:	88 ec       	ldi	r24, 0xC8	; 200
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	9d ab       	std	Y+53, r25	; 0x35
    3a84:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a86:	8c a9       	ldd	r24, Y+52	; 0x34
    3a88:	9d a9       	ldd	r25, Y+53	; 0x35
    3a8a:	01 97       	sbiw	r24, 0x01	; 1
    3a8c:	f1 f7       	brne	.-4      	; 0x3a8a <LCD_CheckStatusSendChar4bit+0x3fc>
    3a8e:	9d ab       	std	Y+53, r25	; 0x35
    3a90:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a92:	8e a9       	ldd	r24, Y+54	; 0x36
    3a94:	9f a9       	ldd	r25, Y+55	; 0x37
    3a96:	01 97       	sbiw	r24, 0x01	; 1
    3a98:	9f ab       	std	Y+55, r25	; 0x37
    3a9a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a9c:	8e a9       	ldd	r24, Y+54	; 0x36
    3a9e:	9f a9       	ldd	r25, Y+55	; 0x37
    3aa0:	00 97       	sbiw	r24, 0x00	; 0
    3aa2:	69 f7       	brne	.-38     	; 0x3a7e <LCD_CheckStatusSendChar4bit+0x3f0>
    3aa4:	2d c0       	rjmp	.+90     	; 0x3b00 <LCD_CheckStatusSendChar4bit+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa6:	68 ad       	ldd	r22, Y+56	; 0x38
    3aa8:	79 ad       	ldd	r23, Y+57	; 0x39
    3aaa:	8a ad       	ldd	r24, Y+58	; 0x3a
    3aac:	9b ad       	ldd	r25, Y+59	; 0x3b
    3aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	9f ab       	std	Y+55, r25	; 0x37
    3ab8:	8e ab       	std	Y+54, r24	; 0x36
    3aba:	8e a9       	ldd	r24, Y+54	; 0x36
    3abc:	9f a9       	ldd	r25, Y+55	; 0x37
    3abe:	9b ab       	std	Y+51, r25	; 0x33
    3ac0:	8a ab       	std	Y+50, r24	; 0x32
    3ac2:	8a a9       	ldd	r24, Y+50	; 0x32
    3ac4:	9b a9       	ldd	r25, Y+51	; 0x33
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	f1 f7       	brne	.-4      	; 0x3ac6 <LCD_CheckStatusSendChar4bit+0x438>
    3aca:	9b ab       	std	Y+51, r25	; 0x33
    3acc:	8a ab       	std	Y+50, r24	; 0x32
    3ace:	18 c0       	rjmp	.+48     	; 0x3b00 <LCD_CheckStatusSendChar4bit+0x472>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3ad0:	fe 01       	movw	r30, r28
    3ad2:	ef 5b       	subi	r30, 0xBF	; 191
    3ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad6:	60 81       	ld	r22, Z
    3ad8:	71 81       	ldd	r23, Z+1	; 0x01
    3ada:	82 81       	ldd	r24, Z+2	; 0x02
    3adc:	93 81       	ldd	r25, Z+3	; 0x03
    3ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	fe 01       	movw	r30, r28
    3ae8:	e0 5c       	subi	r30, 0xC0	; 192
    3aea:	ff 4f       	sbci	r31, 0xFF	; 255
    3aec:	80 83       	st	Z, r24
    3aee:	fe 01       	movw	r30, r28
    3af0:	e0 5c       	subi	r30, 0xC0	; 192
    3af2:	ff 4f       	sbci	r31, 0xFF	; 255
    3af4:	80 81       	ld	r24, Z
    3af6:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3af8:	89 a9       	ldd	r24, Y+49	; 0x31
    3afa:	8a 95       	dec	r24
    3afc:	f1 f7       	brne	.-4      	; 0x3afa <LCD_CheckStatusSendChar4bit+0x46c>
    3afe:	89 ab       	std	Y+49, r24	; 0x31
                _delay_us(1);

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_HIGH);
    3b00:	80 e0       	ldi	r24, 0x00	; 0
    3b02:	60 e0       	ldi	r22, 0x00	; 0
    3b04:	41 e0       	ldi	r20, 0x01	; 1
    3b06:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    3b0a:	80 e0       	ldi	r24, 0x00	; 0
    3b0c:	61 e0       	ldi	r22, 0x01	; 1
    3b0e:	40 e0       	ldi	r20, 0x00	; 0
    3b10:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, (Copy__Uint8Char << 4) & 0xF0);
    3b14:	fe 01       	movw	r30, r28
    3b16:	ee 59       	subi	r30, 0x9E	; 158
    3b18:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1a:	80 81       	ld	r24, Z
    3b1c:	88 2f       	mov	r24, r24
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	82 95       	swap	r24
    3b22:	92 95       	swap	r25
    3b24:	90 7f       	andi	r25, 0xF0	; 240
    3b26:	98 27       	eor	r25, r24
    3b28:	80 7f       	andi	r24, 0xF0	; 240
    3b2a:	98 27       	eor	r25, r24
    3b2c:	98 2f       	mov	r25, r24
    3b2e:	83 e0       	ldi	r24, 0x03	; 3
    3b30:	69 2f       	mov	r22, r25
    3b32:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    3b36:	80 e0       	ldi	r24, 0x00	; 0
    3b38:	62 e0       	ldi	r22, 0x02	; 2
    3b3a:	41 e0       	ldi	r20, 0x01	; 1
    3b3c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>
    3b40:	80 e0       	ldi	r24, 0x00	; 0
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	a0 e8       	ldi	r26, 0x80	; 128
    3b46:	bf e3       	ldi	r27, 0x3F	; 63
    3b48:	8d a7       	std	Y+45, r24	; 0x2d
    3b4a:	9e a7       	std	Y+46, r25	; 0x2e
    3b4c:	af a7       	std	Y+47, r26	; 0x2f
    3b4e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3b50:	6d a5       	ldd	r22, Y+45	; 0x2d
    3b52:	7e a5       	ldd	r23, Y+46	; 0x2e
    3b54:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b56:	98 a9       	ldd	r25, Y+48	; 0x30
    3b58:	2b ea       	ldi	r18, 0xAB	; 171
    3b5a:	3a ea       	ldi	r19, 0xAA	; 170
    3b5c:	4a e2       	ldi	r20, 0x2A	; 42
    3b5e:	50 e4       	ldi	r21, 0x40	; 64
    3b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b64:	dc 01       	movw	r26, r24
    3b66:	cb 01       	movw	r24, r22
    3b68:	89 a7       	std	Y+41, r24	; 0x29
    3b6a:	9a a7       	std	Y+42, r25	; 0x2a
    3b6c:	ab a7       	std	Y+43, r26	; 0x2b
    3b6e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3b70:	69 a5       	ldd	r22, Y+41	; 0x29
    3b72:	7a a5       	ldd	r23, Y+42	; 0x2a
    3b74:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b76:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b78:	20 e0       	ldi	r18, 0x00	; 0
    3b7a:	30 e0       	ldi	r19, 0x00	; 0
    3b7c:	40 e8       	ldi	r20, 0x80	; 128
    3b7e:	5f e3       	ldi	r21, 0x3F	; 63
    3b80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b84:	88 23       	and	r24, r24
    3b86:	1c f4       	brge	.+6      	; 0x3b8e <LCD_CheckStatusSendChar4bit+0x500>
		__ticks = 1;
    3b88:	81 e0       	ldi	r24, 0x01	; 1
    3b8a:	88 a7       	std	Y+40, r24	; 0x28
    3b8c:	91 c0       	rjmp	.+290    	; 0x3cb0 <LCD_CheckStatusSendChar4bit+0x622>
	else if (__tmp > 255)
    3b8e:	69 a5       	ldd	r22, Y+41	; 0x29
    3b90:	7a a5       	ldd	r23, Y+42	; 0x2a
    3b92:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b94:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	4f e7       	ldi	r20, 0x7F	; 127
    3b9c:	53 e4       	ldi	r21, 0x43	; 67
    3b9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ba2:	18 16       	cp	r1, r24
    3ba4:	0c f0       	brlt	.+2      	; 0x3ba8 <LCD_CheckStatusSendChar4bit+0x51a>
    3ba6:	7b c0       	rjmp	.+246    	; 0x3c9e <LCD_CheckStatusSendChar4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    3ba8:	6d a5       	ldd	r22, Y+45	; 0x2d
    3baa:	7e a5       	ldd	r23, Y+46	; 0x2e
    3bac:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bae:	98 a9       	ldd	r25, Y+48	; 0x30
    3bb0:	20 e0       	ldi	r18, 0x00	; 0
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	4a e7       	ldi	r20, 0x7A	; 122
    3bb6:	54 e4       	ldi	r21, 0x44	; 68
    3bb8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3bbc:	dc 01       	movw	r26, r24
    3bbe:	cb 01       	movw	r24, r22
    3bc0:	8c a3       	std	Y+36, r24	; 0x24
    3bc2:	9d a3       	std	Y+37, r25	; 0x25
    3bc4:	ae a3       	std	Y+38, r26	; 0x26
    3bc6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bc8:	6c a1       	ldd	r22, Y+36	; 0x24
    3bca:	7d a1       	ldd	r23, Y+37	; 0x25
    3bcc:	8e a1       	ldd	r24, Y+38	; 0x26
    3bce:	9f a1       	ldd	r25, Y+39	; 0x27
    3bd0:	20 e0       	ldi	r18, 0x00	; 0
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    3bd4:	4a ef       	ldi	r20, 0xFA	; 250
    3bd6:	54 e4       	ldi	r21, 0x44	; 68
    3bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bdc:	dc 01       	movw	r26, r24
    3bde:	cb 01       	movw	r24, r22
    3be0:	88 a3       	std	Y+32, r24	; 0x20
    3be2:	99 a3       	std	Y+33, r25	; 0x21
    3be4:	aa a3       	std	Y+34, r26	; 0x22
    3be6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3be8:	68 a1       	ldd	r22, Y+32	; 0x20
    3bea:	79 a1       	ldd	r23, Y+33	; 0x21
    3bec:	8a a1       	ldd	r24, Y+34	; 0x22
    3bee:	9b a1       	ldd	r25, Y+35	; 0x23
    3bf0:	20 e0       	ldi	r18, 0x00	; 0
    3bf2:	30 e0       	ldi	r19, 0x00	; 0
    3bf4:	40 e8       	ldi	r20, 0x80	; 128
    3bf6:	5f e3       	ldi	r21, 0x3F	; 63
    3bf8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bfc:	88 23       	and	r24, r24
    3bfe:	2c f4       	brge	.+10     	; 0x3c0a <LCD_CheckStatusSendChar4bit+0x57c>
		__ticks = 1;
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	9f 8f       	std	Y+31, r25	; 0x1f
    3c06:	8e 8f       	std	Y+30, r24	; 0x1e
    3c08:	3f c0       	rjmp	.+126    	; 0x3c88 <LCD_CheckStatusSendChar4bit+0x5fa>
	else if (__tmp > 65535)
    3c0a:	68 a1       	ldd	r22, Y+32	; 0x20
    3c0c:	79 a1       	ldd	r23, Y+33	; 0x21
    3c0e:	8a a1       	ldd	r24, Y+34	; 0x22
    3c10:	9b a1       	ldd	r25, Y+35	; 0x23
    3c12:	20 e0       	ldi	r18, 0x00	; 0
    3c14:	3f ef       	ldi	r19, 0xFF	; 255
    3c16:	4f e7       	ldi	r20, 0x7F	; 127
    3c18:	57 e4       	ldi	r21, 0x47	; 71
    3c1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c1e:	18 16       	cp	r1, r24
    3c20:	4c f5       	brge	.+82     	; 0x3c74 <LCD_CheckStatusSendChar4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c22:	6c a1       	ldd	r22, Y+36	; 0x24
    3c24:	7d a1       	ldd	r23, Y+37	; 0x25
    3c26:	8e a1       	ldd	r24, Y+38	; 0x26
    3c28:	9f a1       	ldd	r25, Y+39	; 0x27
    3c2a:	20 e0       	ldi	r18, 0x00	; 0
    3c2c:	30 e0       	ldi	r19, 0x00	; 0
    3c2e:	40 e2       	ldi	r20, 0x20	; 32
    3c30:	51 e4       	ldi	r21, 0x41	; 65
    3c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c36:	dc 01       	movw	r26, r24
    3c38:	cb 01       	movw	r24, r22
    3c3a:	bc 01       	movw	r22, r24
    3c3c:	cd 01       	movw	r24, r26
    3c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c42:	dc 01       	movw	r26, r24
    3c44:	cb 01       	movw	r24, r22
    3c46:	9f 8f       	std	Y+31, r25	; 0x1f
    3c48:	8e 8f       	std	Y+30, r24	; 0x1e
    3c4a:	0f c0       	rjmp	.+30     	; 0x3c6a <LCD_CheckStatusSendChar4bit+0x5dc>
    3c4c:	88 ec       	ldi	r24, 0xC8	; 200
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	9d 8f       	std	Y+29, r25	; 0x1d
    3c52:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3c54:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3c56:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3c58:	01 97       	sbiw	r24, 0x01	; 1
    3c5a:	f1 f7       	brne	.-4      	; 0x3c58 <LCD_CheckStatusSendChar4bit+0x5ca>
    3c5c:	9d 8f       	std	Y+29, r25	; 0x1d
    3c5e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c62:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c64:	01 97       	sbiw	r24, 0x01	; 1
    3c66:	9f 8f       	std	Y+31, r25	; 0x1f
    3c68:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c6c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c6e:	00 97       	sbiw	r24, 0x00	; 0
    3c70:	69 f7       	brne	.-38     	; 0x3c4c <LCD_CheckStatusSendChar4bit+0x5be>
    3c72:	24 c0       	rjmp	.+72     	; 0x3cbc <LCD_CheckStatusSendChar4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c74:	68 a1       	ldd	r22, Y+32	; 0x20
    3c76:	79 a1       	ldd	r23, Y+33	; 0x21
    3c78:	8a a1       	ldd	r24, Y+34	; 0x22
    3c7a:	9b a1       	ldd	r25, Y+35	; 0x23
    3c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c80:	dc 01       	movw	r26, r24
    3c82:	cb 01       	movw	r24, r22
    3c84:	9f 8f       	std	Y+31, r25	; 0x1f
    3c86:	8e 8f       	std	Y+30, r24	; 0x1e
    3c88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c8a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c8c:	9b 8f       	std	Y+27, r25	; 0x1b
    3c8e:	8a 8f       	std	Y+26, r24	; 0x1a
    3c90:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3c92:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3c94:	01 97       	sbiw	r24, 0x01	; 1
    3c96:	f1 f7       	brne	.-4      	; 0x3c94 <LCD_CheckStatusSendChar4bit+0x606>
    3c98:	9b 8f       	std	Y+27, r25	; 0x1b
    3c9a:	8a 8f       	std	Y+26, r24	; 0x1a
    3c9c:	0f c0       	rjmp	.+30     	; 0x3cbc <LCD_CheckStatusSendChar4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3c9e:	69 a5       	ldd	r22, Y+41	; 0x29
    3ca0:	7a a5       	ldd	r23, Y+42	; 0x2a
    3ca2:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ca4:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	88 a7       	std	Y+40, r24	; 0x28
    3cb0:	88 a5       	ldd	r24, Y+40	; 0x28
    3cb2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3cb4:	89 8d       	ldd	r24, Y+25	; 0x19
    3cb6:	8a 95       	dec	r24
    3cb8:	f1 f7       	brne	.-4      	; 0x3cb6 <LCD_CheckStatusSendChar4bit+0x628>
    3cba:	89 8f       	std	Y+25, r24	; 0x19
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
    3cbe:	62 e0       	ldi	r22, 0x02	; 2
    3cc0:	40 e0       	ldi	r20, 0x00	; 0
    3cc2:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	a0 e8       	ldi	r26, 0x80	; 128
    3ccc:	bf e3       	ldi	r27, 0x3F	; 63
    3cce:	8d 8b       	std	Y+21, r24	; 0x15
    3cd0:	9e 8b       	std	Y+22, r25	; 0x16
    3cd2:	af 8b       	std	Y+23, r26	; 0x17
    3cd4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3cd6:	6d 89       	ldd	r22, Y+21	; 0x15
    3cd8:	7e 89       	ldd	r23, Y+22	; 0x16
    3cda:	8f 89       	ldd	r24, Y+23	; 0x17
    3cdc:	98 8d       	ldd	r25, Y+24	; 0x18
    3cde:	2b ea       	ldi	r18, 0xAB	; 171
    3ce0:	3a ea       	ldi	r19, 0xAA	; 170
    3ce2:	4a e2       	ldi	r20, 0x2A	; 42
    3ce4:	50 e4       	ldi	r21, 0x40	; 64
    3ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	89 8b       	std	Y+17, r24	; 0x11
    3cf0:	9a 8b       	std	Y+18, r25	; 0x12
    3cf2:	ab 8b       	std	Y+19, r26	; 0x13
    3cf4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3cf6:	69 89       	ldd	r22, Y+17	; 0x11
    3cf8:	7a 89       	ldd	r23, Y+18	; 0x12
    3cfa:	8b 89       	ldd	r24, Y+19	; 0x13
    3cfc:	9c 89       	ldd	r25, Y+20	; 0x14
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	40 e8       	ldi	r20, 0x80	; 128
    3d04:	5f e3       	ldi	r21, 0x3F	; 63
    3d06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d0a:	88 23       	and	r24, r24
    3d0c:	1c f4       	brge	.+6      	; 0x3d14 <LCD_CheckStatusSendChar4bit+0x686>
		__ticks = 1;
    3d0e:	81 e0       	ldi	r24, 0x01	; 1
    3d10:	88 8b       	std	Y+16, r24	; 0x10
    3d12:	91 c0       	rjmp	.+290    	; 0x3e36 <LCD_CheckStatusSendChar4bit+0x7a8>
	else if (__tmp > 255)
    3d14:	69 89       	ldd	r22, Y+17	; 0x11
    3d16:	7a 89       	ldd	r23, Y+18	; 0x12
    3d18:	8b 89       	ldd	r24, Y+19	; 0x13
    3d1a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d1c:	20 e0       	ldi	r18, 0x00	; 0
    3d1e:	30 e0       	ldi	r19, 0x00	; 0
    3d20:	4f e7       	ldi	r20, 0x7F	; 127
    3d22:	53 e4       	ldi	r21, 0x43	; 67
    3d24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d28:	18 16       	cp	r1, r24
    3d2a:	0c f0       	brlt	.+2      	; 0x3d2e <LCD_CheckStatusSendChar4bit+0x6a0>
    3d2c:	7b c0       	rjmp	.+246    	; 0x3e24 <LCD_CheckStatusSendChar4bit+0x796>
	{
		_delay_ms(__us / 1000.0);
    3d2e:	6d 89       	ldd	r22, Y+21	; 0x15
    3d30:	7e 89       	ldd	r23, Y+22	; 0x16
    3d32:	8f 89       	ldd	r24, Y+23	; 0x17
    3d34:	98 8d       	ldd	r25, Y+24	; 0x18
    3d36:	20 e0       	ldi	r18, 0x00	; 0
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	4a e7       	ldi	r20, 0x7A	; 122
    3d3c:	54 e4       	ldi	r21, 0x44	; 68
    3d3e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d42:	dc 01       	movw	r26, r24
    3d44:	cb 01       	movw	r24, r22
    3d46:	8c 87       	std	Y+12, r24	; 0x0c
    3d48:	9d 87       	std	Y+13, r25	; 0x0d
    3d4a:	ae 87       	std	Y+14, r26	; 0x0e
    3d4c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d4e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3d50:	7d 85       	ldd	r23, Y+13	; 0x0d
    3d52:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d54:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	4a ef       	ldi	r20, 0xFA	; 250
    3d5c:	54 e4       	ldi	r21, 0x44	; 68
    3d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d62:	dc 01       	movw	r26, r24
    3d64:	cb 01       	movw	r24, r22
    3d66:	88 87       	std	Y+8, r24	; 0x08
    3d68:	99 87       	std	Y+9, r25	; 0x09
    3d6a:	aa 87       	std	Y+10, r26	; 0x0a
    3d6c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3d6e:	68 85       	ldd	r22, Y+8	; 0x08
    3d70:	79 85       	ldd	r23, Y+9	; 0x09
    3d72:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d74:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d76:	20 e0       	ldi	r18, 0x00	; 0
    3d78:	30 e0       	ldi	r19, 0x00	; 0
    3d7a:	40 e8       	ldi	r20, 0x80	; 128
    3d7c:	5f e3       	ldi	r21, 0x3F	; 63
    3d7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d82:	88 23       	and	r24, r24
    3d84:	2c f4       	brge	.+10     	; 0x3d90 <LCD_CheckStatusSendChar4bit+0x702>
		__ticks = 1;
    3d86:	81 e0       	ldi	r24, 0x01	; 1
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	9f 83       	std	Y+7, r25	; 0x07
    3d8c:	8e 83       	std	Y+6, r24	; 0x06
    3d8e:	3f c0       	rjmp	.+126    	; 0x3e0e <LCD_CheckStatusSendChar4bit+0x780>
	else if (__tmp > 65535)
    3d90:	68 85       	ldd	r22, Y+8	; 0x08
    3d92:	79 85       	ldd	r23, Y+9	; 0x09
    3d94:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d96:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d98:	20 e0       	ldi	r18, 0x00	; 0
    3d9a:	3f ef       	ldi	r19, 0xFF	; 255
    3d9c:	4f e7       	ldi	r20, 0x7F	; 127
    3d9e:	57 e4       	ldi	r21, 0x47	; 71
    3da0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3da4:	18 16       	cp	r1, r24
    3da6:	4c f5       	brge	.+82     	; 0x3dfa <LCD_CheckStatusSendChar4bit+0x76c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3da8:	6c 85       	ldd	r22, Y+12	; 0x0c
    3daa:	7d 85       	ldd	r23, Y+13	; 0x0d
    3dac:	8e 85       	ldd	r24, Y+14	; 0x0e
    3dae:	9f 85       	ldd	r25, Y+15	; 0x0f
    3db0:	20 e0       	ldi	r18, 0x00	; 0
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	40 e2       	ldi	r20, 0x20	; 32
    3db6:	51 e4       	ldi	r21, 0x41	; 65
    3db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dbc:	dc 01       	movw	r26, r24
    3dbe:	cb 01       	movw	r24, r22
    3dc0:	bc 01       	movw	r22, r24
    3dc2:	cd 01       	movw	r24, r26
    3dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc8:	dc 01       	movw	r26, r24
    3dca:	cb 01       	movw	r24, r22
    3dcc:	9f 83       	std	Y+7, r25	; 0x07
    3dce:	8e 83       	std	Y+6, r24	; 0x06
    3dd0:	0f c0       	rjmp	.+30     	; 0x3df0 <LCD_CheckStatusSendChar4bit+0x762>
    3dd2:	88 ec       	ldi	r24, 0xC8	; 200
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	9d 83       	std	Y+5, r25	; 0x05
    3dd8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3dda:	8c 81       	ldd	r24, Y+4	; 0x04
    3ddc:	9d 81       	ldd	r25, Y+5	; 0x05
    3dde:	01 97       	sbiw	r24, 0x01	; 1
    3de0:	f1 f7       	brne	.-4      	; 0x3dde <LCD_CheckStatusSendChar4bit+0x750>
    3de2:	9d 83       	std	Y+5, r25	; 0x05
    3de4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3de6:	8e 81       	ldd	r24, Y+6	; 0x06
    3de8:	9f 81       	ldd	r25, Y+7	; 0x07
    3dea:	01 97       	sbiw	r24, 0x01	; 1
    3dec:	9f 83       	std	Y+7, r25	; 0x07
    3dee:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3df0:	8e 81       	ldd	r24, Y+6	; 0x06
    3df2:	9f 81       	ldd	r25, Y+7	; 0x07
    3df4:	00 97       	sbiw	r24, 0x00	; 0
    3df6:	69 f7       	brne	.-38     	; 0x3dd2 <LCD_CheckStatusSendChar4bit+0x744>
    3df8:	24 c0       	rjmp	.+72     	; 0x3e42 <LCD_CheckStatusSendChar4bit+0x7b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dfa:	68 85       	ldd	r22, Y+8	; 0x08
    3dfc:	79 85       	ldd	r23, Y+9	; 0x09
    3dfe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e00:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e06:	dc 01       	movw	r26, r24
    3e08:	cb 01       	movw	r24, r22
    3e0a:	9f 83       	std	Y+7, r25	; 0x07
    3e0c:	8e 83       	std	Y+6, r24	; 0x06
    3e0e:	8e 81       	ldd	r24, Y+6	; 0x06
    3e10:	9f 81       	ldd	r25, Y+7	; 0x07
    3e12:	9b 83       	std	Y+3, r25	; 0x03
    3e14:	8a 83       	std	Y+2, r24	; 0x02
    3e16:	8a 81       	ldd	r24, Y+2	; 0x02
    3e18:	9b 81       	ldd	r25, Y+3	; 0x03
    3e1a:	01 97       	sbiw	r24, 0x01	; 1
    3e1c:	f1 f7       	brne	.-4      	; 0x3e1a <LCD_CheckStatusSendChar4bit+0x78c>
    3e1e:	9b 83       	std	Y+3, r25	; 0x03
    3e20:	8a 83       	std	Y+2, r24	; 0x02
    3e22:	0f c0       	rjmp	.+30     	; 0x3e42 <LCD_CheckStatusSendChar4bit+0x7b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3e24:	69 89       	ldd	r22, Y+17	; 0x11
    3e26:	7a 89       	ldd	r23, Y+18	; 0x12
    3e28:	8b 89       	ldd	r24, Y+19	; 0x13
    3e2a:	9c 89       	ldd	r25, Y+20	; 0x14
    3e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e30:	dc 01       	movw	r26, r24
    3e32:	cb 01       	movw	r24, r22
    3e34:	88 8b       	std	Y+16, r24	; 0x10
    3e36:	88 89       	ldd	r24, Y+16	; 0x10
    3e38:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3e3a:	89 81       	ldd	r24, Y+1	; 0x01
    3e3c:	8a 95       	dec	r24
    3e3e:	f1 f7       	brne	.-4      	; 0x3e3c <LCD_CheckStatusSendChar4bit+0x7ae>
    3e40:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    3e42:	fe 01       	movw	r30, r28
    3e44:	ef 59       	subi	r30, 0x9F	; 159
    3e46:	ff 4f       	sbci	r31, 0xFF	; 255
    3e48:	80 81       	ld	r24, Z
}
    3e4a:	ce 59       	subi	r28, 0x9E	; 158
    3e4c:	df 4f       	sbci	r29, 0xFF	; 255
    3e4e:	0f b6       	in	r0, 0x3f	; 63
    3e50:	f8 94       	cli
    3e52:	de bf       	out	0x3e, r29	; 62
    3e54:	0f be       	out	0x3f, r0	; 63
    3e56:	cd bf       	out	0x3d, r28	; 61
    3e58:	cf 91       	pop	r28
    3e5a:	df 91       	pop	r29
    3e5c:	1f 91       	pop	r17
    3e5e:	0f 91       	pop	r16
    3e60:	08 95       	ret

00003e62 <LCD_CheckStatusSendCmnd4bit>:
CheckStatus LCD_CheckStatusSendCmnd4bit(_uint8 Copy__Uint8Cmnd)
{
    3e62:	0f 93       	push	r16
    3e64:	1f 93       	push	r17
    3e66:	df 93       	push	r29
    3e68:	cf 93       	push	r28
    3e6a:	cd b7       	in	r28, 0x3d	; 61
    3e6c:	de b7       	in	r29, 0x3e	; 62
    3e6e:	c2 56       	subi	r28, 0x62	; 98
    3e70:	d0 40       	sbci	r29, 0x00	; 0
    3e72:	0f b6       	in	r0, 0x3f	; 63
    3e74:	f8 94       	cli
    3e76:	de bf       	out	0x3e, r29	; 62
    3e78:	0f be       	out	0x3f, r0	; 63
    3e7a:	cd bf       	out	0x3d, r28	; 61
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	ee 59       	subi	r30, 0x9E	; 158
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	80 83       	st	Z, r24
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    3e84:	fe 01       	movw	r30, r28
    3e86:	ef 59       	subi	r30, 0x9F	; 159
    3e88:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8a:	10 82       	st	Z, r1
         3-Send CMND byte  to the Data Pins of LCD
         4-PULSE of Enable E = 1 ,E = 0
        */
        if (Copy__Uint8Cmnd <= 255)
        {
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_LOW);
    3e8c:	80 e0       	ldi	r24, 0x00	; 0
    3e8e:	60 e0       	ldi	r22, 0x00	; 0
    3e90:	40 e0       	ldi	r20, 0x00	; 0
    3e92:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    3e96:	80 e0       	ldi	r24, 0x00	; 0
    3e98:	61 e0       	ldi	r22, 0x01	; 1
    3e9a:	40 e0       	ldi	r20, 0x00	; 0
    3e9c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT,( Copy__Uint8Cmnd & 0xF0));
    3ea0:	fe 01       	movw	r30, r28
    3ea2:	ee 59       	subi	r30, 0x9E	; 158
    3ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea6:	80 81       	ld	r24, Z
    3ea8:	98 2f       	mov	r25, r24
    3eaa:	90 7f       	andi	r25, 0xF0	; 240
    3eac:	83 e0       	ldi	r24, 0x03	; 3
    3eae:	69 2f       	mov	r22, r25
    3eb0:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
    3eb6:	62 e0       	ldi	r22, 0x02	; 2
    3eb8:	41 e0       	ldi	r20, 0x01	; 1
    3eba:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>
    3ebe:	fe 01       	movw	r30, r28
    3ec0:	e3 5a       	subi	r30, 0xA3	; 163
    3ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec4:	80 e0       	ldi	r24, 0x00	; 0
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	a0 e8       	ldi	r26, 0x80	; 128
    3eca:	bf e3       	ldi	r27, 0x3F	; 63
    3ecc:	80 83       	st	Z, r24
    3ece:	91 83       	std	Z+1, r25	; 0x01
    3ed0:	a2 83       	std	Z+2, r26	; 0x02
    3ed2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3ed4:	8e 01       	movw	r16, r28
    3ed6:	07 5a       	subi	r16, 0xA7	; 167
    3ed8:	1f 4f       	sbci	r17, 0xFF	; 255
    3eda:	fe 01       	movw	r30, r28
    3edc:	e3 5a       	subi	r30, 0xA3	; 163
    3ede:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee0:	60 81       	ld	r22, Z
    3ee2:	71 81       	ldd	r23, Z+1	; 0x01
    3ee4:	82 81       	ldd	r24, Z+2	; 0x02
    3ee6:	93 81       	ldd	r25, Z+3	; 0x03
    3ee8:	2b ea       	ldi	r18, 0xAB	; 171
    3eea:	3a ea       	ldi	r19, 0xAA	; 170
    3eec:	4a e2       	ldi	r20, 0x2A	; 42
    3eee:	50 e4       	ldi	r21, 0x40	; 64
    3ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef4:	dc 01       	movw	r26, r24
    3ef6:	cb 01       	movw	r24, r22
    3ef8:	f8 01       	movw	r30, r16
    3efa:	80 83       	st	Z, r24
    3efc:	91 83       	std	Z+1, r25	; 0x01
    3efe:	a2 83       	std	Z+2, r26	; 0x02
    3f00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f02:	fe 01       	movw	r30, r28
    3f04:	e7 5a       	subi	r30, 0xA7	; 167
    3f06:	ff 4f       	sbci	r31, 0xFF	; 255
    3f08:	60 81       	ld	r22, Z
    3f0a:	71 81       	ldd	r23, Z+1	; 0x01
    3f0c:	82 81       	ldd	r24, Z+2	; 0x02
    3f0e:	93 81       	ldd	r25, Z+3	; 0x03
    3f10:	20 e0       	ldi	r18, 0x00	; 0
    3f12:	30 e0       	ldi	r19, 0x00	; 0
    3f14:	40 e8       	ldi	r20, 0x80	; 128
    3f16:	5f e3       	ldi	r21, 0x3F	; 63
    3f18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f1c:	88 23       	and	r24, r24
    3f1e:	34 f4       	brge	.+12     	; 0x3f2c <LCD_CheckStatusSendCmnd4bit+0xca>
		__ticks = 1;
    3f20:	fe 01       	movw	r30, r28
    3f22:	e8 5a       	subi	r30, 0xA8	; 168
    3f24:	ff 4f       	sbci	r31, 0xFF	; 255
    3f26:	81 e0       	ldi	r24, 0x01	; 1
    3f28:	80 83       	st	Z, r24
    3f2a:	e0 c0       	rjmp	.+448    	; 0x40ec <LCD_CheckStatusSendCmnd4bit+0x28a>
	else if (__tmp > 255)
    3f2c:	fe 01       	movw	r30, r28
    3f2e:	e7 5a       	subi	r30, 0xA7	; 167
    3f30:	ff 4f       	sbci	r31, 0xFF	; 255
    3f32:	60 81       	ld	r22, Z
    3f34:	71 81       	ldd	r23, Z+1	; 0x01
    3f36:	82 81       	ldd	r24, Z+2	; 0x02
    3f38:	93 81       	ldd	r25, Z+3	; 0x03
    3f3a:	20 e0       	ldi	r18, 0x00	; 0
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	4f e7       	ldi	r20, 0x7F	; 127
    3f40:	53 e4       	ldi	r21, 0x43	; 67
    3f42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f46:	18 16       	cp	r1, r24
    3f48:	0c f0       	brlt	.+2      	; 0x3f4c <LCD_CheckStatusSendCmnd4bit+0xea>
    3f4a:	c0 c0       	rjmp	.+384    	; 0x40cc <LCD_CheckStatusSendCmnd4bit+0x26a>
	{
		_delay_ms(__us / 1000.0);
    3f4c:	fe 01       	movw	r30, r28
    3f4e:	e3 5a       	subi	r30, 0xA3	; 163
    3f50:	ff 4f       	sbci	r31, 0xFF	; 255
    3f52:	60 81       	ld	r22, Z
    3f54:	71 81       	ldd	r23, Z+1	; 0x01
    3f56:	82 81       	ldd	r24, Z+2	; 0x02
    3f58:	93 81       	ldd	r25, Z+3	; 0x03
    3f5a:	20 e0       	ldi	r18, 0x00	; 0
    3f5c:	30 e0       	ldi	r19, 0x00	; 0
    3f5e:	4a e7       	ldi	r20, 0x7A	; 122
    3f60:	54 e4       	ldi	r21, 0x44	; 68
    3f62:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3f66:	dc 01       	movw	r26, r24
    3f68:	cb 01       	movw	r24, r22
    3f6a:	fe 01       	movw	r30, r28
    3f6c:	ec 5a       	subi	r30, 0xAC	; 172
    3f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f70:	80 83       	st	Z, r24
    3f72:	91 83       	std	Z+1, r25	; 0x01
    3f74:	a2 83       	std	Z+2, r26	; 0x02
    3f76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f78:	8e 01       	movw	r16, r28
    3f7a:	00 5b       	subi	r16, 0xB0	; 176
    3f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f7e:	fe 01       	movw	r30, r28
    3f80:	ec 5a       	subi	r30, 0xAC	; 172
    3f82:	ff 4f       	sbci	r31, 0xFF	; 255
    3f84:	60 81       	ld	r22, Z
    3f86:	71 81       	ldd	r23, Z+1	; 0x01
    3f88:	82 81       	ldd	r24, Z+2	; 0x02
    3f8a:	93 81       	ldd	r25, Z+3	; 0x03
    3f8c:	20 e0       	ldi	r18, 0x00	; 0
    3f8e:	30 e0       	ldi	r19, 0x00	; 0
    3f90:	4a ef       	ldi	r20, 0xFA	; 250
    3f92:	54 e4       	ldi	r21, 0x44	; 68
    3f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f98:	dc 01       	movw	r26, r24
    3f9a:	cb 01       	movw	r24, r22
    3f9c:	f8 01       	movw	r30, r16
    3f9e:	80 83       	st	Z, r24
    3fa0:	91 83       	std	Z+1, r25	; 0x01
    3fa2:	a2 83       	std	Z+2, r26	; 0x02
    3fa4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fa6:	fe 01       	movw	r30, r28
    3fa8:	e0 5b       	subi	r30, 0xB0	; 176
    3faa:	ff 4f       	sbci	r31, 0xFF	; 255
    3fac:	60 81       	ld	r22, Z
    3fae:	71 81       	ldd	r23, Z+1	; 0x01
    3fb0:	82 81       	ldd	r24, Z+2	; 0x02
    3fb2:	93 81       	ldd	r25, Z+3	; 0x03
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	40 e8       	ldi	r20, 0x80	; 128
    3fba:	5f e3       	ldi	r21, 0x3F	; 63
    3fbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fc0:	88 23       	and	r24, r24
    3fc2:	44 f4       	brge	.+16     	; 0x3fd4 <LCD_CheckStatusSendCmnd4bit+0x172>
		__ticks = 1;
    3fc4:	fe 01       	movw	r30, r28
    3fc6:	e2 5b       	subi	r30, 0xB2	; 178
    3fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	91 83       	std	Z+1, r25	; 0x01
    3fd0:	80 83       	st	Z, r24
    3fd2:	64 c0       	rjmp	.+200    	; 0x409c <LCD_CheckStatusSendCmnd4bit+0x23a>
	else if (__tmp > 65535)
    3fd4:	fe 01       	movw	r30, r28
    3fd6:	e0 5b       	subi	r30, 0xB0	; 176
    3fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fda:	60 81       	ld	r22, Z
    3fdc:	71 81       	ldd	r23, Z+1	; 0x01
    3fde:	82 81       	ldd	r24, Z+2	; 0x02
    3fe0:	93 81       	ldd	r25, Z+3	; 0x03
    3fe2:	20 e0       	ldi	r18, 0x00	; 0
    3fe4:	3f ef       	ldi	r19, 0xFF	; 255
    3fe6:	4f e7       	ldi	r20, 0x7F	; 127
    3fe8:	57 e4       	ldi	r21, 0x47	; 71
    3fea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fee:	18 16       	cp	r1, r24
    3ff0:	0c f0       	brlt	.+2      	; 0x3ff4 <LCD_CheckStatusSendCmnd4bit+0x192>
    3ff2:	43 c0       	rjmp	.+134    	; 0x407a <LCD_CheckStatusSendCmnd4bit+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ff4:	fe 01       	movw	r30, r28
    3ff6:	ec 5a       	subi	r30, 0xAC	; 172
    3ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffa:	60 81       	ld	r22, Z
    3ffc:	71 81       	ldd	r23, Z+1	; 0x01
    3ffe:	82 81       	ldd	r24, Z+2	; 0x02
    4000:	93 81       	ldd	r25, Z+3	; 0x03
    4002:	20 e0       	ldi	r18, 0x00	; 0
    4004:	30 e0       	ldi	r19, 0x00	; 0
    4006:	40 e2       	ldi	r20, 0x20	; 32
    4008:	51 e4       	ldi	r21, 0x41	; 65
    400a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    400e:	dc 01       	movw	r26, r24
    4010:	cb 01       	movw	r24, r22
    4012:	8e 01       	movw	r16, r28
    4014:	02 5b       	subi	r16, 0xB2	; 178
    4016:	1f 4f       	sbci	r17, 0xFF	; 255
    4018:	bc 01       	movw	r22, r24
    401a:	cd 01       	movw	r24, r26
    401c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4020:	dc 01       	movw	r26, r24
    4022:	cb 01       	movw	r24, r22
    4024:	f8 01       	movw	r30, r16
    4026:	91 83       	std	Z+1, r25	; 0x01
    4028:	80 83       	st	Z, r24
    402a:	1f c0       	rjmp	.+62     	; 0x406a <LCD_CheckStatusSendCmnd4bit+0x208>
    402c:	fe 01       	movw	r30, r28
    402e:	e4 5b       	subi	r30, 0xB4	; 180
    4030:	ff 4f       	sbci	r31, 0xFF	; 255
    4032:	88 ec       	ldi	r24, 0xC8	; 200
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	91 83       	std	Z+1, r25	; 0x01
    4038:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    403a:	fe 01       	movw	r30, r28
    403c:	e4 5b       	subi	r30, 0xB4	; 180
    403e:	ff 4f       	sbci	r31, 0xFF	; 255
    4040:	80 81       	ld	r24, Z
    4042:	91 81       	ldd	r25, Z+1	; 0x01
    4044:	01 97       	sbiw	r24, 0x01	; 1
    4046:	f1 f7       	brne	.-4      	; 0x4044 <LCD_CheckStatusSendCmnd4bit+0x1e2>
    4048:	fe 01       	movw	r30, r28
    404a:	e4 5b       	subi	r30, 0xB4	; 180
    404c:	ff 4f       	sbci	r31, 0xFF	; 255
    404e:	91 83       	std	Z+1, r25	; 0x01
    4050:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4052:	de 01       	movw	r26, r28
    4054:	a2 5b       	subi	r26, 0xB2	; 178
    4056:	bf 4f       	sbci	r27, 0xFF	; 255
    4058:	fe 01       	movw	r30, r28
    405a:	e2 5b       	subi	r30, 0xB2	; 178
    405c:	ff 4f       	sbci	r31, 0xFF	; 255
    405e:	80 81       	ld	r24, Z
    4060:	91 81       	ldd	r25, Z+1	; 0x01
    4062:	01 97       	sbiw	r24, 0x01	; 1
    4064:	11 96       	adiw	r26, 0x01	; 1
    4066:	9c 93       	st	X, r25
    4068:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    406a:	fe 01       	movw	r30, r28
    406c:	e2 5b       	subi	r30, 0xB2	; 178
    406e:	ff 4f       	sbci	r31, 0xFF	; 255
    4070:	80 81       	ld	r24, Z
    4072:	91 81       	ldd	r25, Z+1	; 0x01
    4074:	00 97       	sbiw	r24, 0x00	; 0
    4076:	d1 f6       	brne	.-76     	; 0x402c <LCD_CheckStatusSendCmnd4bit+0x1ca>
    4078:	4b c0       	rjmp	.+150    	; 0x4110 <LCD_CheckStatusSendCmnd4bit+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    407a:	8e 01       	movw	r16, r28
    407c:	02 5b       	subi	r16, 0xB2	; 178
    407e:	1f 4f       	sbci	r17, 0xFF	; 255
    4080:	fe 01       	movw	r30, r28
    4082:	e0 5b       	subi	r30, 0xB0	; 176
    4084:	ff 4f       	sbci	r31, 0xFF	; 255
    4086:	60 81       	ld	r22, Z
    4088:	71 81       	ldd	r23, Z+1	; 0x01
    408a:	82 81       	ldd	r24, Z+2	; 0x02
    408c:	93 81       	ldd	r25, Z+3	; 0x03
    408e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4092:	dc 01       	movw	r26, r24
    4094:	cb 01       	movw	r24, r22
    4096:	f8 01       	movw	r30, r16
    4098:	91 83       	std	Z+1, r25	; 0x01
    409a:	80 83       	st	Z, r24
    409c:	de 01       	movw	r26, r28
    409e:	a6 5b       	subi	r26, 0xB6	; 182
    40a0:	bf 4f       	sbci	r27, 0xFF	; 255
    40a2:	fe 01       	movw	r30, r28
    40a4:	e2 5b       	subi	r30, 0xB2	; 178
    40a6:	ff 4f       	sbci	r31, 0xFF	; 255
    40a8:	80 81       	ld	r24, Z
    40aa:	91 81       	ldd	r25, Z+1	; 0x01
    40ac:	11 96       	adiw	r26, 0x01	; 1
    40ae:	9c 93       	st	X, r25
    40b0:	8e 93       	st	-X, r24
    40b2:	fe 01       	movw	r30, r28
    40b4:	e6 5b       	subi	r30, 0xB6	; 182
    40b6:	ff 4f       	sbci	r31, 0xFF	; 255
    40b8:	80 81       	ld	r24, Z
    40ba:	91 81       	ldd	r25, Z+1	; 0x01
    40bc:	01 97       	sbiw	r24, 0x01	; 1
    40be:	f1 f7       	brne	.-4      	; 0x40bc <LCD_CheckStatusSendCmnd4bit+0x25a>
    40c0:	fe 01       	movw	r30, r28
    40c2:	e6 5b       	subi	r30, 0xB6	; 182
    40c4:	ff 4f       	sbci	r31, 0xFF	; 255
    40c6:	91 83       	std	Z+1, r25	; 0x01
    40c8:	80 83       	st	Z, r24
    40ca:	22 c0       	rjmp	.+68     	; 0x4110 <LCD_CheckStatusSendCmnd4bit+0x2ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    40cc:	8e 01       	movw	r16, r28
    40ce:	08 5a       	subi	r16, 0xA8	; 168
    40d0:	1f 4f       	sbci	r17, 0xFF	; 255
    40d2:	fe 01       	movw	r30, r28
    40d4:	e7 5a       	subi	r30, 0xA7	; 167
    40d6:	ff 4f       	sbci	r31, 0xFF	; 255
    40d8:	60 81       	ld	r22, Z
    40da:	71 81       	ldd	r23, Z+1	; 0x01
    40dc:	82 81       	ldd	r24, Z+2	; 0x02
    40de:	93 81       	ldd	r25, Z+3	; 0x03
    40e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40e4:	dc 01       	movw	r26, r24
    40e6:	cb 01       	movw	r24, r22
    40e8:	f8 01       	movw	r30, r16
    40ea:	80 83       	st	Z, r24
    40ec:	de 01       	movw	r26, r28
    40ee:	a7 5b       	subi	r26, 0xB7	; 183
    40f0:	bf 4f       	sbci	r27, 0xFF	; 255
    40f2:	fe 01       	movw	r30, r28
    40f4:	e8 5a       	subi	r30, 0xA8	; 168
    40f6:	ff 4f       	sbci	r31, 0xFF	; 255
    40f8:	80 81       	ld	r24, Z
    40fa:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    40fc:	fe 01       	movw	r30, r28
    40fe:	e7 5b       	subi	r30, 0xB7	; 183
    4100:	ff 4f       	sbci	r31, 0xFF	; 255
    4102:	80 81       	ld	r24, Z
    4104:	8a 95       	dec	r24
    4106:	f1 f7       	brne	.-4      	; 0x4104 <LCD_CheckStatusSendCmnd4bit+0x2a2>
    4108:	fe 01       	movw	r30, r28
    410a:	e7 5b       	subi	r30, 0xB7	; 183
    410c:	ff 4f       	sbci	r31, 0xFF	; 255
    410e:	80 83       	st	Z, r24
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    4110:	80 e0       	ldi	r24, 0x00	; 0
    4112:	62 e0       	ldi	r22, 0x02	; 2
    4114:	40 e0       	ldi	r20, 0x00	; 0
    4116:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>
    411a:	fe 01       	movw	r30, r28
    411c:	eb 5b       	subi	r30, 0xBB	; 187
    411e:	ff 4f       	sbci	r31, 0xFF	; 255
    4120:	80 e0       	ldi	r24, 0x00	; 0
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	a0 e8       	ldi	r26, 0x80	; 128
    4126:	bf e3       	ldi	r27, 0x3F	; 63
    4128:	80 83       	st	Z, r24
    412a:	91 83       	std	Z+1, r25	; 0x01
    412c:	a2 83       	std	Z+2, r26	; 0x02
    412e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4130:	8e 01       	movw	r16, r28
    4132:	0f 5b       	subi	r16, 0xBF	; 191
    4134:	1f 4f       	sbci	r17, 0xFF	; 255
    4136:	fe 01       	movw	r30, r28
    4138:	eb 5b       	subi	r30, 0xBB	; 187
    413a:	ff 4f       	sbci	r31, 0xFF	; 255
    413c:	60 81       	ld	r22, Z
    413e:	71 81       	ldd	r23, Z+1	; 0x01
    4140:	82 81       	ldd	r24, Z+2	; 0x02
    4142:	93 81       	ldd	r25, Z+3	; 0x03
    4144:	2b ea       	ldi	r18, 0xAB	; 171
    4146:	3a ea       	ldi	r19, 0xAA	; 170
    4148:	4a e2       	ldi	r20, 0x2A	; 42
    414a:	50 e4       	ldi	r21, 0x40	; 64
    414c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	f8 01       	movw	r30, r16
    4156:	80 83       	st	Z, r24
    4158:	91 83       	std	Z+1, r25	; 0x01
    415a:	a2 83       	std	Z+2, r26	; 0x02
    415c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    415e:	fe 01       	movw	r30, r28
    4160:	ef 5b       	subi	r30, 0xBF	; 191
    4162:	ff 4f       	sbci	r31, 0xFF	; 255
    4164:	60 81       	ld	r22, Z
    4166:	71 81       	ldd	r23, Z+1	; 0x01
    4168:	82 81       	ldd	r24, Z+2	; 0x02
    416a:	93 81       	ldd	r25, Z+3	; 0x03
    416c:	20 e0       	ldi	r18, 0x00	; 0
    416e:	30 e0       	ldi	r19, 0x00	; 0
    4170:	40 e8       	ldi	r20, 0x80	; 128
    4172:	5f e3       	ldi	r21, 0x3F	; 63
    4174:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4178:	88 23       	and	r24, r24
    417a:	34 f4       	brge	.+12     	; 0x4188 <LCD_CheckStatusSendCmnd4bit+0x326>
		__ticks = 1;
    417c:	81 e0       	ldi	r24, 0x01	; 1
    417e:	fe 01       	movw	r30, r28
    4180:	e0 5c       	subi	r30, 0xC0	; 192
    4182:	ff 4f       	sbci	r31, 0xFF	; 255
    4184:	80 83       	st	Z, r24
    4186:	9d c0       	rjmp	.+314    	; 0x42c2 <LCD_CheckStatusSendCmnd4bit+0x460>
	else if (__tmp > 255)
    4188:	fe 01       	movw	r30, r28
    418a:	ef 5b       	subi	r30, 0xBF	; 191
    418c:	ff 4f       	sbci	r31, 0xFF	; 255
    418e:	60 81       	ld	r22, Z
    4190:	71 81       	ldd	r23, Z+1	; 0x01
    4192:	82 81       	ldd	r24, Z+2	; 0x02
    4194:	93 81       	ldd	r25, Z+3	; 0x03
    4196:	20 e0       	ldi	r18, 0x00	; 0
    4198:	30 e0       	ldi	r19, 0x00	; 0
    419a:	4f e7       	ldi	r20, 0x7F	; 127
    419c:	53 e4       	ldi	r21, 0x43	; 67
    419e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41a2:	18 16       	cp	r1, r24
    41a4:	0c f0       	brlt	.+2      	; 0x41a8 <LCD_CheckStatusSendCmnd4bit+0x346>
    41a6:	7e c0       	rjmp	.+252    	; 0x42a4 <LCD_CheckStatusSendCmnd4bit+0x442>
	{
		_delay_ms(__us / 1000.0);
    41a8:	fe 01       	movw	r30, r28
    41aa:	eb 5b       	subi	r30, 0xBB	; 187
    41ac:	ff 4f       	sbci	r31, 0xFF	; 255
    41ae:	60 81       	ld	r22, Z
    41b0:	71 81       	ldd	r23, Z+1	; 0x01
    41b2:	82 81       	ldd	r24, Z+2	; 0x02
    41b4:	93 81       	ldd	r25, Z+3	; 0x03
    41b6:	20 e0       	ldi	r18, 0x00	; 0
    41b8:	30 e0       	ldi	r19, 0x00	; 0
    41ba:	4a e7       	ldi	r20, 0x7A	; 122
    41bc:	54 e4       	ldi	r21, 0x44	; 68
    41be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    41c2:	dc 01       	movw	r26, r24
    41c4:	cb 01       	movw	r24, r22
    41c6:	8c af       	std	Y+60, r24	; 0x3c
    41c8:	9d af       	std	Y+61, r25	; 0x3d
    41ca:	ae af       	std	Y+62, r26	; 0x3e
    41cc:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41ce:	6c ad       	ldd	r22, Y+60	; 0x3c
    41d0:	7d ad       	ldd	r23, Y+61	; 0x3d
    41d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    41d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    41d6:	20 e0       	ldi	r18, 0x00	; 0
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	4a ef       	ldi	r20, 0xFA	; 250
    41dc:	54 e4       	ldi	r21, 0x44	; 68
    41de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e2:	dc 01       	movw	r26, r24
    41e4:	cb 01       	movw	r24, r22
    41e6:	88 af       	std	Y+56, r24	; 0x38
    41e8:	99 af       	std	Y+57, r25	; 0x39
    41ea:	aa af       	std	Y+58, r26	; 0x3a
    41ec:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    41ee:	68 ad       	ldd	r22, Y+56	; 0x38
    41f0:	79 ad       	ldd	r23, Y+57	; 0x39
    41f2:	8a ad       	ldd	r24, Y+58	; 0x3a
    41f4:	9b ad       	ldd	r25, Y+59	; 0x3b
    41f6:	20 e0       	ldi	r18, 0x00	; 0
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	40 e8       	ldi	r20, 0x80	; 128
    41fc:	5f e3       	ldi	r21, 0x3F	; 63
    41fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4202:	88 23       	and	r24, r24
    4204:	2c f4       	brge	.+10     	; 0x4210 <LCD_CheckStatusSendCmnd4bit+0x3ae>
		__ticks = 1;
    4206:	81 e0       	ldi	r24, 0x01	; 1
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	9f ab       	std	Y+55, r25	; 0x37
    420c:	8e ab       	std	Y+54, r24	; 0x36
    420e:	3f c0       	rjmp	.+126    	; 0x428e <LCD_CheckStatusSendCmnd4bit+0x42c>
	else if (__tmp > 65535)
    4210:	68 ad       	ldd	r22, Y+56	; 0x38
    4212:	79 ad       	ldd	r23, Y+57	; 0x39
    4214:	8a ad       	ldd	r24, Y+58	; 0x3a
    4216:	9b ad       	ldd	r25, Y+59	; 0x3b
    4218:	20 e0       	ldi	r18, 0x00	; 0
    421a:	3f ef       	ldi	r19, 0xFF	; 255
    421c:	4f e7       	ldi	r20, 0x7F	; 127
    421e:	57 e4       	ldi	r21, 0x47	; 71
    4220:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4224:	18 16       	cp	r1, r24
    4226:	4c f5       	brge	.+82     	; 0x427a <LCD_CheckStatusSendCmnd4bit+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4228:	6c ad       	ldd	r22, Y+60	; 0x3c
    422a:	7d ad       	ldd	r23, Y+61	; 0x3d
    422c:	8e ad       	ldd	r24, Y+62	; 0x3e
    422e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4230:	20 e0       	ldi	r18, 0x00	; 0
    4232:	30 e0       	ldi	r19, 0x00	; 0
    4234:	40 e2       	ldi	r20, 0x20	; 32
    4236:	51 e4       	ldi	r21, 0x41	; 65
    4238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    423c:	dc 01       	movw	r26, r24
    423e:	cb 01       	movw	r24, r22
    4240:	bc 01       	movw	r22, r24
    4242:	cd 01       	movw	r24, r26
    4244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4248:	dc 01       	movw	r26, r24
    424a:	cb 01       	movw	r24, r22
    424c:	9f ab       	std	Y+55, r25	; 0x37
    424e:	8e ab       	std	Y+54, r24	; 0x36
    4250:	0f c0       	rjmp	.+30     	; 0x4270 <LCD_CheckStatusSendCmnd4bit+0x40e>
    4252:	88 ec       	ldi	r24, 0xC8	; 200
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	9d ab       	std	Y+53, r25	; 0x35
    4258:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    425a:	8c a9       	ldd	r24, Y+52	; 0x34
    425c:	9d a9       	ldd	r25, Y+53	; 0x35
    425e:	01 97       	sbiw	r24, 0x01	; 1
    4260:	f1 f7       	brne	.-4      	; 0x425e <LCD_CheckStatusSendCmnd4bit+0x3fc>
    4262:	9d ab       	std	Y+53, r25	; 0x35
    4264:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4266:	8e a9       	ldd	r24, Y+54	; 0x36
    4268:	9f a9       	ldd	r25, Y+55	; 0x37
    426a:	01 97       	sbiw	r24, 0x01	; 1
    426c:	9f ab       	std	Y+55, r25	; 0x37
    426e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4270:	8e a9       	ldd	r24, Y+54	; 0x36
    4272:	9f a9       	ldd	r25, Y+55	; 0x37
    4274:	00 97       	sbiw	r24, 0x00	; 0
    4276:	69 f7       	brne	.-38     	; 0x4252 <LCD_CheckStatusSendCmnd4bit+0x3f0>
    4278:	2d c0       	rjmp	.+90     	; 0x42d4 <LCD_CheckStatusSendCmnd4bit+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    427a:	68 ad       	ldd	r22, Y+56	; 0x38
    427c:	79 ad       	ldd	r23, Y+57	; 0x39
    427e:	8a ad       	ldd	r24, Y+58	; 0x3a
    4280:	9b ad       	ldd	r25, Y+59	; 0x3b
    4282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4286:	dc 01       	movw	r26, r24
    4288:	cb 01       	movw	r24, r22
    428a:	9f ab       	std	Y+55, r25	; 0x37
    428c:	8e ab       	std	Y+54, r24	; 0x36
    428e:	8e a9       	ldd	r24, Y+54	; 0x36
    4290:	9f a9       	ldd	r25, Y+55	; 0x37
    4292:	9b ab       	std	Y+51, r25	; 0x33
    4294:	8a ab       	std	Y+50, r24	; 0x32
    4296:	8a a9       	ldd	r24, Y+50	; 0x32
    4298:	9b a9       	ldd	r25, Y+51	; 0x33
    429a:	01 97       	sbiw	r24, 0x01	; 1
    429c:	f1 f7       	brne	.-4      	; 0x429a <LCD_CheckStatusSendCmnd4bit+0x438>
    429e:	9b ab       	std	Y+51, r25	; 0x33
    42a0:	8a ab       	std	Y+50, r24	; 0x32
    42a2:	18 c0       	rjmp	.+48     	; 0x42d4 <LCD_CheckStatusSendCmnd4bit+0x472>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    42a4:	fe 01       	movw	r30, r28
    42a6:	ef 5b       	subi	r30, 0xBF	; 191
    42a8:	ff 4f       	sbci	r31, 0xFF	; 255
    42aa:	60 81       	ld	r22, Z
    42ac:	71 81       	ldd	r23, Z+1	; 0x01
    42ae:	82 81       	ldd	r24, Z+2	; 0x02
    42b0:	93 81       	ldd	r25, Z+3	; 0x03
    42b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42b6:	dc 01       	movw	r26, r24
    42b8:	cb 01       	movw	r24, r22
    42ba:	fe 01       	movw	r30, r28
    42bc:	e0 5c       	subi	r30, 0xC0	; 192
    42be:	ff 4f       	sbci	r31, 0xFF	; 255
    42c0:	80 83       	st	Z, r24
    42c2:	fe 01       	movw	r30, r28
    42c4:	e0 5c       	subi	r30, 0xC0	; 192
    42c6:	ff 4f       	sbci	r31, 0xFF	; 255
    42c8:	80 81       	ld	r24, Z
    42ca:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    42cc:	89 a9       	ldd	r24, Y+49	; 0x31
    42ce:	8a 95       	dec	r24
    42d0:	f1 f7       	brne	.-4      	; 0x42ce <LCD_CheckStatusSendCmnd4bit+0x46c>
    42d2:	89 ab       	std	Y+49, r24	; 0x31
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_LOW);
    42d4:	80 e0       	ldi	r24, 0x00	; 0
    42d6:	60 e0       	ldi	r22, 0x00	; 0
    42d8:	40 e0       	ldi	r20, 0x00	; 0
    42da:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    42de:	80 e0       	ldi	r24, 0x00	; 0
    42e0:	61 e0       	ldi	r22, 0x01	; 1
    42e2:	40 e0       	ldi	r20, 0x00	; 0
    42e4:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, ((Copy__Uint8Cmnd << 4) & 0xF0));
    42e8:	fe 01       	movw	r30, r28
    42ea:	ee 59       	subi	r30, 0x9E	; 158
    42ec:	ff 4f       	sbci	r31, 0xFF	; 255
    42ee:	80 81       	ld	r24, Z
    42f0:	88 2f       	mov	r24, r24
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	82 95       	swap	r24
    42f6:	92 95       	swap	r25
    42f8:	90 7f       	andi	r25, 0xF0	; 240
    42fa:	98 27       	eor	r25, r24
    42fc:	80 7f       	andi	r24, 0xF0	; 240
    42fe:	98 27       	eor	r25, r24
    4300:	98 2f       	mov	r25, r24
    4302:	83 e0       	ldi	r24, 0x03	; 3
    4304:	69 2f       	mov	r22, r25
    4306:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    430a:	80 e0       	ldi	r24, 0x00	; 0
    430c:	62 e0       	ldi	r22, 0x02	; 2
    430e:	41 e0       	ldi	r20, 0x01	; 1
    4310:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>
    4314:	80 e0       	ldi	r24, 0x00	; 0
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	a0 e8       	ldi	r26, 0x80	; 128
    431a:	bf e3       	ldi	r27, 0x3F	; 63
    431c:	8d a7       	std	Y+45, r24	; 0x2d
    431e:	9e a7       	std	Y+46, r25	; 0x2e
    4320:	af a7       	std	Y+47, r26	; 0x2f
    4322:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4324:	6d a5       	ldd	r22, Y+45	; 0x2d
    4326:	7e a5       	ldd	r23, Y+46	; 0x2e
    4328:	8f a5       	ldd	r24, Y+47	; 0x2f
    432a:	98 a9       	ldd	r25, Y+48	; 0x30
    432c:	2b ea       	ldi	r18, 0xAB	; 171
    432e:	3a ea       	ldi	r19, 0xAA	; 170
    4330:	4a e2       	ldi	r20, 0x2A	; 42
    4332:	50 e4       	ldi	r21, 0x40	; 64
    4334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4338:	dc 01       	movw	r26, r24
    433a:	cb 01       	movw	r24, r22
    433c:	89 a7       	std	Y+41, r24	; 0x29
    433e:	9a a7       	std	Y+42, r25	; 0x2a
    4340:	ab a7       	std	Y+43, r26	; 0x2b
    4342:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4344:	69 a5       	ldd	r22, Y+41	; 0x29
    4346:	7a a5       	ldd	r23, Y+42	; 0x2a
    4348:	8b a5       	ldd	r24, Y+43	; 0x2b
    434a:	9c a5       	ldd	r25, Y+44	; 0x2c
    434c:	20 e0       	ldi	r18, 0x00	; 0
    434e:	30 e0       	ldi	r19, 0x00	; 0
    4350:	40 e8       	ldi	r20, 0x80	; 128
    4352:	5f e3       	ldi	r21, 0x3F	; 63
    4354:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4358:	88 23       	and	r24, r24
    435a:	1c f4       	brge	.+6      	; 0x4362 <LCD_CheckStatusSendCmnd4bit+0x500>
		__ticks = 1;
    435c:	81 e0       	ldi	r24, 0x01	; 1
    435e:	88 a7       	std	Y+40, r24	; 0x28
    4360:	91 c0       	rjmp	.+290    	; 0x4484 <LCD_CheckStatusSendCmnd4bit+0x622>
	else if (__tmp > 255)
    4362:	69 a5       	ldd	r22, Y+41	; 0x29
    4364:	7a a5       	ldd	r23, Y+42	; 0x2a
    4366:	8b a5       	ldd	r24, Y+43	; 0x2b
    4368:	9c a5       	ldd	r25, Y+44	; 0x2c
    436a:	20 e0       	ldi	r18, 0x00	; 0
    436c:	30 e0       	ldi	r19, 0x00	; 0
    436e:	4f e7       	ldi	r20, 0x7F	; 127
    4370:	53 e4       	ldi	r21, 0x43	; 67
    4372:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4376:	18 16       	cp	r1, r24
    4378:	0c f0       	brlt	.+2      	; 0x437c <LCD_CheckStatusSendCmnd4bit+0x51a>
    437a:	7b c0       	rjmp	.+246    	; 0x4472 <LCD_CheckStatusSendCmnd4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    437c:	6d a5       	ldd	r22, Y+45	; 0x2d
    437e:	7e a5       	ldd	r23, Y+46	; 0x2e
    4380:	8f a5       	ldd	r24, Y+47	; 0x2f
    4382:	98 a9       	ldd	r25, Y+48	; 0x30
    4384:	20 e0       	ldi	r18, 0x00	; 0
    4386:	30 e0       	ldi	r19, 0x00	; 0
    4388:	4a e7       	ldi	r20, 0x7A	; 122
    438a:	54 e4       	ldi	r21, 0x44	; 68
    438c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4390:	dc 01       	movw	r26, r24
    4392:	cb 01       	movw	r24, r22
    4394:	8c a3       	std	Y+36, r24	; 0x24
    4396:	9d a3       	std	Y+37, r25	; 0x25
    4398:	ae a3       	std	Y+38, r26	; 0x26
    439a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    439c:	6c a1       	ldd	r22, Y+36	; 0x24
    439e:	7d a1       	ldd	r23, Y+37	; 0x25
    43a0:	8e a1       	ldd	r24, Y+38	; 0x26
    43a2:	9f a1       	ldd	r25, Y+39	; 0x27
    43a4:	20 e0       	ldi	r18, 0x00	; 0
    43a6:	30 e0       	ldi	r19, 0x00	; 0
    43a8:	4a ef       	ldi	r20, 0xFA	; 250
    43aa:	54 e4       	ldi	r21, 0x44	; 68
    43ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b0:	dc 01       	movw	r26, r24
    43b2:	cb 01       	movw	r24, r22
    43b4:	88 a3       	std	Y+32, r24	; 0x20
    43b6:	99 a3       	std	Y+33, r25	; 0x21
    43b8:	aa a3       	std	Y+34, r26	; 0x22
    43ba:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    43bc:	68 a1       	ldd	r22, Y+32	; 0x20
    43be:	79 a1       	ldd	r23, Y+33	; 0x21
    43c0:	8a a1       	ldd	r24, Y+34	; 0x22
    43c2:	9b a1       	ldd	r25, Y+35	; 0x23
    43c4:	20 e0       	ldi	r18, 0x00	; 0
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	40 e8       	ldi	r20, 0x80	; 128
    43ca:	5f e3       	ldi	r21, 0x3F	; 63
    43cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43d0:	88 23       	and	r24, r24
    43d2:	2c f4       	brge	.+10     	; 0x43de <LCD_CheckStatusSendCmnd4bit+0x57c>
		__ticks = 1;
    43d4:	81 e0       	ldi	r24, 0x01	; 1
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	9f 8f       	std	Y+31, r25	; 0x1f
    43da:	8e 8f       	std	Y+30, r24	; 0x1e
    43dc:	3f c0       	rjmp	.+126    	; 0x445c <LCD_CheckStatusSendCmnd4bit+0x5fa>
	else if (__tmp > 65535)
    43de:	68 a1       	ldd	r22, Y+32	; 0x20
    43e0:	79 a1       	ldd	r23, Y+33	; 0x21
    43e2:	8a a1       	ldd	r24, Y+34	; 0x22
    43e4:	9b a1       	ldd	r25, Y+35	; 0x23
    43e6:	20 e0       	ldi	r18, 0x00	; 0
    43e8:	3f ef       	ldi	r19, 0xFF	; 255
    43ea:	4f e7       	ldi	r20, 0x7F	; 127
    43ec:	57 e4       	ldi	r21, 0x47	; 71
    43ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43f2:	18 16       	cp	r1, r24
    43f4:	4c f5       	brge	.+82     	; 0x4448 <LCD_CheckStatusSendCmnd4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43f6:	6c a1       	ldd	r22, Y+36	; 0x24
    43f8:	7d a1       	ldd	r23, Y+37	; 0x25
    43fa:	8e a1       	ldd	r24, Y+38	; 0x26
    43fc:	9f a1       	ldd	r25, Y+39	; 0x27
    43fe:	20 e0       	ldi	r18, 0x00	; 0
    4400:	30 e0       	ldi	r19, 0x00	; 0
    4402:	40 e2       	ldi	r20, 0x20	; 32
    4404:	51 e4       	ldi	r21, 0x41	; 65
    4406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    440a:	dc 01       	movw	r26, r24
    440c:	cb 01       	movw	r24, r22
    440e:	bc 01       	movw	r22, r24
    4410:	cd 01       	movw	r24, r26
    4412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4416:	dc 01       	movw	r26, r24
    4418:	cb 01       	movw	r24, r22
    441a:	9f 8f       	std	Y+31, r25	; 0x1f
    441c:	8e 8f       	std	Y+30, r24	; 0x1e
    441e:	0f c0       	rjmp	.+30     	; 0x443e <LCD_CheckStatusSendCmnd4bit+0x5dc>
    4420:	88 ec       	ldi	r24, 0xC8	; 200
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	9d 8f       	std	Y+29, r25	; 0x1d
    4426:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4428:	8c 8d       	ldd	r24, Y+28	; 0x1c
    442a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    442c:	01 97       	sbiw	r24, 0x01	; 1
    442e:	f1 f7       	brne	.-4      	; 0x442c <LCD_CheckStatusSendCmnd4bit+0x5ca>
    4430:	9d 8f       	std	Y+29, r25	; 0x1d
    4432:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4434:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4436:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4438:	01 97       	sbiw	r24, 0x01	; 1
    443a:	9f 8f       	std	Y+31, r25	; 0x1f
    443c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    443e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4440:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4442:	00 97       	sbiw	r24, 0x00	; 0
    4444:	69 f7       	brne	.-38     	; 0x4420 <LCD_CheckStatusSendCmnd4bit+0x5be>
    4446:	24 c0       	rjmp	.+72     	; 0x4490 <LCD_CheckStatusSendCmnd4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4448:	68 a1       	ldd	r22, Y+32	; 0x20
    444a:	79 a1       	ldd	r23, Y+33	; 0x21
    444c:	8a a1       	ldd	r24, Y+34	; 0x22
    444e:	9b a1       	ldd	r25, Y+35	; 0x23
    4450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4454:	dc 01       	movw	r26, r24
    4456:	cb 01       	movw	r24, r22
    4458:	9f 8f       	std	Y+31, r25	; 0x1f
    445a:	8e 8f       	std	Y+30, r24	; 0x1e
    445c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    445e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4460:	9b 8f       	std	Y+27, r25	; 0x1b
    4462:	8a 8f       	std	Y+26, r24	; 0x1a
    4464:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4466:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4468:	01 97       	sbiw	r24, 0x01	; 1
    446a:	f1 f7       	brne	.-4      	; 0x4468 <LCD_CheckStatusSendCmnd4bit+0x606>
    446c:	9b 8f       	std	Y+27, r25	; 0x1b
    446e:	8a 8f       	std	Y+26, r24	; 0x1a
    4470:	0f c0       	rjmp	.+30     	; 0x4490 <LCD_CheckStatusSendCmnd4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4472:	69 a5       	ldd	r22, Y+41	; 0x29
    4474:	7a a5       	ldd	r23, Y+42	; 0x2a
    4476:	8b a5       	ldd	r24, Y+43	; 0x2b
    4478:	9c a5       	ldd	r25, Y+44	; 0x2c
    447a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    447e:	dc 01       	movw	r26, r24
    4480:	cb 01       	movw	r24, r22
    4482:	88 a7       	std	Y+40, r24	; 0x28
    4484:	88 a5       	ldd	r24, Y+40	; 0x28
    4486:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4488:	89 8d       	ldd	r24, Y+25	; 0x19
    448a:	8a 95       	dec	r24
    448c:	f1 f7       	brne	.-4      	; 0x448a <LCD_CheckStatusSendCmnd4bit+0x628>
    448e:	89 8f       	std	Y+25, r24	; 0x19
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    4490:	80 e0       	ldi	r24, 0x00	; 0
    4492:	62 e0       	ldi	r22, 0x02	; 2
    4494:	40 e0       	ldi	r20, 0x00	; 0
    4496:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO__CheckStatusSetPinValue>
    449a:	80 e0       	ldi	r24, 0x00	; 0
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	a0 e8       	ldi	r26, 0x80	; 128
    44a0:	bf e3       	ldi	r27, 0x3F	; 63
    44a2:	8d 8b       	std	Y+21, r24	; 0x15
    44a4:	9e 8b       	std	Y+22, r25	; 0x16
    44a6:	af 8b       	std	Y+23, r26	; 0x17
    44a8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    44aa:	6d 89       	ldd	r22, Y+21	; 0x15
    44ac:	7e 89       	ldd	r23, Y+22	; 0x16
    44ae:	8f 89       	ldd	r24, Y+23	; 0x17
    44b0:	98 8d       	ldd	r25, Y+24	; 0x18
    44b2:	2b ea       	ldi	r18, 0xAB	; 171
    44b4:	3a ea       	ldi	r19, 0xAA	; 170
    44b6:	4a e2       	ldi	r20, 0x2A	; 42
    44b8:	50 e4       	ldi	r21, 0x40	; 64
    44ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44be:	dc 01       	movw	r26, r24
    44c0:	cb 01       	movw	r24, r22
    44c2:	89 8b       	std	Y+17, r24	; 0x11
    44c4:	9a 8b       	std	Y+18, r25	; 0x12
    44c6:	ab 8b       	std	Y+19, r26	; 0x13
    44c8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    44ca:	69 89       	ldd	r22, Y+17	; 0x11
    44cc:	7a 89       	ldd	r23, Y+18	; 0x12
    44ce:	8b 89       	ldd	r24, Y+19	; 0x13
    44d0:	9c 89       	ldd	r25, Y+20	; 0x14
    44d2:	20 e0       	ldi	r18, 0x00	; 0
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	40 e8       	ldi	r20, 0x80	; 128
    44d8:	5f e3       	ldi	r21, 0x3F	; 63
    44da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44de:	88 23       	and	r24, r24
    44e0:	1c f4       	brge	.+6      	; 0x44e8 <LCD_CheckStatusSendCmnd4bit+0x686>
		__ticks = 1;
    44e2:	81 e0       	ldi	r24, 0x01	; 1
    44e4:	88 8b       	std	Y+16, r24	; 0x10
    44e6:	91 c0       	rjmp	.+290    	; 0x460a <LCD_CheckStatusSendCmnd4bit+0x7a8>
	else if (__tmp > 255)
    44e8:	69 89       	ldd	r22, Y+17	; 0x11
    44ea:	7a 89       	ldd	r23, Y+18	; 0x12
    44ec:	8b 89       	ldd	r24, Y+19	; 0x13
    44ee:	9c 89       	ldd	r25, Y+20	; 0x14
    44f0:	20 e0       	ldi	r18, 0x00	; 0
    44f2:	30 e0       	ldi	r19, 0x00	; 0
    44f4:	4f e7       	ldi	r20, 0x7F	; 127
    44f6:	53 e4       	ldi	r21, 0x43	; 67
    44f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44fc:	18 16       	cp	r1, r24
    44fe:	0c f0       	brlt	.+2      	; 0x4502 <LCD_CheckStatusSendCmnd4bit+0x6a0>
    4500:	7b c0       	rjmp	.+246    	; 0x45f8 <LCD_CheckStatusSendCmnd4bit+0x796>
	{
		_delay_ms(__us / 1000.0);
    4502:	6d 89       	ldd	r22, Y+21	; 0x15
    4504:	7e 89       	ldd	r23, Y+22	; 0x16
    4506:	8f 89       	ldd	r24, Y+23	; 0x17
    4508:	98 8d       	ldd	r25, Y+24	; 0x18
    450a:	20 e0       	ldi	r18, 0x00	; 0
    450c:	30 e0       	ldi	r19, 0x00	; 0
    450e:	4a e7       	ldi	r20, 0x7A	; 122
    4510:	54 e4       	ldi	r21, 0x44	; 68
    4512:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4516:	dc 01       	movw	r26, r24
    4518:	cb 01       	movw	r24, r22
    451a:	8c 87       	std	Y+12, r24	; 0x0c
    451c:	9d 87       	std	Y+13, r25	; 0x0d
    451e:	ae 87       	std	Y+14, r26	; 0x0e
    4520:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4522:	6c 85       	ldd	r22, Y+12	; 0x0c
    4524:	7d 85       	ldd	r23, Y+13	; 0x0d
    4526:	8e 85       	ldd	r24, Y+14	; 0x0e
    4528:	9f 85       	ldd	r25, Y+15	; 0x0f
    452a:	20 e0       	ldi	r18, 0x00	; 0
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	4a ef       	ldi	r20, 0xFA	; 250
    4530:	54 e4       	ldi	r21, 0x44	; 68
    4532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4536:	dc 01       	movw	r26, r24
    4538:	cb 01       	movw	r24, r22
    453a:	88 87       	std	Y+8, r24	; 0x08
    453c:	99 87       	std	Y+9, r25	; 0x09
    453e:	aa 87       	std	Y+10, r26	; 0x0a
    4540:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4542:	68 85       	ldd	r22, Y+8	; 0x08
    4544:	79 85       	ldd	r23, Y+9	; 0x09
    4546:	8a 85       	ldd	r24, Y+10	; 0x0a
    4548:	9b 85       	ldd	r25, Y+11	; 0x0b
    454a:	20 e0       	ldi	r18, 0x00	; 0
    454c:	30 e0       	ldi	r19, 0x00	; 0
    454e:	40 e8       	ldi	r20, 0x80	; 128
    4550:	5f e3       	ldi	r21, 0x3F	; 63
    4552:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4556:	88 23       	and	r24, r24
    4558:	2c f4       	brge	.+10     	; 0x4564 <LCD_CheckStatusSendCmnd4bit+0x702>
		__ticks = 1;
    455a:	81 e0       	ldi	r24, 0x01	; 1
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	9f 83       	std	Y+7, r25	; 0x07
    4560:	8e 83       	std	Y+6, r24	; 0x06
    4562:	3f c0       	rjmp	.+126    	; 0x45e2 <LCD_CheckStatusSendCmnd4bit+0x780>
	else if (__tmp > 65535)
    4564:	68 85       	ldd	r22, Y+8	; 0x08
    4566:	79 85       	ldd	r23, Y+9	; 0x09
    4568:	8a 85       	ldd	r24, Y+10	; 0x0a
    456a:	9b 85       	ldd	r25, Y+11	; 0x0b
    456c:	20 e0       	ldi	r18, 0x00	; 0
    456e:	3f ef       	ldi	r19, 0xFF	; 255
    4570:	4f e7       	ldi	r20, 0x7F	; 127
    4572:	57 e4       	ldi	r21, 0x47	; 71
    4574:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4578:	18 16       	cp	r1, r24
    457a:	4c f5       	brge	.+82     	; 0x45ce <LCD_CheckStatusSendCmnd4bit+0x76c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    457c:	6c 85       	ldd	r22, Y+12	; 0x0c
    457e:	7d 85       	ldd	r23, Y+13	; 0x0d
    4580:	8e 85       	ldd	r24, Y+14	; 0x0e
    4582:	9f 85       	ldd	r25, Y+15	; 0x0f
    4584:	20 e0       	ldi	r18, 0x00	; 0
    4586:	30 e0       	ldi	r19, 0x00	; 0
    4588:	40 e2       	ldi	r20, 0x20	; 32
    458a:	51 e4       	ldi	r21, 0x41	; 65
    458c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4590:	dc 01       	movw	r26, r24
    4592:	cb 01       	movw	r24, r22
    4594:	bc 01       	movw	r22, r24
    4596:	cd 01       	movw	r24, r26
    4598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    459c:	dc 01       	movw	r26, r24
    459e:	cb 01       	movw	r24, r22
    45a0:	9f 83       	std	Y+7, r25	; 0x07
    45a2:	8e 83       	std	Y+6, r24	; 0x06
    45a4:	0f c0       	rjmp	.+30     	; 0x45c4 <LCD_CheckStatusSendCmnd4bit+0x762>
    45a6:	88 ec       	ldi	r24, 0xC8	; 200
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	9d 83       	std	Y+5, r25	; 0x05
    45ac:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    45ae:	8c 81       	ldd	r24, Y+4	; 0x04
    45b0:	9d 81       	ldd	r25, Y+5	; 0x05
    45b2:	01 97       	sbiw	r24, 0x01	; 1
    45b4:	f1 f7       	brne	.-4      	; 0x45b2 <LCD_CheckStatusSendCmnd4bit+0x750>
    45b6:	9d 83       	std	Y+5, r25	; 0x05
    45b8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45ba:	8e 81       	ldd	r24, Y+6	; 0x06
    45bc:	9f 81       	ldd	r25, Y+7	; 0x07
    45be:	01 97       	sbiw	r24, 0x01	; 1
    45c0:	9f 83       	std	Y+7, r25	; 0x07
    45c2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45c4:	8e 81       	ldd	r24, Y+6	; 0x06
    45c6:	9f 81       	ldd	r25, Y+7	; 0x07
    45c8:	00 97       	sbiw	r24, 0x00	; 0
    45ca:	69 f7       	brne	.-38     	; 0x45a6 <LCD_CheckStatusSendCmnd4bit+0x744>
    45cc:	24 c0       	rjmp	.+72     	; 0x4616 <LCD_CheckStatusSendCmnd4bit+0x7b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45ce:	68 85       	ldd	r22, Y+8	; 0x08
    45d0:	79 85       	ldd	r23, Y+9	; 0x09
    45d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    45d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    45d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45da:	dc 01       	movw	r26, r24
    45dc:	cb 01       	movw	r24, r22
    45de:	9f 83       	std	Y+7, r25	; 0x07
    45e0:	8e 83       	std	Y+6, r24	; 0x06
    45e2:	8e 81       	ldd	r24, Y+6	; 0x06
    45e4:	9f 81       	ldd	r25, Y+7	; 0x07
    45e6:	9b 83       	std	Y+3, r25	; 0x03
    45e8:	8a 83       	std	Y+2, r24	; 0x02
    45ea:	8a 81       	ldd	r24, Y+2	; 0x02
    45ec:	9b 81       	ldd	r25, Y+3	; 0x03
    45ee:	01 97       	sbiw	r24, 0x01	; 1
    45f0:	f1 f7       	brne	.-4      	; 0x45ee <LCD_CheckStatusSendCmnd4bit+0x78c>
    45f2:	9b 83       	std	Y+3, r25	; 0x03
    45f4:	8a 83       	std	Y+2, r24	; 0x02
    45f6:	0f c0       	rjmp	.+30     	; 0x4616 <LCD_CheckStatusSendCmnd4bit+0x7b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    45f8:	69 89       	ldd	r22, Y+17	; 0x11
    45fa:	7a 89       	ldd	r23, Y+18	; 0x12
    45fc:	8b 89       	ldd	r24, Y+19	; 0x13
    45fe:	9c 89       	ldd	r25, Y+20	; 0x14
    4600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4604:	dc 01       	movw	r26, r24
    4606:	cb 01       	movw	r24, r22
    4608:	88 8b       	std	Y+16, r24	; 0x10
    460a:	88 89       	ldd	r24, Y+16	; 0x10
    460c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    460e:	89 81       	ldd	r24, Y+1	; 0x01
    4610:	8a 95       	dec	r24
    4612:	f1 f7       	brne	.-4      	; 0x4610 <LCD_CheckStatusSendCmnd4bit+0x7ae>
    4614:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    4616:	fe 01       	movw	r30, r28
    4618:	ef 59       	subi	r30, 0x9F	; 159
    461a:	ff 4f       	sbci	r31, 0xFF	; 255
    461c:	80 81       	ld	r24, Z
}
    461e:	ce 59       	subi	r28, 0x9E	; 158
    4620:	df 4f       	sbci	r29, 0xFF	; 255
    4622:	0f b6       	in	r0, 0x3f	; 63
    4624:	f8 94       	cli
    4626:	de bf       	out	0x3e, r29	; 62
    4628:	0f be       	out	0x3f, r0	; 63
    462a:	cd bf       	out	0x3d, r28	; 61
    462c:	cf 91       	pop	r28
    462e:	df 91       	pop	r29
    4630:	1f 91       	pop	r17
    4632:	0f 91       	pop	r16
    4634:	08 95       	ret

00004636 <main>:
#include"LCD_interface.h"
#include"KPAD_interface.h"



int main(void ){
    4636:	df 93       	push	r29
    4638:	cf 93       	push	r28
    463a:	0f 92       	push	r0
    463c:	cd b7       	in	r28, 0x3d	; 61
    463e:	de b7       	in	r29, 0x3e	; 62

_uint8 Local__Uint8Var;

DIO__CheckStatusInit();
    4640:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO__CheckStatusInit>
LCD_VoidInit4bit();
    4644:	0e 94 75 18 	call	0x30ea	; 0x30ea <LCD_VoidInit4bit>

while(TRUE)
{

KPAD_CheckStatusGetKey(&Local__Uint8Var);
    4648:	ce 01       	movw	r24, r28
    464a:	01 96       	adiw	r24, 0x01	; 1
    464c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <KPAD_CheckStatusGetKey>

 if(Local__Uint8Var != KPAD__UINT8_KEY_NOT_PRESSED)
    4650:	89 81       	ldd	r24, Y+1	; 0x01
    4652:	8f 3f       	cpi	r24, 0xFF	; 255
    4654:	c9 f3       	breq	.-14     	; 0x4648 <main+0x12>
 {

	 LCD_CheckStatusSendChar4bit(Local__Uint8Var);
    4656:	89 81       	ldd	r24, Y+1	; 0x01
    4658:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_CheckStatusSendChar4bit>
     if(Local__Uint8Var == 'D')
    465c:	89 81       	ldd	r24, Y+1	; 0x01
    465e:	84 34       	cpi	r24, 0x44	; 68
    4660:	99 f7       	brne	.-26     	; 0x4648 <main+0x12>
     {
	           LCD_VoidClearDisplay();
    4662:	0e 94 88 13 	call	0x2710	; 0x2710 <LCD_VoidClearDisplay>
    4666:	f0 cf       	rjmp	.-32     	; 0x4648 <main+0x12>

00004668 <__mulsi3>:
    4668:	62 9f       	mul	r22, r18
    466a:	d0 01       	movw	r26, r0
    466c:	73 9f       	mul	r23, r19
    466e:	f0 01       	movw	r30, r0
    4670:	82 9f       	mul	r24, r18
    4672:	e0 0d       	add	r30, r0
    4674:	f1 1d       	adc	r31, r1
    4676:	64 9f       	mul	r22, r20
    4678:	e0 0d       	add	r30, r0
    467a:	f1 1d       	adc	r31, r1
    467c:	92 9f       	mul	r25, r18
    467e:	f0 0d       	add	r31, r0
    4680:	83 9f       	mul	r24, r19
    4682:	f0 0d       	add	r31, r0
    4684:	74 9f       	mul	r23, r20
    4686:	f0 0d       	add	r31, r0
    4688:	65 9f       	mul	r22, r21
    468a:	f0 0d       	add	r31, r0
    468c:	99 27       	eor	r25, r25
    468e:	72 9f       	mul	r23, r18
    4690:	b0 0d       	add	r27, r0
    4692:	e1 1d       	adc	r30, r1
    4694:	f9 1f       	adc	r31, r25
    4696:	63 9f       	mul	r22, r19
    4698:	b0 0d       	add	r27, r0
    469a:	e1 1d       	adc	r30, r1
    469c:	f9 1f       	adc	r31, r25
    469e:	bd 01       	movw	r22, r26
    46a0:	cf 01       	movw	r24, r30
    46a2:	11 24       	eor	r1, r1
    46a4:	08 95       	ret

000046a6 <__udivmodsi4>:
    46a6:	a1 e2       	ldi	r26, 0x21	; 33
    46a8:	1a 2e       	mov	r1, r26
    46aa:	aa 1b       	sub	r26, r26
    46ac:	bb 1b       	sub	r27, r27
    46ae:	fd 01       	movw	r30, r26
    46b0:	0d c0       	rjmp	.+26     	; 0x46cc <__udivmodsi4_ep>

000046b2 <__udivmodsi4_loop>:
    46b2:	aa 1f       	adc	r26, r26
    46b4:	bb 1f       	adc	r27, r27
    46b6:	ee 1f       	adc	r30, r30
    46b8:	ff 1f       	adc	r31, r31
    46ba:	a2 17       	cp	r26, r18
    46bc:	b3 07       	cpc	r27, r19
    46be:	e4 07       	cpc	r30, r20
    46c0:	f5 07       	cpc	r31, r21
    46c2:	20 f0       	brcs	.+8      	; 0x46cc <__udivmodsi4_ep>
    46c4:	a2 1b       	sub	r26, r18
    46c6:	b3 0b       	sbc	r27, r19
    46c8:	e4 0b       	sbc	r30, r20
    46ca:	f5 0b       	sbc	r31, r21

000046cc <__udivmodsi4_ep>:
    46cc:	66 1f       	adc	r22, r22
    46ce:	77 1f       	adc	r23, r23
    46d0:	88 1f       	adc	r24, r24
    46d2:	99 1f       	adc	r25, r25
    46d4:	1a 94       	dec	r1
    46d6:	69 f7       	brne	.-38     	; 0x46b2 <__udivmodsi4_loop>
    46d8:	60 95       	com	r22
    46da:	70 95       	com	r23
    46dc:	80 95       	com	r24
    46de:	90 95       	com	r25
    46e0:	9b 01       	movw	r18, r22
    46e2:	ac 01       	movw	r20, r24
    46e4:	bd 01       	movw	r22, r26
    46e6:	cf 01       	movw	r24, r30
    46e8:	08 95       	ret

000046ea <__prologue_saves__>:
    46ea:	2f 92       	push	r2
    46ec:	3f 92       	push	r3
    46ee:	4f 92       	push	r4
    46f0:	5f 92       	push	r5
    46f2:	6f 92       	push	r6
    46f4:	7f 92       	push	r7
    46f6:	8f 92       	push	r8
    46f8:	9f 92       	push	r9
    46fa:	af 92       	push	r10
    46fc:	bf 92       	push	r11
    46fe:	cf 92       	push	r12
    4700:	df 92       	push	r13
    4702:	ef 92       	push	r14
    4704:	ff 92       	push	r15
    4706:	0f 93       	push	r16
    4708:	1f 93       	push	r17
    470a:	cf 93       	push	r28
    470c:	df 93       	push	r29
    470e:	cd b7       	in	r28, 0x3d	; 61
    4710:	de b7       	in	r29, 0x3e	; 62
    4712:	ca 1b       	sub	r28, r26
    4714:	db 0b       	sbc	r29, r27
    4716:	0f b6       	in	r0, 0x3f	; 63
    4718:	f8 94       	cli
    471a:	de bf       	out	0x3e, r29	; 62
    471c:	0f be       	out	0x3f, r0	; 63
    471e:	cd bf       	out	0x3d, r28	; 61
    4720:	09 94       	ijmp

00004722 <__epilogue_restores__>:
    4722:	2a 88       	ldd	r2, Y+18	; 0x12
    4724:	39 88       	ldd	r3, Y+17	; 0x11
    4726:	48 88       	ldd	r4, Y+16	; 0x10
    4728:	5f 84       	ldd	r5, Y+15	; 0x0f
    472a:	6e 84       	ldd	r6, Y+14	; 0x0e
    472c:	7d 84       	ldd	r7, Y+13	; 0x0d
    472e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4730:	9b 84       	ldd	r9, Y+11	; 0x0b
    4732:	aa 84       	ldd	r10, Y+10	; 0x0a
    4734:	b9 84       	ldd	r11, Y+9	; 0x09
    4736:	c8 84       	ldd	r12, Y+8	; 0x08
    4738:	df 80       	ldd	r13, Y+7	; 0x07
    473a:	ee 80       	ldd	r14, Y+6	; 0x06
    473c:	fd 80       	ldd	r15, Y+5	; 0x05
    473e:	0c 81       	ldd	r16, Y+4	; 0x04
    4740:	1b 81       	ldd	r17, Y+3	; 0x03
    4742:	aa 81       	ldd	r26, Y+2	; 0x02
    4744:	b9 81       	ldd	r27, Y+1	; 0x01
    4746:	ce 0f       	add	r28, r30
    4748:	d1 1d       	adc	r29, r1
    474a:	0f b6       	in	r0, 0x3f	; 63
    474c:	f8 94       	cli
    474e:	de bf       	out	0x3e, r29	; 62
    4750:	0f be       	out	0x3f, r0	; 63
    4752:	cd bf       	out	0x3d, r28	; 61
    4754:	ed 01       	movw	r28, r26
    4756:	08 95       	ret

00004758 <_exit>:
    4758:	f8 94       	cli

0000475a <__stop_program>:
    475a:	ff cf       	rjmp	.-2      	; 0x475a <__stop_program>
