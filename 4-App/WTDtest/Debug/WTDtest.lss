
WTDtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004eec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000164  00800060  00004eec  00004f80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  008001c4  008001c4  000050e4  2**0
                  ALLOC
  3 .stab         000041d0  00000000  00000000  000050e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014f4  00000000  00000000  000092b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000a948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000ab3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000cf45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000e2cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f4a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000f664  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000f95a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000102c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__vector_1>
       8:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <__vector_2>
       c:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 1d 25 	jmp	0x4a3a	; 0x4a3a <__vector_10>
      2c:	0c 94 c0 24 	jmp	0x4980	; 0x4980 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3c       	cpi	r26, 0xC4	; 196
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ec       	ldi	r26, 0xC4	; 196
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3e       	cpi	r26, 0xE9	; 233
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <main>
      8a:	0c 94 74 27 	jmp	0x4ee8	; 0x4ee8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3d 27 	jmp	0x4e7a	; 0x4e7a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e7       	ldi	r26, 0x73	; 115
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 59 27 	jmp	0x4eb2	; 0x4eb2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 49 27 	jmp	0x4e92	; 0x4e92 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 65 27 	jmp	0x4eca	; 0x4eca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 49 27 	jmp	0x4e92	; 0x4e92 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 65 27 	jmp	0x4eca	; 0x4eca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3d 27 	jmp	0x4e7a	; 0x4e7a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e7       	ldi	r24, 0x73	; 115
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 59 27 	jmp	0x4eb2	; 0x4eb2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 45 27 	jmp	0x4e8a	; 0x4e8a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e7       	ldi	r22, 0x73	; 115
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 61 27 	jmp	0x4ec2	; 0x4ec2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 49 27 	jmp	0x4e92	; 0x4e92 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 65 27 	jmp	0x4eca	; 0x4eca <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 49 27 	jmp	0x4e92	; 0x4e92 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 65 27 	jmp	0x4eca	; 0x4eca <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 49 27 	jmp	0x4e92	; 0x4e92 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 65 27 	jmp	0x4eca	; 0x4eca <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4d 27 	jmp	0x4e9a	; 0x4e9a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 69 27 	jmp	0x4ed2	; 0x4ed2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 45 27 	jmp	0x4e8a	; 0x4e8a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 61 27 	jmp	0x4ec2	; 0x4ec2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e5 58       	subi	r30, 0x85	; 133
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DIO_VoidInit>:

/* HAL */

/* Defination Of Function  */
Void DIO_VoidInit(Void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62

        /* intial direction */

        DDRA__UINT8_REG = CONC(DIO__UINT8_PA7_INITIAL_DIRECTION, DIO__UINT8_PA6_INITIAL_DIRECTION, DIO__UINT8_PA5_INITIAL_DIRECTION, DIO__UINT8_PA4_INITIAL_DIRECTION, DIO__UINT8_PA3_INITIAL_DIRECTION, DIO__UINT8_PA2_INITIAL_DIRECTION, DIO__UINT8_PA1_INITIAL_DIRECTION, DIO__UINT8_PA0_INITIAL_DIRECTION);
     e36:	ea e3       	ldi	r30, 0x3A	; 58
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	10 82       	st	Z, r1
        DDRB__UINT8_REG = CONC(DIO__UINT8_PB7_INITIAL_DIRECTION, DIO__UINT8_PB6_INITIAL_DIRECTION, DIO__UINT8_PB5_INITIAL_DIRECTION, DIO__UINT8_PB4_INITIAL_DIRECTION, DIO__UINT8_PB3_INITIAL_DIRECTION, DIO__UINT8_PB2_INITIAL_DIRECTION, DIO__UINT8_PB1_INITIAL_DIRECTION, DIO__UINT8_PB0_INITIAL_DIRECTION);
     e3c:	e7 e3       	ldi	r30, 0x37	; 55
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	8f ef       	ldi	r24, 0xFF	; 255
     e42:	80 83       	st	Z, r24
        DDRC__UINT8_REG = CONC(DIO__UINT8_PC7_INITIAL_DIRECTION, DIO__UINT8_PC6_INITIAL_DIRECTION, DIO__UINT8_PC5_INITIAL_DIRECTION, DIO__UINT8_PC4_INITIAL_DIRECTION, DIO__UINT8_PC3_INITIAL_DIRECTION, DIO__UINT8_PC2_INITIAL_DIRECTION, DIO__UINT8_PC1_INITIAL_DIRECTION, DIO__UINT8_PC0_INITIAL_DIRECTION);
     e44:	e4 e3       	ldi	r30, 0x34	; 52
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	8f ef       	ldi	r24, 0xFF	; 255
     e4a:	80 83       	st	Z, r24
        DDRD__UINT8_REG = CONC(DIO__UINT8_PD7_INITIAL_DIRECTION, DIO__UINT8_PD6_INITIAL_DIRECTION, DIO__UINT8_PD5_INITIAL_DIRECTION, DIO__UINT8_PD4_INITIAL_DIRECTION, DIO__UINT8_PD3_INITIAL_DIRECTION, DIO__UINT8_PD2_INITIAL_DIRECTION, DIO__UINT8_PD1_INITIAL_DIRECTION, DIO__UINT8_PD0_INITIAL_DIRECTION);
     e4c:	e1 e3       	ldi	r30, 0x31	; 49
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	10 82       	st	Z, r1

        /* initial Value */

        PORTA__UINT8_REG = CONC(DIO__UINT8_PA7_INITIAL_VALUE, DIO__UINT8_PA6_INITIAL_VALUE, DIO__UINT8_PA5_INITIAL_VALUE, DIO__UINT8_PA4_INITIAL_VALUE, DIO__UINT8_PA3_INITIAL_VALUE, DIO__UINT8_PA2_INITIAL_VALUE, DIO__UINT8_PA1_INITIAL_VALUE, DIO__UINT8_PA0_INITIAL_VALUE);
     e52:	eb e3       	ldi	r30, 0x3B	; 59
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	10 82       	st	Z, r1
        PORTB__UINT8_REG = CONC(DIO__UINT8_PB7_INITIAL_VALUE, DIO__UINT8_PB6_INITIAL_VALUE, DIO__UINT8_PB5_INITIAL_VALUE, DIO__UINT8_PB4_INITIAL_VALUE, DIO__UINT8_PB3_INITIAL_VALUE, DIO__UINT8_PB2_INITIAL_VALUE, DIO__UINT8_PB1_INITIAL_VALUE, DIO__UINT8_PB0_INITIAL_VALUE);
     e58:	e8 e3       	ldi	r30, 0x38	; 56
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	10 82       	st	Z, r1
        PORTC__UINT8_REG = CONC(DIO__UINT8_PC7_INITIAL_VALUE, DIO__UINT8_PC6_INITIAL_VALUE, DIO__UINT8_PC5_INITIAL_VALUE, DIO__UINT8_PC4_INITIAL_VALUE, DIO__UINT8_PC3_INITIAL_VALUE, DIO__UINT8_PC2_INITIAL_VALUE, DIO__UINT8_PC1_INITIAL_VALUE, DIO__UINT8_PC0_INITIAL_VALUE);
     e5e:	e5 e3       	ldi	r30, 0x35	; 53
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	10 82       	st	Z, r1
        PORTD__UINT8_REG = CONC(DIO__UINT8_PD7_INITIAL_VALUE, DIO__UINT8_PD6_INITIAL_VALUE, DIO__UINT8_PD5_INITIAL_VALUE, DIO__UINT8_PD4_INITIAL_VALUE, DIO__UINT8_PD3_INITIAL_VALUE, DIO__UINT8_PD2_INITIAL_VALUE, DIO__UINT8_PD1_INITIAL_VALUE, DIO__UINT8_PD0_INITIAL_VALUE);
     e64:	e2 e3       	ldi	r30, 0x32	; 50
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	10 82       	st	Z, r1
}
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <DIO__CheckStatusSetPinDirection>:

CheckStatus DIO__CheckStatusSetPinDirection(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 Copy__uint8PinDirection)
{
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	2f 97       	sbiw	r28, 0x0f	; 15
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	8a 83       	std	Y+2, r24	; 0x02
     e86:	6b 83       	std	Y+3, r22	; 0x03
     e88:	4c 83       	std	Y+4, r20	; 0x04
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
     e8a:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pin  Direction
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && ((Copy__uint8PinDirection == DIO__UINT8_OUTPUT) || (Copy__uint8PinDirection == DIO__UINT8_INPUT)))
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	84 30       	cpi	r24, 0x04	; 4
     e90:	08 f0       	brcs	.+2      	; 0xe94 <DIO__CheckStatusSetPinDirection+0x24>
     e92:	0e c1       	rjmp	.+540    	; 0x10b0 <DIO__CheckStatusSetPinDirection+0x240>
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	88 30       	cpi	r24, 0x08	; 8
     e98:	08 f0       	brcs	.+2      	; 0xe9c <DIO__CheckStatusSetPinDirection+0x2c>
     e9a:	0a c1       	rjmp	.+532    	; 0x10b0 <DIO__CheckStatusSetPinDirection+0x240>
     e9c:	8c 81       	ldd	r24, Y+4	; 0x04
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	21 f0       	breq	.+8      	; 0xeaa <DIO__CheckStatusSetPinDirection+0x3a>
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	88 23       	and	r24, r24
     ea6:	09 f0       	breq	.+2      	; 0xeaa <DIO__CheckStatusSetPinDirection+0x3a>
     ea8:	03 c1       	rjmp	.+518    	; 0x10b0 <DIO__CheckStatusSetPinDirection+0x240>
        {
                switch (Copy__uint8PortId)
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	3f 87       	std	Y+15, r19	; 0x0f
     eb2:	2e 87       	std	Y+14, r18	; 0x0e
     eb4:	8e 85       	ldd	r24, Y+14	; 0x0e
     eb6:	9f 85       	ldd	r25, Y+15	; 0x0f
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	91 05       	cpc	r25, r1
     ebc:	09 f4       	brne	.+2      	; 0xec0 <DIO__CheckStatusSetPinDirection+0x50>
     ebe:	4f c0       	rjmp	.+158    	; 0xf5e <DIO__CheckStatusSetPinDirection+0xee>
     ec0:	2e 85       	ldd	r18, Y+14	; 0x0e
     ec2:	3f 85       	ldd	r19, Y+15	; 0x0f
     ec4:	22 30       	cpi	r18, 0x02	; 2
     ec6:	31 05       	cpc	r19, r1
     ec8:	2c f4       	brge	.+10     	; 0xed4 <DIO__CheckStatusSetPinDirection+0x64>
     eca:	8e 85       	ldd	r24, Y+14	; 0x0e
     ecc:	9f 85       	ldd	r25, Y+15	; 0x0f
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	71 f0       	breq	.+28     	; 0xeee <DIO__CheckStatusSetPinDirection+0x7e>
     ed2:	eb c0       	rjmp	.+470    	; 0x10aa <DIO__CheckStatusSetPinDirection+0x23a>
     ed4:	2e 85       	ldd	r18, Y+14	; 0x0e
     ed6:	3f 85       	ldd	r19, Y+15	; 0x0f
     ed8:	22 30       	cpi	r18, 0x02	; 2
     eda:	31 05       	cpc	r19, r1
     edc:	09 f4       	brne	.+2      	; 0xee0 <DIO__CheckStatusSetPinDirection+0x70>
     ede:	77 c0       	rjmp	.+238    	; 0xfce <DIO__CheckStatusSetPinDirection+0x15e>
     ee0:	8e 85       	ldd	r24, Y+14	; 0x0e
     ee2:	9f 85       	ldd	r25, Y+15	; 0x0f
     ee4:	83 30       	cpi	r24, 0x03	; 3
     ee6:	91 05       	cpc	r25, r1
     ee8:	09 f4       	brne	.+2      	; 0xeec <DIO__CheckStatusSetPinDirection+0x7c>
     eea:	a9 c0       	rjmp	.+338    	; 0x103e <DIO__CheckStatusSetPinDirection+0x1ce>
     eec:	de c0       	rjmp	.+444    	; 0x10aa <DIO__CheckStatusSetPinDirection+0x23a>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PinDirection)
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	3d 87       	std	Y+13, r19	; 0x0d
     ef6:	2c 87       	std	Y+12, r18	; 0x0c
     ef8:	8c 85       	ldd	r24, Y+12	; 0x0c
     efa:	9d 85       	ldd	r25, Y+13	; 0x0d
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	d1 f0       	breq	.+52     	; 0xf34 <DIO__CheckStatusSetPinDirection+0xc4>
     f00:	2c 85       	ldd	r18, Y+12	; 0x0c
     f02:	3d 85       	ldd	r19, Y+13	; 0x0d
     f04:	21 30       	cpi	r18, 0x01	; 1
     f06:	31 05       	cpc	r19, r1
     f08:	09 f0       	breq	.+2      	; 0xf0c <DIO__CheckStatusSetPinDirection+0x9c>
     f0a:	cf c0       	rjmp	.+414    	; 0x10aa <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRA__UINT8_REG, Copy__uint8PinId);
     f0c:	aa e3       	ldi	r26, 0x3A	; 58
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	ea e3       	ldi	r30, 0x3A	; 58
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO__CheckStatusSetPinDirection+0xba>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO__CheckStatusSetPinDirection+0xb6>
     f2e:	84 2b       	or	r24, r20
     f30:	8c 93       	st	X, r24
     f32:	bb c0       	rjmp	.+374    	; 0x10aa <DIO__CheckStatusSetPinDirection+0x23a>
                                break;

                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRA__UINT8_REG, Copy__uint8PinId);
     f34:	aa e3       	ldi	r26, 0x3A	; 58
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	ea e3       	ldi	r30, 0x3A	; 58
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	48 2f       	mov	r20, r24
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 2e       	mov	r0, r18
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <DIO__CheckStatusSetPinDirection+0xe2>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <DIO__CheckStatusSetPinDirection+0xde>
     f56:	80 95       	com	r24
     f58:	84 23       	and	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	a6 c0       	rjmp	.+332    	; 0x10aa <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PinDirection)
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	3b 87       	std	Y+11, r19	; 0x0b
     f66:	2a 87       	std	Y+10, r18	; 0x0a
     f68:	8a 85       	ldd	r24, Y+10	; 0x0a
     f6a:	9b 85       	ldd	r25, Y+11	; 0x0b
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	d1 f0       	breq	.+52     	; 0xfa4 <DIO__CheckStatusSetPinDirection+0x134>
     f70:	2a 85       	ldd	r18, Y+10	; 0x0a
     f72:	3b 85       	ldd	r19, Y+11	; 0x0b
     f74:	21 30       	cpi	r18, 0x01	; 1
     f76:	31 05       	cpc	r19, r1
     f78:	09 f0       	breq	.+2      	; 0xf7c <DIO__CheckStatusSetPinDirection+0x10c>
     f7a:	97 c0       	rjmp	.+302    	; 0x10aa <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRB__UINT8_REG, Copy__uint8PinId);
     f7c:	a7 e3       	ldi	r26, 0x37	; 55
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e7 e3       	ldi	r30, 0x37	; 55
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO__CheckStatusSetPinDirection+0x12a>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO__CheckStatusSetPinDirection+0x126>
     f9e:	84 2b       	or	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	83 c0       	rjmp	.+262    	; 0x10aa <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRB__UINT8_REG, Copy__uint8PinId);
     fa4:	a7 e3       	ldi	r26, 0x37	; 55
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e7 e3       	ldi	r30, 0x37	; 55
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DIO__CheckStatusSetPinDirection+0x152>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DIO__CheckStatusSetPinDirection+0x14e>
     fc6:	80 95       	com	r24
     fc8:	84 23       	and	r24, r20
     fca:	8c 93       	st	X, r24
     fcc:	6e c0       	rjmp	.+220    	; 0x10aa <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PinDirection)
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	39 87       	std	Y+9, r19	; 0x09
     fd6:	28 87       	std	Y+8, r18	; 0x08
     fd8:	88 85       	ldd	r24, Y+8	; 0x08
     fda:	99 85       	ldd	r25, Y+9	; 0x09
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	d1 f0       	breq	.+52     	; 0x1014 <DIO__CheckStatusSetPinDirection+0x1a4>
     fe0:	28 85       	ldd	r18, Y+8	; 0x08
     fe2:	39 85       	ldd	r19, Y+9	; 0x09
     fe4:	21 30       	cpi	r18, 0x01	; 1
     fe6:	31 05       	cpc	r19, r1
     fe8:	09 f0       	breq	.+2      	; 0xfec <DIO__CheckStatusSetPinDirection+0x17c>
     fea:	5f c0       	rjmp	.+190    	; 0x10aa <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRC__UINT8_REG, Copy__uint8PinId);
     fec:	a4 e3       	ldi	r26, 0x34	; 52
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e4 e3       	ldi	r30, 0x34	; 52
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO__CheckStatusSetPinDirection+0x19a>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <DIO__CheckStatusSetPinDirection+0x196>
    100e:	84 2b       	or	r24, r20
    1010:	8c 93       	st	X, r24
    1012:	4b c0       	rjmp	.+150    	; 0x10aa <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRC__UINT8_REG, Copy__uint8PinId);
    1014:	a4 e3       	ldi	r26, 0x34	; 52
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e4 e3       	ldi	r30, 0x34	; 52
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <DIO__CheckStatusSetPinDirection+0x1c2>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <DIO__CheckStatusSetPinDirection+0x1be>
    1036:	80 95       	com	r24
    1038:	84 23       	and	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	36 c0       	rjmp	.+108    	; 0x10aa <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PinDirection)
    103e:	8c 81       	ldd	r24, Y+4	; 0x04
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3f 83       	std	Y+7, r19	; 0x07
    1046:	2e 83       	std	Y+6, r18	; 0x06
    1048:	8e 81       	ldd	r24, Y+6	; 0x06
    104a:	9f 81       	ldd	r25, Y+7	; 0x07
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	c9 f0       	breq	.+50     	; 0x1082 <DIO__CheckStatusSetPinDirection+0x212>
    1050:	2e 81       	ldd	r18, Y+6	; 0x06
    1052:	3f 81       	ldd	r19, Y+7	; 0x07
    1054:	21 30       	cpi	r18, 0x01	; 1
    1056:	31 05       	cpc	r19, r1
    1058:	41 f5       	brne	.+80     	; 0x10aa <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRD__UINT8_REG, Copy__uint8PinId);
    105a:	a1 e3       	ldi	r26, 0x31	; 49
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e1 e3       	ldi	r30, 0x31	; 49
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <DIO__CheckStatusSetPinDirection+0x208>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <DIO__CheckStatusSetPinDirection+0x204>
    107c:	84 2b       	or	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	14 c0       	rjmp	.+40     	; 0x10aa <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRD__UINT8_REG, Copy__uint8PinId);
    1082:	a1 e3       	ldi	r26, 0x31	; 49
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e1 e3       	ldi	r30, 0x31	; 49
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO__CheckStatusSetPinDirection+0x230>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO__CheckStatusSetPinDirection+0x22c>
    10a4:	80 95       	com	r24
    10a6:	84 23       	and	r24, r20
    10a8:	8c 93       	st	X, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    10aa:	39 81       	ldd	r19, Y+1	; 0x01
    10ac:	3d 83       	std	Y+5, r19	; 0x05
    10ae:	04 c0       	rjmp	.+8      	; 0x10b8 <DIO__CheckStatusSetPinDirection+0x248>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	8d 83       	std	Y+5, r24	; 0x05
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    10ba:	2f 96       	adiw	r28, 0x0f	; 15
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <DIO__CheckStatusSetPinValue>:

CheckStatus DIO__CheckStatusSetPinValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 Copy__uint8PinValue)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	2f 97       	sbiw	r28, 0x0f	; 15
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	8a 83       	std	Y+2, r24	; 0x02
    10e2:	6b 83       	std	Y+3, r22	; 0x03
    10e4:	4c 83       	std	Y+4, r20	; 0x04
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    10e6:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pin  Value 
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && ((Copy__uint8PinValue == DIO__UINT8_HIGH) || (Copy__uint8PinValue == DIO__UINT8_LOW)))
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	84 30       	cpi	r24, 0x04	; 4
    10ec:	08 f0       	brcs	.+2      	; 0x10f0 <DIO__CheckStatusSetPinValue+0x24>
    10ee:	0e c1       	rjmp	.+540    	; 0x130c <DIO__CheckStatusSetPinValue+0x240>
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	88 30       	cpi	r24, 0x08	; 8
    10f4:	08 f0       	brcs	.+2      	; 0x10f8 <DIO__CheckStatusSetPinValue+0x2c>
    10f6:	0a c1       	rjmp	.+532    	; 0x130c <DIO__CheckStatusSetPinValue+0x240>
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	21 f0       	breq	.+8      	; 0x1106 <DIO__CheckStatusSetPinValue+0x3a>
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	88 23       	and	r24, r24
    1102:	09 f0       	breq	.+2      	; 0x1106 <DIO__CheckStatusSetPinValue+0x3a>
    1104:	03 c1       	rjmp	.+518    	; 0x130c <DIO__CheckStatusSetPinValue+0x240>
        {
                switch (Copy__uint8PortId)
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	3f 87       	std	Y+15, r19	; 0x0f
    110e:	2e 87       	std	Y+14, r18	; 0x0e
    1110:	8e 85       	ldd	r24, Y+14	; 0x0e
    1112:	9f 85       	ldd	r25, Y+15	; 0x0f
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	91 05       	cpc	r25, r1
    1118:	09 f4       	brne	.+2      	; 0x111c <DIO__CheckStatusSetPinValue+0x50>
    111a:	4f c0       	rjmp	.+158    	; 0x11ba <DIO__CheckStatusSetPinValue+0xee>
    111c:	2e 85       	ldd	r18, Y+14	; 0x0e
    111e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1120:	22 30       	cpi	r18, 0x02	; 2
    1122:	31 05       	cpc	r19, r1
    1124:	2c f4       	brge	.+10     	; 0x1130 <DIO__CheckStatusSetPinValue+0x64>
    1126:	8e 85       	ldd	r24, Y+14	; 0x0e
    1128:	9f 85       	ldd	r25, Y+15	; 0x0f
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	71 f0       	breq	.+28     	; 0x114a <DIO__CheckStatusSetPinValue+0x7e>
    112e:	eb c0       	rjmp	.+470    	; 0x1306 <DIO__CheckStatusSetPinValue+0x23a>
    1130:	2e 85       	ldd	r18, Y+14	; 0x0e
    1132:	3f 85       	ldd	r19, Y+15	; 0x0f
    1134:	22 30       	cpi	r18, 0x02	; 2
    1136:	31 05       	cpc	r19, r1
    1138:	09 f4       	brne	.+2      	; 0x113c <DIO__CheckStatusSetPinValue+0x70>
    113a:	77 c0       	rjmp	.+238    	; 0x122a <DIO__CheckStatusSetPinValue+0x15e>
    113c:	8e 85       	ldd	r24, Y+14	; 0x0e
    113e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1140:	83 30       	cpi	r24, 0x03	; 3
    1142:	91 05       	cpc	r25, r1
    1144:	09 f4       	brne	.+2      	; 0x1148 <DIO__CheckStatusSetPinValue+0x7c>
    1146:	a9 c0       	rjmp	.+338    	; 0x129a <DIO__CheckStatusSetPinValue+0x1ce>
    1148:	de c0       	rjmp	.+444    	; 0x1306 <DIO__CheckStatusSetPinValue+0x23a>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PinValue)
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	3d 87       	std	Y+13, r19	; 0x0d
    1152:	2c 87       	std	Y+12, r18	; 0x0c
    1154:	8c 85       	ldd	r24, Y+12	; 0x0c
    1156:	9d 85       	ldd	r25, Y+13	; 0x0d
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	d1 f0       	breq	.+52     	; 0x1190 <DIO__CheckStatusSetPinValue+0xc4>
    115c:	2c 85       	ldd	r18, Y+12	; 0x0c
    115e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1160:	21 30       	cpi	r18, 0x01	; 1
    1162:	31 05       	cpc	r19, r1
    1164:	09 f0       	breq	.+2      	; 0x1168 <DIO__CheckStatusSetPinValue+0x9c>
    1166:	cf c0       	rjmp	.+414    	; 0x1306 <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTA__UINT8_REG, Copy__uint8PinId);
    1168:	ab e3       	ldi	r26, 0x3B	; 59
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	eb e3       	ldi	r30, 0x3B	; 59
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO__CheckStatusSetPinValue+0xba>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO__CheckStatusSetPinValue+0xb6>
    118a:	84 2b       	or	r24, r20
    118c:	8c 93       	st	X, r24
    118e:	bb c0       	rjmp	.+374    	; 0x1306 <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTA__UINT8_REG, Copy__uint8PinId);
    1190:	ab e3       	ldi	r26, 0x3B	; 59
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	eb e3       	ldi	r30, 0x3B	; 59
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO__CheckStatusSetPinValue+0xe2>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO__CheckStatusSetPinValue+0xde>
    11b2:	80 95       	com	r24
    11b4:	84 23       	and	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	a6 c0       	rjmp	.+332    	; 0x1306 <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PinValue)
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	3b 87       	std	Y+11, r19	; 0x0b
    11c2:	2a 87       	std	Y+10, r18	; 0x0a
    11c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    11c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	d1 f0       	breq	.+52     	; 0x1200 <DIO__CheckStatusSetPinValue+0x134>
    11cc:	2a 85       	ldd	r18, Y+10	; 0x0a
    11ce:	3b 85       	ldd	r19, Y+11	; 0x0b
    11d0:	21 30       	cpi	r18, 0x01	; 1
    11d2:	31 05       	cpc	r19, r1
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <DIO__CheckStatusSetPinValue+0x10c>
    11d6:	97 c0       	rjmp	.+302    	; 0x1306 <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTB__UINT8_REG, Copy__uint8PinId);
    11d8:	a8 e3       	ldi	r26, 0x38	; 56
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e8 e3       	ldi	r30, 0x38	; 56
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO__CheckStatusSetPinValue+0x12a>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO__CheckStatusSetPinValue+0x126>
    11fa:	84 2b       	or	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	83 c0       	rjmp	.+262    	; 0x1306 <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTB__UINT8_REG, Copy__uint8PinId);
    1200:	a8 e3       	ldi	r26, 0x38	; 56
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e8 e3       	ldi	r30, 0x38	; 56
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO__CheckStatusSetPinValue+0x152>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO__CheckStatusSetPinValue+0x14e>
    1222:	80 95       	com	r24
    1224:	84 23       	and	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	6e c0       	rjmp	.+220    	; 0x1306 <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PinValue)
    122a:	8c 81       	ldd	r24, Y+4	; 0x04
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	39 87       	std	Y+9, r19	; 0x09
    1232:	28 87       	std	Y+8, r18	; 0x08
    1234:	88 85       	ldd	r24, Y+8	; 0x08
    1236:	99 85       	ldd	r25, Y+9	; 0x09
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	d1 f0       	breq	.+52     	; 0x1270 <DIO__CheckStatusSetPinValue+0x1a4>
    123c:	28 85       	ldd	r18, Y+8	; 0x08
    123e:	39 85       	ldd	r19, Y+9	; 0x09
    1240:	21 30       	cpi	r18, 0x01	; 1
    1242:	31 05       	cpc	r19, r1
    1244:	09 f0       	breq	.+2      	; 0x1248 <DIO__CheckStatusSetPinValue+0x17c>
    1246:	5f c0       	rjmp	.+190    	; 0x1306 <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTC__UINT8_REG, Copy__uint8PinId);
    1248:	a5 e3       	ldi	r26, 0x35	; 53
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e5 e3       	ldi	r30, 0x35	; 53
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <DIO__CheckStatusSetPinValue+0x19a>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <DIO__CheckStatusSetPinValue+0x196>
    126a:	84 2b       	or	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	4b c0       	rjmp	.+150    	; 0x1306 <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTC__UINT8_REG, Copy__uint8PinId);
    1270:	a5 e3       	ldi	r26, 0x35	; 53
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e5 e3       	ldi	r30, 0x35	; 53
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	48 2f       	mov	r20, r24
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <DIO__CheckStatusSetPinValue+0x1c2>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <DIO__CheckStatusSetPinValue+0x1be>
    1292:	80 95       	com	r24
    1294:	84 23       	and	r24, r20
    1296:	8c 93       	st	X, r24
    1298:	36 c0       	rjmp	.+108    	; 0x1306 <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PinValue)
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	3f 83       	std	Y+7, r19	; 0x07
    12a2:	2e 83       	std	Y+6, r18	; 0x06
    12a4:	8e 81       	ldd	r24, Y+6	; 0x06
    12a6:	9f 81       	ldd	r25, Y+7	; 0x07
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	c9 f0       	breq	.+50     	; 0x12de <DIO__CheckStatusSetPinValue+0x212>
    12ac:	2e 81       	ldd	r18, Y+6	; 0x06
    12ae:	3f 81       	ldd	r19, Y+7	; 0x07
    12b0:	21 30       	cpi	r18, 0x01	; 1
    12b2:	31 05       	cpc	r19, r1
    12b4:	41 f5       	brne	.+80     	; 0x1306 <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTD__UINT8_REG, Copy__uint8PinId);
    12b6:	a2 e3       	ldi	r26, 0x32	; 50
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e2 e3       	ldi	r30, 0x32	; 50
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	48 2f       	mov	r20, r24
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 2e       	mov	r0, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <DIO__CheckStatusSetPinValue+0x208>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <DIO__CheckStatusSetPinValue+0x204>
    12d8:	84 2b       	or	r24, r20
    12da:	8c 93       	st	X, r24
    12dc:	14 c0       	rjmp	.+40     	; 0x1306 <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTD__UINT8_REG, Copy__uint8PinId);
    12de:	a2 e3       	ldi	r26, 0x32	; 50
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e2 e3       	ldi	r30, 0x32	; 50
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	48 2f       	mov	r20, r24
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 2e       	mov	r0, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <DIO__CheckStatusSetPinValue+0x230>
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	0a 94       	dec	r0
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <DIO__CheckStatusSetPinValue+0x22c>
    1300:	80 95       	com	r24
    1302:	84 23       	and	r24, r20
    1304:	8c 93       	st	X, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1306:	39 81       	ldd	r19, Y+1	; 0x01
    1308:	3d 83       	std	Y+5, r19	; 0x05
    130a:	04 c0       	rjmp	.+8      	; 0x1314 <DIO__CheckStatusSetPinValue+0x248>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	8d 83       	std	Y+5, r24	; 0x05
    1314:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    1316:	2f 96       	adiw	r28, 0x0f	; 15
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <DIO__CheckStatusGetPinValue>:

CheckStatus DIO__CheckStatusGetPinValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 *Copy_p_uint8ReturnPinValue)
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	28 97       	sbiw	r28, 0x08	; 8
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	8a 83       	std	Y+2, r24	; 0x02
    133e:	6b 83       	std	Y+3, r22	; 0x03
    1340:	5d 83       	std	Y+5, r21	; 0x05
    1342:	4c 83       	std	Y+4, r20	; 0x04

        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    1344:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pointer != NULL
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && (Copy_p_uint8ReturnPinValue != NULL))
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	84 30       	cpi	r24, 0x04	; 4
    134a:	08 f0       	brcs	.+2      	; 0x134e <DIO__CheckStatusGetPinValue+0x26>
    134c:	ec c0       	rjmp	.+472    	; 0x1526 <DIO__CheckStatusGetPinValue+0x1fe>
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	88 30       	cpi	r24, 0x08	; 8
    1352:	08 f0       	brcs	.+2      	; 0x1356 <DIO__CheckStatusGetPinValue+0x2e>
    1354:	e8 c0       	rjmp	.+464    	; 0x1526 <DIO__CheckStatusGetPinValue+0x1fe>
    1356:	8c 81       	ldd	r24, Y+4	; 0x04
    1358:	9d 81       	ldd	r25, Y+5	; 0x05
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	09 f4       	brne	.+2      	; 0x1360 <DIO__CheckStatusGetPinValue+0x38>
    135e:	e3 c0       	rjmp	.+454    	; 0x1526 <DIO__CheckStatusGetPinValue+0x1fe>
        {
                switch (Copy__uint8PortId)
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	38 87       	std	Y+8, r19	; 0x08
    1368:	2f 83       	std	Y+7, r18	; 0x07
    136a:	4f 81       	ldd	r20, Y+7	; 0x07
    136c:	58 85       	ldd	r21, Y+8	; 0x08
    136e:	41 30       	cpi	r20, 0x01	; 1
    1370:	51 05       	cpc	r21, r1
    1372:	09 f4       	brne	.+2      	; 0x1376 <DIO__CheckStatusGetPinValue+0x4e>
    1374:	48 c0       	rjmp	.+144    	; 0x1406 <DIO__CheckStatusGetPinValue+0xde>
    1376:	8f 81       	ldd	r24, Y+7	; 0x07
    1378:	98 85       	ldd	r25, Y+8	; 0x08
    137a:	82 30       	cpi	r24, 0x02	; 2
    137c:	91 05       	cpc	r25, r1
    137e:	34 f4       	brge	.+12     	; 0x138c <DIO__CheckStatusGetPinValue+0x64>
    1380:	2f 81       	ldd	r18, Y+7	; 0x07
    1382:	38 85       	ldd	r19, Y+8	; 0x08
    1384:	21 15       	cp	r18, r1
    1386:	31 05       	cpc	r19, r1
    1388:	71 f0       	breq	.+28     	; 0x13a6 <DIO__CheckStatusGetPinValue+0x7e>
    138a:	ca c0       	rjmp	.+404    	; 0x1520 <DIO__CheckStatusGetPinValue+0x1f8>
    138c:	4f 81       	ldd	r20, Y+7	; 0x07
    138e:	58 85       	ldd	r21, Y+8	; 0x08
    1390:	42 30       	cpi	r20, 0x02	; 2
    1392:	51 05       	cpc	r21, r1
    1394:	09 f4       	brne	.+2      	; 0x1398 <DIO__CheckStatusGetPinValue+0x70>
    1396:	67 c0       	rjmp	.+206    	; 0x1466 <DIO__CheckStatusGetPinValue+0x13e>
    1398:	8f 81       	ldd	r24, Y+7	; 0x07
    139a:	98 85       	ldd	r25, Y+8	; 0x08
    139c:	83 30       	cpi	r24, 0x03	; 3
    139e:	91 05       	cpc	r25, r1
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <DIO__CheckStatusGetPinValue+0x7c>
    13a2:	90 c0       	rjmp	.+288    	; 0x14c4 <DIO__CheckStatusGetPinValue+0x19c>
    13a4:	bd c0       	rjmp	.+378    	; 0x1520 <DIO__CheckStatusGetPinValue+0x1f8>
                {
                case DIO__UINT8_PORTA:
                        if (GET_BIT(PINA__UINT8_REG, Copy__uint8PinId) == 0)
    13a6:	e9 e3       	ldi	r30, 0x39	; 57
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	88 2f       	mov	r24, r24
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	a9 01       	movw	r20, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <DIO__CheckStatusGetPinValue+0x96>
    13ba:	55 95       	asr	r21
    13bc:	47 95       	ror	r20
    13be:	8a 95       	dec	r24
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <DIO__CheckStatusGetPinValue+0x92>
    13c2:	ca 01       	movw	r24, r20
    13c4:	81 70       	andi	r24, 0x01	; 1
    13c6:	90 70       	andi	r25, 0x00	; 0
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	21 f4       	brne	.+8      	; 0x13d4 <DIO__CheckStatusGetPinValue+0xac>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    13cc:	ec 81       	ldd	r30, Y+4	; 0x04
    13ce:	fd 81       	ldd	r31, Y+5	; 0x05
    13d0:	10 82       	st	Z, r1
    13d2:	a6 c0       	rjmp	.+332    	; 0x1520 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINA__UINT8_REG, Copy__uint8PinId) != 0)
    13d4:	e9 e3       	ldi	r30, 0x39	; 57
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	88 2f       	mov	r24, r24
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a9 01       	movw	r20, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO__CheckStatusGetPinValue+0xc4>
    13e8:	55 95       	asr	r21
    13ea:	47 95       	ror	r20
    13ec:	8a 95       	dec	r24
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <DIO__CheckStatusGetPinValue+0xc0>
    13f0:	ca 01       	movw	r24, r20
    13f2:	81 70       	andi	r24, 0x01	; 1
    13f4:	90 70       	andi	r25, 0x00	; 0
    13f6:	88 23       	and	r24, r24
    13f8:	09 f4       	brne	.+2      	; 0x13fc <DIO__CheckStatusGetPinValue+0xd4>
    13fa:	92 c0       	rjmp	.+292    	; 0x1520 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    13fc:	ec 81       	ldd	r30, Y+4	; 0x04
    13fe:	fd 81       	ldd	r31, Y+5	; 0x05
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	80 83       	st	Z, r24
    1404:	8d c0       	rjmp	.+282    	; 0x1520 <DIO__CheckStatusGetPinValue+0x1f8>
                                /* DO NOTHING */
                        }

                        break;
                case DIO__UINT8_PORTB:
                        if (GET_BIT(PINB__UINT8_REG, Copy__uint8PinId) == 0)
    1406:	e6 e3       	ldi	r30, 0x36	; 54
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO__CheckStatusGetPinValue+0xf6>
    141a:	55 95       	asr	r21
    141c:	47 95       	ror	r20
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <DIO__CheckStatusGetPinValue+0xf2>
    1422:	ca 01       	movw	r24, r20
    1424:	81 70       	andi	r24, 0x01	; 1
    1426:	90 70       	andi	r25, 0x00	; 0
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	21 f4       	brne	.+8      	; 0x1434 <DIO__CheckStatusGetPinValue+0x10c>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    142c:	ec 81       	ldd	r30, Y+4	; 0x04
    142e:	fd 81       	ldd	r31, Y+5	; 0x05
    1430:	10 82       	st	Z, r1
    1432:	76 c0       	rjmp	.+236    	; 0x1520 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINB__UINT8_REG, Copy__uint8PinId) != 0)
    1434:	e6 e3       	ldi	r30, 0x36	; 54
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	88 2f       	mov	r24, r24
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	a9 01       	movw	r20, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <DIO__CheckStatusGetPinValue+0x124>
    1448:	55 95       	asr	r21
    144a:	47 95       	ror	r20
    144c:	8a 95       	dec	r24
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <DIO__CheckStatusGetPinValue+0x120>
    1450:	ca 01       	movw	r24, r20
    1452:	81 70       	andi	r24, 0x01	; 1
    1454:	90 70       	andi	r25, 0x00	; 0
    1456:	88 23       	and	r24, r24
    1458:	09 f4       	brne	.+2      	; 0x145c <DIO__CheckStatusGetPinValue+0x134>
    145a:	62 c0       	rjmp	.+196    	; 0x1520 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    145c:	ec 81       	ldd	r30, Y+4	; 0x04
    145e:	fd 81       	ldd	r31, Y+5	; 0x05
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	80 83       	st	Z, r24
    1464:	5d c0       	rjmp	.+186    	; 0x1520 <DIO__CheckStatusGetPinValue+0x1f8>

                        break;

                case DIO__UINT8_PORTC:

                        if (GET_BIT(PINC__UINT8_REG, Copy__uint8PinId) == 0)
    1466:	e3 e3       	ldi	r30, 0x33	; 51
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	88 2f       	mov	r24, r24
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	a9 01       	movw	r20, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <DIO__CheckStatusGetPinValue+0x156>
    147a:	55 95       	asr	r21
    147c:	47 95       	ror	r20
    147e:	8a 95       	dec	r24
    1480:	e2 f7       	brpl	.-8      	; 0x147a <DIO__CheckStatusGetPinValue+0x152>
    1482:	ca 01       	movw	r24, r20
    1484:	81 70       	andi	r24, 0x01	; 1
    1486:	90 70       	andi	r25, 0x00	; 0
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	21 f4       	brne	.+8      	; 0x1494 <DIO__CheckStatusGetPinValue+0x16c>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    148c:	ec 81       	ldd	r30, Y+4	; 0x04
    148e:	fd 81       	ldd	r31, Y+5	; 0x05
    1490:	10 82       	st	Z, r1
    1492:	46 c0       	rjmp	.+140    	; 0x1520 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINC__UINT8_REG, Copy__uint8PinId) != 0)
    1494:	e3 e3       	ldi	r30, 0x33	; 51
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	88 2f       	mov	r24, r24
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	a9 01       	movw	r20, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO__CheckStatusGetPinValue+0x184>
    14a8:	55 95       	asr	r21
    14aa:	47 95       	ror	r20
    14ac:	8a 95       	dec	r24
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO__CheckStatusGetPinValue+0x180>
    14b0:	ca 01       	movw	r24, r20
    14b2:	81 70       	andi	r24, 0x01	; 1
    14b4:	90 70       	andi	r25, 0x00	; 0
    14b6:	88 23       	and	r24, r24
    14b8:	99 f1       	breq	.+102    	; 0x1520 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    14ba:	ec 81       	ldd	r30, Y+4	; 0x04
    14bc:	fd 81       	ldd	r31, Y+5	; 0x05
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	80 83       	st	Z, r24
    14c2:	2e c0       	rjmp	.+92     	; 0x1520 <DIO__CheckStatusGetPinValue+0x1f8>
                                /* DO NOTHING */
                        }

                        break;
                case DIO__UINT8_PORTD:
                        if (GET_BIT(PIND__UINT8_REG, Copy__uint8PinId) == 0)
    14c4:	e0 e3       	ldi	r30, 0x30	; 48
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	88 2f       	mov	r24, r24
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	a9 01       	movw	r20, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO__CheckStatusGetPinValue+0x1b4>
    14d8:	55 95       	asr	r21
    14da:	47 95       	ror	r20
    14dc:	8a 95       	dec	r24
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <DIO__CheckStatusGetPinValue+0x1b0>
    14e0:	ca 01       	movw	r24, r20
    14e2:	81 70       	andi	r24, 0x01	; 1
    14e4:	90 70       	andi	r25, 0x00	; 0
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	21 f4       	brne	.+8      	; 0x14f2 <DIO__CheckStatusGetPinValue+0x1ca>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    14ea:	ec 81       	ldd	r30, Y+4	; 0x04
    14ec:	fd 81       	ldd	r31, Y+5	; 0x05
    14ee:	10 82       	st	Z, r1
    14f0:	17 c0       	rjmp	.+46     	; 0x1520 <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PIND__UINT8_REG, Copy__uint8PinId) != 0)
    14f2:	e0 e3       	ldi	r30, 0x30	; 48
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	88 2f       	mov	r24, r24
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	a9 01       	movw	r20, r18
    1504:	02 c0       	rjmp	.+4      	; 0x150a <DIO__CheckStatusGetPinValue+0x1e2>
    1506:	55 95       	asr	r21
    1508:	47 95       	ror	r20
    150a:	8a 95       	dec	r24
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <DIO__CheckStatusGetPinValue+0x1de>
    150e:	ca 01       	movw	r24, r20
    1510:	81 70       	andi	r24, 0x01	; 1
    1512:	90 70       	andi	r25, 0x00	; 0
    1514:	88 23       	and	r24, r24
    1516:	21 f0       	breq	.+8      	; 0x1520 <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    1518:	ec 81       	ldd	r30, Y+4	; 0x04
    151a:	fd 81       	ldd	r31, Y+5	; 0x05
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1520:	59 81       	ldd	r21, Y+1	; 0x01
    1522:	5e 83       	std	Y+6, r21	; 0x06
    1524:	04 c0       	rjmp	.+8      	; 0x152e <DIO__CheckStatusGetPinValue+0x206>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	8e 83       	std	Y+6, r24	; 0x06
    152e:	8e 81       	ldd	r24, Y+6	; 0x06
        }
}
    1530:	28 96       	adiw	r28, 0x08	; 8
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <DIO__CheckStatusSetPortDirection>:

CheckStatus DIO__CheckStatusSetPortDirection(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PortDirection)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	2e 97       	sbiw	r28, 0x0e	; 14
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	8a 83       	std	Y+2, r24	; 0x02
    1558:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    155a:	19 82       	std	Y+1, r1	; 0x01
        /* 
        Check 1-Valid Port Id
              2-Valid PORT diraction 
        */

        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && ((Copy__uint8PortDirection == DIO__UINT8_OUTPUT) || (Copy__uint8PortDirection == DIO__UINT8_INPUT)))
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	84 30       	cpi	r24, 0x04	; 4
    1560:	08 f0       	brcs	.+2      	; 0x1564 <DIO__CheckStatusSetPortDirection+0x22>
    1562:	89 c0       	rjmp	.+274    	; 0x1676 <DIO__CheckStatusSetPortDirection+0x134>
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	81 30       	cpi	r24, 0x01	; 1
    1568:	21 f0       	breq	.+8      	; 0x1572 <DIO__CheckStatusSetPortDirection+0x30>
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	88 23       	and	r24, r24
    156e:	09 f0       	breq	.+2      	; 0x1572 <DIO__CheckStatusSetPortDirection+0x30>
    1570:	82 c0       	rjmp	.+260    	; 0x1676 <DIO__CheckStatusSetPortDirection+0x134>
        {
                switch (Copy__uint8PortId)
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	3e 87       	std	Y+14, r19	; 0x0e
    157a:	2d 87       	std	Y+13, r18	; 0x0d
    157c:	8d 85       	ldd	r24, Y+13	; 0x0d
    157e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	91 05       	cpc	r25, r1
    1584:	71 f1       	breq	.+92     	; 0x15e2 <DIO__CheckStatusSetPortDirection+0xa0>
    1586:	2d 85       	ldd	r18, Y+13	; 0x0d
    1588:	3e 85       	ldd	r19, Y+14	; 0x0e
    158a:	22 30       	cpi	r18, 0x02	; 2
    158c:	31 05       	cpc	r19, r1
    158e:	2c f4       	brge	.+10     	; 0x159a <DIO__CheckStatusSetPortDirection+0x58>
    1590:	8d 85       	ldd	r24, Y+13	; 0x0d
    1592:	9e 85       	ldd	r25, Y+14	; 0x0e
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	69 f0       	breq	.+26     	; 0x15b2 <DIO__CheckStatusSetPortDirection+0x70>
    1598:	6b c0       	rjmp	.+214    	; 0x1670 <DIO__CheckStatusSetPortDirection+0x12e>
    159a:	2d 85       	ldd	r18, Y+13	; 0x0d
    159c:	3e 85       	ldd	r19, Y+14	; 0x0e
    159e:	22 30       	cpi	r18, 0x02	; 2
    15a0:	31 05       	cpc	r19, r1
    15a2:	b9 f1       	breq	.+110    	; 0x1612 <DIO__CheckStatusSetPortDirection+0xd0>
    15a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a8:	83 30       	cpi	r24, 0x03	; 3
    15aa:	91 05       	cpc	r25, r1
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <DIO__CheckStatusSetPortDirection+0x6e>
    15ae:	49 c0       	rjmp	.+146    	; 0x1642 <DIO__CheckStatusSetPortDirection+0x100>
    15b0:	5f c0       	rjmp	.+190    	; 0x1670 <DIO__CheckStatusSetPortDirection+0x12e>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PortDirection)
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	3c 87       	std	Y+12, r19	; 0x0c
    15ba:	2b 87       	std	Y+11, r18	; 0x0b
    15bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    15be:	9c 85       	ldd	r25, Y+12	; 0x0c
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	31 f0       	breq	.+12     	; 0x15d0 <DIO__CheckStatusSetPortDirection+0x8e>
    15c4:	2b 85       	ldd	r18, Y+11	; 0x0b
    15c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    15c8:	21 30       	cpi	r18, 0x01	; 1
    15ca:	31 05       	cpc	r19, r1
    15cc:	29 f0       	breq	.+10     	; 0x15d8 <DIO__CheckStatusSetPortDirection+0x96>
    15ce:	50 c0       	rjmp	.+160    	; 0x1670 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTA__UINT8_REG = 0x00;
    15d0:	eb e3       	ldi	r30, 0x3B	; 59
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	10 82       	st	Z, r1
    15d6:	4c c0       	rjmp	.+152    	; 0x1670 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTA__UINT8_REG = 0xFF;
    15d8:	eb e3       	ldi	r30, 0x3B	; 59
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	8f ef       	ldi	r24, 0xFF	; 255
    15de:	80 83       	st	Z, r24
    15e0:	47 c0       	rjmp	.+142    	; 0x1670 <DIO__CheckStatusSetPortDirection+0x12e>
                                /* DO  NOTHING */
                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PortDirection)
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	3a 87       	std	Y+10, r19	; 0x0a
    15ea:	29 87       	std	Y+9, r18	; 0x09
    15ec:	89 85       	ldd	r24, Y+9	; 0x09
    15ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	31 f0       	breq	.+12     	; 0x1600 <DIO__CheckStatusSetPortDirection+0xbe>
    15f4:	29 85       	ldd	r18, Y+9	; 0x09
    15f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    15f8:	21 30       	cpi	r18, 0x01	; 1
    15fa:	31 05       	cpc	r19, r1
    15fc:	29 f0       	breq	.+10     	; 0x1608 <DIO__CheckStatusSetPortDirection+0xc6>
    15fe:	38 c0       	rjmp	.+112    	; 0x1670 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTB__UINT8_REG = 0x00;
    1600:	e8 e3       	ldi	r30, 0x38	; 56
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	10 82       	st	Z, r1
    1606:	34 c0       	rjmp	.+104    	; 0x1670 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTB__UINT8_REG = 0xFF;
    1608:	e8 e3       	ldi	r30, 0x38	; 56
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	8f ef       	ldi	r24, 0xFF	; 255
    160e:	80 83       	st	Z, r24
    1610:	2f c0       	rjmp	.+94     	; 0x1670 <DIO__CheckStatusSetPortDirection+0x12e>
                        }

                        break;

                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PortDirection)
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	38 87       	std	Y+8, r19	; 0x08
    161a:	2f 83       	std	Y+7, r18	; 0x07
    161c:	8f 81       	ldd	r24, Y+7	; 0x07
    161e:	98 85       	ldd	r25, Y+8	; 0x08
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	31 f0       	breq	.+12     	; 0x1630 <DIO__CheckStatusSetPortDirection+0xee>
    1624:	2f 81       	ldd	r18, Y+7	; 0x07
    1626:	38 85       	ldd	r19, Y+8	; 0x08
    1628:	21 30       	cpi	r18, 0x01	; 1
    162a:	31 05       	cpc	r19, r1
    162c:	29 f0       	breq	.+10     	; 0x1638 <DIO__CheckStatusSetPortDirection+0xf6>
    162e:	20 c0       	rjmp	.+64     	; 0x1670 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTC__UINT8_REG = 0x00;
    1630:	e5 e3       	ldi	r30, 0x35	; 53
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	10 82       	st	Z, r1
    1636:	1c c0       	rjmp	.+56     	; 0x1670 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTC__UINT8_REG = 0xFF;
    1638:	e5 e3       	ldi	r30, 0x35	; 53
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	8f ef       	ldi	r24, 0xFF	; 255
    163e:	80 83       	st	Z, r24
    1640:	17 c0       	rjmp	.+46     	; 0x1670 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        }

                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PortDirection)
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	3e 83       	std	Y+6, r19	; 0x06
    164a:	2d 83       	std	Y+5, r18	; 0x05
    164c:	8d 81       	ldd	r24, Y+5	; 0x05
    164e:	9e 81       	ldd	r25, Y+6	; 0x06
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	31 f0       	breq	.+12     	; 0x1660 <DIO__CheckStatusSetPortDirection+0x11e>
    1654:	2d 81       	ldd	r18, Y+5	; 0x05
    1656:	3e 81       	ldd	r19, Y+6	; 0x06
    1658:	21 30       	cpi	r18, 0x01	; 1
    165a:	31 05       	cpc	r19, r1
    165c:	29 f0       	breq	.+10     	; 0x1668 <DIO__CheckStatusSetPortDirection+0x126>
    165e:	08 c0       	rjmp	.+16     	; 0x1670 <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTD__UINT8_REG = 0x00;
    1660:	e2 e3       	ldi	r30, 0x32	; 50
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	10 82       	st	Z, r1
    1666:	04 c0       	rjmp	.+8      	; 0x1670 <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTD__UINT8_REG = 0xFF;
    1668:	e2 e3       	ldi	r30, 0x32	; 50
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	8f ef       	ldi	r24, 0xFF	; 255
    166e:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1670:	39 81       	ldd	r19, Y+1	; 0x01
    1672:	3c 83       	std	Y+4, r19	; 0x04
    1674:	04 c0       	rjmp	.+8      	; 0x167e <DIO__CheckStatusSetPortDirection+0x13c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	8c 83       	std	Y+4, r24	; 0x04
    167e:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    1680:	2e 96       	adiw	r28, 0x0e	; 14
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <DIO__CheckStatusSetPortValue>:

CheckStatus DIO__CheckStatusSetPortValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PortValue)
{
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	00 d0       	rcall	.+0      	; 0x1698 <DIO__CheckStatusSetPortValue+0x6>
    1698:	00 d0       	rcall	.+0      	; 0x169a <DIO__CheckStatusSetPortValue+0x8>
    169a:	00 d0       	rcall	.+0      	; 0x169c <DIO__CheckStatusSetPortValue+0xa>
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	8a 83       	std	Y+2, r24	; 0x02
    16a2:	6b 83       	std	Y+3, r22	; 0x03

        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    16a4:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
               
        */
        if (Copy__uint8PortId <= DIO__UINT8_PORTD)
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	84 30       	cpi	r24, 0x04	; 4
    16aa:	a8 f5       	brcc	.+106    	; 0x1716 <DIO__CheckStatusSetPortValue+0x84>
        {
                switch (Copy__uint8PortId)
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	3e 83       	std	Y+6, r19	; 0x06
    16b4:	2d 83       	std	Y+5, r18	; 0x05
    16b6:	8d 81       	ldd	r24, Y+5	; 0x05
    16b8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	91 05       	cpc	r25, r1
    16be:	d1 f0       	breq	.+52     	; 0x16f4 <DIO__CheckStatusSetPortValue+0x62>
    16c0:	2d 81       	ldd	r18, Y+5	; 0x05
    16c2:	3e 81       	ldd	r19, Y+6	; 0x06
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	2c f4       	brge	.+10     	; 0x16d4 <DIO__CheckStatusSetPortValue+0x42>
    16ca:	8d 81       	ldd	r24, Y+5	; 0x05
    16cc:	9e 81       	ldd	r25, Y+6	; 0x06
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	61 f0       	breq	.+24     	; 0x16ea <DIO__CheckStatusSetPortValue+0x58>
    16d2:	1e c0       	rjmp	.+60     	; 0x1710 <DIO__CheckStatusSetPortValue+0x7e>
    16d4:	2d 81       	ldd	r18, Y+5	; 0x05
    16d6:	3e 81       	ldd	r19, Y+6	; 0x06
    16d8:	22 30       	cpi	r18, 0x02	; 2
    16da:	31 05       	cpc	r19, r1
    16dc:	81 f0       	breq	.+32     	; 0x16fe <DIO__CheckStatusSetPortValue+0x6c>
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	9e 81       	ldd	r25, Y+6	; 0x06
    16e2:	83 30       	cpi	r24, 0x03	; 3
    16e4:	91 05       	cpc	r25, r1
    16e6:	81 f0       	breq	.+32     	; 0x1708 <DIO__CheckStatusSetPortValue+0x76>
    16e8:	13 c0       	rjmp	.+38     	; 0x1710 <DIO__CheckStatusSetPortValue+0x7e>
                {
                case DIO__UINT8_PORTA:
                        PORTA__UINT8_REG = Copy__uint8PortValue;
    16ea:	eb e3       	ldi	r30, 0x3B	; 59
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	80 83       	st	Z, r24
    16f2:	0e c0       	rjmp	.+28     	; 0x1710 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTB:
                        PORTB__UINT8_REG = Copy__uint8PortValue;
    16f4:	e8 e3       	ldi	r30, 0x38	; 56
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	80 83       	st	Z, r24
    16fc:	09 c0       	rjmp	.+18     	; 0x1710 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTC:
                        PORTC__UINT8_REG = Copy__uint8PortValue;
    16fe:	e5 e3       	ldi	r30, 0x35	; 53
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	80 83       	st	Z, r24
    1706:	04 c0       	rjmp	.+8      	; 0x1710 <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTD:
                        PORTD__UINT8_REG = Copy__uint8PortValue;
    1708:	e2 e3       	ldi	r30, 0x32	; 50
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1710:	99 81       	ldd	r25, Y+1	; 0x01
    1712:	9c 83       	std	Y+4, r25	; 0x04
    1714:	04 c0       	rjmp	.+8      	; 0x171e <DIO__CheckStatusSetPortValue+0x8c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    171a:	29 81       	ldd	r18, Y+1	; 0x01
    171c:	2c 83       	std	Y+4, r18	; 0x04
    171e:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    1720:	26 96       	adiw	r28, 0x06	; 6
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <DIO__CheckStatusGetPortValue>:

CheckStatus DIO__CheckStatusGetPortValue(_uint8 Copy__uint8PortId, _uint8 *Copy_p_uint8ReturnPortValue)
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	27 97       	sbiw	r28, 0x07	; 7
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
    1746:	8a 83       	std	Y+2, r24	; 0x02
    1748:	7c 83       	std	Y+4, r23	; 0x04
    174a:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    174c:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid Pointer != NULL
               
        */
        if (Copy_p_uint8ReturnPortValue != NULL)
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	e9 f1       	breq	.+122    	; 0x17d0 <DIO__CheckStatusGetPortValue+0x9e>
        {
                switch (Copy__uint8PortId)
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	3f 83       	std	Y+7, r19	; 0x07
    175e:	2e 83       	std	Y+6, r18	; 0x06
    1760:	8e 81       	ldd	r24, Y+6	; 0x06
    1762:	9f 81       	ldd	r25, Y+7	; 0x07
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	91 05       	cpc	r25, r1
    1768:	e1 f0       	breq	.+56     	; 0x17a2 <DIO__CheckStatusGetPortValue+0x70>
    176a:	2e 81       	ldd	r18, Y+6	; 0x06
    176c:	3f 81       	ldd	r19, Y+7	; 0x07
    176e:	22 30       	cpi	r18, 0x02	; 2
    1770:	31 05       	cpc	r19, r1
    1772:	2c f4       	brge	.+10     	; 0x177e <DIO__CheckStatusGetPortValue+0x4c>
    1774:	8e 81       	ldd	r24, Y+6	; 0x06
    1776:	9f 81       	ldd	r25, Y+7	; 0x07
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	61 f0       	breq	.+24     	; 0x1794 <DIO__CheckStatusGetPortValue+0x62>
    177c:	26 c0       	rjmp	.+76     	; 0x17ca <DIO__CheckStatusGetPortValue+0x98>
    177e:	2e 81       	ldd	r18, Y+6	; 0x06
    1780:	3f 81       	ldd	r19, Y+7	; 0x07
    1782:	22 30       	cpi	r18, 0x02	; 2
    1784:	31 05       	cpc	r19, r1
    1786:	a1 f0       	breq	.+40     	; 0x17b0 <DIO__CheckStatusGetPortValue+0x7e>
    1788:	8e 81       	ldd	r24, Y+6	; 0x06
    178a:	9f 81       	ldd	r25, Y+7	; 0x07
    178c:	83 30       	cpi	r24, 0x03	; 3
    178e:	91 05       	cpc	r25, r1
    1790:	b1 f0       	breq	.+44     	; 0x17be <DIO__CheckStatusGetPortValue+0x8c>
    1792:	1b c0       	rjmp	.+54     	; 0x17ca <DIO__CheckStatusGetPortValue+0x98>
                {
                case DIO__UINT8_PORTA:
                        *Copy_p_uint8ReturnPortValue = PINA__UINT8_REG;
    1794:	e9 e3       	ldi	r30, 0x39	; 57
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	eb 81       	ldd	r30, Y+3	; 0x03
    179c:	fc 81       	ldd	r31, Y+4	; 0x04
    179e:	80 83       	st	Z, r24
    17a0:	14 c0       	rjmp	.+40     	; 0x17ca <DIO__CheckStatusGetPortValue+0x98>
                        break;
                case DIO__UINT8_PORTB:
                        *Copy_p_uint8ReturnPortValue = PINB__UINT8_REG;
    17a2:	e6 e3       	ldi	r30, 0x36	; 54
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	eb 81       	ldd	r30, Y+3	; 0x03
    17aa:	fc 81       	ldd	r31, Y+4	; 0x04
    17ac:	80 83       	st	Z, r24
    17ae:	0d c0       	rjmp	.+26     	; 0x17ca <DIO__CheckStatusGetPortValue+0x98>

                        break;
                case DIO__UINT8_PORTC:
                        *Copy_p_uint8ReturnPortValue = PINC__UINT8_REG;
    17b0:	e3 e3       	ldi	r30, 0x33	; 51
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	eb 81       	ldd	r30, Y+3	; 0x03
    17b8:	fc 81       	ldd	r31, Y+4	; 0x04
    17ba:	80 83       	st	Z, r24
    17bc:	06 c0       	rjmp	.+12     	; 0x17ca <DIO__CheckStatusGetPortValue+0x98>
                        break;
                case DIO__UINT8_PORTD:
                        *Copy_p_uint8ReturnPortValue = PIND__UINT8_REG;
    17be:	e0 e3       	ldi	r30, 0x30	; 48
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	eb 81       	ldd	r30, Y+3	; 0x03
    17c6:	fc 81       	ldd	r31, Y+4	; 0x04
    17c8:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    17ca:	99 81       	ldd	r25, Y+1	; 0x01
    17cc:	9d 83       	std	Y+5, r25	; 0x05
    17ce:	04 c0       	rjmp	.+8      	; 0x17d8 <DIO__CheckStatusGetPortValue+0xa6>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    17d4:	29 81       	ldd	r18, Y+1	; 0x01
    17d6:	2d 83       	std	Y+5, r18	; 0x05
    17d8:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    17da:	27 96       	adiw	r28, 0x07	; 7
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <__vector_1>:
/* ISR Function prototype */
/* EXTINT0 ISR */
void __vector_1(void) __attribute__((signal));

void __vector_1(void)
{
    17ec:	1f 92       	push	r1
    17ee:	0f 92       	push	r0
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	0f 92       	push	r0
    17f4:	11 24       	eor	r1, r1
    17f6:	2f 93       	push	r18
    17f8:	3f 93       	push	r19
    17fa:	4f 93       	push	r20
    17fc:	5f 93       	push	r21
    17fe:	6f 93       	push	r22
    1800:	7f 93       	push	r23
    1802:	8f 93       	push	r24
    1804:	9f 93       	push	r25
    1806:	af 93       	push	r26
    1808:	bf 93       	push	r27
    180a:	ef 93       	push	r30
    180c:	ff 93       	push	r31
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
        if (EXTI_AP_VoidIsr[INT0] != NULL)
    1816:	80 91 c4 01 	lds	r24, 0x01C4
    181a:	90 91 c5 01 	lds	r25, 0x01C5
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	29 f0       	breq	.+10     	; 0x182c <__vector_1+0x40>
        {
                EXTI_AP_VoidIsr[INT0]();
    1822:	e0 91 c4 01 	lds	r30, 0x01C4
    1826:	f0 91 c5 01 	lds	r31, 0x01C5
    182a:	09 95       	icall
        else
        {
                /* DO NOTHING */
        }
        
}
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	ff 91       	pop	r31
    1832:	ef 91       	pop	r30
    1834:	bf 91       	pop	r27
    1836:	af 91       	pop	r26
    1838:	9f 91       	pop	r25
    183a:	8f 91       	pop	r24
    183c:	7f 91       	pop	r23
    183e:	6f 91       	pop	r22
    1840:	5f 91       	pop	r21
    1842:	4f 91       	pop	r20
    1844:	3f 91       	pop	r19
    1846:	2f 91       	pop	r18
    1848:	0f 90       	pop	r0
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	0f 90       	pop	r0
    184e:	1f 90       	pop	r1
    1850:	18 95       	reti

00001852 <__vector_2>:
/* EXTINT1 ISR */

void __vector_2(void) __attribute__((signal));

void __vector_2(void)
{
    1852:	1f 92       	push	r1
    1854:	0f 92       	push	r0
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	0f 92       	push	r0
    185a:	11 24       	eor	r1, r1
    185c:	2f 93       	push	r18
    185e:	3f 93       	push	r19
    1860:	4f 93       	push	r20
    1862:	5f 93       	push	r21
    1864:	6f 93       	push	r22
    1866:	7f 93       	push	r23
    1868:	8f 93       	push	r24
    186a:	9f 93       	push	r25
    186c:	af 93       	push	r26
    186e:	bf 93       	push	r27
    1870:	ef 93       	push	r30
    1872:	ff 93       	push	r31
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
        if (EXTI_AP_VoidIsr[INT1] != NULL)
    187c:	80 91 c6 01 	lds	r24, 0x01C6
    1880:	90 91 c7 01 	lds	r25, 0x01C7
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	29 f0       	breq	.+10     	; 0x1892 <__vector_2+0x40>
        {
                EXTI_AP_VoidIsr[INT1]();
    1888:	e0 91 c6 01 	lds	r30, 0x01C6
    188c:	f0 91 c7 01 	lds	r31, 0x01C7
    1890:	09 95       	icall
        else
        {
                /* DO NOTHING */
        }
        
}
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	ff 91       	pop	r31
    1898:	ef 91       	pop	r30
    189a:	bf 91       	pop	r27
    189c:	af 91       	pop	r26
    189e:	9f 91       	pop	r25
    18a0:	8f 91       	pop	r24
    18a2:	7f 91       	pop	r23
    18a4:	6f 91       	pop	r22
    18a6:	5f 91       	pop	r21
    18a8:	4f 91       	pop	r20
    18aa:	3f 91       	pop	r19
    18ac:	2f 91       	pop	r18
    18ae:	0f 90       	pop	r0
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	0f 90       	pop	r0
    18b4:	1f 90       	pop	r1
    18b6:	18 95       	reti

000018b8 <__vector_3>:
/* EXTINT2 ISR */

void __vector_3(void) __attribute__((signal));

void __vector_3(void)
{
    18b8:	1f 92       	push	r1
    18ba:	0f 92       	push	r0
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	0f 92       	push	r0
    18c0:	11 24       	eor	r1, r1
    18c2:	2f 93       	push	r18
    18c4:	3f 93       	push	r19
    18c6:	4f 93       	push	r20
    18c8:	5f 93       	push	r21
    18ca:	6f 93       	push	r22
    18cc:	7f 93       	push	r23
    18ce:	8f 93       	push	r24
    18d0:	9f 93       	push	r25
    18d2:	af 93       	push	r26
    18d4:	bf 93       	push	r27
    18d6:	ef 93       	push	r30
    18d8:	ff 93       	push	r31
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
        if (EXTI_AP_VoidIsr[INT2] != NULL)
    18e2:	80 91 c8 01 	lds	r24, 0x01C8
    18e6:	90 91 c9 01 	lds	r25, 0x01C9
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	29 f0       	breq	.+10     	; 0x18f8 <__vector_3+0x40>
        {
                EXTI_AP_VoidIsr[INT2]();
    18ee:	e0 91 c8 01 	lds	r30, 0x01C8
    18f2:	f0 91 c9 01 	lds	r31, 0x01C9
    18f6:	09 95       	icall
        else
        {
                /* DO NOTHING */
        }
        
}
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	ff 91       	pop	r31
    18fe:	ef 91       	pop	r30
    1900:	bf 91       	pop	r27
    1902:	af 91       	pop	r26
    1904:	9f 91       	pop	r25
    1906:	8f 91       	pop	r24
    1908:	7f 91       	pop	r23
    190a:	6f 91       	pop	r22
    190c:	5f 91       	pop	r21
    190e:	4f 91       	pop	r20
    1910:	3f 91       	pop	r19
    1912:	2f 91       	pop	r18
    1914:	0f 90       	pop	r0
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	0f 90       	pop	r0
    191a:	1f 90       	pop	r1
    191c:	18 95       	reti

0000191e <EXTI_CheckStatusSetCallBackFunc>:

/* SET CALL BACK FUNCTION  */

CheckStatus EXTI_CheckStatusSetCallBackFunc(Void (*Copy_VoidPointerToFunction)(Void), _uint8 Copy__Uint8ExtiIndex)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <EXTI_CheckStatusSetCallBackFunc+0x6>
    1924:	00 d0       	rcall	.+0      	; 0x1926 <EXTI_CheckStatusSetCallBackFunc+0x8>
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	9b 83       	std	Y+3, r25	; 0x03
    192c:	8a 83       	std	Y+2, r24	; 0x02
    192e:	6c 83       	std	Y+4, r22	; 0x04
        CheckStatus Local_CheckStatusReturnValue = CHECK_SUCCESS;
    1930:	19 82       	std	Y+1, r1	; 0x01

        if (Copy__Uint8ExtiIndex <= INT2 && Copy_VoidPointerToFunction != NULL)
    1932:	8c 81       	ldd	r24, Y+4	; 0x04
    1934:	83 30       	cpi	r24, 0x03	; 3
    1936:	88 f4       	brcc	.+34     	; 0x195a <EXTI_CheckStatusSetCallBackFunc+0x3c>
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	9b 81       	ldd	r25, Y+3	; 0x03
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	69 f0       	breq	.+26     	; 0x195a <EXTI_CheckStatusSetCallBackFunc+0x3c>
        {
                EXTI_AP_VoidIsr[Copy__Uint8ExtiIndex] = Copy_VoidPointerToFunction;
    1940:	8c 81       	ldd	r24, Y+4	; 0x04
    1942:	88 2f       	mov	r24, r24
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	fc 01       	movw	r30, r24
    194c:	ec 53       	subi	r30, 0x3C	; 60
    194e:	fe 4f       	sbci	r31, 0xFE	; 254
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	9b 81       	ldd	r25, Y+3	; 0x03
    1954:	91 83       	std	Z+1, r25	; 0x01
    1956:	80 83       	st	Z, r24
    1958:	02 c0       	rjmp	.+4      	; 0x195e <EXTI_CheckStatusSetCallBackFunc+0x40>
        }
        else
        {
                Local_CheckStatusReturnValue = CHECK_FAIL;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	89 83       	std	Y+1, r24	; 0x01
        }

        return Local_CheckStatusReturnValue;
    195e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <EXIT_CheckStatusExtIntEnable>:

CheckStatus EXIT_CheckStatusExtIntEnable(_uint8 Copy__Uint8ExtIntId, _uint8 Copy__Uint8ExtIntEdge)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	2b 97       	sbiw	r28, 0x0b	; 11
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	8a 83       	std	Y+2, r24	; 0x02
    1984:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnValue = CHECK_SUCCESS;
    1986:	19 82       	std	Y+1, r1	; 0x01
        if (Copy__Uint8ExtIntId <= INT2 && (Copy__Uint8ExtIntEdge <= EXIT_UINT8_LOGICAL_CHANGE_EDGE && Copy__Uint8ExtIntEdge >= EXIT_UINT8_FALLING_EDGE))
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	83 30       	cpi	r24, 0x03	; 3
    198c:	08 f0       	brcs	.+2      	; 0x1990 <EXIT_CheckStatusExtIntEnable+0x22>
    198e:	0d c1       	rjmp	.+538    	; 0x1baa <EXIT_CheckStatusExtIntEnable+0x23c>
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	85 30       	cpi	r24, 0x05	; 5
    1994:	08 f0       	brcs	.+2      	; 0x1998 <EXIT_CheckStatusExtIntEnable+0x2a>
    1996:	09 c1       	rjmp	.+530    	; 0x1baa <EXIT_CheckStatusExtIntEnable+0x23c>
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	88 23       	and	r24, r24
    199c:	09 f4       	brne	.+2      	; 0x19a0 <EXIT_CheckStatusExtIntEnable+0x32>
    199e:	05 c1       	rjmp	.+522    	; 0x1baa <EXIT_CheckStatusExtIntEnable+0x23c>
        {
                switch (Copy__Uint8ExtIntId)
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	3b 87       	std	Y+11, r19	; 0x0b
    19a8:	2a 87       	std	Y+10, r18	; 0x0a
    19aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    19ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	91 05       	cpc	r25, r1
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <EXIT_CheckStatusExtIntEnable+0x48>
    19b4:	6f c0       	rjmp	.+222    	; 0x1a94 <EXIT_CheckStatusExtIntEnable+0x126>
    19b6:	2a 85       	ldd	r18, Y+10	; 0x0a
    19b8:	3b 85       	ldd	r19, Y+11	; 0x0b
    19ba:	22 30       	cpi	r18, 0x02	; 2
    19bc:	31 05       	cpc	r19, r1
    19be:	09 f4       	brne	.+2      	; 0x19c2 <EXIT_CheckStatusExtIntEnable+0x54>
    19c0:	cd c0       	rjmp	.+410    	; 0x1b5c <EXIT_CheckStatusExtIntEnable+0x1ee>
    19c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    19c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	09 f0       	breq	.+2      	; 0x19cc <EXIT_CheckStatusExtIntEnable+0x5e>
    19ca:	f1 c0       	rjmp	.+482    	; 0x1bae <EXIT_CheckStatusExtIntEnable+0x240>
                {
                case INT0:

                        switch (Copy__Uint8ExtIntEdge)
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	39 87       	std	Y+9, r19	; 0x09
    19d4:	28 87       	std	Y+8, r18	; 0x08
    19d6:	88 85       	ldd	r24, Y+8	; 0x08
    19d8:	99 85       	ldd	r25, Y+9	; 0x09
    19da:	82 30       	cpi	r24, 0x02	; 2
    19dc:	91 05       	cpc	r25, r1
    19de:	09 f4       	brne	.+2      	; 0x19e2 <EXIT_CheckStatusExtIntEnable+0x74>
    19e0:	43 c0       	rjmp	.+134    	; 0x1a68 <EXIT_CheckStatusExtIntEnable+0xfa>
    19e2:	28 85       	ldd	r18, Y+8	; 0x08
    19e4:	39 85       	ldd	r19, Y+9	; 0x09
    19e6:	23 30       	cpi	r18, 0x03	; 3
    19e8:	31 05       	cpc	r19, r1
    19ea:	34 f4       	brge	.+12     	; 0x19f8 <EXIT_CheckStatusExtIntEnable+0x8a>
    19ec:	88 85       	ldd	r24, Y+8	; 0x08
    19ee:	99 85       	ldd	r25, Y+9	; 0x09
    19f0:	81 30       	cpi	r24, 0x01	; 1
    19f2:	91 05       	cpc	r25, r1
    19f4:	51 f1       	breq	.+84     	; 0x1a4a <EXIT_CheckStatusExtIntEnable+0xdc>
    19f6:	46 c0       	rjmp	.+140    	; 0x1a84 <EXIT_CheckStatusExtIntEnable+0x116>
    19f8:	28 85       	ldd	r18, Y+8	; 0x08
    19fa:	39 85       	ldd	r19, Y+9	; 0x09
    19fc:	23 30       	cpi	r18, 0x03	; 3
    19fe:	31 05       	cpc	r19, r1
    1a00:	31 f0       	breq	.+12     	; 0x1a0e <EXIT_CheckStatusExtIntEnable+0xa0>
    1a02:	88 85       	ldd	r24, Y+8	; 0x08
    1a04:	99 85       	ldd	r25, Y+9	; 0x09
    1a06:	84 30       	cpi	r24, 0x04	; 4
    1a08:	91 05       	cpc	r25, r1
    1a0a:	81 f0       	breq	.+32     	; 0x1a2c <EXIT_CheckStatusExtIntEnable+0xbe>
    1a0c:	3b c0       	rjmp	.+118    	; 0x1a84 <EXIT_CheckStatusExtIntEnable+0x116>
                        {
                        case EXIT_UINT8_LOW_LEVEL_EDGE:
                                CLEAR_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC00);
    1a0e:	a5 e5       	ldi	r26, 0x55	; 85
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e5 e5       	ldi	r30, 0x55	; 85
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	8e 7f       	andi	r24, 0xFE	; 254
    1a1a:	8c 93       	st	X, r24
                                CLEAR_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC01);
    1a1c:	a5 e5       	ldi	r26, 0x55	; 85
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e5 e5       	ldi	r30, 0x55	; 85
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	8d 7f       	andi	r24, 0xFD	; 253
    1a28:	8c 93       	st	X, r24
    1a2a:	2c c0       	rjmp	.+88     	; 0x1a84 <EXIT_CheckStatusExtIntEnable+0x116>

                                break;
                        case EXIT_UINT8_LOGICAL_CHANGE_EDGE:
                                /* code */
                                SET_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC00);
    1a2c:	a5 e5       	ldi	r26, 0x55	; 85
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e5 e5       	ldi	r30, 0x55	; 85
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	81 60       	ori	r24, 0x01	; 1
    1a38:	8c 93       	st	X, r24
                                CLEAR_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC01);
    1a3a:	a5 e5       	ldi	r26, 0x55	; 85
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e5 e5       	ldi	r30, 0x55	; 85
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	8d 7f       	andi	r24, 0xFD	; 253
    1a46:	8c 93       	st	X, r24
    1a48:	1d c0       	rjmp	.+58     	; 0x1a84 <EXIT_CheckStatusExtIntEnable+0x116>
                                break;
                        case EXIT_UINT8_FALLING_EDGE:
                                /* code */
                                CLEAR_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC00);
    1a4a:	a5 e5       	ldi	r26, 0x55	; 85
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e5 e5       	ldi	r30, 0x55	; 85
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	8e 7f       	andi	r24, 0xFE	; 254
    1a56:	8c 93       	st	X, r24
                                SET_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC01);
    1a58:	a5 e5       	ldi	r26, 0x55	; 85
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e5 e5       	ldi	r30, 0x55	; 85
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	82 60       	ori	r24, 0x02	; 2
    1a64:	8c 93       	st	X, r24
    1a66:	0e c0       	rjmp	.+28     	; 0x1a84 <EXIT_CheckStatusExtIntEnable+0x116>
                                break;
                        case EXIT_UINT8_RIASING_EDGE:
                                /* code */
                                SET_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC00);
    1a68:	a5 e5       	ldi	r26, 0x55	; 85
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e5 e5       	ldi	r30, 0x55	; 85
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	81 60       	ori	r24, 0x01	; 1
    1a74:	8c 93       	st	X, r24
                                SET_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC01);
    1a76:	a5 e5       	ldi	r26, 0x55	; 85
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e5 e5       	ldi	r30, 0x55	; 85
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	82 60       	ori	r24, 0x02	; 2
    1a82:	8c 93       	st	X, r24
                                break;
                        default:
                                break;
                        }
                        SET_BIT(EXTI__UINT8_GICR_REG, GICR_INT0);
    1a84:	ab e5       	ldi	r26, 0x5B	; 91
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	eb e5       	ldi	r30, 0x5B	; 91
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	80 64       	ori	r24, 0x40	; 64
    1a90:	8c 93       	st	X, r24
    1a92:	8d c0       	rjmp	.+282    	; 0x1bae <EXIT_CheckStatusExtIntEnable+0x240>
                        break;
                case INT1:
                        switch (Copy__Uint8ExtIntEdge)
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	3f 83       	std	Y+7, r19	; 0x07
    1a9c:	2e 83       	std	Y+6, r18	; 0x06
    1a9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa0:	9f 81       	ldd	r25, Y+7	; 0x07
    1aa2:	82 30       	cpi	r24, 0x02	; 2
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <EXIT_CheckStatusExtIntEnable+0x13c>
    1aa8:	43 c0       	rjmp	.+134    	; 0x1b30 <EXIT_CheckStatusExtIntEnable+0x1c2>
    1aaa:	2e 81       	ldd	r18, Y+6	; 0x06
    1aac:	3f 81       	ldd	r19, Y+7	; 0x07
    1aae:	23 30       	cpi	r18, 0x03	; 3
    1ab0:	31 05       	cpc	r19, r1
    1ab2:	34 f4       	brge	.+12     	; 0x1ac0 <EXIT_CheckStatusExtIntEnable+0x152>
    1ab4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab8:	81 30       	cpi	r24, 0x01	; 1
    1aba:	91 05       	cpc	r25, r1
    1abc:	51 f1       	breq	.+84     	; 0x1b12 <EXIT_CheckStatusExtIntEnable+0x1a4>
    1abe:	46 c0       	rjmp	.+140    	; 0x1b4c <EXIT_CheckStatusExtIntEnable+0x1de>
    1ac0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ac2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ac4:	23 30       	cpi	r18, 0x03	; 3
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	31 f0       	breq	.+12     	; 0x1ad6 <EXIT_CheckStatusExtIntEnable+0x168>
    1aca:	8e 81       	ldd	r24, Y+6	; 0x06
    1acc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ace:	84 30       	cpi	r24, 0x04	; 4
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	81 f0       	breq	.+32     	; 0x1af4 <EXIT_CheckStatusExtIntEnable+0x186>
    1ad4:	3b c0       	rjmp	.+118    	; 0x1b4c <EXIT_CheckStatusExtIntEnable+0x1de>
                        {
                        case EXIT_UINT8_LOW_LEVEL_EDGE:
                                CLEAR_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC10);
    1ad6:	a5 e5       	ldi	r26, 0x55	; 85
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e5 e5       	ldi	r30, 0x55	; 85
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	8b 7f       	andi	r24, 0xFB	; 251
    1ae2:	8c 93       	st	X, r24
                                CLEAR_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC11);
    1ae4:	a5 e5       	ldi	r26, 0x55	; 85
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e5 e5       	ldi	r30, 0x55	; 85
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	87 7f       	andi	r24, 0xF7	; 247
    1af0:	8c 93       	st	X, r24
    1af2:	2c c0       	rjmp	.+88     	; 0x1b4c <EXIT_CheckStatusExtIntEnable+0x1de>

                                break;
                        case EXIT_UINT8_LOGICAL_CHANGE_EDGE:
                                /* code */
                                SET_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC10);
    1af4:	a5 e5       	ldi	r26, 0x55	; 85
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e5 e5       	ldi	r30, 0x55	; 85
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	84 60       	ori	r24, 0x04	; 4
    1b00:	8c 93       	st	X, r24
                                CLEAR_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC11);
    1b02:	a5 e5       	ldi	r26, 0x55	; 85
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e5 e5       	ldi	r30, 0x55	; 85
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	87 7f       	andi	r24, 0xF7	; 247
    1b0e:	8c 93       	st	X, r24
    1b10:	1d c0       	rjmp	.+58     	; 0x1b4c <EXIT_CheckStatusExtIntEnable+0x1de>
                                break;
                        case EXIT_UINT8_FALLING_EDGE:
                                /* code */
                                CLEAR_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC10);
    1b12:	a5 e5       	ldi	r26, 0x55	; 85
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e5 e5       	ldi	r30, 0x55	; 85
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	8b 7f       	andi	r24, 0xFB	; 251
    1b1e:	8c 93       	st	X, r24
                                SET_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC11);
    1b20:	a5 e5       	ldi	r26, 0x55	; 85
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e5 e5       	ldi	r30, 0x55	; 85
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	88 60       	ori	r24, 0x08	; 8
    1b2c:	8c 93       	st	X, r24
    1b2e:	0e c0       	rjmp	.+28     	; 0x1b4c <EXIT_CheckStatusExtIntEnable+0x1de>
                                break;
                        case EXIT_UINT8_RIASING_EDGE:
                                /* code */
                                SET_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC10);
    1b30:	a5 e5       	ldi	r26, 0x55	; 85
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e5 e5       	ldi	r30, 0x55	; 85
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	84 60       	ori	r24, 0x04	; 4
    1b3c:	8c 93       	st	X, r24
                                SET_BIT(EXTI__UINT8_MCUCR_REG, MCUCR_ISC11);
    1b3e:	a5 e5       	ldi	r26, 0x55	; 85
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e5 e5       	ldi	r30, 0x55	; 85
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	88 60       	ori	r24, 0x08	; 8
    1b4a:	8c 93       	st	X, r24
                                break;
                        default:
                                break;
                        }

                        SET_BIT(EXTI__UINT8_GICR_REG, GICR_INT1);
    1b4c:	ab e5       	ldi	r26, 0x5B	; 91
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	eb e5       	ldi	r30, 0x5B	; 91
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	80 68       	ori	r24, 0x80	; 128
    1b58:	8c 93       	st	X, r24
    1b5a:	29 c0       	rjmp	.+82     	; 0x1bae <EXIT_CheckStatusExtIntEnable+0x240>

                        break;
                case INT2:
                        /* code */
                        switch (Copy__Uint8ExtIntEdge)
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	3d 83       	std	Y+5, r19	; 0x05
    1b64:	2c 83       	std	Y+4, r18	; 0x04
    1b66:	8c 81       	ldd	r24, Y+4	; 0x04
    1b68:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6a:	81 30       	cpi	r24, 0x01	; 1
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	31 f0       	breq	.+12     	; 0x1b7c <EXIT_CheckStatusExtIntEnable+0x20e>
    1b70:	2c 81       	ldd	r18, Y+4	; 0x04
    1b72:	3d 81       	ldd	r19, Y+5	; 0x05
    1b74:	22 30       	cpi	r18, 0x02	; 2
    1b76:	31 05       	cpc	r19, r1
    1b78:	49 f0       	breq	.+18     	; 0x1b8c <EXIT_CheckStatusExtIntEnable+0x21e>
    1b7a:	0f c0       	rjmp	.+30     	; 0x1b9a <EXIT_CheckStatusExtIntEnable+0x22c>
                        {
                        case EXIT_UINT8_FALLING_EDGE:
                                SET_BIT(EXTI__UINT8_MCUCSR_REG, MCUCSR_ISC2);
    1b7c:	a4 e5       	ldi	r26, 0x54	; 84
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e4 e5       	ldi	r30, 0x54	; 84
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	80 64       	ori	r24, 0x40	; 64
    1b88:	8c 93       	st	X, r24
    1b8a:	07 c0       	rjmp	.+14     	; 0x1b9a <EXIT_CheckStatusExtIntEnable+0x22c>
                                break;
                        case EXIT_UINT8_RIASING_EDGE:
                                /* code */
                                CLEAR_BIT(EXTI__UINT8_MCUCSR_REG, MCUCSR_ISC2);
    1b8c:	a4 e5       	ldi	r26, 0x54	; 84
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	e4 e5       	ldi	r30, 0x54	; 84
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	8f 7b       	andi	r24, 0xBF	; 191
    1b98:	8c 93       	st	X, r24
                                break;
                        default:
                                break;
                        }
                        SET_BIT(EXTI__UINT8_GICR_REG, GICR_INT2);
    1b9a:	ab e5       	ldi	r26, 0x5B	; 91
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	eb e5       	ldi	r30, 0x5B	; 91
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	80 62       	ori	r24, 0x20	; 32
    1ba6:	8c 93       	st	X, r24
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <EXIT_CheckStatusExtIntEnable+0x240>
                        break;
                }
        }
        else
        {
                Local_CheckStatusReturnValue = CHECK_FAIL;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	89 83       	std	Y+1, r24	; 0x01
        }

        return Local_CheckStatusReturnValue;
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bb0:	2b 96       	adiw	r28, 0x0b	; 11
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <EXTI_CheckStatusDisable>:

CheckStatus EXTI_CheckStatusDisable(_uint8 Copy__Uint8ExtIntId)
{
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <EXTI_CheckStatusDisable+0x6>
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <EXTI_CheckStatusDisable+0x8>
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	8a 83       	std	Y+2, r24	; 0x02
        CheckStatus Local_CheckStatusReturnValue = CHECK_SUCCESS;
    1bd0:	19 82       	std	Y+1, r1	; 0x01
        switch (Copy__Uint8ExtIntId)
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	3c 83       	std	Y+4, r19	; 0x04
    1bda:	2b 83       	std	Y+3, r18	; 0x03
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	9c 81       	ldd	r25, Y+4	; 0x04
    1be0:	81 30       	cpi	r24, 0x01	; 1
    1be2:	91 05       	cpc	r25, r1
    1be4:	89 f0       	breq	.+34     	; 0x1c08 <EXTI_CheckStatusDisable+0x46>
    1be6:	2b 81       	ldd	r18, Y+3	; 0x03
    1be8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bea:	22 30       	cpi	r18, 0x02	; 2
    1bec:	31 05       	cpc	r19, r1
    1bee:	a1 f0       	breq	.+40     	; 0x1c18 <EXTI_CheckStatusDisable+0x56>
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	c1 f4       	brne	.+48     	; 0x1c28 <EXTI_CheckStatusDisable+0x66>
        {
        case INT0:
                CLEAR_BIT(EXTI__UINT8_GICR_REG, GICR_INT0);
    1bf8:	ab e5       	ldi	r26, 0x5B	; 91
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	eb e5       	ldi	r30, 0x5B	; 91
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	8f 7b       	andi	r24, 0xBF	; 191
    1c04:	8c 93       	st	X, r24
    1c06:	12 c0       	rjmp	.+36     	; 0x1c2c <EXTI_CheckStatusDisable+0x6a>
                break;
        case INT1:
                CLEAR_BIT(EXTI__UINT8_GICR_REG, GICR_INT1);
    1c08:	ab e5       	ldi	r26, 0x5B	; 91
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	eb e5       	ldi	r30, 0x5B	; 91
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	8f 77       	andi	r24, 0x7F	; 127
    1c14:	8c 93       	st	X, r24
    1c16:	0a c0       	rjmp	.+20     	; 0x1c2c <EXTI_CheckStatusDisable+0x6a>
                break;
        case INT2:
                CLEAR_BIT(EXTI__UINT8_GICR_REG, GICR_INT2);
    1c18:	ab e5       	ldi	r26, 0x5B	; 91
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	eb e5       	ldi	r30, 0x5B	; 91
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	8f 7d       	andi	r24, 0xDF	; 223
    1c24:	8c 93       	st	X, r24
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <EXTI_CheckStatusDisable+0x6a>
                break;
        default:
                Local_CheckStatusReturnValue = CHECK_FAIL;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	89 83       	std	Y+1, r24	; 0x01
                break;
        }
        return Local_CheckStatusReturnValue;
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	08 95       	ret

00001c3c <GIE_VoidEnable>:
#include"GIE_private.h"
#include"GIE_config.h"


Void  GIE_VoidEnable(Void) 
{
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
         SET_BIT(GIE_UINT8_STATUS_REG,GIE_GLOBAL_INT_STATE);
    1c44:	af e5       	ldi	r26, 0x5F	; 95
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	ef e5       	ldi	r30, 0x5F	; 95
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	80 68       	ori	r24, 0x80	; 128
    1c50:	8c 93       	st	X, r24
}
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <GIE_VoidDisable>:

Void  GIE_VoidDisable(Void)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
        CLEAR_BIT(GIE_UINT8_STATUS_REG,GIE_GLOBAL_INT_STATE);
    1c60:	af e5       	ldi	r26, 0x5F	; 95
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	ef e5       	ldi	r30, 0x5F	; 95
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	8f 77       	andi	r24, 0x7F	; 127
    1c6c:	8c 93       	st	X, r24
}
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <LCD_VoidInit>:
                                     LCD_A_UINT8CHAR6,
                                     LCD_A_UINT8CHAR7,
                                     LCD_A_UINT8CHAR8};
/* Defination Of Function  */
Void LCD_VoidInit(Void)
{
    1c74:	0f 93       	push	r16
    1c76:	1f 93       	push	r17
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	cc 54       	subi	r28, 0x4C	; 76
    1c82:	d0 40       	sbci	r29, 0x00	; 0
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e7 5b       	subi	r30, 0xB7	; 183
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	ac e0       	ldi	r26, 0x0C	; 12
    1c9a:	b2 e4       	ldi	r27, 0x42	; 66
    1c9c:	80 83       	st	Z, r24
    1c9e:	91 83       	std	Z+1, r25	; 0x01
    1ca0:	a2 83       	std	Z+2, r26	; 0x02
    1ca2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca4:	8e 01       	movw	r16, r28
    1ca6:	0b 5b       	subi	r16, 0xBB	; 187
    1ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    1caa:	fe 01       	movw	r30, r28
    1cac:	e7 5b       	subi	r30, 0xB7	; 183
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	60 81       	ld	r22, Z
    1cb2:	71 81       	ldd	r23, Z+1	; 0x01
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
    1cb6:	93 81       	ldd	r25, Z+3	; 0x03
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	4a ef       	ldi	r20, 0xFA	; 250
    1cbe:	54 e4       	ldi	r21, 0x44	; 68
    1cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	f8 01       	movw	r30, r16
    1cca:	80 83       	st	Z, r24
    1ccc:	91 83       	std	Z+1, r25	; 0x01
    1cce:	a2 83       	std	Z+2, r26	; 0x02
    1cd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	eb 5b       	subi	r30, 0xBB	; 187
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	60 81       	ld	r22, Z
    1cda:	71 81       	ldd	r23, Z+1	; 0x01
    1cdc:	82 81       	ldd	r24, Z+2	; 0x02
    1cde:	93 81       	ldd	r25, Z+3	; 0x03
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e8       	ldi	r20, 0x80	; 128
    1ce6:	5f e3       	ldi	r21, 0x3F	; 63
    1ce8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cec:	88 23       	and	r24, r24
    1cee:	44 f4       	brge	.+16     	; 0x1d00 <LCD_VoidInit+0x8c>
		__ticks = 1;
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	ed 5b       	subi	r30, 0xBD	; 189
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	91 83       	std	Z+1, r25	; 0x01
    1cfc:	80 83       	st	Z, r24
    1cfe:	64 c0       	rjmp	.+200    	; 0x1dc8 <LCD_VoidInit+0x154>
	else if (__tmp > 65535)
    1d00:	fe 01       	movw	r30, r28
    1d02:	eb 5b       	subi	r30, 0xBB	; 187
    1d04:	ff 4f       	sbci	r31, 0xFF	; 255
    1d06:	60 81       	ld	r22, Z
    1d08:	71 81       	ldd	r23, Z+1	; 0x01
    1d0a:	82 81       	ldd	r24, Z+2	; 0x02
    1d0c:	93 81       	ldd	r25, Z+3	; 0x03
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	3f ef       	ldi	r19, 0xFF	; 255
    1d12:	4f e7       	ldi	r20, 0x7F	; 127
    1d14:	57 e4       	ldi	r21, 0x47	; 71
    1d16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d1a:	18 16       	cp	r1, r24
    1d1c:	0c f0       	brlt	.+2      	; 0x1d20 <LCD_VoidInit+0xac>
    1d1e:	43 c0       	rjmp	.+134    	; 0x1da6 <LCD_VoidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d20:	fe 01       	movw	r30, r28
    1d22:	e7 5b       	subi	r30, 0xB7	; 183
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	60 81       	ld	r22, Z
    1d28:	71 81       	ldd	r23, Z+1	; 0x01
    1d2a:	82 81       	ldd	r24, Z+2	; 0x02
    1d2c:	93 81       	ldd	r25, Z+3	; 0x03
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e2       	ldi	r20, 0x20	; 32
    1d34:	51 e4       	ldi	r21, 0x41	; 65
    1d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	8e 01       	movw	r16, r28
    1d40:	0d 5b       	subi	r16, 0xBD	; 189
    1d42:	1f 4f       	sbci	r17, 0xFF	; 255
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	f8 01       	movw	r30, r16
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	80 83       	st	Z, r24
    1d56:	1f c0       	rjmp	.+62     	; 0x1d96 <LCD_VoidInit+0x122>
    1d58:	fe 01       	movw	r30, r28
    1d5a:	ef 5b       	subi	r30, 0xBF	; 191
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	88 ec       	ldi	r24, 0xC8	; 200
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d66:	fe 01       	movw	r30, r28
    1d68:	ef 5b       	subi	r30, 0xBF	; 191
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	80 81       	ld	r24, Z
    1d6e:	91 81       	ldd	r25, Z+1	; 0x01
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <LCD_VoidInit+0xfc>
    1d74:	fe 01       	movw	r30, r28
    1d76:	ef 5b       	subi	r30, 0xBF	; 191
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	91 83       	std	Z+1, r25	; 0x01
    1d7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7e:	de 01       	movw	r26, r28
    1d80:	ad 5b       	subi	r26, 0xBD	; 189
    1d82:	bf 4f       	sbci	r27, 0xFF	; 255
    1d84:	fe 01       	movw	r30, r28
    1d86:	ed 5b       	subi	r30, 0xBD	; 189
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	80 81       	ld	r24, Z
    1d8c:	91 81       	ldd	r25, Z+1	; 0x01
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	11 96       	adiw	r26, 0x01	; 1
    1d92:	9c 93       	st	X, r25
    1d94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d96:	fe 01       	movw	r30, r28
    1d98:	ed 5b       	subi	r30, 0xBD	; 189
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	80 81       	ld	r24, Z
    1d9e:	91 81       	ldd	r25, Z+1	; 0x01
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	d1 f6       	brne	.-76     	; 0x1d58 <LCD_VoidInit+0xe4>
    1da4:	24 c0       	rjmp	.+72     	; 0x1dee <LCD_VoidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da6:	8e 01       	movw	r16, r28
    1da8:	0d 5b       	subi	r16, 0xBD	; 189
    1daa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dac:	fe 01       	movw	r30, r28
    1dae:	eb 5b       	subi	r30, 0xBB	; 187
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	60 81       	ld	r22, Z
    1db4:	71 81       	ldd	r23, Z+1	; 0x01
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	f8 01       	movw	r30, r16
    1dc4:	91 83       	std	Z+1, r25	; 0x01
    1dc6:	80 83       	st	Z, r24
    1dc8:	fe 01       	movw	r30, r28
    1dca:	ed 5b       	subi	r30, 0xBD	; 189
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	80 81       	ld	r24, Z
    1dd0:	91 81       	ldd	r25, Z+1	; 0x01
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	ff 96       	adiw	r30, 0x3f	; 63
    1dd6:	91 83       	std	Z+1, r25	; 0x01
    1dd8:	80 83       	st	Z, r24
    1dda:	fe 01       	movw	r30, r28
    1ddc:	ff 96       	adiw	r30, 0x3f	; 63
    1dde:	80 81       	ld	r24, Z
    1de0:	91 81       	ldd	r25, Z+1	; 0x01
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <LCD_VoidInit+0x16e>
    1de6:	fe 01       	movw	r30, r28
    1de8:	ff 96       	adiw	r30, 0x3f	; 63
    1dea:	91 83       	std	Z+1, r25	; 0x01
    1dec:	80 83       	st	Z, r24

        _delay_ms(35);
        /* Function Set Cmnd 0b00111000*/

        LCD_CheckStatusSendCmnd(0b00111000);
    1dee:	88 e3       	ldi	r24, 0x38	; 56
    1df0:	0e 94 fd 10 	call	0x21fa	; 0x21fa <LCD_CheckStatusSendCmnd>
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a0 e2       	ldi	r26, 0x20	; 32
    1dfa:	b2 e4       	ldi	r27, 0x42	; 66
    1dfc:	8b af       	std	Y+59, r24	; 0x3b
    1dfe:	9c af       	std	Y+60, r25	; 0x3c
    1e00:	ad af       	std	Y+61, r26	; 0x3d
    1e02:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e04:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e06:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e08:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e0c:	2b ea       	ldi	r18, 0xAB	; 171
    1e0e:	3a ea       	ldi	r19, 0xAA	; 170
    1e10:	4a e2       	ldi	r20, 0x2A	; 42
    1e12:	50 e4       	ldi	r21, 0x40	; 64
    1e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	8f ab       	std	Y+55, r24	; 0x37
    1e1e:	98 af       	std	Y+56, r25	; 0x38
    1e20:	a9 af       	std	Y+57, r26	; 0x39
    1e22:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1e24:	6f a9       	ldd	r22, Y+55	; 0x37
    1e26:	78 ad       	ldd	r23, Y+56	; 0x38
    1e28:	89 ad       	ldd	r24, Y+57	; 0x39
    1e2a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e8       	ldi	r20, 0x80	; 128
    1e32:	5f e3       	ldi	r21, 0x3F	; 63
    1e34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e38:	88 23       	and	r24, r24
    1e3a:	1c f4       	brge	.+6      	; 0x1e42 <LCD_VoidInit+0x1ce>
		__ticks = 1;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	8e ab       	std	Y+54, r24	; 0x36
    1e40:	91 c0       	rjmp	.+290    	; 0x1f64 <LCD_VoidInit+0x2f0>
	else if (__tmp > 255)
    1e42:	6f a9       	ldd	r22, Y+55	; 0x37
    1e44:	78 ad       	ldd	r23, Y+56	; 0x38
    1e46:	89 ad       	ldd	r24, Y+57	; 0x39
    1e48:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	4f e7       	ldi	r20, 0x7F	; 127
    1e50:	53 e4       	ldi	r21, 0x43	; 67
    1e52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e56:	18 16       	cp	r1, r24
    1e58:	0c f0       	brlt	.+2      	; 0x1e5c <LCD_VoidInit+0x1e8>
    1e5a:	7b c0       	rjmp	.+246    	; 0x1f52 <LCD_VoidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1e5c:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e5e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e60:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e62:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	4a e7       	ldi	r20, 0x7A	; 122
    1e6a:	54 e4       	ldi	r21, 0x44	; 68
    1e6c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	8a ab       	std	Y+50, r24	; 0x32
    1e76:	9b ab       	std	Y+51, r25	; 0x33
    1e78:	ac ab       	std	Y+52, r26	; 0x34
    1e7a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7c:	6a a9       	ldd	r22, Y+50	; 0x32
    1e7e:	7b a9       	ldd	r23, Y+51	; 0x33
    1e80:	8c a9       	ldd	r24, Y+52	; 0x34
    1e82:	9d a9       	ldd	r25, Y+53	; 0x35
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	4a ef       	ldi	r20, 0xFA	; 250
    1e8a:	54 e4       	ldi	r21, 0x44	; 68
    1e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	8e a7       	std	Y+46, r24	; 0x2e
    1e96:	9f a7       	std	Y+47, r25	; 0x2f
    1e98:	a8 ab       	std	Y+48, r26	; 0x30
    1e9a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1e9c:	6e a5       	ldd	r22, Y+46	; 0x2e
    1e9e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ea0:	88 a9       	ldd	r24, Y+48	; 0x30
    1ea2:	99 a9       	ldd	r25, Y+49	; 0x31
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e8       	ldi	r20, 0x80	; 128
    1eaa:	5f e3       	ldi	r21, 0x3F	; 63
    1eac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eb0:	88 23       	and	r24, r24
    1eb2:	2c f4       	brge	.+10     	; 0x1ebe <LCD_VoidInit+0x24a>
		__ticks = 1;
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9d a7       	std	Y+45, r25	; 0x2d
    1eba:	8c a7       	std	Y+44, r24	; 0x2c
    1ebc:	3f c0       	rjmp	.+126    	; 0x1f3c <LCD_VoidInit+0x2c8>
	else if (__tmp > 65535)
    1ebe:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ec0:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ec2:	88 a9       	ldd	r24, Y+48	; 0x30
    1ec4:	99 a9       	ldd	r25, Y+49	; 0x31
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	3f ef       	ldi	r19, 0xFF	; 255
    1eca:	4f e7       	ldi	r20, 0x7F	; 127
    1ecc:	57 e4       	ldi	r21, 0x47	; 71
    1ece:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ed2:	18 16       	cp	r1, r24
    1ed4:	4c f5       	brge	.+82     	; 0x1f28 <LCD_VoidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed6:	6a a9       	ldd	r22, Y+50	; 0x32
    1ed8:	7b a9       	ldd	r23, Y+51	; 0x33
    1eda:	8c a9       	ldd	r24, Y+52	; 0x34
    1edc:	9d a9       	ldd	r25, Y+53	; 0x35
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e2       	ldi	r20, 0x20	; 32
    1ee4:	51 e4       	ldi	r21, 0x41	; 65
    1ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	bc 01       	movw	r22, r24
    1ef0:	cd 01       	movw	r24, r26
    1ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	9d a7       	std	Y+45, r25	; 0x2d
    1efc:	8c a7       	std	Y+44, r24	; 0x2c
    1efe:	0f c0       	rjmp	.+30     	; 0x1f1e <LCD_VoidInit+0x2aa>
    1f00:	88 ec       	ldi	r24, 0xC8	; 200
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	9b a7       	std	Y+43, r25	; 0x2b
    1f06:	8a a7       	std	Y+42, r24	; 0x2a
    1f08:	8a a5       	ldd	r24, Y+42	; 0x2a
    1f0a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	f1 f7       	brne	.-4      	; 0x1f0c <LCD_VoidInit+0x298>
    1f10:	9b a7       	std	Y+43, r25	; 0x2b
    1f12:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f14:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f16:	9d a5       	ldd	r25, Y+45	; 0x2d
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	9d a7       	std	Y+45, r25	; 0x2d
    1f1c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f20:	9d a5       	ldd	r25, Y+45	; 0x2d
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	69 f7       	brne	.-38     	; 0x1f00 <LCD_VoidInit+0x28c>
    1f26:	24 c0       	rjmp	.+72     	; 0x1f70 <LCD_VoidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f28:	6e a5       	ldd	r22, Y+46	; 0x2e
    1f2a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1f2c:	88 a9       	ldd	r24, Y+48	; 0x30
    1f2e:	99 a9       	ldd	r25, Y+49	; 0x31
    1f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	9d a7       	std	Y+45, r25	; 0x2d
    1f3a:	8c a7       	std	Y+44, r24	; 0x2c
    1f3c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f3e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1f40:	99 a7       	std	Y+41, r25	; 0x29
    1f42:	88 a7       	std	Y+40, r24	; 0x28
    1f44:	88 a5       	ldd	r24, Y+40	; 0x28
    1f46:	99 a5       	ldd	r25, Y+41	; 0x29
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <LCD_VoidInit+0x2d4>
    1f4c:	99 a7       	std	Y+41, r25	; 0x29
    1f4e:	88 a7       	std	Y+40, r24	; 0x28
    1f50:	0f c0       	rjmp	.+30     	; 0x1f70 <LCD_VoidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f52:	6f a9       	ldd	r22, Y+55	; 0x37
    1f54:	78 ad       	ldd	r23, Y+56	; 0x38
    1f56:	89 ad       	ldd	r24, Y+57	; 0x39
    1f58:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	8e ab       	std	Y+54, r24	; 0x36
    1f64:	8e a9       	ldd	r24, Y+54	; 0x36
    1f66:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f68:	8f a1       	ldd	r24, Y+39	; 0x27
    1f6a:	8a 95       	dec	r24
    1f6c:	f1 f7       	brne	.-4      	; 0x1f6a <LCD_VoidInit+0x2f6>
    1f6e:	8f a3       	std	Y+39, r24	; 0x27
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00001111);
    1f70:	8f e0       	ldi	r24, 0x0F	; 15
    1f72:	0e 94 fd 10 	call	0x21fa	; 0x21fa <LCD_CheckStatusSendCmnd>
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	a0 e2       	ldi	r26, 0x20	; 32
    1f7c:	b2 e4       	ldi	r27, 0x42	; 66
    1f7e:	8b a3       	std	Y+35, r24	; 0x23
    1f80:	9c a3       	std	Y+36, r25	; 0x24
    1f82:	ad a3       	std	Y+37, r26	; 0x25
    1f84:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f86:	6b a1       	ldd	r22, Y+35	; 0x23
    1f88:	7c a1       	ldd	r23, Y+36	; 0x24
    1f8a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f8c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f8e:	2b ea       	ldi	r18, 0xAB	; 171
    1f90:	3a ea       	ldi	r19, 0xAA	; 170
    1f92:	4a e2       	ldi	r20, 0x2A	; 42
    1f94:	50 e4       	ldi	r21, 0x40	; 64
    1f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	8f 8f       	std	Y+31, r24	; 0x1f
    1fa0:	98 a3       	std	Y+32, r25	; 0x20
    1fa2:	a9 a3       	std	Y+33, r26	; 0x21
    1fa4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1fa6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1fa8:	78 a1       	ldd	r23, Y+32	; 0x20
    1faa:	89 a1       	ldd	r24, Y+33	; 0x21
    1fac:	9a a1       	ldd	r25, Y+34	; 0x22
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e8       	ldi	r20, 0x80	; 128
    1fb4:	5f e3       	ldi	r21, 0x3F	; 63
    1fb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fba:	88 23       	and	r24, r24
    1fbc:	1c f4       	brge	.+6      	; 0x1fc4 <LCD_VoidInit+0x350>
		__ticks = 1;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	8e 8f       	std	Y+30, r24	; 0x1e
    1fc2:	91 c0       	rjmp	.+290    	; 0x20e6 <LCD_VoidInit+0x472>
	else if (__tmp > 255)
    1fc4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1fc6:	78 a1       	ldd	r23, Y+32	; 0x20
    1fc8:	89 a1       	ldd	r24, Y+33	; 0x21
    1fca:	9a a1       	ldd	r25, Y+34	; 0x22
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	4f e7       	ldi	r20, 0x7F	; 127
    1fd2:	53 e4       	ldi	r21, 0x43	; 67
    1fd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fd8:	18 16       	cp	r1, r24
    1fda:	0c f0       	brlt	.+2      	; 0x1fde <LCD_VoidInit+0x36a>
    1fdc:	7b c0       	rjmp	.+246    	; 0x20d4 <LCD_VoidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1fde:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe0:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe2:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe4:	9e a1       	ldd	r25, Y+38	; 0x26
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	4a e7       	ldi	r20, 0x7A	; 122
    1fec:	54 e4       	ldi	r21, 0x44	; 68
    1fee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	8a 8f       	std	Y+26, r24	; 0x1a
    1ff8:	9b 8f       	std	Y+27, r25	; 0x1b
    1ffa:	ac 8f       	std	Y+28, r26	; 0x1c
    1ffc:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffe:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2000:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2002:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2004:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a ef       	ldi	r20, 0xFA	; 250
    200c:	54 e4       	ldi	r21, 0x44	; 68
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	8e 8b       	std	Y+22, r24	; 0x16
    2018:	9f 8b       	std	Y+23, r25	; 0x17
    201a:	a8 8f       	std	Y+24, r26	; 0x18
    201c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    201e:	6e 89       	ldd	r22, Y+22	; 0x16
    2020:	7f 89       	ldd	r23, Y+23	; 0x17
    2022:	88 8d       	ldd	r24, Y+24	; 0x18
    2024:	99 8d       	ldd	r25, Y+25	; 0x19
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e8       	ldi	r20, 0x80	; 128
    202c:	5f e3       	ldi	r21, 0x3F	; 63
    202e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2032:	88 23       	and	r24, r24
    2034:	2c f4       	brge	.+10     	; 0x2040 <LCD_VoidInit+0x3cc>
		__ticks = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9d 8b       	std	Y+21, r25	; 0x15
    203c:	8c 8b       	std	Y+20, r24	; 0x14
    203e:	3f c0       	rjmp	.+126    	; 0x20be <LCD_VoidInit+0x44a>
	else if (__tmp > 65535)
    2040:	6e 89       	ldd	r22, Y+22	; 0x16
    2042:	7f 89       	ldd	r23, Y+23	; 0x17
    2044:	88 8d       	ldd	r24, Y+24	; 0x18
    2046:	99 8d       	ldd	r25, Y+25	; 0x19
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	3f ef       	ldi	r19, 0xFF	; 255
    204c:	4f e7       	ldi	r20, 0x7F	; 127
    204e:	57 e4       	ldi	r21, 0x47	; 71
    2050:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2054:	18 16       	cp	r1, r24
    2056:	4c f5       	brge	.+82     	; 0x20aa <LCD_VoidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2058:	6a 8d       	ldd	r22, Y+26	; 0x1a
    205a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    205c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    205e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e2       	ldi	r20, 0x20	; 32
    2066:	51 e4       	ldi	r21, 0x41	; 65
    2068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9d 8b       	std	Y+21, r25	; 0x15
    207e:	8c 8b       	std	Y+20, r24	; 0x14
    2080:	0f c0       	rjmp	.+30     	; 0x20a0 <LCD_VoidInit+0x42c>
    2082:	88 ec       	ldi	r24, 0xC8	; 200
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	9b 8b       	std	Y+19, r25	; 0x13
    2088:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    208a:	8a 89       	ldd	r24, Y+18	; 0x12
    208c:	9b 89       	ldd	r25, Y+19	; 0x13
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_VoidInit+0x41a>
    2092:	9b 8b       	std	Y+19, r25	; 0x13
    2094:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2096:	8c 89       	ldd	r24, Y+20	; 0x14
    2098:	9d 89       	ldd	r25, Y+21	; 0x15
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	9d 8b       	std	Y+21, r25	; 0x15
    209e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a0:	8c 89       	ldd	r24, Y+20	; 0x14
    20a2:	9d 89       	ldd	r25, Y+21	; 0x15
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	69 f7       	brne	.-38     	; 0x2082 <LCD_VoidInit+0x40e>
    20a8:	24 c0       	rjmp	.+72     	; 0x20f2 <LCD_VoidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20aa:	6e 89       	ldd	r22, Y+22	; 0x16
    20ac:	7f 89       	ldd	r23, Y+23	; 0x17
    20ae:	88 8d       	ldd	r24, Y+24	; 0x18
    20b0:	99 8d       	ldd	r25, Y+25	; 0x19
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	9d 8b       	std	Y+21, r25	; 0x15
    20bc:	8c 8b       	std	Y+20, r24	; 0x14
    20be:	8c 89       	ldd	r24, Y+20	; 0x14
    20c0:	9d 89       	ldd	r25, Y+21	; 0x15
    20c2:	99 8b       	std	Y+17, r25	; 0x11
    20c4:	88 8b       	std	Y+16, r24	; 0x10
    20c6:	88 89       	ldd	r24, Y+16	; 0x10
    20c8:	99 89       	ldd	r25, Y+17	; 0x11
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <LCD_VoidInit+0x456>
    20ce:	99 8b       	std	Y+17, r25	; 0x11
    20d0:	88 8b       	std	Y+16, r24	; 0x10
    20d2:	0f c0       	rjmp	.+30     	; 0x20f2 <LCD_VoidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20d4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    20d6:	78 a1       	ldd	r23, Y+32	; 0x20
    20d8:	89 a1       	ldd	r24, Y+33	; 0x21
    20da:	9a a1       	ldd	r25, Y+34	; 0x22
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	8e 8f       	std	Y+30, r24	; 0x1e
    20e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20e8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ec:	8a 95       	dec	r24
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <LCD_VoidInit+0x478>
    20f0:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00000001);
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <LCD_CheckStatusSendCmnd>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	a0 e0       	ldi	r26, 0x00	; 0
    20fe:	b0 e4       	ldi	r27, 0x40	; 64
    2100:	8b 87       	std	Y+11, r24	; 0x0b
    2102:	9c 87       	std	Y+12, r25	; 0x0c
    2104:	ad 87       	std	Y+13, r26	; 0x0d
    2106:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2108:	6b 85       	ldd	r22, Y+11	; 0x0b
    210a:	7c 85       	ldd	r23, Y+12	; 0x0c
    210c:	8d 85       	ldd	r24, Y+13	; 0x0d
    210e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	4a ef       	ldi	r20, 0xFA	; 250
    2116:	54 e4       	ldi	r21, 0x44	; 68
    2118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	8f 83       	std	Y+7, r24	; 0x07
    2122:	98 87       	std	Y+8, r25	; 0x08
    2124:	a9 87       	std	Y+9, r26	; 0x09
    2126:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2128:	6f 81       	ldd	r22, Y+7	; 0x07
    212a:	78 85       	ldd	r23, Y+8	; 0x08
    212c:	89 85       	ldd	r24, Y+9	; 0x09
    212e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5f e3       	ldi	r21, 0x3F	; 63
    2138:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    213c:	88 23       	and	r24, r24
    213e:	2c f4       	brge	.+10     	; 0x214a <LCD_VoidInit+0x4d6>
		__ticks = 1;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9e 83       	std	Y+6, r25	; 0x06
    2146:	8d 83       	std	Y+5, r24	; 0x05
    2148:	3f c0       	rjmp	.+126    	; 0x21c8 <LCD_VoidInit+0x554>
	else if (__tmp > 65535)
    214a:	6f 81       	ldd	r22, Y+7	; 0x07
    214c:	78 85       	ldd	r23, Y+8	; 0x08
    214e:	89 85       	ldd	r24, Y+9	; 0x09
    2150:	9a 85       	ldd	r25, Y+10	; 0x0a
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	3f ef       	ldi	r19, 0xFF	; 255
    2156:	4f e7       	ldi	r20, 0x7F	; 127
    2158:	57 e4       	ldi	r21, 0x47	; 71
    215a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    215e:	18 16       	cp	r1, r24
    2160:	4c f5       	brge	.+82     	; 0x21b4 <LCD_VoidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2162:	6b 85       	ldd	r22, Y+11	; 0x0b
    2164:	7c 85       	ldd	r23, Y+12	; 0x0c
    2166:	8d 85       	ldd	r24, Y+13	; 0x0d
    2168:	9e 85       	ldd	r25, Y+14	; 0x0e
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e2       	ldi	r20, 0x20	; 32
    2170:	51 e4       	ldi	r21, 0x41	; 65
    2172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	9e 83       	std	Y+6, r25	; 0x06
    2188:	8d 83       	std	Y+5, r24	; 0x05
    218a:	0f c0       	rjmp	.+30     	; 0x21aa <LCD_VoidInit+0x536>
    218c:	88 ec       	ldi	r24, 0xC8	; 200
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	9c 83       	std	Y+4, r25	; 0x04
    2192:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	9c 81       	ldd	r25, Y+4	; 0x04
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <LCD_VoidInit+0x524>
    219c:	9c 83       	std	Y+4, r25	; 0x04
    219e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a0:	8d 81       	ldd	r24, Y+5	; 0x05
    21a2:	9e 81       	ldd	r25, Y+6	; 0x06
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	9e 83       	std	Y+6, r25	; 0x06
    21a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
    21ac:	9e 81       	ldd	r25, Y+6	; 0x06
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	69 f7       	brne	.-38     	; 0x218c <LCD_VoidInit+0x518>
    21b2:	14 c0       	rjmp	.+40     	; 0x21dc <LCD_VoidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b4:	6f 81       	ldd	r22, Y+7	; 0x07
    21b6:	78 85       	ldd	r23, Y+8	; 0x08
    21b8:	89 85       	ldd	r24, Y+9	; 0x09
    21ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	9e 83       	std	Y+6, r25	; 0x06
    21c6:	8d 83       	std	Y+5, r24	; 0x05
    21c8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ca:	9e 81       	ldd	r25, Y+6	; 0x06
    21cc:	9a 83       	std	Y+2, r25	; 0x02
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	9a 81       	ldd	r25, Y+2	; 0x02
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <LCD_VoidInit+0x560>
    21d8:	9a 83       	std	Y+2, r25	; 0x02
    21da:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
        LCD_CheckStatusSendCmnd(0b00000110);
    21dc:	86 e0       	ldi	r24, 0x06	; 6
    21de:	0e 94 fd 10 	call	0x21fa	; 0x21fa <LCD_CheckStatusSendCmnd>
}
    21e2:	c4 5b       	subi	r28, 0xB4	; 180
    21e4:	df 4f       	sbci	r29, 0xFF	; 255
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	1f 91       	pop	r17
    21f6:	0f 91       	pop	r16
    21f8:	08 95       	ret

000021fa <LCD_CheckStatusSendCmnd>:
CheckStatus LCD_CheckStatusSendCmnd(_uint8 Copy__Uint8Cmnd)
{
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	e2 97       	sbiw	r28, 0x32	; 50
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	f8 94       	cli
    2208:	de bf       	out	0x3e, r29	; 62
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	cd bf       	out	0x3d, r28	; 61
    220e:	8a ab       	std	Y+50, r24	; 0x32
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2210:	19 aa       	std	Y+49, r1	; 0x31
         3-Send CMND byte  to the Data Pins of LCD
         4-PULSE of Enable E = 1 ,E = 0
        */
        if (Copy__Uint8Cmnd <= 255)
        {
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_LOW);
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	60 e0       	ldi	r22, 0x00	; 0
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	61 e0       	ldi	r22, 0x01	; 1
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, Copy__Uint8Cmnd);
    2226:	82 e0       	ldi	r24, 0x02	; 2
    2228:	6a a9       	ldd	r22, Y+50	; 0x32
    222a:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	62 e0       	ldi	r22, 0x02	; 2
    2232:	41 e0       	ldi	r20, 0x01	; 1
    2234:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	a0 e8       	ldi	r26, 0x80	; 128
    223e:	bf e3       	ldi	r27, 0x3F	; 63
    2240:	8d a7       	std	Y+45, r24	; 0x2d
    2242:	9e a7       	std	Y+46, r25	; 0x2e
    2244:	af a7       	std	Y+47, r26	; 0x2f
    2246:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2248:	6d a5       	ldd	r22, Y+45	; 0x2d
    224a:	7e a5       	ldd	r23, Y+46	; 0x2e
    224c:	8f a5       	ldd	r24, Y+47	; 0x2f
    224e:	98 a9       	ldd	r25, Y+48	; 0x30
    2250:	2b ea       	ldi	r18, 0xAB	; 171
    2252:	3a ea       	ldi	r19, 0xAA	; 170
    2254:	4a e2       	ldi	r20, 0x2A	; 42
    2256:	50 e4       	ldi	r21, 0x40	; 64
    2258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	89 a7       	std	Y+41, r24	; 0x29
    2262:	9a a7       	std	Y+42, r25	; 0x2a
    2264:	ab a7       	std	Y+43, r26	; 0x2b
    2266:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2268:	69 a5       	ldd	r22, Y+41	; 0x29
    226a:	7a a5       	ldd	r23, Y+42	; 0x2a
    226c:	8b a5       	ldd	r24, Y+43	; 0x2b
    226e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e8       	ldi	r20, 0x80	; 128
    2276:	5f e3       	ldi	r21, 0x3F	; 63
    2278:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    227c:	88 23       	and	r24, r24
    227e:	1c f4       	brge	.+6      	; 0x2286 <LCD_CheckStatusSendCmnd+0x8c>
		__ticks = 1;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	88 a7       	std	Y+40, r24	; 0x28
    2284:	91 c0       	rjmp	.+290    	; 0x23a8 <LCD_CheckStatusSendCmnd+0x1ae>
	else if (__tmp > 255)
    2286:	69 a5       	ldd	r22, Y+41	; 0x29
    2288:	7a a5       	ldd	r23, Y+42	; 0x2a
    228a:	8b a5       	ldd	r24, Y+43	; 0x2b
    228c:	9c a5       	ldd	r25, Y+44	; 0x2c
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	4f e7       	ldi	r20, 0x7F	; 127
    2294:	53 e4       	ldi	r21, 0x43	; 67
    2296:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    229a:	18 16       	cp	r1, r24
    229c:	0c f0       	brlt	.+2      	; 0x22a0 <LCD_CheckStatusSendCmnd+0xa6>
    229e:	7b c0       	rjmp	.+246    	; 0x2396 <LCD_CheckStatusSendCmnd+0x19c>
	{
		_delay_ms(__us / 1000.0);
    22a0:	6d a5       	ldd	r22, Y+45	; 0x2d
    22a2:	7e a5       	ldd	r23, Y+46	; 0x2e
    22a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22a6:	98 a9       	ldd	r25, Y+48	; 0x30
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	4a e7       	ldi	r20, 0x7A	; 122
    22ae:	54 e4       	ldi	r21, 0x44	; 68
    22b0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	8c a3       	std	Y+36, r24	; 0x24
    22ba:	9d a3       	std	Y+37, r25	; 0x25
    22bc:	ae a3       	std	Y+38, r26	; 0x26
    22be:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c0:	6c a1       	ldd	r22, Y+36	; 0x24
    22c2:	7d a1       	ldd	r23, Y+37	; 0x25
    22c4:	8e a1       	ldd	r24, Y+38	; 0x26
    22c6:	9f a1       	ldd	r25, Y+39	; 0x27
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	4a ef       	ldi	r20, 0xFA	; 250
    22ce:	54 e4       	ldi	r21, 0x44	; 68
    22d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	88 a3       	std	Y+32, r24	; 0x20
    22da:	99 a3       	std	Y+33, r25	; 0x21
    22dc:	aa a3       	std	Y+34, r26	; 0x22
    22de:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    22e0:	68 a1       	ldd	r22, Y+32	; 0x20
    22e2:	79 a1       	ldd	r23, Y+33	; 0x21
    22e4:	8a a1       	ldd	r24, Y+34	; 0x22
    22e6:	9b a1       	ldd	r25, Y+35	; 0x23
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e8       	ldi	r20, 0x80	; 128
    22ee:	5f e3       	ldi	r21, 0x3F	; 63
    22f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f4:	88 23       	and	r24, r24
    22f6:	2c f4       	brge	.+10     	; 0x2302 <LCD_CheckStatusSendCmnd+0x108>
		__ticks = 1;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9f 8f       	std	Y+31, r25	; 0x1f
    22fe:	8e 8f       	std	Y+30, r24	; 0x1e
    2300:	3f c0       	rjmp	.+126    	; 0x2380 <LCD_CheckStatusSendCmnd+0x186>
	else if (__tmp > 65535)
    2302:	68 a1       	ldd	r22, Y+32	; 0x20
    2304:	79 a1       	ldd	r23, Y+33	; 0x21
    2306:	8a a1       	ldd	r24, Y+34	; 0x22
    2308:	9b a1       	ldd	r25, Y+35	; 0x23
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	3f ef       	ldi	r19, 0xFF	; 255
    230e:	4f e7       	ldi	r20, 0x7F	; 127
    2310:	57 e4       	ldi	r21, 0x47	; 71
    2312:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2316:	18 16       	cp	r1, r24
    2318:	4c f5       	brge	.+82     	; 0x236c <LCD_CheckStatusSendCmnd+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231a:	6c a1       	ldd	r22, Y+36	; 0x24
    231c:	7d a1       	ldd	r23, Y+37	; 0x25
    231e:	8e a1       	ldd	r24, Y+38	; 0x26
    2320:	9f a1       	ldd	r25, Y+39	; 0x27
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e2       	ldi	r20, 0x20	; 32
    2328:	51 e4       	ldi	r21, 0x41	; 65
    232a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	bc 01       	movw	r22, r24
    2334:	cd 01       	movw	r24, r26
    2336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9f 8f       	std	Y+31, r25	; 0x1f
    2340:	8e 8f       	std	Y+30, r24	; 0x1e
    2342:	0f c0       	rjmp	.+30     	; 0x2362 <LCD_CheckStatusSendCmnd+0x168>
    2344:	88 ec       	ldi	r24, 0xC8	; 200
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	9d 8f       	std	Y+29, r25	; 0x1d
    234a:	8c 8f       	std	Y+28, r24	; 0x1c
    234c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    234e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <LCD_CheckStatusSendCmnd+0x156>
    2354:	9d 8f       	std	Y+29, r25	; 0x1d
    2356:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2358:	8e 8d       	ldd	r24, Y+30	; 0x1e
    235a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	9f 8f       	std	Y+31, r25	; 0x1f
    2360:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2362:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2364:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	69 f7       	brne	.-38     	; 0x2344 <LCD_CheckStatusSendCmnd+0x14a>
    236a:	24 c0       	rjmp	.+72     	; 0x23b4 <LCD_CheckStatusSendCmnd+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236c:	68 a1       	ldd	r22, Y+32	; 0x20
    236e:	79 a1       	ldd	r23, Y+33	; 0x21
    2370:	8a a1       	ldd	r24, Y+34	; 0x22
    2372:	9b a1       	ldd	r25, Y+35	; 0x23
    2374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	9f 8f       	std	Y+31, r25	; 0x1f
    237e:	8e 8f       	std	Y+30, r24	; 0x1e
    2380:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2382:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2384:	9b 8f       	std	Y+27, r25	; 0x1b
    2386:	8a 8f       	std	Y+26, r24	; 0x1a
    2388:	8a 8d       	ldd	r24, Y+26	; 0x1a
    238a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <LCD_CheckStatusSendCmnd+0x192>
    2390:	9b 8f       	std	Y+27, r25	; 0x1b
    2392:	8a 8f       	std	Y+26, r24	; 0x1a
    2394:	0f c0       	rjmp	.+30     	; 0x23b4 <LCD_CheckStatusSendCmnd+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2396:	69 a5       	ldd	r22, Y+41	; 0x29
    2398:	7a a5       	ldd	r23, Y+42	; 0x2a
    239a:	8b a5       	ldd	r24, Y+43	; 0x2b
    239c:	9c a5       	ldd	r25, Y+44	; 0x2c
    239e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	88 a7       	std	Y+40, r24	; 0x28
    23a8:	88 a5       	ldd	r24, Y+40	; 0x28
    23aa:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23ac:	89 8d       	ldd	r24, Y+25	; 0x19
    23ae:	8a 95       	dec	r24
    23b0:	f1 f7       	brne	.-4      	; 0x23ae <LCD_CheckStatusSendCmnd+0x1b4>
    23b2:	89 8f       	std	Y+25, r24	; 0x19
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	62 e0       	ldi	r22, 0x02	; 2
    23b8:	40 e0       	ldi	r20, 0x00	; 0
    23ba:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	a0 e8       	ldi	r26, 0x80	; 128
    23c4:	bf e3       	ldi	r27, 0x3F	; 63
    23c6:	8d 8b       	std	Y+21, r24	; 0x15
    23c8:	9e 8b       	std	Y+22, r25	; 0x16
    23ca:	af 8b       	std	Y+23, r26	; 0x17
    23cc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23ce:	6d 89       	ldd	r22, Y+21	; 0x15
    23d0:	7e 89       	ldd	r23, Y+22	; 0x16
    23d2:	8f 89       	ldd	r24, Y+23	; 0x17
    23d4:	98 8d       	ldd	r25, Y+24	; 0x18
    23d6:	2b ea       	ldi	r18, 0xAB	; 171
    23d8:	3a ea       	ldi	r19, 0xAA	; 170
    23da:	4a e2       	ldi	r20, 0x2A	; 42
    23dc:	50 e4       	ldi	r21, 0x40	; 64
    23de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	89 8b       	std	Y+17, r24	; 0x11
    23e8:	9a 8b       	std	Y+18, r25	; 0x12
    23ea:	ab 8b       	std	Y+19, r26	; 0x13
    23ec:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    23ee:	69 89       	ldd	r22, Y+17	; 0x11
    23f0:	7a 89       	ldd	r23, Y+18	; 0x12
    23f2:	8b 89       	ldd	r24, Y+19	; 0x13
    23f4:	9c 89       	ldd	r25, Y+20	; 0x14
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e8       	ldi	r20, 0x80	; 128
    23fc:	5f e3       	ldi	r21, 0x3F	; 63
    23fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2402:	88 23       	and	r24, r24
    2404:	1c f4       	brge	.+6      	; 0x240c <LCD_CheckStatusSendCmnd+0x212>
		__ticks = 1;
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	88 8b       	std	Y+16, r24	; 0x10
    240a:	91 c0       	rjmp	.+290    	; 0x252e <LCD_CheckStatusSendCmnd+0x334>
	else if (__tmp > 255)
    240c:	69 89       	ldd	r22, Y+17	; 0x11
    240e:	7a 89       	ldd	r23, Y+18	; 0x12
    2410:	8b 89       	ldd	r24, Y+19	; 0x13
    2412:	9c 89       	ldd	r25, Y+20	; 0x14
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	4f e7       	ldi	r20, 0x7F	; 127
    241a:	53 e4       	ldi	r21, 0x43	; 67
    241c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2420:	18 16       	cp	r1, r24
    2422:	0c f0       	brlt	.+2      	; 0x2426 <LCD_CheckStatusSendCmnd+0x22c>
    2424:	7b c0       	rjmp	.+246    	; 0x251c <LCD_CheckStatusSendCmnd+0x322>
	{
		_delay_ms(__us / 1000.0);
    2426:	6d 89       	ldd	r22, Y+21	; 0x15
    2428:	7e 89       	ldd	r23, Y+22	; 0x16
    242a:	8f 89       	ldd	r24, Y+23	; 0x17
    242c:	98 8d       	ldd	r25, Y+24	; 0x18
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	4a e7       	ldi	r20, 0x7A	; 122
    2434:	54 e4       	ldi	r21, 0x44	; 68
    2436:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	8c 87       	std	Y+12, r24	; 0x0c
    2440:	9d 87       	std	Y+13, r25	; 0x0d
    2442:	ae 87       	std	Y+14, r26	; 0x0e
    2444:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2446:	6c 85       	ldd	r22, Y+12	; 0x0c
    2448:	7d 85       	ldd	r23, Y+13	; 0x0d
    244a:	8e 85       	ldd	r24, Y+14	; 0x0e
    244c:	9f 85       	ldd	r25, Y+15	; 0x0f
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	4a ef       	ldi	r20, 0xFA	; 250
    2454:	54 e4       	ldi	r21, 0x44	; 68
    2456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	88 87       	std	Y+8, r24	; 0x08
    2460:	99 87       	std	Y+9, r25	; 0x09
    2462:	aa 87       	std	Y+10, r26	; 0x0a
    2464:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2466:	68 85       	ldd	r22, Y+8	; 0x08
    2468:	79 85       	ldd	r23, Y+9	; 0x09
    246a:	8a 85       	ldd	r24, Y+10	; 0x0a
    246c:	9b 85       	ldd	r25, Y+11	; 0x0b
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e8       	ldi	r20, 0x80	; 128
    2474:	5f e3       	ldi	r21, 0x3F	; 63
    2476:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    247a:	88 23       	and	r24, r24
    247c:	2c f4       	brge	.+10     	; 0x2488 <LCD_CheckStatusSendCmnd+0x28e>
		__ticks = 1;
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	9f 83       	std	Y+7, r25	; 0x07
    2484:	8e 83       	std	Y+6, r24	; 0x06
    2486:	3f c0       	rjmp	.+126    	; 0x2506 <LCD_CheckStatusSendCmnd+0x30c>
	else if (__tmp > 65535)
    2488:	68 85       	ldd	r22, Y+8	; 0x08
    248a:	79 85       	ldd	r23, Y+9	; 0x09
    248c:	8a 85       	ldd	r24, Y+10	; 0x0a
    248e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	3f ef       	ldi	r19, 0xFF	; 255
    2494:	4f e7       	ldi	r20, 0x7F	; 127
    2496:	57 e4       	ldi	r21, 0x47	; 71
    2498:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    249c:	18 16       	cp	r1, r24
    249e:	4c f5       	brge	.+82     	; 0x24f2 <LCD_CheckStatusSendCmnd+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a0:	6c 85       	ldd	r22, Y+12	; 0x0c
    24a2:	7d 85       	ldd	r23, Y+13	; 0x0d
    24a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    24a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e2       	ldi	r20, 0x20	; 32
    24ae:	51 e4       	ldi	r21, 0x41	; 65
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	9f 83       	std	Y+7, r25	; 0x07
    24c6:	8e 83       	std	Y+6, r24	; 0x06
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <LCD_CheckStatusSendCmnd+0x2ee>
    24ca:	88 ec       	ldi	r24, 0xC8	; 200
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9d 83       	std	Y+5, r25	; 0x05
    24d0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24d2:	8c 81       	ldd	r24, Y+4	; 0x04
    24d4:	9d 81       	ldd	r25, Y+5	; 0x05
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <LCD_CheckStatusSendCmnd+0x2dc>
    24da:	9d 83       	std	Y+5, r25	; 0x05
    24dc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24de:	8e 81       	ldd	r24, Y+6	; 0x06
    24e0:	9f 81       	ldd	r25, Y+7	; 0x07
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	9f 83       	std	Y+7, r25	; 0x07
    24e6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e8:	8e 81       	ldd	r24, Y+6	; 0x06
    24ea:	9f 81       	ldd	r25, Y+7	; 0x07
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	69 f7       	brne	.-38     	; 0x24ca <LCD_CheckStatusSendCmnd+0x2d0>
    24f0:	24 c0       	rjmp	.+72     	; 0x253a <LCD_CheckStatusSendCmnd+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f2:	68 85       	ldd	r22, Y+8	; 0x08
    24f4:	79 85       	ldd	r23, Y+9	; 0x09
    24f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    24f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9f 83       	std	Y+7, r25	; 0x07
    2504:	8e 83       	std	Y+6, r24	; 0x06
    2506:	8e 81       	ldd	r24, Y+6	; 0x06
    2508:	9f 81       	ldd	r25, Y+7	; 0x07
    250a:	9b 83       	std	Y+3, r25	; 0x03
    250c:	8a 83       	std	Y+2, r24	; 0x02
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	9b 81       	ldd	r25, Y+3	; 0x03
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	f1 f7       	brne	.-4      	; 0x2512 <LCD_CheckStatusSendCmnd+0x318>
    2516:	9b 83       	std	Y+3, r25	; 0x03
    2518:	8a 83       	std	Y+2, r24	; 0x02
    251a:	0f c0       	rjmp	.+30     	; 0x253a <LCD_CheckStatusSendCmnd+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    251c:	69 89       	ldd	r22, Y+17	; 0x11
    251e:	7a 89       	ldd	r23, Y+18	; 0x12
    2520:	8b 89       	ldd	r24, Y+19	; 0x13
    2522:	9c 89       	ldd	r25, Y+20	; 0x14
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	88 8b       	std	Y+16, r24	; 0x10
    252e:	88 89       	ldd	r24, Y+16	; 0x10
    2530:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	8a 95       	dec	r24
    2536:	f1 f7       	brne	.-4      	; 0x2534 <LCD_CheckStatusSendCmnd+0x33a>
    2538:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    253a:	89 a9       	ldd	r24, Y+49	; 0x31
}
    253c:	e2 96       	adiw	r28, 0x32	; 50
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <LCD_CheckStatusSendChar>:
CheckStatus LCD_CheckStatusSendChar(_uint8 Copy__Uint8Char)
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	e2 97       	sbiw	r28, 0x32	; 50
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	8a ab       	std	Y+50, r24	; 0x32
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2564:	19 aa       	std	Y+49, r1	; 0x31
         3-Send CMND byte  to the Data Pins of LCD
         4-PULSE of Enable E = 1 ,E = 0
        */
        if (Copy__Uint8Char <= 255)
        {
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_HIGH);
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	60 e0       	ldi	r22, 0x00	; 0
    256a:	41 e0       	ldi	r20, 0x01	; 1
    256c:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	61 e0       	ldi	r22, 0x01	; 1
    2574:	40 e0       	ldi	r20, 0x00	; 0
    2576:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, Copy__Uint8Char);
    257a:	82 e0       	ldi	r24, 0x02	; 2
    257c:	6a a9       	ldd	r22, Y+50	; 0x32
    257e:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	62 e0       	ldi	r22, 0x02	; 2
    2586:	41 e0       	ldi	r20, 0x01	; 1
    2588:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	a0 e8       	ldi	r26, 0x80	; 128
    2592:	bf e3       	ldi	r27, 0x3F	; 63
    2594:	8d a7       	std	Y+45, r24	; 0x2d
    2596:	9e a7       	std	Y+46, r25	; 0x2e
    2598:	af a7       	std	Y+47, r26	; 0x2f
    259a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    259c:	6d a5       	ldd	r22, Y+45	; 0x2d
    259e:	7e a5       	ldd	r23, Y+46	; 0x2e
    25a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    25a2:	98 a9       	ldd	r25, Y+48	; 0x30
    25a4:	2b ea       	ldi	r18, 0xAB	; 171
    25a6:	3a ea       	ldi	r19, 0xAA	; 170
    25a8:	4a e2       	ldi	r20, 0x2A	; 42
    25aa:	50 e4       	ldi	r21, 0x40	; 64
    25ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	89 a7       	std	Y+41, r24	; 0x29
    25b6:	9a a7       	std	Y+42, r25	; 0x2a
    25b8:	ab a7       	std	Y+43, r26	; 0x2b
    25ba:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    25bc:	69 a5       	ldd	r22, Y+41	; 0x29
    25be:	7a a5       	ldd	r23, Y+42	; 0x2a
    25c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    25c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e8       	ldi	r20, 0x80	; 128
    25ca:	5f e3       	ldi	r21, 0x3F	; 63
    25cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25d0:	88 23       	and	r24, r24
    25d2:	1c f4       	brge	.+6      	; 0x25da <LCD_CheckStatusSendChar+0x8c>
		__ticks = 1;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	88 a7       	std	Y+40, r24	; 0x28
    25d8:	91 c0       	rjmp	.+290    	; 0x26fc <LCD_CheckStatusSendChar+0x1ae>
	else if (__tmp > 255)
    25da:	69 a5       	ldd	r22, Y+41	; 0x29
    25dc:	7a a5       	ldd	r23, Y+42	; 0x2a
    25de:	8b a5       	ldd	r24, Y+43	; 0x2b
    25e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	4f e7       	ldi	r20, 0x7F	; 127
    25e8:	53 e4       	ldi	r21, 0x43	; 67
    25ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25ee:	18 16       	cp	r1, r24
    25f0:	0c f0       	brlt	.+2      	; 0x25f4 <LCD_CheckStatusSendChar+0xa6>
    25f2:	7b c0       	rjmp	.+246    	; 0x26ea <LCD_CheckStatusSendChar+0x19c>
	{
		_delay_ms(__us / 1000.0);
    25f4:	6d a5       	ldd	r22, Y+45	; 0x2d
    25f6:	7e a5       	ldd	r23, Y+46	; 0x2e
    25f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    25fa:	98 a9       	ldd	r25, Y+48	; 0x30
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	4a e7       	ldi	r20, 0x7A	; 122
    2602:	54 e4       	ldi	r21, 0x44	; 68
    2604:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	8c a3       	std	Y+36, r24	; 0x24
    260e:	9d a3       	std	Y+37, r25	; 0x25
    2610:	ae a3       	std	Y+38, r26	; 0x26
    2612:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2614:	6c a1       	ldd	r22, Y+36	; 0x24
    2616:	7d a1       	ldd	r23, Y+37	; 0x25
    2618:	8e a1       	ldd	r24, Y+38	; 0x26
    261a:	9f a1       	ldd	r25, Y+39	; 0x27
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	4a ef       	ldi	r20, 0xFA	; 250
    2622:	54 e4       	ldi	r21, 0x44	; 68
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	88 a3       	std	Y+32, r24	; 0x20
    262e:	99 a3       	std	Y+33, r25	; 0x21
    2630:	aa a3       	std	Y+34, r26	; 0x22
    2632:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2634:	68 a1       	ldd	r22, Y+32	; 0x20
    2636:	79 a1       	ldd	r23, Y+33	; 0x21
    2638:	8a a1       	ldd	r24, Y+34	; 0x22
    263a:	9b a1       	ldd	r25, Y+35	; 0x23
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e8       	ldi	r20, 0x80	; 128
    2642:	5f e3       	ldi	r21, 0x3F	; 63
    2644:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2648:	88 23       	and	r24, r24
    264a:	2c f4       	brge	.+10     	; 0x2656 <LCD_CheckStatusSendChar+0x108>
		__ticks = 1;
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	9f 8f       	std	Y+31, r25	; 0x1f
    2652:	8e 8f       	std	Y+30, r24	; 0x1e
    2654:	3f c0       	rjmp	.+126    	; 0x26d4 <LCD_CheckStatusSendChar+0x186>
	else if (__tmp > 65535)
    2656:	68 a1       	ldd	r22, Y+32	; 0x20
    2658:	79 a1       	ldd	r23, Y+33	; 0x21
    265a:	8a a1       	ldd	r24, Y+34	; 0x22
    265c:	9b a1       	ldd	r25, Y+35	; 0x23
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	3f ef       	ldi	r19, 0xFF	; 255
    2662:	4f e7       	ldi	r20, 0x7F	; 127
    2664:	57 e4       	ldi	r21, 0x47	; 71
    2666:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    266a:	18 16       	cp	r1, r24
    266c:	4c f5       	brge	.+82     	; 0x26c0 <LCD_CheckStatusSendChar+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266e:	6c a1       	ldd	r22, Y+36	; 0x24
    2670:	7d a1       	ldd	r23, Y+37	; 0x25
    2672:	8e a1       	ldd	r24, Y+38	; 0x26
    2674:	9f a1       	ldd	r25, Y+39	; 0x27
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e2       	ldi	r20, 0x20	; 32
    267c:	51 e4       	ldi	r21, 0x41	; 65
    267e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	bc 01       	movw	r22, r24
    2688:	cd 01       	movw	r24, r26
    268a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	9f 8f       	std	Y+31, r25	; 0x1f
    2694:	8e 8f       	std	Y+30, r24	; 0x1e
    2696:	0f c0       	rjmp	.+30     	; 0x26b6 <LCD_CheckStatusSendChar+0x168>
    2698:	88 ec       	ldi	r24, 0xC8	; 200
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	9d 8f       	std	Y+29, r25	; 0x1d
    269e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <LCD_CheckStatusSendChar+0x156>
    26a8:	9d 8f       	std	Y+29, r25	; 0x1d
    26aa:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26ae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	9f 8f       	std	Y+31, r25	; 0x1f
    26b4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	69 f7       	brne	.-38     	; 0x2698 <LCD_CheckStatusSendChar+0x14a>
    26be:	24 c0       	rjmp	.+72     	; 0x2708 <LCD_CheckStatusSendChar+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c0:	68 a1       	ldd	r22, Y+32	; 0x20
    26c2:	79 a1       	ldd	r23, Y+33	; 0x21
    26c4:	8a a1       	ldd	r24, Y+34	; 0x22
    26c6:	9b a1       	ldd	r25, Y+35	; 0x23
    26c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	9f 8f       	std	Y+31, r25	; 0x1f
    26d2:	8e 8f       	std	Y+30, r24	; 0x1e
    26d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26d6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26d8:	9b 8f       	std	Y+27, r25	; 0x1b
    26da:	8a 8f       	std	Y+26, r24	; 0x1a
    26dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26de:	9b 8d       	ldd	r25, Y+27	; 0x1b
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <LCD_CheckStatusSendChar+0x192>
    26e4:	9b 8f       	std	Y+27, r25	; 0x1b
    26e6:	8a 8f       	std	Y+26, r24	; 0x1a
    26e8:	0f c0       	rjmp	.+30     	; 0x2708 <LCD_CheckStatusSendChar+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26ea:	69 a5       	ldd	r22, Y+41	; 0x29
    26ec:	7a a5       	ldd	r23, Y+42	; 0x2a
    26ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    26f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    26f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	88 a7       	std	Y+40, r24	; 0x28
    26fc:	88 a5       	ldd	r24, Y+40	; 0x28
    26fe:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2700:	89 8d       	ldd	r24, Y+25	; 0x19
    2702:	8a 95       	dec	r24
    2704:	f1 f7       	brne	.-4      	; 0x2702 <LCD_CheckStatusSendChar+0x1b4>
    2706:	89 8f       	std	Y+25, r24	; 0x19
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	62 e0       	ldi	r22, 0x02	; 2
    270c:	40 e0       	ldi	r20, 0x00	; 0
    270e:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	a0 e8       	ldi	r26, 0x80	; 128
    2718:	bf e3       	ldi	r27, 0x3F	; 63
    271a:	8d 8b       	std	Y+21, r24	; 0x15
    271c:	9e 8b       	std	Y+22, r25	; 0x16
    271e:	af 8b       	std	Y+23, r26	; 0x17
    2720:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2722:	6d 89       	ldd	r22, Y+21	; 0x15
    2724:	7e 89       	ldd	r23, Y+22	; 0x16
    2726:	8f 89       	ldd	r24, Y+23	; 0x17
    2728:	98 8d       	ldd	r25, Y+24	; 0x18
    272a:	2b ea       	ldi	r18, 0xAB	; 171
    272c:	3a ea       	ldi	r19, 0xAA	; 170
    272e:	4a e2       	ldi	r20, 0x2A	; 42
    2730:	50 e4       	ldi	r21, 0x40	; 64
    2732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	89 8b       	std	Y+17, r24	; 0x11
    273c:	9a 8b       	std	Y+18, r25	; 0x12
    273e:	ab 8b       	std	Y+19, r26	; 0x13
    2740:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2742:	69 89       	ldd	r22, Y+17	; 0x11
    2744:	7a 89       	ldd	r23, Y+18	; 0x12
    2746:	8b 89       	ldd	r24, Y+19	; 0x13
    2748:	9c 89       	ldd	r25, Y+20	; 0x14
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e8       	ldi	r20, 0x80	; 128
    2750:	5f e3       	ldi	r21, 0x3F	; 63
    2752:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2756:	88 23       	and	r24, r24
    2758:	1c f4       	brge	.+6      	; 0x2760 <LCD_CheckStatusSendChar+0x212>
		__ticks = 1;
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	88 8b       	std	Y+16, r24	; 0x10
    275e:	91 c0       	rjmp	.+290    	; 0x2882 <LCD_CheckStatusSendChar+0x334>
	else if (__tmp > 255)
    2760:	69 89       	ldd	r22, Y+17	; 0x11
    2762:	7a 89       	ldd	r23, Y+18	; 0x12
    2764:	8b 89       	ldd	r24, Y+19	; 0x13
    2766:	9c 89       	ldd	r25, Y+20	; 0x14
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	4f e7       	ldi	r20, 0x7F	; 127
    276e:	53 e4       	ldi	r21, 0x43	; 67
    2770:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2774:	18 16       	cp	r1, r24
    2776:	0c f0       	brlt	.+2      	; 0x277a <LCD_CheckStatusSendChar+0x22c>
    2778:	7b c0       	rjmp	.+246    	; 0x2870 <LCD_CheckStatusSendChar+0x322>
	{
		_delay_ms(__us / 1000.0);
    277a:	6d 89       	ldd	r22, Y+21	; 0x15
    277c:	7e 89       	ldd	r23, Y+22	; 0x16
    277e:	8f 89       	ldd	r24, Y+23	; 0x17
    2780:	98 8d       	ldd	r25, Y+24	; 0x18
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	4a e7       	ldi	r20, 0x7A	; 122
    2788:	54 e4       	ldi	r21, 0x44	; 68
    278a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	8c 87       	std	Y+12, r24	; 0x0c
    2794:	9d 87       	std	Y+13, r25	; 0x0d
    2796:	ae 87       	std	Y+14, r26	; 0x0e
    2798:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279a:	6c 85       	ldd	r22, Y+12	; 0x0c
    279c:	7d 85       	ldd	r23, Y+13	; 0x0d
    279e:	8e 85       	ldd	r24, Y+14	; 0x0e
    27a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	4a ef       	ldi	r20, 0xFA	; 250
    27a8:	54 e4       	ldi	r21, 0x44	; 68
    27aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	88 87       	std	Y+8, r24	; 0x08
    27b4:	99 87       	std	Y+9, r25	; 0x09
    27b6:	aa 87       	std	Y+10, r26	; 0x0a
    27b8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    27ba:	68 85       	ldd	r22, Y+8	; 0x08
    27bc:	79 85       	ldd	r23, Y+9	; 0x09
    27be:	8a 85       	ldd	r24, Y+10	; 0x0a
    27c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e8       	ldi	r20, 0x80	; 128
    27c8:	5f e3       	ldi	r21, 0x3F	; 63
    27ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ce:	88 23       	and	r24, r24
    27d0:	2c f4       	brge	.+10     	; 0x27dc <LCD_CheckStatusSendChar+0x28e>
		__ticks = 1;
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	9f 83       	std	Y+7, r25	; 0x07
    27d8:	8e 83       	std	Y+6, r24	; 0x06
    27da:	3f c0       	rjmp	.+126    	; 0x285a <LCD_CheckStatusSendChar+0x30c>
	else if (__tmp > 65535)
    27dc:	68 85       	ldd	r22, Y+8	; 0x08
    27de:	79 85       	ldd	r23, Y+9	; 0x09
    27e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    27e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	3f ef       	ldi	r19, 0xFF	; 255
    27e8:	4f e7       	ldi	r20, 0x7F	; 127
    27ea:	57 e4       	ldi	r21, 0x47	; 71
    27ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27f0:	18 16       	cp	r1, r24
    27f2:	4c f5       	brge	.+82     	; 0x2846 <LCD_CheckStatusSendChar+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    27f6:	7d 85       	ldd	r23, Y+13	; 0x0d
    27f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    27fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e2       	ldi	r20, 0x20	; 32
    2802:	51 e4       	ldi	r21, 0x41	; 65
    2804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	bc 01       	movw	r22, r24
    280e:	cd 01       	movw	r24, r26
    2810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	9f 83       	std	Y+7, r25	; 0x07
    281a:	8e 83       	std	Y+6, r24	; 0x06
    281c:	0f c0       	rjmp	.+30     	; 0x283c <LCD_CheckStatusSendChar+0x2ee>
    281e:	88 ec       	ldi	r24, 0xC8	; 200
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	9d 83       	std	Y+5, r25	; 0x05
    2824:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2826:	8c 81       	ldd	r24, Y+4	; 0x04
    2828:	9d 81       	ldd	r25, Y+5	; 0x05
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	f1 f7       	brne	.-4      	; 0x282a <LCD_CheckStatusSendChar+0x2dc>
    282e:	9d 83       	std	Y+5, r25	; 0x05
    2830:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2832:	8e 81       	ldd	r24, Y+6	; 0x06
    2834:	9f 81       	ldd	r25, Y+7	; 0x07
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	9f 83       	std	Y+7, r25	; 0x07
    283a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283c:	8e 81       	ldd	r24, Y+6	; 0x06
    283e:	9f 81       	ldd	r25, Y+7	; 0x07
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	69 f7       	brne	.-38     	; 0x281e <LCD_CheckStatusSendChar+0x2d0>
    2844:	24 c0       	rjmp	.+72     	; 0x288e <LCD_CheckStatusSendChar+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2846:	68 85       	ldd	r22, Y+8	; 0x08
    2848:	79 85       	ldd	r23, Y+9	; 0x09
    284a:	8a 85       	ldd	r24, Y+10	; 0x0a
    284c:	9b 85       	ldd	r25, Y+11	; 0x0b
    284e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	9f 83       	std	Y+7, r25	; 0x07
    2858:	8e 83       	std	Y+6, r24	; 0x06
    285a:	8e 81       	ldd	r24, Y+6	; 0x06
    285c:	9f 81       	ldd	r25, Y+7	; 0x07
    285e:	9b 83       	std	Y+3, r25	; 0x03
    2860:	8a 83       	std	Y+2, r24	; 0x02
    2862:	8a 81       	ldd	r24, Y+2	; 0x02
    2864:	9b 81       	ldd	r25, Y+3	; 0x03
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	f1 f7       	brne	.-4      	; 0x2866 <LCD_CheckStatusSendChar+0x318>
    286a:	9b 83       	std	Y+3, r25	; 0x03
    286c:	8a 83       	std	Y+2, r24	; 0x02
    286e:	0f c0       	rjmp	.+30     	; 0x288e <LCD_CheckStatusSendChar+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2870:	69 89       	ldd	r22, Y+17	; 0x11
    2872:	7a 89       	ldd	r23, Y+18	; 0x12
    2874:	8b 89       	ldd	r24, Y+19	; 0x13
    2876:	9c 89       	ldd	r25, Y+20	; 0x14
    2878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	88 8b       	std	Y+16, r24	; 0x10
    2882:	88 89       	ldd	r24, Y+16	; 0x10
    2884:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	8a 95       	dec	r24
    288a:	f1 f7       	brne	.-4      	; 0x2888 <LCD_CheckStatusSendChar+0x33a>
    288c:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    288e:	89 a9       	ldd	r24, Y+49	; 0x31
}
    2890:	e2 96       	adiw	r28, 0x32	; 50
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	f8 94       	cli
    2896:	de bf       	out	0x3e, r29	; 62
    2898:	0f be       	out	0x3f, r0	; 63
    289a:	cd bf       	out	0x3d, r28	; 61
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	08 95       	ret

000028a2 <LCD_CheckStatusWriteString>:

CheckStatus LCD_CheckStatusWriteString(_uint8 *Copy_p__Uint8String)
{
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	00 d0       	rcall	.+0      	; 0x28a8 <LCD_CheckStatusWriteString+0x6>
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <LCD_CheckStatusWriteString+0x8>
    28aa:	0f 92       	push	r0
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
    28b0:	9c 83       	std	Y+4, r25	; 0x04
    28b2:	8b 83       	std	Y+3, r24	; 0x03
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    28b4:	1a 82       	std	Y+2, r1	; 0x02
        _uint8 Local__Uint8Index = DIO__UINT8_LOW;
    28b6:	19 82       	std	Y+1, r1	; 0x01

        if (Copy_p__Uint8String != NULL)
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ba:	9c 81       	ldd	r25, Y+4	; 0x04
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	f1 f0       	breq	.+60     	; 0x28fc <LCD_CheckStatusWriteString+0x5a>
        {
                for (Local__Uint8Index = DIO__UINT8_LOW; *(Copy_p__Uint8String + Local__Uint8Index) != '\0'; ++Local__Uint8Index)
    28c0:	19 82       	std	Y+1, r1	; 0x01
    28c2:	0e c0       	rjmp	.+28     	; 0x28e0 <LCD_CheckStatusWriteString+0x3e>
                {
                        LCD_CheckStatusSendChar4bit(*(Copy_p__Uint8String + Local__Uint8Index));
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	28 2f       	mov	r18, r24
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	8b 81       	ldd	r24, Y+3	; 0x03
    28cc:	9c 81       	ldd	r25, Y+4	; 0x04
    28ce:	fc 01       	movw	r30, r24
    28d0:	e2 0f       	add	r30, r18
    28d2:	f3 1f       	adc	r31, r19
    28d4:	80 81       	ld	r24, Z
    28d6:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
        _uint8 Local__Uint8Index = DIO__UINT8_LOW;

        if (Copy_p__Uint8String != NULL)
        {
                for (Local__Uint8Index = DIO__UINT8_LOW; *(Copy_p__Uint8String + Local__Uint8Index) != '\0'; ++Local__Uint8Index)
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	8f 5f       	subi	r24, 0xFF	; 255
    28de:	89 83       	std	Y+1, r24	; 0x01
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
    28e2:	28 2f       	mov	r18, r24
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	8b 81       	ldd	r24, Y+3	; 0x03
    28e8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ea:	fc 01       	movw	r30, r24
    28ec:	e2 0f       	add	r30, r18
    28ee:	f3 1f       	adc	r31, r19
    28f0:	80 81       	ld	r24, Z
    28f2:	88 23       	and	r24, r24
    28f4:	39 f7       	brne	.-50     	; 0x28c4 <LCD_CheckStatusWriteString+0x22>
                {
                        LCD_CheckStatusSendChar4bit(*(Copy_p__Uint8String + Local__Uint8Index));
                }

                return Local_CheckStausReturnValue;
    28f6:	8a 81       	ldd	r24, Y+2	; 0x02
    28f8:	8d 83       	std	Y+5, r24	; 0x05
    28fa:	04 c0       	rjmp	.+8      	; 0x2904 <LCD_CheckStatusWriteString+0x62>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	8a 83       	std	Y+2, r24	; 0x02
                return Local_CheckStausReturnValue;
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	8d 83       	std	Y+5, r24	; 0x05
    2904:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	0f 90       	pop	r0
    2910:	cf 91       	pop	r28
    2912:	df 91       	pop	r29
    2914:	08 95       	ret

00002916 <LCD_CheckStatusGoToXY>:
CheckStatus LCD_CheckStatusGoToXY(_uint8 Copy__Uint8LineNumber, _uint8 Copy__Uint8LocationNumber)
{
    2916:	df 93       	push	r29
    2918:	cf 93       	push	r28
    291a:	00 d0       	rcall	.+0      	; 0x291c <LCD_CheckStatusGoToXY+0x6>
    291c:	00 d0       	rcall	.+0      	; 0x291e <LCD_CheckStatusGoToXY+0x8>
    291e:	00 d0       	rcall	.+0      	; 0x2920 <LCD_CheckStatusGoToXY+0xa>
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	8a 83       	std	Y+2, r24	; 0x02
    2926:	6b 83       	std	Y+3, r22	; 0x03

        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2928:	19 82       	std	Y+1, r1	; 0x01

        if ((Copy__Uint8LineNumber <= 1) && (Copy__Uint8LocationNumber <= 39))
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	82 30       	cpi	r24, 0x02	; 2
    292e:	f0 f4       	brcc	.+60     	; 0x296c <LCD_CheckStatusGoToXY+0x56>
    2930:	8b 81       	ldd	r24, Y+3	; 0x03
    2932:	88 32       	cpi	r24, 0x28	; 40
    2934:	d8 f4       	brcc	.+54     	; 0x296c <LCD_CheckStatusGoToXY+0x56>
        {

                switch (Copy__Uint8LineNumber)
    2936:	8a 81       	ldd	r24, Y+2	; 0x02
    2938:	28 2f       	mov	r18, r24
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	3e 83       	std	Y+6, r19	; 0x06
    293e:	2d 83       	std	Y+5, r18	; 0x05
    2940:	8d 81       	ldd	r24, Y+5	; 0x05
    2942:	9e 81       	ldd	r25, Y+6	; 0x06
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	31 f0       	breq	.+12     	; 0x2954 <LCD_CheckStatusGoToXY+0x3e>
    2948:	2d 81       	ldd	r18, Y+5	; 0x05
    294a:	3e 81       	ldd	r19, Y+6	; 0x06
    294c:	21 30       	cpi	r18, 0x01	; 1
    294e:	31 05       	cpc	r19, r1
    2950:	31 f0       	breq	.+12     	; 0x295e <LCD_CheckStatusGoToXY+0x48>
    2952:	09 c0       	rjmp	.+18     	; 0x2966 <LCD_CheckStatusGoToXY+0x50>
                {
                case LCD__UINT8_LINE1:
                        LCD_CheckStatusSendCmnd4bit(0x80 + Copy__Uint8LocationNumber); //BASE +OFFSET
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	80 58       	subi	r24, 0x80	; 128
    2958:	0e 94 6d 20 	call	0x40da	; 0x40da <LCD_CheckStatusSendCmnd4bit>
    295c:	04 c0       	rjmp	.+8      	; 0x2966 <LCD_CheckStatusGoToXY+0x50>
                        break;
                case LCD__UINT8_LINE2:
                        LCD_CheckStatusSendCmnd4bit(0xc0 + Copy__Uint8LocationNumber);
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	80 54       	subi	r24, 0x40	; 64
    2962:	0e 94 6d 20 	call	0x40da	; 0x40da <LCD_CheckStatusSendCmnd4bit>
                        break;
                default:
                        break;
                }
                return Local_CheckStausReturnValue;
    2966:	39 81       	ldd	r19, Y+1	; 0x01
    2968:	3c 83       	std	Y+4, r19	; 0x04
    296a:	04 c0       	rjmp	.+8      	; 0x2974 <LCD_CheckStatusGoToXY+0x5e>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStausReturnValue;
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	8c 83       	std	Y+4, r24	; 0x04
    2974:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    2976:	26 96       	adiw	r28, 0x06	; 6
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	f8 94       	cli
    297c:	de bf       	out	0x3e, r29	; 62
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	cd bf       	out	0x3d, r28	; 61
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	08 95       	ret

00002988 <LCD_VoidClearDisplay>:

Void LCD_VoidClearDisplay(Void)
{
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
    2990:	2e 97       	sbiw	r28, 0x0e	; 14
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
        LCD_CheckStatusSendCmnd4bit(0x01);
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	0e 94 6d 20 	call	0x40da	; 0x40da <LCD_CheckStatusSendCmnd4bit>
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	a0 e0       	ldi	r26, 0x00	; 0
    29a8:	b0 e4       	ldi	r27, 0x40	; 64
    29aa:	8b 87       	std	Y+11, r24	; 0x0b
    29ac:	9c 87       	std	Y+12, r25	; 0x0c
    29ae:	ad 87       	std	Y+13, r26	; 0x0d
    29b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	4a ef       	ldi	r20, 0xFA	; 250
    29c0:	54 e4       	ldi	r21, 0x44	; 68
    29c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	8f 83       	std	Y+7, r24	; 0x07
    29cc:	98 87       	std	Y+8, r25	; 0x08
    29ce:	a9 87       	std	Y+9, r26	; 0x09
    29d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29d2:	6f 81       	ldd	r22, Y+7	; 0x07
    29d4:	78 85       	ldd	r23, Y+8	; 0x08
    29d6:	89 85       	ldd	r24, Y+9	; 0x09
    29d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	40 e8       	ldi	r20, 0x80	; 128
    29e0:	5f e3       	ldi	r21, 0x3F	; 63
    29e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29e6:	88 23       	and	r24, r24
    29e8:	2c f4       	brge	.+10     	; 0x29f4 <LCD_VoidClearDisplay+0x6c>
		__ticks = 1;
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	9e 83       	std	Y+6, r25	; 0x06
    29f0:	8d 83       	std	Y+5, r24	; 0x05
    29f2:	3f c0       	rjmp	.+126    	; 0x2a72 <LCD_VoidClearDisplay+0xea>
	else if (__tmp > 65535)
    29f4:	6f 81       	ldd	r22, Y+7	; 0x07
    29f6:	78 85       	ldd	r23, Y+8	; 0x08
    29f8:	89 85       	ldd	r24, Y+9	; 0x09
    29fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	3f ef       	ldi	r19, 0xFF	; 255
    2a00:	4f e7       	ldi	r20, 0x7F	; 127
    2a02:	57 e4       	ldi	r21, 0x47	; 71
    2a04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a08:	18 16       	cp	r1, r24
    2a0a:	4c f5       	brge	.+82     	; 0x2a5e <LCD_VoidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e2       	ldi	r20, 0x20	; 32
    2a1a:	51 e4       	ldi	r21, 0x41	; 65
    2a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	bc 01       	movw	r22, r24
    2a26:	cd 01       	movw	r24, r26
    2a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	9e 83       	std	Y+6, r25	; 0x06
    2a32:	8d 83       	std	Y+5, r24	; 0x05
    2a34:	0f c0       	rjmp	.+30     	; 0x2a54 <LCD_VoidClearDisplay+0xcc>
    2a36:	88 ec       	ldi	r24, 0xC8	; 200
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	9c 83       	std	Y+4, r25	; 0x04
    2a3c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a40:	9c 81       	ldd	r25, Y+4	; 0x04
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	f1 f7       	brne	.-4      	; 0x2a42 <LCD_VoidClearDisplay+0xba>
    2a46:	9c 83       	std	Y+4, r25	; 0x04
    2a48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	9e 83       	std	Y+6, r25	; 0x06
    2a52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a54:	8d 81       	ldd	r24, Y+5	; 0x05
    2a56:	9e 81       	ldd	r25, Y+6	; 0x06
    2a58:	00 97       	sbiw	r24, 0x00	; 0
    2a5a:	69 f7       	brne	.-38     	; 0x2a36 <LCD_VoidClearDisplay+0xae>
    2a5c:	14 c0       	rjmp	.+40     	; 0x2a86 <LCD_VoidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a60:	78 85       	ldd	r23, Y+8	; 0x08
    2a62:	89 85       	ldd	r24, Y+9	; 0x09
    2a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	9e 83       	std	Y+6, r25	; 0x06
    2a70:	8d 83       	std	Y+5, r24	; 0x05
    2a72:	8d 81       	ldd	r24, Y+5	; 0x05
    2a74:	9e 81       	ldd	r25, Y+6	; 0x06
    2a76:	9a 83       	std	Y+2, r25	; 0x02
    2a78:	89 83       	std	Y+1, r24	; 0x01
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	f1 f7       	brne	.-4      	; 0x2a7e <LCD_VoidClearDisplay+0xf6>
    2a82:	9a 83       	std	Y+2, r25	; 0x02
    2a84:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
}
    2a86:	2e 96       	adiw	r28, 0x0e	; 14
    2a88:	0f b6       	in	r0, 0x3f	; 63
    2a8a:	f8 94       	cli
    2a8c:	de bf       	out	0x3e, r29	; 62
    2a8e:	0f be       	out	0x3f, r0	; 63
    2a90:	cd bf       	out	0x3d, r28	; 61
    2a92:	cf 91       	pop	r28
    2a94:	df 91       	pop	r29
    2a96:	08 95       	ret

00002a98 <LCD_CheckStatusSendNumber>:
CheckStatus LCD_CheckStatusSendNumber(_uint32 Copy__Uint32Number)
{
    2a98:	df 93       	push	r29
    2a9a:	cf 93       	push	r28
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62
    2aa0:	2d 97       	sbiw	r28, 0x0d	; 13
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	de bf       	out	0x3e, r29	; 62
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	cd bf       	out	0x3d, r28	; 61
    2aac:	68 87       	std	Y+8, r22	; 0x08
    2aae:	79 87       	std	Y+9, r23	; 0x09
    2ab0:	8a 87       	std	Y+10, r24	; 0x0a
    2ab2:	9b 87       	std	Y+11, r25	; 0x0b
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2ab4:	1f 82       	std	Y+7, r1	; 0x07

        _uint8 Local__Uint8Remendier = 0x00;
    2ab6:	1e 82       	std	Y+6, r1	; 0x06
        _uint8 Local__Uint8Counter = 0x00;
    2ab8:	1d 82       	std	Y+5, r1	; 0x05
        _uint32 Local__Uint32Temporary = 0;
    2aba:	19 82       	std	Y+1, r1	; 0x01
    2abc:	1a 82       	std	Y+2, r1	; 0x02
    2abe:	1b 82       	std	Y+3, r1	; 0x03
    2ac0:	1c 82       	std	Y+4, r1	; 0x04
    2ac2:	40 c0       	rjmp	.+128    	; 0x2b44 <LCD_CheckStatusSendNumber+0xac>
        if (Copy__Uint32Number <= 4294967296)
        {
                while (Copy__Uint32Number != 0)
                {
                        Local__Uint32Temporary = Local__Uint32Temporary * 0x0A;
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac8:	ab 81       	ldd	r26, Y+3	; 0x03
    2aca:	bc 81       	ldd	r27, Y+4	; 0x04
    2acc:	2a e0       	ldi	r18, 0x0A	; 10
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	40 e0       	ldi	r20, 0x00	; 0
    2ad2:	50 e0       	ldi	r21, 0x00	; 0
    2ad4:	bc 01       	movw	r22, r24
    2ad6:	cd 01       	movw	r24, r26
    2ad8:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__mulsi3>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	89 83       	std	Y+1, r24	; 0x01
    2ae2:	9a 83       	std	Y+2, r25	; 0x02
    2ae4:	ab 83       	std	Y+3, r26	; 0x03
    2ae6:	bc 83       	std	Y+4, r27	; 0x04
                        Local__Uint32Temporary = Local__Uint32Temporary + Copy__Uint32Number % 0x0A;
    2ae8:	88 85       	ldd	r24, Y+8	; 0x08
    2aea:	99 85       	ldd	r25, Y+9	; 0x09
    2aec:	aa 85       	ldd	r26, Y+10	; 0x0a
    2aee:	bb 85       	ldd	r27, Y+11	; 0x0b
    2af0:	2a e0       	ldi	r18, 0x0A	; 10
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	40 e0       	ldi	r20, 0x00	; 0
    2af6:	50 e0       	ldi	r21, 0x00	; 0
    2af8:	bc 01       	movw	r22, r24
    2afa:	cd 01       	movw	r24, r26
    2afc:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <__udivmodsi4>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	9c 01       	movw	r18, r24
    2b06:	ad 01       	movw	r20, r26
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0c:	ab 81       	ldd	r26, Y+3	; 0x03
    2b0e:	bc 81       	ldd	r27, Y+4	; 0x04
    2b10:	82 0f       	add	r24, r18
    2b12:	93 1f       	adc	r25, r19
    2b14:	a4 1f       	adc	r26, r20
    2b16:	b5 1f       	adc	r27, r21
    2b18:	89 83       	std	Y+1, r24	; 0x01
    2b1a:	9a 83       	std	Y+2, r25	; 0x02
    2b1c:	ab 83       	std	Y+3, r26	; 0x03
    2b1e:	bc 83       	std	Y+4, r27	; 0x04
                        Copy__Uint32Number = Copy__Uint32Number / 0x0A;
    2b20:	88 85       	ldd	r24, Y+8	; 0x08
    2b22:	99 85       	ldd	r25, Y+9	; 0x09
    2b24:	aa 85       	ldd	r26, Y+10	; 0x0a
    2b26:	bb 85       	ldd	r27, Y+11	; 0x0b
    2b28:	2a e0       	ldi	r18, 0x0A	; 10
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e0       	ldi	r20, 0x00	; 0
    2b2e:	50 e0       	ldi	r21, 0x00	; 0
    2b30:	bc 01       	movw	r22, r24
    2b32:	cd 01       	movw	r24, r26
    2b34:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <__udivmodsi4>
    2b38:	da 01       	movw	r26, r20
    2b3a:	c9 01       	movw	r24, r18
    2b3c:	88 87       	std	Y+8, r24	; 0x08
    2b3e:	99 87       	std	Y+9, r25	; 0x09
    2b40:	aa 87       	std	Y+10, r26	; 0x0a
    2b42:	bb 87       	std	Y+11, r27	; 0x0b
        _uint8 Local__Uint8Remendier = 0x00;
        _uint8 Local__Uint8Counter = 0x00;
        _uint32 Local__Uint32Temporary = 0;
        if (Copy__Uint32Number <= 4294967296)
        {
                while (Copy__Uint32Number != 0)
    2b44:	88 85       	ldd	r24, Y+8	; 0x08
    2b46:	99 85       	ldd	r25, Y+9	; 0x09
    2b48:	aa 85       	ldd	r26, Y+10	; 0x0a
    2b4a:	bb 85       	ldd	r27, Y+11	; 0x0b
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	a1 05       	cpc	r26, r1
    2b50:	b1 05       	cpc	r27, r1
    2b52:	09 f0       	breq	.+2      	; 0x2b56 <LCD_CheckStatusSendNumber+0xbe>
    2b54:	b7 cf       	rjmp	.-146    	; 0x2ac4 <LCD_CheckStatusSendNumber+0x2c>
                        Local__Uint32Temporary = Local__Uint32Temporary * 0x0A;
                        Local__Uint32Temporary = Local__Uint32Temporary + Copy__Uint32Number % 0x0A;
                        Copy__Uint32Number = Copy__Uint32Number / 0x0A;
                }

                for (Local__Uint8Counter = 0; Local__Uint32Temporary != 0; ++Local__Uint8Counter)
    2b56:	1d 82       	std	Y+5, r1	; 0x05
    2b58:	95 c0       	rjmp	.+298    	; 0x2c84 <LCD_CheckStatusSendNumber+0x1ec>
                {
                        Local__Uint8Remendier = Local__Uint32Temporary % 0x0A;
    2b5a:	89 81       	ldd	r24, Y+1	; 0x01
    2b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b5e:	ab 81       	ldd	r26, Y+3	; 0x03
    2b60:	bc 81       	ldd	r27, Y+4	; 0x04
    2b62:	2a e0       	ldi	r18, 0x0A	; 10
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	40 e0       	ldi	r20, 0x00	; 0
    2b68:	50 e0       	ldi	r21, 0x00	; 0
    2b6a:	bc 01       	movw	r22, r24
    2b6c:	cd 01       	movw	r24, r26
    2b6e:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <__udivmodsi4>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	8e 83       	std	Y+6, r24	; 0x06
                        Local__Uint32Temporary = Local__Uint32Temporary / 0x0A;
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7c:	ab 81       	ldd	r26, Y+3	; 0x03
    2b7e:	bc 81       	ldd	r27, Y+4	; 0x04
    2b80:	2a e0       	ldi	r18, 0x0A	; 10
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e0       	ldi	r20, 0x00	; 0
    2b86:	50 e0       	ldi	r21, 0x00	; 0
    2b88:	bc 01       	movw	r22, r24
    2b8a:	cd 01       	movw	r24, r26
    2b8c:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <__udivmodsi4>
    2b90:	da 01       	movw	r26, r20
    2b92:	c9 01       	movw	r24, r18
    2b94:	89 83       	std	Y+1, r24	; 0x01
    2b96:	9a 83       	std	Y+2, r25	; 0x02
    2b98:	ab 83       	std	Y+3, r26	; 0x03
    2b9a:	bc 83       	std	Y+4, r27	; 0x04
                        switch (Local__Uint8Remendier)
    2b9c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b9e:	28 2f       	mov	r18, r24
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	3d 87       	std	Y+13, r19	; 0x0d
    2ba4:	2c 87       	std	Y+12, r18	; 0x0c
    2ba6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ba8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2baa:	84 30       	cpi	r24, 0x04	; 4
    2bac:	91 05       	cpc	r25, r1
    2bae:	09 f4       	brne	.+2      	; 0x2bb2 <LCD_CheckStatusSendNumber+0x11a>
    2bb0:	4f c0       	rjmp	.+158    	; 0x2c50 <LCD_CheckStatusSendNumber+0x1b8>
    2bb2:	2c 85       	ldd	r18, Y+12	; 0x0c
    2bb4:	3d 85       	ldd	r19, Y+13	; 0x0d
    2bb6:	25 30       	cpi	r18, 0x05	; 5
    2bb8:	31 05       	cpc	r19, r1
    2bba:	d4 f4       	brge	.+52     	; 0x2bf0 <LCD_CheckStatusSendNumber+0x158>
    2bbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bbe:	9d 85       	ldd	r25, Y+13	; 0x0d
    2bc0:	81 30       	cpi	r24, 0x01	; 1
    2bc2:	91 05       	cpc	r25, r1
    2bc4:	c9 f1       	breq	.+114    	; 0x2c38 <LCD_CheckStatusSendNumber+0x1a0>
    2bc6:	2c 85       	ldd	r18, Y+12	; 0x0c
    2bc8:	3d 85       	ldd	r19, Y+13	; 0x0d
    2bca:	22 30       	cpi	r18, 0x02	; 2
    2bcc:	31 05       	cpc	r19, r1
    2bce:	2c f4       	brge	.+10     	; 0x2bda <LCD_CheckStatusSendNumber+0x142>
    2bd0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bd2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2bd4:	00 97       	sbiw	r24, 0x00	; 0
    2bd6:	61 f1       	breq	.+88     	; 0x2c30 <LCD_CheckStatusSendNumber+0x198>
    2bd8:	52 c0       	rjmp	.+164    	; 0x2c7e <LCD_CheckStatusSendNumber+0x1e6>
    2bda:	2c 85       	ldd	r18, Y+12	; 0x0c
    2bdc:	3d 85       	ldd	r19, Y+13	; 0x0d
    2bde:	22 30       	cpi	r18, 0x02	; 2
    2be0:	31 05       	cpc	r19, r1
    2be2:	71 f1       	breq	.+92     	; 0x2c40 <LCD_CheckStatusSendNumber+0x1a8>
    2be4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2be6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2be8:	83 30       	cpi	r24, 0x03	; 3
    2bea:	91 05       	cpc	r25, r1
    2bec:	69 f1       	breq	.+90     	; 0x2c48 <LCD_CheckStatusSendNumber+0x1b0>
    2bee:	47 c0       	rjmp	.+142    	; 0x2c7e <LCD_CheckStatusSendNumber+0x1e6>
    2bf0:	2c 85       	ldd	r18, Y+12	; 0x0c
    2bf2:	3d 85       	ldd	r19, Y+13	; 0x0d
    2bf4:	27 30       	cpi	r18, 0x07	; 7
    2bf6:	31 05       	cpc	r19, r1
    2bf8:	b9 f1       	breq	.+110    	; 0x2c68 <LCD_CheckStatusSendNumber+0x1d0>
    2bfa:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bfc:	9d 85       	ldd	r25, Y+13	; 0x0d
    2bfe:	88 30       	cpi	r24, 0x08	; 8
    2c00:	91 05       	cpc	r25, r1
    2c02:	5c f4       	brge	.+22     	; 0x2c1a <LCD_CheckStatusSendNumber+0x182>
    2c04:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c06:	3d 85       	ldd	r19, Y+13	; 0x0d
    2c08:	25 30       	cpi	r18, 0x05	; 5
    2c0a:	31 05       	cpc	r19, r1
    2c0c:	29 f1       	breq	.+74     	; 0x2c58 <LCD_CheckStatusSendNumber+0x1c0>
    2c0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c10:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c12:	86 30       	cpi	r24, 0x06	; 6
    2c14:	91 05       	cpc	r25, r1
    2c16:	21 f1       	breq	.+72     	; 0x2c60 <LCD_CheckStatusSendNumber+0x1c8>
    2c18:	32 c0       	rjmp	.+100    	; 0x2c7e <LCD_CheckStatusSendNumber+0x1e6>
    2c1a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c1c:	3d 85       	ldd	r19, Y+13	; 0x0d
    2c1e:	28 30       	cpi	r18, 0x08	; 8
    2c20:	31 05       	cpc	r19, r1
    2c22:	31 f1       	breq	.+76     	; 0x2c70 <LCD_CheckStatusSendNumber+0x1d8>
    2c24:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c26:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c28:	89 30       	cpi	r24, 0x09	; 9
    2c2a:	91 05       	cpc	r25, r1
    2c2c:	29 f1       	breq	.+74     	; 0x2c78 <LCD_CheckStatusSendNumber+0x1e0>
    2c2e:	27 c0       	rjmp	.+78     	; 0x2c7e <LCD_CheckStatusSendNumber+0x1e6>
                        {
                        case 0:
                                LCD_CheckStatusSendChar4bit('0');
    2c30:	80 e3       	ldi	r24, 0x30	; 48
    2c32:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
    2c36:	23 c0       	rjmp	.+70     	; 0x2c7e <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 1:
                                LCD_CheckStatusSendChar4bit('1');
    2c38:	81 e3       	ldi	r24, 0x31	; 49
    2c3a:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
    2c3e:	1f c0       	rjmp	.+62     	; 0x2c7e <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 2:
                                LCD_CheckStatusSendChar4bit('2');
    2c40:	82 e3       	ldi	r24, 0x32	; 50
    2c42:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
    2c46:	1b c0       	rjmp	.+54     	; 0x2c7e <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 3:
                                LCD_CheckStatusSendChar4bit('3');
    2c48:	83 e3       	ldi	r24, 0x33	; 51
    2c4a:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
    2c4e:	17 c0       	rjmp	.+46     	; 0x2c7e <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 4:
                                LCD_CheckStatusSendChar4bit('4');
    2c50:	84 e3       	ldi	r24, 0x34	; 52
    2c52:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
    2c56:	13 c0       	rjmp	.+38     	; 0x2c7e <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 5:
                                LCD_CheckStatusSendChar4bit('5');
    2c58:	85 e3       	ldi	r24, 0x35	; 53
    2c5a:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
    2c5e:	0f c0       	rjmp	.+30     	; 0x2c7e <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 6:
                                LCD_CheckStatusSendChar4bit('6');
    2c60:	86 e3       	ldi	r24, 0x36	; 54
    2c62:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
    2c66:	0b c0       	rjmp	.+22     	; 0x2c7e <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 7:
                                LCD_CheckStatusSendChar4bit('7');
    2c68:	87 e3       	ldi	r24, 0x37	; 55
    2c6a:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
    2c6e:	07 c0       	rjmp	.+14     	; 0x2c7e <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 8:
                                LCD_CheckStatusSendChar4bit('8');
    2c70:	88 e3       	ldi	r24, 0x38	; 56
    2c72:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
    2c76:	03 c0       	rjmp	.+6      	; 0x2c7e <LCD_CheckStatusSendNumber+0x1e6>
                                break;
                        case 9:
                                LCD_CheckStatusSendChar4bit('9');
    2c78:	89 e3       	ldi	r24, 0x39	; 57
    2c7a:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
                        Local__Uint32Temporary = Local__Uint32Temporary * 0x0A;
                        Local__Uint32Temporary = Local__Uint32Temporary + Copy__Uint32Number % 0x0A;
                        Copy__Uint32Number = Copy__Uint32Number / 0x0A;
                }

                for (Local__Uint8Counter = 0; Local__Uint32Temporary != 0; ++Local__Uint8Counter)
    2c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c80:	8f 5f       	subi	r24, 0xFF	; 255
    2c82:	8d 83       	std	Y+5, r24	; 0x05
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	9a 81       	ldd	r25, Y+2	; 0x02
    2c88:	ab 81       	ldd	r26, Y+3	; 0x03
    2c8a:	bc 81       	ldd	r27, Y+4	; 0x04
    2c8c:	00 97       	sbiw	r24, 0x00	; 0
    2c8e:	a1 05       	cpc	r26, r1
    2c90:	b1 05       	cpc	r27, r1
    2c92:	09 f0       	breq	.+2      	; 0x2c96 <LCD_CheckStatusSendNumber+0x1fe>
    2c94:	62 cf       	rjmp	.-316    	; 0x2b5a <LCD_CheckStatusSendNumber+0xc2>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    2c96:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2c98:	2d 96       	adiw	r28, 0x0d	; 13
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	f8 94       	cli
    2c9e:	de bf       	out	0x3e, r29	; 62
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	cd bf       	out	0x3d, r28	; 61
    2ca4:	cf 91       	pop	r28
    2ca6:	df 91       	pop	r29
    2ca8:	08 95       	ret

00002caa <LCD_CheckStatusSpecialChar>:

CheckStatus LCD_CheckStatusSpecialChar(_uint8 Copy__Uint8CGRamLocation, _uint8 Copy__Uint8LCDLine, _uint8 Copy__Uint8DDRamLocation)
{
    2caa:	df 93       	push	r29
    2cac:	cf 93       	push	r28
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
    2cb2:	27 97       	sbiw	r28, 0x07	; 7
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
    2cbe:	8b 83       	std	Y+3, r24	; 0x03
    2cc0:	6c 83       	std	Y+4, r22	; 0x04
    2cc2:	4d 83       	std	Y+5, r20	; 0x05
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    2cc4:	1a 82       	std	Y+2, r1	; 0x02

        _uint8 Local__Uint8CounterJ = 0x00;
    2cc6:	19 82       	std	Y+1, r1	; 0x01
        if ((Copy__Uint8CGRamLocation <= LCD__UINT8_CG_RAMLOCATION7) && (Copy__Uint8DDRamLocation <= LCD__UINT8_LOCATION_NUMBER39))
    2cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cca:	88 30       	cpi	r24, 0x08	; 8
    2ccc:	08 f0       	brcs	.+2      	; 0x2cd0 <LCD_CheckStatusSpecialChar+0x26>
    2cce:	0b c1       	rjmp	.+534    	; 0x2ee6 <LCD_CheckStatusSpecialChar+0x23c>
    2cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd2:	88 32       	cpi	r24, 0x28	; 40
    2cd4:	08 f0       	brcs	.+2      	; 0x2cd8 <LCD_CheckStatusSpecialChar+0x2e>
    2cd6:	07 c1       	rjmp	.+526    	; 0x2ee6 <LCD_CheckStatusSpecialChar+0x23c>
        {

                switch (Copy__Uint8CGRamLocation)
    2cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cda:	28 2f       	mov	r18, r24
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	3f 83       	std	Y+7, r19	; 0x07
    2ce0:	2e 83       	std	Y+6, r18	; 0x06
    2ce2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ce4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ce6:	84 30       	cpi	r24, 0x04	; 4
    2ce8:	91 05       	cpc	r25, r1
    2cea:	09 f4       	brne	.+2      	; 0x2cee <LCD_CheckStatusSpecialChar+0x44>
    2cec:	7b c0       	rjmp	.+246    	; 0x2de4 <LCD_CheckStatusSpecialChar+0x13a>
    2cee:	2e 81       	ldd	r18, Y+6	; 0x06
    2cf0:	3f 81       	ldd	r19, Y+7	; 0x07
    2cf2:	25 30       	cpi	r18, 0x05	; 5
    2cf4:	31 05       	cpc	r19, r1
    2cf6:	94 f4       	brge	.+36     	; 0x2d1c <LCD_CheckStatusSpecialChar+0x72>
    2cf8:	8e 81       	ldd	r24, Y+6	; 0x06
    2cfa:	9f 81       	ldd	r25, Y+7	; 0x07
    2cfc:	82 30       	cpi	r24, 0x02	; 2
    2cfe:	91 05       	cpc	r25, r1
    2d00:	09 f4       	brne	.+2      	; 0x2d04 <LCD_CheckStatusSpecialChar+0x5a>
    2d02:	3e c0       	rjmp	.+124    	; 0x2d80 <LCD_CheckStatusSpecialChar+0xd6>
    2d04:	2e 81       	ldd	r18, Y+6	; 0x06
    2d06:	3f 81       	ldd	r19, Y+7	; 0x07
    2d08:	23 30       	cpi	r18, 0x03	; 3
    2d0a:	31 05       	cpc	r19, r1
    2d0c:	0c f0       	brlt	.+2      	; 0x2d10 <LCD_CheckStatusSpecialChar+0x66>
    2d0e:	51 c0       	rjmp	.+162    	; 0x2db2 <LCD_CheckStatusSpecialChar+0x108>
    2d10:	8e 81       	ldd	r24, Y+6	; 0x06
    2d12:	9f 81       	ldd	r25, Y+7	; 0x07
    2d14:	81 30       	cpi	r24, 0x01	; 1
    2d16:	91 05       	cpc	r25, r1
    2d18:	d1 f0       	breq	.+52     	; 0x2d4e <LCD_CheckStatusSpecialChar+0xa4>
    2d1a:	e0 c0       	rjmp	.+448    	; 0x2edc <LCD_CheckStatusSpecialChar+0x232>
    2d1c:	2e 81       	ldd	r18, Y+6	; 0x06
    2d1e:	3f 81       	ldd	r19, Y+7	; 0x07
    2d20:	26 30       	cpi	r18, 0x06	; 6
    2d22:	31 05       	cpc	r19, r1
    2d24:	09 f4       	brne	.+2      	; 0x2d28 <LCD_CheckStatusSpecialChar+0x7e>
    2d26:	90 c0       	rjmp	.+288    	; 0x2e48 <LCD_CheckStatusSpecialChar+0x19e>
    2d28:	8e 81       	ldd	r24, Y+6	; 0x06
    2d2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d2c:	86 30       	cpi	r24, 0x06	; 6
    2d2e:	91 05       	cpc	r25, r1
    2d30:	0c f4       	brge	.+2      	; 0x2d34 <LCD_CheckStatusSpecialChar+0x8a>
    2d32:	71 c0       	rjmp	.+226    	; 0x2e16 <LCD_CheckStatusSpecialChar+0x16c>
    2d34:	2e 81       	ldd	r18, Y+6	; 0x06
    2d36:	3f 81       	ldd	r19, Y+7	; 0x07
    2d38:	27 30       	cpi	r18, 0x07	; 7
    2d3a:	31 05       	cpc	r19, r1
    2d3c:	09 f4       	brne	.+2      	; 0x2d40 <LCD_CheckStatusSpecialChar+0x96>
    2d3e:	9d c0       	rjmp	.+314    	; 0x2e7a <LCD_CheckStatusSpecialChar+0x1d0>
    2d40:	8e 81       	ldd	r24, Y+6	; 0x06
    2d42:	9f 81       	ldd	r25, Y+7	; 0x07
    2d44:	88 30       	cpi	r24, 0x08	; 8
    2d46:	91 05       	cpc	r25, r1
    2d48:	09 f4       	brne	.+2      	; 0x2d4c <LCD_CheckStatusSpecialChar+0xa2>
    2d4a:	b0 c0       	rjmp	.+352    	; 0x2eac <LCD_CheckStatusSpecialChar+0x202>
    2d4c:	c7 c0       	rjmp	.+398    	; 0x2edc <LCD_CheckStatusSpecialChar+0x232>
                {

                case 1:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE0);
    2d4e:	80 e4       	ldi	r24, 0x40	; 64
    2d50:	0e 94 6d 20 	call	0x40da	; 0x40da <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2d54:	19 82       	std	Y+1, r1	; 0x01
    2d56:	10 c0       	rjmp	.+32     	; 0x2d78 <LCD_CheckStatusSpecialChar+0xce>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[0][Local__Uint8CounterJ]);
    2d58:	20 91 b3 01 	lds	r18, 0x01B3
    2d5c:	30 91 b4 01 	lds	r19, 0x01B4
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	88 2f       	mov	r24, r24
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	f9 01       	movw	r30, r18
    2d68:	e8 0f       	add	r30, r24
    2d6a:	f9 1f       	adc	r31, r25
    2d6c:	80 81       	ld	r24, Z
    2d6e:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
                switch (Copy__Uint8CGRamLocation)
                {

                case 1:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE0);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	8f 5f       	subi	r24, 0xFF	; 255
    2d76:	89 83       	std	Y+1, r24	; 0x01
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	88 30       	cpi	r24, 0x08	; 8
    2d7c:	68 f3       	brcs	.-38     	; 0x2d58 <LCD_CheckStatusSpecialChar+0xae>
    2d7e:	ae c0       	rjmp	.+348    	; 0x2edc <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[0][Local__Uint8CounterJ]);
                        }
                        break;
                case 2:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE1);
    2d80:	88 e4       	ldi	r24, 0x48	; 72
    2d82:	0e 94 6d 20 	call	0x40da	; 0x40da <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2d86:	19 82       	std	Y+1, r1	; 0x01
    2d88:	10 c0       	rjmp	.+32     	; 0x2daa <LCD_CheckStatusSpecialChar+0x100>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[1][Local__Uint8CounterJ]);
    2d8a:	20 91 b5 01 	lds	r18, 0x01B5
    2d8e:	30 91 b6 01 	lds	r19, 0x01B6
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	88 2f       	mov	r24, r24
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	f9 01       	movw	r30, r18
    2d9a:	e8 0f       	add	r30, r24
    2d9c:	f9 1f       	adc	r31, r25
    2d9e:	80 81       	ld	r24, Z
    2da0:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[0][Local__Uint8CounterJ]);
                        }
                        break;
                case 2:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE1);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
    2da6:	8f 5f       	subi	r24, 0xFF	; 255
    2da8:	89 83       	std	Y+1, r24	; 0x01
    2daa:	89 81       	ldd	r24, Y+1	; 0x01
    2dac:	88 30       	cpi	r24, 0x08	; 8
    2dae:	68 f3       	brcs	.-38     	; 0x2d8a <LCD_CheckStatusSpecialChar+0xe0>
    2db0:	95 c0       	rjmp	.+298    	; 0x2edc <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[1][Local__Uint8CounterJ]);
                        }
                        break;
                case 3:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE2);
    2db2:	80 e5       	ldi	r24, 0x50	; 80
    2db4:	0e 94 6d 20 	call	0x40da	; 0x40da <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2db8:	19 82       	std	Y+1, r1	; 0x01
    2dba:	10 c0       	rjmp	.+32     	; 0x2ddc <LCD_CheckStatusSpecialChar+0x132>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[2][Local__Uint8CounterJ]);
    2dbc:	20 91 b7 01 	lds	r18, 0x01B7
    2dc0:	30 91 b8 01 	lds	r19, 0x01B8
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	88 2f       	mov	r24, r24
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	f9 01       	movw	r30, r18
    2dcc:	e8 0f       	add	r30, r24
    2dce:	f9 1f       	adc	r31, r25
    2dd0:	80 81       	ld	r24, Z
    2dd2:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[1][Local__Uint8CounterJ]);
                        }
                        break;
                case 3:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE2);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	8f 5f       	subi	r24, 0xFF	; 255
    2dda:	89 83       	std	Y+1, r24	; 0x01
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	88 30       	cpi	r24, 0x08	; 8
    2de0:	68 f3       	brcs	.-38     	; 0x2dbc <LCD_CheckStatusSpecialChar+0x112>
    2de2:	7c c0       	rjmp	.+248    	; 0x2edc <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[2][Local__Uint8CounterJ]);
                        }
                        break;
                case 4:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE3);
    2de4:	88 e5       	ldi	r24, 0x58	; 88
    2de6:	0e 94 6d 20 	call	0x40da	; 0x40da <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2dea:	19 82       	std	Y+1, r1	; 0x01
    2dec:	10 c0       	rjmp	.+32     	; 0x2e0e <LCD_CheckStatusSpecialChar+0x164>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[3][Local__Uint8CounterJ]);
    2dee:	20 91 b9 01 	lds	r18, 0x01B9
    2df2:	30 91 ba 01 	lds	r19, 0x01BA
    2df6:	89 81       	ldd	r24, Y+1	; 0x01
    2df8:	88 2f       	mov	r24, r24
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	f9 01       	movw	r30, r18
    2dfe:	e8 0f       	add	r30, r24
    2e00:	f9 1f       	adc	r31, r25
    2e02:	80 81       	ld	r24, Z
    2e04:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[2][Local__Uint8CounterJ]);
                        }
                        break;
                case 4:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE3);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	8f 5f       	subi	r24, 0xFF	; 255
    2e0c:	89 83       	std	Y+1, r24	; 0x01
    2e0e:	89 81       	ldd	r24, Y+1	; 0x01
    2e10:	88 30       	cpi	r24, 0x08	; 8
    2e12:	68 f3       	brcs	.-38     	; 0x2dee <LCD_CheckStatusSpecialChar+0x144>
    2e14:	63 c0       	rjmp	.+198    	; 0x2edc <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[3][Local__Uint8CounterJ]);
                        }
                        break;
                case 5:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE4);
    2e16:	80 e6       	ldi	r24, 0x60	; 96
    2e18:	0e 94 6d 20 	call	0x40da	; 0x40da <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2e1c:	19 82       	std	Y+1, r1	; 0x01
    2e1e:	10 c0       	rjmp	.+32     	; 0x2e40 <LCD_CheckStatusSpecialChar+0x196>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[4][Local__Uint8CounterJ]);
    2e20:	20 91 bb 01 	lds	r18, 0x01BB
    2e24:	30 91 bc 01 	lds	r19, 0x01BC
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	88 2f       	mov	r24, r24
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	f9 01       	movw	r30, r18
    2e30:	e8 0f       	add	r30, r24
    2e32:	f9 1f       	adc	r31, r25
    2e34:	80 81       	ld	r24, Z
    2e36:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[3][Local__Uint8CounterJ]);
                        }
                        break;
                case 5:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE4);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
    2e3c:	8f 5f       	subi	r24, 0xFF	; 255
    2e3e:	89 83       	std	Y+1, r24	; 0x01
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	88 30       	cpi	r24, 0x08	; 8
    2e44:	68 f3       	brcs	.-38     	; 0x2e20 <LCD_CheckStatusSpecialChar+0x176>
    2e46:	4a c0       	rjmp	.+148    	; 0x2edc <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[4][Local__Uint8CounterJ]);
                        }
                        break;
                case 6:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE5);
    2e48:	88 e6       	ldi	r24, 0x68	; 104
    2e4a:	0e 94 6d 20 	call	0x40da	; 0x40da <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2e4e:	19 82       	std	Y+1, r1	; 0x01
    2e50:	10 c0       	rjmp	.+32     	; 0x2e72 <LCD_CheckStatusSpecialChar+0x1c8>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[5][Local__Uint8CounterJ]);
    2e52:	20 91 bd 01 	lds	r18, 0x01BD
    2e56:	30 91 be 01 	lds	r19, 0x01BE
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	88 2f       	mov	r24, r24
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	f9 01       	movw	r30, r18
    2e62:	e8 0f       	add	r30, r24
    2e64:	f9 1f       	adc	r31, r25
    2e66:	80 81       	ld	r24, Z
    2e68:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[4][Local__Uint8CounterJ]);
                        }
                        break;
                case 6:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE5);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	8f 5f       	subi	r24, 0xFF	; 255
    2e70:	89 83       	std	Y+1, r24	; 0x01
    2e72:	89 81       	ldd	r24, Y+1	; 0x01
    2e74:	88 30       	cpi	r24, 0x08	; 8
    2e76:	68 f3       	brcs	.-38     	; 0x2e52 <LCD_CheckStatusSpecialChar+0x1a8>
    2e78:	31 c0       	rjmp	.+98     	; 0x2edc <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[5][Local__Uint8CounterJ]);
                        }
                        break;
                case 7:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE6);
    2e7a:	80 e7       	ldi	r24, 0x70	; 112
    2e7c:	0e 94 6d 20 	call	0x40da	; 0x40da <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2e80:	19 82       	std	Y+1, r1	; 0x01
    2e82:	10 c0       	rjmp	.+32     	; 0x2ea4 <LCD_CheckStatusSpecialChar+0x1fa>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[6][Local__Uint8CounterJ]);
    2e84:	20 91 bf 01 	lds	r18, 0x01BF
    2e88:	30 91 c0 01 	lds	r19, 0x01C0
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	88 2f       	mov	r24, r24
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	f9 01       	movw	r30, r18
    2e94:	e8 0f       	add	r30, r24
    2e96:	f9 1f       	adc	r31, r25
    2e98:	80 81       	ld	r24, Z
    2e9a:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[5][Local__Uint8CounterJ]);
                        }
                        break;
                case 7:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE6);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2e9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ea0:	8f 5f       	subi	r24, 0xFF	; 255
    2ea2:	89 83       	std	Y+1, r24	; 0x01
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
    2ea6:	88 30       	cpi	r24, 0x08	; 8
    2ea8:	68 f3       	brcs	.-38     	; 0x2e84 <LCD_CheckStatusSpecialChar+0x1da>
    2eaa:	18 c0       	rjmp	.+48     	; 0x2edc <LCD_CheckStatusSpecialChar+0x232>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[6][Local__Uint8CounterJ]);
                        }
                        break;
                case 8:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE7);
    2eac:	88 e7       	ldi	r24, 0x78	; 120
    2eae:	0e 94 6d 20 	call	0x40da	; 0x40da <LCD_CheckStatusSendCmnd4bit>
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2eb2:	19 82       	std	Y+1, r1	; 0x01
    2eb4:	10 c0       	rjmp	.+32     	; 0x2ed6 <LCD_CheckStatusSpecialChar+0x22c>
                        {
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[8][Local__Uint8CounterJ]);
    2eb6:	20 91 c3 01 	lds	r18, 0x01C3
    2eba:	30 91 c4 01 	lds	r19, 0x01C4
    2ebe:	89 81       	ldd	r24, Y+1	; 0x01
    2ec0:	88 2f       	mov	r24, r24
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	f9 01       	movw	r30, r18
    2ec6:	e8 0f       	add	r30, r24
    2ec8:	f9 1f       	adc	r31, r25
    2eca:	80 81       	ld	r24, Z
    2ecc:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
                                LCD_CheckStatusSendChar4bit(LCD_A_UINT8SPECIALCHAR[6][Local__Uint8CounterJ]);
                        }
                        break;
                case 8:
                        LCD_CheckStatusSendCmnd4bit(LCD__UINT8_CGRAM_BYTE7);
                        for (Local__Uint8CounterJ = 0; Local__Uint8CounterJ < 8; ++Local__Uint8CounterJ)
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	8f 5f       	subi	r24, 0xFF	; 255
    2ed4:	89 83       	std	Y+1, r24	; 0x01
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	88 30       	cpi	r24, 0x08	; 8
    2eda:	68 f3       	brcs	.-38     	; 0x2eb6 <LCD_CheckStatusSpecialChar+0x20c>
                        break;
                default:
                        break;
                }

                LCD_CheckStatusGoToXY(Copy__Uint8LCDLine, Copy__Uint8DDRamLocation);
    2edc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ede:	6d 81       	ldd	r22, Y+5	; 0x05
    2ee0:	0e 94 8b 14 	call	0x2916	; 0x2916 <LCD_CheckStatusGoToXY>
    2ee4:	02 c0       	rjmp	.+4      	; 0x2eea <LCD_CheckStatusSpecialChar+0x240>
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	8a 83       	std	Y+2, r24	; 0x02
        }
        return Local_CheckStausReturnValue;
    2eea:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2eec:	27 96       	adiw	r28, 0x07	; 7
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	cf 91       	pop	r28
    2efa:	df 91       	pop	r29
    2efc:	08 95       	ret

00002efe <LCD_VoidShiftRight>:
Void LCD_VoidShiftRight(_uint8 Copy__Uint8PositionValue, _uint32 Copy__Uint32DelayValue)
{
    2efe:	df 93       	push	r29
    2f00:	cf 93       	push	r28
    2f02:	cd b7       	in	r28, 0x3d	; 61
    2f04:	de b7       	in	r29, 0x3e	; 62
    2f06:	64 97       	sbiw	r28, 0x14	; 20
    2f08:	0f b6       	in	r0, 0x3f	; 63
    2f0a:	f8 94       	cli
    2f0c:	de bf       	out	0x3e, r29	; 62
    2f0e:	0f be       	out	0x3f, r0	; 63
    2f10:	cd bf       	out	0x3d, r28	; 61
    2f12:	88 8b       	std	Y+16, r24	; 0x10
    2f14:	49 8b       	std	Y+17, r20	; 0x11
    2f16:	5a 8b       	std	Y+18, r21	; 0x12
    2f18:	6b 8b       	std	Y+19, r22	; 0x13
    2f1a:	7c 8b       	std	Y+20, r23	; 0x14
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    2f1c:	1f 86       	std	Y+15, r1	; 0x0f
    2f1e:	7c c0       	rjmp	.+248    	; 0x3018 <LCD_VoidShiftRight+0x11a>
        {
                LCD_CheckStatusSendCmnd4bit(0b00011100);
    2f20:	8c e1       	ldi	r24, 0x1C	; 28
    2f22:	0e 94 6d 20 	call	0x40da	; 0x40da <LCD_CheckStatusSendCmnd4bit>
                _delay_ms(Copy__Uint32DelayValue);
    2f26:	69 89       	ldd	r22, Y+17	; 0x11
    2f28:	7a 89       	ldd	r23, Y+18	; 0x12
    2f2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f2e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	8b 87       	std	Y+11, r24	; 0x0b
    2f38:	9c 87       	std	Y+12, r25	; 0x0c
    2f3a:	ad 87       	std	Y+13, r26	; 0x0d
    2f3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	4a ef       	ldi	r20, 0xFA	; 250
    2f4c:	54 e4       	ldi	r21, 0x44	; 68
    2f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	8f 83       	std	Y+7, r24	; 0x07
    2f58:	98 87       	std	Y+8, r25	; 0x08
    2f5a:	a9 87       	std	Y+9, r26	; 0x09
    2f5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f60:	78 85       	ldd	r23, Y+8	; 0x08
    2f62:	89 85       	ldd	r24, Y+9	; 0x09
    2f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e8       	ldi	r20, 0x80	; 128
    2f6c:	5f e3       	ldi	r21, 0x3F	; 63
    2f6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f72:	88 23       	and	r24, r24
    2f74:	2c f4       	brge	.+10     	; 0x2f80 <LCD_VoidShiftRight+0x82>
		__ticks = 1;
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	9e 83       	std	Y+6, r25	; 0x06
    2f7c:	8d 83       	std	Y+5, r24	; 0x05
    2f7e:	3f c0       	rjmp	.+126    	; 0x2ffe <LCD_VoidShiftRight+0x100>
	else if (__tmp > 65535)
    2f80:	6f 81       	ldd	r22, Y+7	; 0x07
    2f82:	78 85       	ldd	r23, Y+8	; 0x08
    2f84:	89 85       	ldd	r24, Y+9	; 0x09
    2f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	3f ef       	ldi	r19, 0xFF	; 255
    2f8c:	4f e7       	ldi	r20, 0x7F	; 127
    2f8e:	57 e4       	ldi	r21, 0x47	; 71
    2f90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f94:	18 16       	cp	r1, r24
    2f96:	4c f5       	brge	.+82     	; 0x2fea <LCD_VoidShiftRight+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e2       	ldi	r20, 0x20	; 32
    2fa6:	51 e4       	ldi	r21, 0x41	; 65
    2fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	bc 01       	movw	r22, r24
    2fb2:	cd 01       	movw	r24, r26
    2fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	9e 83       	std	Y+6, r25	; 0x06
    2fbe:	8d 83       	std	Y+5, r24	; 0x05
    2fc0:	0f c0       	rjmp	.+30     	; 0x2fe0 <LCD_VoidShiftRight+0xe2>
    2fc2:	88 ec       	ldi	r24, 0xC8	; 200
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	9c 83       	std	Y+4, r25	; 0x04
    2fc8:	8b 83       	std	Y+3, r24	; 0x03
    2fca:	8b 81       	ldd	r24, Y+3	; 0x03
    2fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	f1 f7       	brne	.-4      	; 0x2fce <LCD_VoidShiftRight+0xd0>
    2fd2:	9c 83       	std	Y+4, r25	; 0x04
    2fd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	9e 83       	std	Y+6, r25	; 0x06
    2fde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe4:	00 97       	sbiw	r24, 0x00	; 0
    2fe6:	69 f7       	brne	.-38     	; 0x2fc2 <LCD_VoidShiftRight+0xc4>
    2fe8:	14 c0       	rjmp	.+40     	; 0x3012 <LCD_VoidShiftRight+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fea:	6f 81       	ldd	r22, Y+7	; 0x07
    2fec:	78 85       	ldd	r23, Y+8	; 0x08
    2fee:	89 85       	ldd	r24, Y+9	; 0x09
    2ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	9e 83       	std	Y+6, r25	; 0x06
    2ffc:	8d 83       	std	Y+5, r24	; 0x05
    2ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    3000:	9e 81       	ldd	r25, Y+6	; 0x06
    3002:	9a 83       	std	Y+2, r25	; 0x02
    3004:	89 83       	std	Y+1, r24	; 0x01
    3006:	89 81       	ldd	r24, Y+1	; 0x01
    3008:	9a 81       	ldd	r25, Y+2	; 0x02
    300a:	01 97       	sbiw	r24, 0x01	; 1
    300c:	f1 f7       	brne	.-4      	; 0x300a <LCD_VoidShiftRight+0x10c>
    300e:	9a 83       	std	Y+2, r25	; 0x02
    3010:	89 83       	std	Y+1, r24	; 0x01
        return Local_CheckStausReturnValue;
}
Void LCD_VoidShiftRight(_uint8 Copy__Uint8PositionValue, _uint32 Copy__Uint32DelayValue)
{
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    3012:	8f 85       	ldd	r24, Y+15	; 0x0f
    3014:	8f 5f       	subi	r24, 0xFF	; 255
    3016:	8f 87       	std	Y+15, r24	; 0x0f
    3018:	9f 85       	ldd	r25, Y+15	; 0x0f
    301a:	88 89       	ldd	r24, Y+16	; 0x10
    301c:	98 17       	cp	r25, r24
    301e:	08 f4       	brcc	.+2      	; 0x3022 <LCD_VoidShiftRight+0x124>
    3020:	7f cf       	rjmp	.-258    	; 0x2f20 <LCD_VoidShiftRight+0x22>
        {
                LCD_CheckStatusSendCmnd4bit(0b00011100);
                _delay_ms(Copy__Uint32DelayValue);
        }
}
    3022:	64 96       	adiw	r28, 0x14	; 20
    3024:	0f b6       	in	r0, 0x3f	; 63
    3026:	f8 94       	cli
    3028:	de bf       	out	0x3e, r29	; 62
    302a:	0f be       	out	0x3f, r0	; 63
    302c:	cd bf       	out	0x3d, r28	; 61
    302e:	cf 91       	pop	r28
    3030:	df 91       	pop	r29
    3032:	08 95       	ret

00003034 <LCD_CheckStatusShiftRightOrLeft>:
CheckStatus LCD_CheckStatusShiftRightOrLeft(_uint32 Copy__Uint32DelayValue)
{
    3034:	df 93       	push	r29
    3036:	cf 93       	push	r28
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
    303c:	63 97       	sbiw	r28, 0x13	; 19
    303e:	0f b6       	in	r0, 0x3f	; 63
    3040:	f8 94       	cli
    3042:	de bf       	out	0x3e, r29	; 62
    3044:	0f be       	out	0x3f, r0	; 63
    3046:	cd bf       	out	0x3d, r28	; 61
    3048:	68 8b       	std	Y+16, r22	; 0x10
    304a:	79 8b       	std	Y+17, r23	; 0x11
    304c:	8a 8b       	std	Y+18, r24	; 0x12
    304e:	9b 8b       	std	Y+19, r25	; 0x13
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    3050:	1f 86       	std	Y+15, r1	; 0x0f
        {

                if (LCD__UINT8_SHIFT_ACTIVATE == 0)
                {
                        //right
                        LCD_CheckStatusSendCmnd4bit(0b00011100);
    3052:	8c e1       	ldi	r24, 0x1C	; 28
    3054:	0e 94 6d 20 	call	0x40da	; 0x40da <LCD_CheckStatusSendCmnd4bit>
                        _delay_ms(Copy__Uint32DelayValue);
    3058:	68 89       	ldd	r22, Y+16	; 0x10
    305a:	79 89       	ldd	r23, Y+17	; 0x11
    305c:	8a 89       	ldd	r24, Y+18	; 0x12
    305e:	9b 89       	ldd	r25, Y+19	; 0x13
    3060:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	8b 87       	std	Y+11, r24	; 0x0b
    306a:	9c 87       	std	Y+12, r25	; 0x0c
    306c:	ad 87       	std	Y+13, r26	; 0x0d
    306e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3070:	6b 85       	ldd	r22, Y+11	; 0x0b
    3072:	7c 85       	ldd	r23, Y+12	; 0x0c
    3074:	8d 85       	ldd	r24, Y+13	; 0x0d
    3076:	9e 85       	ldd	r25, Y+14	; 0x0e
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	4a ef       	ldi	r20, 0xFA	; 250
    307e:	54 e4       	ldi	r21, 0x44	; 68
    3080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	8f 83       	std	Y+7, r24	; 0x07
    308a:	98 87       	std	Y+8, r25	; 0x08
    308c:	a9 87       	std	Y+9, r26	; 0x09
    308e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3090:	6f 81       	ldd	r22, Y+7	; 0x07
    3092:	78 85       	ldd	r23, Y+8	; 0x08
    3094:	89 85       	ldd	r24, Y+9	; 0x09
    3096:	9a 85       	ldd	r25, Y+10	; 0x0a
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e8       	ldi	r20, 0x80	; 128
    309e:	5f e3       	ldi	r21, 0x3F	; 63
    30a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a4:	88 23       	and	r24, r24
    30a6:	2c f4       	brge	.+10     	; 0x30b2 <LCD_CheckStatusShiftRightOrLeft+0x7e>
		__ticks = 1;
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	9e 83       	std	Y+6, r25	; 0x06
    30ae:	8d 83       	std	Y+5, r24	; 0x05
    30b0:	3f c0       	rjmp	.+126    	; 0x3130 <LCD_CheckStatusShiftRightOrLeft+0xfc>
	else if (__tmp > 65535)
    30b2:	6f 81       	ldd	r22, Y+7	; 0x07
    30b4:	78 85       	ldd	r23, Y+8	; 0x08
    30b6:	89 85       	ldd	r24, Y+9	; 0x09
    30b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	3f ef       	ldi	r19, 0xFF	; 255
    30be:	4f e7       	ldi	r20, 0x7F	; 127
    30c0:	57 e4       	ldi	r21, 0x47	; 71
    30c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30c6:	18 16       	cp	r1, r24
    30c8:	4c f5       	brge	.+82     	; 0x311c <LCD_CheckStatusShiftRightOrLeft+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    30cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e2       	ldi	r20, 0x20	; 32
    30d8:	51 e4       	ldi	r21, 0x41	; 65
    30da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	bc 01       	movw	r22, r24
    30e4:	cd 01       	movw	r24, r26
    30e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	9e 83       	std	Y+6, r25	; 0x06
    30f0:	8d 83       	std	Y+5, r24	; 0x05
    30f2:	0f c0       	rjmp	.+30     	; 0x3112 <LCD_CheckStatusShiftRightOrLeft+0xde>
    30f4:	88 ec       	ldi	r24, 0xC8	; 200
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	9c 83       	std	Y+4, r25	; 0x04
    30fa:	8b 83       	std	Y+3, r24	; 0x03
    30fc:	8b 81       	ldd	r24, Y+3	; 0x03
    30fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3100:	01 97       	sbiw	r24, 0x01	; 1
    3102:	f1 f7       	brne	.-4      	; 0x3100 <LCD_CheckStatusShiftRightOrLeft+0xcc>
    3104:	9c 83       	std	Y+4, r25	; 0x04
    3106:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3108:	8d 81       	ldd	r24, Y+5	; 0x05
    310a:	9e 81       	ldd	r25, Y+6	; 0x06
    310c:	01 97       	sbiw	r24, 0x01	; 1
    310e:	9e 83       	std	Y+6, r25	; 0x06
    3110:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3112:	8d 81       	ldd	r24, Y+5	; 0x05
    3114:	9e 81       	ldd	r25, Y+6	; 0x06
    3116:	00 97       	sbiw	r24, 0x00	; 0
    3118:	69 f7       	brne	.-38     	; 0x30f4 <LCD_CheckStatusShiftRightOrLeft+0xc0>
    311a:	14 c0       	rjmp	.+40     	; 0x3144 <LCD_CheckStatusShiftRightOrLeft+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    311c:	6f 81       	ldd	r22, Y+7	; 0x07
    311e:	78 85       	ldd	r23, Y+8	; 0x08
    3120:	89 85       	ldd	r24, Y+9	; 0x09
    3122:	9a 85       	ldd	r25, Y+10	; 0x0a
    3124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	9e 83       	std	Y+6, r25	; 0x06
    312e:	8d 83       	std	Y+5, r24	; 0x05
    3130:	8d 81       	ldd	r24, Y+5	; 0x05
    3132:	9e 81       	ldd	r25, Y+6	; 0x06
    3134:	9a 83       	std	Y+2, r25	; 0x02
    3136:	89 83       	std	Y+1, r24	; 0x01
    3138:	89 81       	ldd	r24, Y+1	; 0x01
    313a:	9a 81       	ldd	r25, Y+2	; 0x02
    313c:	01 97       	sbiw	r24, 0x01	; 1
    313e:	f1 f7       	brne	.-4      	; 0x313c <LCD_CheckStatusShiftRightOrLeft+0x108>
    3140:	9a 83       	std	Y+2, r25	; 0x02
    3142:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    3144:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3146:	63 96       	adiw	r28, 0x13	; 19
    3148:	0f b6       	in	r0, 0x3f	; 63
    314a:	f8 94       	cli
    314c:	de bf       	out	0x3e, r29	; 62
    314e:	0f be       	out	0x3f, r0	; 63
    3150:	cd bf       	out	0x3d, r28	; 61
    3152:	cf 91       	pop	r28
    3154:	df 91       	pop	r29
    3156:	08 95       	ret

00003158 <LCD_VoidShiftLeft>:
Void LCD_VoidShiftLeft(_uint8 Copy__Uint8PositionValue, _uint32 Copy__Uint32DelayValue)
{
    3158:	df 93       	push	r29
    315a:	cf 93       	push	r28
    315c:	cd b7       	in	r28, 0x3d	; 61
    315e:	de b7       	in	r29, 0x3e	; 62
    3160:	64 97       	sbiw	r28, 0x14	; 20
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	f8 94       	cli
    3166:	de bf       	out	0x3e, r29	; 62
    3168:	0f be       	out	0x3f, r0	; 63
    316a:	cd bf       	out	0x3d, r28	; 61
    316c:	88 8b       	std	Y+16, r24	; 0x10
    316e:	49 8b       	std	Y+17, r20	; 0x11
    3170:	5a 8b       	std	Y+18, r21	; 0x12
    3172:	6b 8b       	std	Y+19, r22	; 0x13
    3174:	7c 8b       	std	Y+20, r23	; 0x14
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    3176:	1f 86       	std	Y+15, r1	; 0x0f
    3178:	7c c0       	rjmp	.+248    	; 0x3272 <LCD_VoidShiftLeft+0x11a>
        {
                LCD_CheckStatusSendCmnd4bit(0b00011000);
    317a:	88 e1       	ldi	r24, 0x18	; 24
    317c:	0e 94 6d 20 	call	0x40da	; 0x40da <LCD_CheckStatusSendCmnd4bit>
                _delay_ms(Copy__Uint32DelayValue);
    3180:	69 89       	ldd	r22, Y+17	; 0x11
    3182:	7a 89       	ldd	r23, Y+18	; 0x12
    3184:	8b 89       	ldd	r24, Y+19	; 0x13
    3186:	9c 89       	ldd	r25, Y+20	; 0x14
    3188:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	8b 87       	std	Y+11, r24	; 0x0b
    3192:	9c 87       	std	Y+12, r25	; 0x0c
    3194:	ad 87       	std	Y+13, r26	; 0x0d
    3196:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3198:	6b 85       	ldd	r22, Y+11	; 0x0b
    319a:	7c 85       	ldd	r23, Y+12	; 0x0c
    319c:	8d 85       	ldd	r24, Y+13	; 0x0d
    319e:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	4a ef       	ldi	r20, 0xFA	; 250
    31a6:	54 e4       	ldi	r21, 0x44	; 68
    31a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ac:	dc 01       	movw	r26, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	8f 83       	std	Y+7, r24	; 0x07
    31b2:	98 87       	std	Y+8, r25	; 0x08
    31b4:	a9 87       	std	Y+9, r26	; 0x09
    31b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31b8:	6f 81       	ldd	r22, Y+7	; 0x07
    31ba:	78 85       	ldd	r23, Y+8	; 0x08
    31bc:	89 85       	ldd	r24, Y+9	; 0x09
    31be:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	40 e8       	ldi	r20, 0x80	; 128
    31c6:	5f e3       	ldi	r21, 0x3F	; 63
    31c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31cc:	88 23       	and	r24, r24
    31ce:	2c f4       	brge	.+10     	; 0x31da <LCD_VoidShiftLeft+0x82>
		__ticks = 1;
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	9e 83       	std	Y+6, r25	; 0x06
    31d6:	8d 83       	std	Y+5, r24	; 0x05
    31d8:	3f c0       	rjmp	.+126    	; 0x3258 <LCD_VoidShiftLeft+0x100>
	else if (__tmp > 65535)
    31da:	6f 81       	ldd	r22, Y+7	; 0x07
    31dc:	78 85       	ldd	r23, Y+8	; 0x08
    31de:	89 85       	ldd	r24, Y+9	; 0x09
    31e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	3f ef       	ldi	r19, 0xFF	; 255
    31e6:	4f e7       	ldi	r20, 0x7F	; 127
    31e8:	57 e4       	ldi	r21, 0x47	; 71
    31ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31ee:	18 16       	cp	r1, r24
    31f0:	4c f5       	brge	.+82     	; 0x3244 <LCD_VoidShiftLeft+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    31f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    31f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	40 e2       	ldi	r20, 0x20	; 32
    3200:	51 e4       	ldi	r21, 0x41	; 65
    3202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	bc 01       	movw	r22, r24
    320c:	cd 01       	movw	r24, r26
    320e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	9e 83       	std	Y+6, r25	; 0x06
    3218:	8d 83       	std	Y+5, r24	; 0x05
    321a:	0f c0       	rjmp	.+30     	; 0x323a <LCD_VoidShiftLeft+0xe2>
    321c:	88 ec       	ldi	r24, 0xC8	; 200
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	9c 83       	std	Y+4, r25	; 0x04
    3222:	8b 83       	std	Y+3, r24	; 0x03
    3224:	8b 81       	ldd	r24, Y+3	; 0x03
    3226:	9c 81       	ldd	r25, Y+4	; 0x04
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	f1 f7       	brne	.-4      	; 0x3228 <LCD_VoidShiftLeft+0xd0>
    322c:	9c 83       	std	Y+4, r25	; 0x04
    322e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3230:	8d 81       	ldd	r24, Y+5	; 0x05
    3232:	9e 81       	ldd	r25, Y+6	; 0x06
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	9e 83       	std	Y+6, r25	; 0x06
    3238:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    323a:	8d 81       	ldd	r24, Y+5	; 0x05
    323c:	9e 81       	ldd	r25, Y+6	; 0x06
    323e:	00 97       	sbiw	r24, 0x00	; 0
    3240:	69 f7       	brne	.-38     	; 0x321c <LCD_VoidShiftLeft+0xc4>
    3242:	14 c0       	rjmp	.+40     	; 0x326c <LCD_VoidShiftLeft+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3244:	6f 81       	ldd	r22, Y+7	; 0x07
    3246:	78 85       	ldd	r23, Y+8	; 0x08
    3248:	89 85       	ldd	r24, Y+9	; 0x09
    324a:	9a 85       	ldd	r25, Y+10	; 0x0a
    324c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	9e 83       	std	Y+6, r25	; 0x06
    3256:	8d 83       	std	Y+5, r24	; 0x05
    3258:	8d 81       	ldd	r24, Y+5	; 0x05
    325a:	9e 81       	ldd	r25, Y+6	; 0x06
    325c:	9a 83       	std	Y+2, r25	; 0x02
    325e:	89 83       	std	Y+1, r24	; 0x01
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	9a 81       	ldd	r25, Y+2	; 0x02
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	f1 f7       	brne	.-4      	; 0x3264 <LCD_VoidShiftLeft+0x10c>
    3268:	9a 83       	std	Y+2, r25	; 0x02
    326a:	89 83       	std	Y+1, r24	; 0x01
        return Local_CheckStausReturnValue;
}
Void LCD_VoidShiftLeft(_uint8 Copy__Uint8PositionValue, _uint32 Copy__Uint32DelayValue)
{
        _uint8 Local__Uint8Counter;
        for (Local__Uint8Counter = 0; Local__Uint8Counter < Copy__Uint8PositionValue; ++Local__Uint8Counter)
    326c:	8f 85       	ldd	r24, Y+15	; 0x0f
    326e:	8f 5f       	subi	r24, 0xFF	; 255
    3270:	8f 87       	std	Y+15, r24	; 0x0f
    3272:	9f 85       	ldd	r25, Y+15	; 0x0f
    3274:	88 89       	ldd	r24, Y+16	; 0x10
    3276:	98 17       	cp	r25, r24
    3278:	08 f4       	brcc	.+2      	; 0x327c <LCD_VoidShiftLeft+0x124>
    327a:	7f cf       	rjmp	.-258    	; 0x317a <LCD_VoidShiftLeft+0x22>
        {
                LCD_CheckStatusSendCmnd4bit(0b00011000);
                _delay_ms(Copy__Uint32DelayValue);
        }
}
    327c:	64 96       	adiw	r28, 0x14	; 20
    327e:	0f b6       	in	r0, 0x3f	; 63
    3280:	f8 94       	cli
    3282:	de bf       	out	0x3e, r29	; 62
    3284:	0f be       	out	0x3f, r0	; 63
    3286:	cd bf       	out	0x3d, r28	; 61
    3288:	cf 91       	pop	r28
    328a:	df 91       	pop	r29
    328c:	08 95       	ret

0000328e <LCD_CheckStatusDisplaySpecialChar>:
CheckStatus LCD_CheckStatusDisplaySpecialChar(_uint8 Copy__Uint8Char)
{
    328e:	df 93       	push	r29
    3290:	cf 93       	push	r28
    3292:	00 d0       	rcall	.+0      	; 0x3294 <LCD_CheckStatusDisplaySpecialChar+0x6>
    3294:	00 d0       	rcall	.+0      	; 0x3296 <LCD_CheckStatusDisplaySpecialChar+0x8>
    3296:	cd b7       	in	r28, 0x3d	; 61
    3298:	de b7       	in	r29, 0x3e	; 62
    329a:	8a 83       	std	Y+2, r24	; 0x02
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    329c:	19 82       	std	Y+1, r1	; 0x01
        if (Copy__Uint8Char <= 8)
    329e:	8a 81       	ldd	r24, Y+2	; 0x02
    32a0:	89 30       	cpi	r24, 0x09	; 9
    32a2:	08 f0       	brcs	.+2      	; 0x32a6 <LCD_CheckStatusDisplaySpecialChar+0x18>
    32a4:	54 c0       	rjmp	.+168    	; 0x334e <LCD_CheckStatusDisplaySpecialChar+0xc0>
        {
                switch (Copy__Uint8Char)
    32a6:	8a 81       	ldd	r24, Y+2	; 0x02
    32a8:	28 2f       	mov	r18, r24
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	3c 83       	std	Y+4, r19	; 0x04
    32ae:	2b 83       	std	Y+3, r18	; 0x03
    32b0:	8b 81       	ldd	r24, Y+3	; 0x03
    32b2:	9c 81       	ldd	r25, Y+4	; 0x04
    32b4:	84 30       	cpi	r24, 0x04	; 4
    32b6:	91 05       	cpc	r25, r1
    32b8:	b1 f1       	breq	.+108    	; 0x3326 <LCD_CheckStatusDisplaySpecialChar+0x98>
    32ba:	2b 81       	ldd	r18, Y+3	; 0x03
    32bc:	3c 81       	ldd	r19, Y+4	; 0x04
    32be:	25 30       	cpi	r18, 0x05	; 5
    32c0:	31 05       	cpc	r19, r1
    32c2:	84 f4       	brge	.+32     	; 0x32e4 <LCD_CheckStatusDisplaySpecialChar+0x56>
    32c4:	8b 81       	ldd	r24, Y+3	; 0x03
    32c6:	9c 81       	ldd	r25, Y+4	; 0x04
    32c8:	82 30       	cpi	r24, 0x02	; 2
    32ca:	91 05       	cpc	r25, r1
    32cc:	21 f1       	breq	.+72     	; 0x3316 <LCD_CheckStatusDisplaySpecialChar+0x88>
    32ce:	2b 81       	ldd	r18, Y+3	; 0x03
    32d0:	3c 81       	ldd	r19, Y+4	; 0x04
    32d2:	23 30       	cpi	r18, 0x03	; 3
    32d4:	31 05       	cpc	r19, r1
    32d6:	1c f5       	brge	.+70     	; 0x331e <LCD_CheckStatusDisplaySpecialChar+0x90>
    32d8:	8b 81       	ldd	r24, Y+3	; 0x03
    32da:	9c 81       	ldd	r25, Y+4	; 0x04
    32dc:	81 30       	cpi	r24, 0x01	; 1
    32de:	91 05       	cpc	r25, r1
    32e0:	b1 f0       	breq	.+44     	; 0x330e <LCD_CheckStatusDisplaySpecialChar+0x80>
    32e2:	37 c0       	rjmp	.+110    	; 0x3352 <LCD_CheckStatusDisplaySpecialChar+0xc4>
    32e4:	2b 81       	ldd	r18, Y+3	; 0x03
    32e6:	3c 81       	ldd	r19, Y+4	; 0x04
    32e8:	26 30       	cpi	r18, 0x06	; 6
    32ea:	31 05       	cpc	r19, r1
    32ec:	21 f1       	breq	.+72     	; 0x3336 <LCD_CheckStatusDisplaySpecialChar+0xa8>
    32ee:	8b 81       	ldd	r24, Y+3	; 0x03
    32f0:	9c 81       	ldd	r25, Y+4	; 0x04
    32f2:	86 30       	cpi	r24, 0x06	; 6
    32f4:	91 05       	cpc	r25, r1
    32f6:	dc f0       	brlt	.+54     	; 0x332e <LCD_CheckStatusDisplaySpecialChar+0xa0>
    32f8:	2b 81       	ldd	r18, Y+3	; 0x03
    32fa:	3c 81       	ldd	r19, Y+4	; 0x04
    32fc:	27 30       	cpi	r18, 0x07	; 7
    32fe:	31 05       	cpc	r19, r1
    3300:	f1 f0       	breq	.+60     	; 0x333e <LCD_CheckStatusDisplaySpecialChar+0xb0>
    3302:	8b 81       	ldd	r24, Y+3	; 0x03
    3304:	9c 81       	ldd	r25, Y+4	; 0x04
    3306:	88 30       	cpi	r24, 0x08	; 8
    3308:	91 05       	cpc	r25, r1
    330a:	e9 f0       	breq	.+58     	; 0x3346 <LCD_CheckStatusDisplaySpecialChar+0xb8>
    330c:	22 c0       	rjmp	.+68     	; 0x3352 <LCD_CheckStatusDisplaySpecialChar+0xc4>
                {

                case 1:
                        LCD_CheckStatusSendChar4bit(0);
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
    3314:	1e c0       	rjmp	.+60     	; 0x3352 <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 2:
                        LCD_CheckStatusSendChar4bit(1);
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
    331c:	1a c0       	rjmp	.+52     	; 0x3352 <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 3:
                        LCD_CheckStatusSendChar4bit(2);
    331e:	82 e0       	ldi	r24, 0x02	; 2
    3320:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
    3324:	16 c0       	rjmp	.+44     	; 0x3352 <LCD_CheckStatusDisplaySpecialChar+0xc4>

                        break;
                case 4:
                        LCD_CheckStatusSendChar4bit(3);
    3326:	83 e0       	ldi	r24, 0x03	; 3
    3328:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
    332c:	12 c0       	rjmp	.+36     	; 0x3352 <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 5:
                        LCD_CheckStatusSendChar4bit(4);
    332e:	84 e0       	ldi	r24, 0x04	; 4
    3330:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
    3334:	0e c0       	rjmp	.+28     	; 0x3352 <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 6:
                        LCD_CheckStatusSendChar4bit(5);
    3336:	85 e0       	ldi	r24, 0x05	; 5
    3338:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
    333c:	0a c0       	rjmp	.+20     	; 0x3352 <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 7:
                        LCD_CheckStatusSendChar4bit(6);
    333e:	86 e0       	ldi	r24, 0x06	; 6
    3340:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
    3344:	06 c0       	rjmp	.+12     	; 0x3352 <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                case 8:
                        LCD_CheckStatusSendChar4bit(7);
    3346:	87 e0       	ldi	r24, 0x07	; 7
    3348:	0e 94 83 1c 	call	0x3906	; 0x3906 <LCD_CheckStatusSendChar4bit>
    334c:	02 c0       	rjmp	.+4      	; 0x3352 <LCD_CheckStatusDisplaySpecialChar+0xc4>
                        break;
                }
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	89 83       	std	Y+1, r24	; 0x01
        }
        return Local_CheckStausReturnValue;
    3352:	89 81       	ldd	r24, Y+1	; 0x01
}
    3354:	0f 90       	pop	r0
    3356:	0f 90       	pop	r0
    3358:	0f 90       	pop	r0
    335a:	0f 90       	pop	r0
    335c:	cf 91       	pop	r28
    335e:	df 91       	pop	r29
    3360:	08 95       	ret

00003362 <LCD_VoidInit4bit>:
Void LCD_VoidInit4bit(Void)
{
    3362:	0f 93       	push	r16
    3364:	1f 93       	push	r17
    3366:	df 93       	push	r29
    3368:	cf 93       	push	r28
    336a:	cd b7       	in	r28, 0x3d	; 61
    336c:	de b7       	in	r29, 0x3e	; 62
    336e:	cc 54       	subi	r28, 0x4C	; 76
    3370:	d0 40       	sbci	r29, 0x00	; 0
    3372:	0f b6       	in	r0, 0x3f	; 63
    3374:	f8 94       	cli
    3376:	de bf       	out	0x3e, r29	; 62
    3378:	0f be       	out	0x3f, r0	; 63
    337a:	cd bf       	out	0x3d, r28	; 61
    337c:	fe 01       	movw	r30, r28
    337e:	e7 5b       	subi	r30, 0xB7	; 183
    3380:	ff 4f       	sbci	r31, 0xFF	; 255
    3382:	80 e0       	ldi	r24, 0x00	; 0
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	ac e0       	ldi	r26, 0x0C	; 12
    3388:	b2 e4       	ldi	r27, 0x42	; 66
    338a:	80 83       	st	Z, r24
    338c:	91 83       	std	Z+1, r25	; 0x01
    338e:	a2 83       	std	Z+2, r26	; 0x02
    3390:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3392:	8e 01       	movw	r16, r28
    3394:	0b 5b       	subi	r16, 0xBB	; 187
    3396:	1f 4f       	sbci	r17, 0xFF	; 255
    3398:	fe 01       	movw	r30, r28
    339a:	e7 5b       	subi	r30, 0xB7	; 183
    339c:	ff 4f       	sbci	r31, 0xFF	; 255
    339e:	60 81       	ld	r22, Z
    33a0:	71 81       	ldd	r23, Z+1	; 0x01
    33a2:	82 81       	ldd	r24, Z+2	; 0x02
    33a4:	93 81       	ldd	r25, Z+3	; 0x03
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	4a ef       	ldi	r20, 0xFA	; 250
    33ac:	54 e4       	ldi	r21, 0x44	; 68
    33ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	f8 01       	movw	r30, r16
    33b8:	80 83       	st	Z, r24
    33ba:	91 83       	std	Z+1, r25	; 0x01
    33bc:	a2 83       	std	Z+2, r26	; 0x02
    33be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33c0:	fe 01       	movw	r30, r28
    33c2:	eb 5b       	subi	r30, 0xBB	; 187
    33c4:	ff 4f       	sbci	r31, 0xFF	; 255
    33c6:	60 81       	ld	r22, Z
    33c8:	71 81       	ldd	r23, Z+1	; 0x01
    33ca:	82 81       	ldd	r24, Z+2	; 0x02
    33cc:	93 81       	ldd	r25, Z+3	; 0x03
    33ce:	20 e0       	ldi	r18, 0x00	; 0
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	40 e8       	ldi	r20, 0x80	; 128
    33d4:	5f e3       	ldi	r21, 0x3F	; 63
    33d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33da:	88 23       	and	r24, r24
    33dc:	44 f4       	brge	.+16     	; 0x33ee <LCD_VoidInit4bit+0x8c>
		__ticks = 1;
    33de:	fe 01       	movw	r30, r28
    33e0:	ed 5b       	subi	r30, 0xBD	; 189
    33e2:	ff 4f       	sbci	r31, 0xFF	; 255
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	91 83       	std	Z+1, r25	; 0x01
    33ea:	80 83       	st	Z, r24
    33ec:	64 c0       	rjmp	.+200    	; 0x34b6 <LCD_VoidInit4bit+0x154>
	else if (__tmp > 65535)
    33ee:	fe 01       	movw	r30, r28
    33f0:	eb 5b       	subi	r30, 0xBB	; 187
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	60 81       	ld	r22, Z
    33f6:	71 81       	ldd	r23, Z+1	; 0x01
    33f8:	82 81       	ldd	r24, Z+2	; 0x02
    33fa:	93 81       	ldd	r25, Z+3	; 0x03
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	3f ef       	ldi	r19, 0xFF	; 255
    3400:	4f e7       	ldi	r20, 0x7F	; 127
    3402:	57 e4       	ldi	r21, 0x47	; 71
    3404:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3408:	18 16       	cp	r1, r24
    340a:	0c f0       	brlt	.+2      	; 0x340e <LCD_VoidInit4bit+0xac>
    340c:	43 c0       	rjmp	.+134    	; 0x3494 <LCD_VoidInit4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340e:	fe 01       	movw	r30, r28
    3410:	e7 5b       	subi	r30, 0xB7	; 183
    3412:	ff 4f       	sbci	r31, 0xFF	; 255
    3414:	60 81       	ld	r22, Z
    3416:	71 81       	ldd	r23, Z+1	; 0x01
    3418:	82 81       	ldd	r24, Z+2	; 0x02
    341a:	93 81       	ldd	r25, Z+3	; 0x03
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	40 e2       	ldi	r20, 0x20	; 32
    3422:	51 e4       	ldi	r21, 0x41	; 65
    3424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3428:	dc 01       	movw	r26, r24
    342a:	cb 01       	movw	r24, r22
    342c:	8e 01       	movw	r16, r28
    342e:	0d 5b       	subi	r16, 0xBD	; 189
    3430:	1f 4f       	sbci	r17, 0xFF	; 255
    3432:	bc 01       	movw	r22, r24
    3434:	cd 01       	movw	r24, r26
    3436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	f8 01       	movw	r30, r16
    3440:	91 83       	std	Z+1, r25	; 0x01
    3442:	80 83       	st	Z, r24
    3444:	1f c0       	rjmp	.+62     	; 0x3484 <LCD_VoidInit4bit+0x122>
    3446:	fe 01       	movw	r30, r28
    3448:	ef 5b       	subi	r30, 0xBF	; 191
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	88 ec       	ldi	r24, 0xC8	; 200
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	91 83       	std	Z+1, r25	; 0x01
    3452:	80 83       	st	Z, r24
    3454:	fe 01       	movw	r30, r28
    3456:	ef 5b       	subi	r30, 0xBF	; 191
    3458:	ff 4f       	sbci	r31, 0xFF	; 255
    345a:	80 81       	ld	r24, Z
    345c:	91 81       	ldd	r25, Z+1	; 0x01
    345e:	01 97       	sbiw	r24, 0x01	; 1
    3460:	f1 f7       	brne	.-4      	; 0x345e <LCD_VoidInit4bit+0xfc>
    3462:	fe 01       	movw	r30, r28
    3464:	ef 5b       	subi	r30, 0xBF	; 191
    3466:	ff 4f       	sbci	r31, 0xFF	; 255
    3468:	91 83       	std	Z+1, r25	; 0x01
    346a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346c:	de 01       	movw	r26, r28
    346e:	ad 5b       	subi	r26, 0xBD	; 189
    3470:	bf 4f       	sbci	r27, 0xFF	; 255
    3472:	fe 01       	movw	r30, r28
    3474:	ed 5b       	subi	r30, 0xBD	; 189
    3476:	ff 4f       	sbci	r31, 0xFF	; 255
    3478:	80 81       	ld	r24, Z
    347a:	91 81       	ldd	r25, Z+1	; 0x01
    347c:	01 97       	sbiw	r24, 0x01	; 1
    347e:	11 96       	adiw	r26, 0x01	; 1
    3480:	9c 93       	st	X, r25
    3482:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3484:	fe 01       	movw	r30, r28
    3486:	ed 5b       	subi	r30, 0xBD	; 189
    3488:	ff 4f       	sbci	r31, 0xFF	; 255
    348a:	80 81       	ld	r24, Z
    348c:	91 81       	ldd	r25, Z+1	; 0x01
    348e:	00 97       	sbiw	r24, 0x00	; 0
    3490:	d1 f6       	brne	.-76     	; 0x3446 <LCD_VoidInit4bit+0xe4>
    3492:	24 c0       	rjmp	.+72     	; 0x34dc <LCD_VoidInit4bit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3494:	8e 01       	movw	r16, r28
    3496:	0d 5b       	subi	r16, 0xBD	; 189
    3498:	1f 4f       	sbci	r17, 0xFF	; 255
    349a:	fe 01       	movw	r30, r28
    349c:	eb 5b       	subi	r30, 0xBB	; 187
    349e:	ff 4f       	sbci	r31, 0xFF	; 255
    34a0:	60 81       	ld	r22, Z
    34a2:	71 81       	ldd	r23, Z+1	; 0x01
    34a4:	82 81       	ldd	r24, Z+2	; 0x02
    34a6:	93 81       	ldd	r25, Z+3	; 0x03
    34a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ac:	dc 01       	movw	r26, r24
    34ae:	cb 01       	movw	r24, r22
    34b0:	f8 01       	movw	r30, r16
    34b2:	91 83       	std	Z+1, r25	; 0x01
    34b4:	80 83       	st	Z, r24
    34b6:	fe 01       	movw	r30, r28
    34b8:	ed 5b       	subi	r30, 0xBD	; 189
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	80 81       	ld	r24, Z
    34be:	91 81       	ldd	r25, Z+1	; 0x01
    34c0:	fe 01       	movw	r30, r28
    34c2:	ff 96       	adiw	r30, 0x3f	; 63
    34c4:	91 83       	std	Z+1, r25	; 0x01
    34c6:	80 83       	st	Z, r24
    34c8:	fe 01       	movw	r30, r28
    34ca:	ff 96       	adiw	r30, 0x3f	; 63
    34cc:	80 81       	ld	r24, Z
    34ce:	91 81       	ldd	r25, Z+1	; 0x01
    34d0:	01 97       	sbiw	r24, 0x01	; 1
    34d2:	f1 f7       	brne	.-4      	; 0x34d0 <LCD_VoidInit4bit+0x16e>
    34d4:	fe 01       	movw	r30, r28
    34d6:	ff 96       	adiw	r30, 0x3f	; 63
    34d8:	91 83       	std	Z+1, r25	; 0x01
    34da:	80 83       	st	Z, r24
        _delay_ms(35);
        LCD_CheckStatusSendCmnd(0b00100000);
    34dc:	80 e2       	ldi	r24, 0x20	; 32
    34de:	0e 94 fd 10 	call	0x21fa	; 0x21fa <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b00100000);
    34e2:	80 e2       	ldi	r24, 0x20	; 32
    34e4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b11000000);
    34e8:	80 ec       	ldi	r24, 0xC0	; 192
    34ea:	0e 94 fd 10 	call	0x21fa	; 0x21fa <LCD_CheckStatusSendCmnd>
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	a0 e2       	ldi	r26, 0x20	; 32
    34f4:	b2 e4       	ldi	r27, 0x42	; 66
    34f6:	8b af       	std	Y+59, r24	; 0x3b
    34f8:	9c af       	std	Y+60, r25	; 0x3c
    34fa:	ad af       	std	Y+61, r26	; 0x3d
    34fc:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    34fe:	6b ad       	ldd	r22, Y+59	; 0x3b
    3500:	7c ad       	ldd	r23, Y+60	; 0x3c
    3502:	8d ad       	ldd	r24, Y+61	; 0x3d
    3504:	9e ad       	ldd	r25, Y+62	; 0x3e
    3506:	2b ea       	ldi	r18, 0xAB	; 171
    3508:	3a ea       	ldi	r19, 0xAA	; 170
    350a:	4a e2       	ldi	r20, 0x2A	; 42
    350c:	50 e4       	ldi	r21, 0x40	; 64
    350e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	8f ab       	std	Y+55, r24	; 0x37
    3518:	98 af       	std	Y+56, r25	; 0x38
    351a:	a9 af       	std	Y+57, r26	; 0x39
    351c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    351e:	6f a9       	ldd	r22, Y+55	; 0x37
    3520:	78 ad       	ldd	r23, Y+56	; 0x38
    3522:	89 ad       	ldd	r24, Y+57	; 0x39
    3524:	9a ad       	ldd	r25, Y+58	; 0x3a
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	40 e8       	ldi	r20, 0x80	; 128
    352c:	5f e3       	ldi	r21, 0x3F	; 63
    352e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3532:	88 23       	and	r24, r24
    3534:	1c f4       	brge	.+6      	; 0x353c <LCD_VoidInit4bit+0x1da>
		__ticks = 1;
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	8e ab       	std	Y+54, r24	; 0x36
    353a:	91 c0       	rjmp	.+290    	; 0x365e <LCD_VoidInit4bit+0x2fc>
	else if (__tmp > 255)
    353c:	6f a9       	ldd	r22, Y+55	; 0x37
    353e:	78 ad       	ldd	r23, Y+56	; 0x38
    3540:	89 ad       	ldd	r24, Y+57	; 0x39
    3542:	9a ad       	ldd	r25, Y+58	; 0x3a
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	4f e7       	ldi	r20, 0x7F	; 127
    354a:	53 e4       	ldi	r21, 0x43	; 67
    354c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3550:	18 16       	cp	r1, r24
    3552:	0c f0       	brlt	.+2      	; 0x3556 <LCD_VoidInit4bit+0x1f4>
    3554:	7b c0       	rjmp	.+246    	; 0x364c <LCD_VoidInit4bit+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    3556:	6b ad       	ldd	r22, Y+59	; 0x3b
    3558:	7c ad       	ldd	r23, Y+60	; 0x3c
    355a:	8d ad       	ldd	r24, Y+61	; 0x3d
    355c:	9e ad       	ldd	r25, Y+62	; 0x3e
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	4a e7       	ldi	r20, 0x7A	; 122
    3564:	54 e4       	ldi	r21, 0x44	; 68
    3566:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	8a ab       	std	Y+50, r24	; 0x32
    3570:	9b ab       	std	Y+51, r25	; 0x33
    3572:	ac ab       	std	Y+52, r26	; 0x34
    3574:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3576:	6a a9       	ldd	r22, Y+50	; 0x32
    3578:	7b a9       	ldd	r23, Y+51	; 0x33
    357a:	8c a9       	ldd	r24, Y+52	; 0x34
    357c:	9d a9       	ldd	r25, Y+53	; 0x35
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	4a ef       	ldi	r20, 0xFA	; 250
    3584:	54 e4       	ldi	r21, 0x44	; 68
    3586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    358a:	dc 01       	movw	r26, r24
    358c:	cb 01       	movw	r24, r22
    358e:	8e a7       	std	Y+46, r24	; 0x2e
    3590:	9f a7       	std	Y+47, r25	; 0x2f
    3592:	a8 ab       	std	Y+48, r26	; 0x30
    3594:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    3596:	6e a5       	ldd	r22, Y+46	; 0x2e
    3598:	7f a5       	ldd	r23, Y+47	; 0x2f
    359a:	88 a9       	ldd	r24, Y+48	; 0x30
    359c:	99 a9       	ldd	r25, Y+49	; 0x31
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	40 e8       	ldi	r20, 0x80	; 128
    35a4:	5f e3       	ldi	r21, 0x3F	; 63
    35a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35aa:	88 23       	and	r24, r24
    35ac:	2c f4       	brge	.+10     	; 0x35b8 <LCD_VoidInit4bit+0x256>
		__ticks = 1;
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	9d a7       	std	Y+45, r25	; 0x2d
    35b4:	8c a7       	std	Y+44, r24	; 0x2c
    35b6:	3f c0       	rjmp	.+126    	; 0x3636 <LCD_VoidInit4bit+0x2d4>
	else if (__tmp > 65535)
    35b8:	6e a5       	ldd	r22, Y+46	; 0x2e
    35ba:	7f a5       	ldd	r23, Y+47	; 0x2f
    35bc:	88 a9       	ldd	r24, Y+48	; 0x30
    35be:	99 a9       	ldd	r25, Y+49	; 0x31
    35c0:	20 e0       	ldi	r18, 0x00	; 0
    35c2:	3f ef       	ldi	r19, 0xFF	; 255
    35c4:	4f e7       	ldi	r20, 0x7F	; 127
    35c6:	57 e4       	ldi	r21, 0x47	; 71
    35c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35cc:	18 16       	cp	r1, r24
    35ce:	4c f5       	brge	.+82     	; 0x3622 <LCD_VoidInit4bit+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d0:	6a a9       	ldd	r22, Y+50	; 0x32
    35d2:	7b a9       	ldd	r23, Y+51	; 0x33
    35d4:	8c a9       	ldd	r24, Y+52	; 0x34
    35d6:	9d a9       	ldd	r25, Y+53	; 0x35
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	40 e2       	ldi	r20, 0x20	; 32
    35de:	51 e4       	ldi	r21, 0x41	; 65
    35e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e4:	dc 01       	movw	r26, r24
    35e6:	cb 01       	movw	r24, r22
    35e8:	bc 01       	movw	r22, r24
    35ea:	cd 01       	movw	r24, r26
    35ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f0:	dc 01       	movw	r26, r24
    35f2:	cb 01       	movw	r24, r22
    35f4:	9d a7       	std	Y+45, r25	; 0x2d
    35f6:	8c a7       	std	Y+44, r24	; 0x2c
    35f8:	0f c0       	rjmp	.+30     	; 0x3618 <LCD_VoidInit4bit+0x2b6>
    35fa:	88 ec       	ldi	r24, 0xC8	; 200
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	9b a7       	std	Y+43, r25	; 0x2b
    3600:	8a a7       	std	Y+42, r24	; 0x2a
    3602:	8a a5       	ldd	r24, Y+42	; 0x2a
    3604:	9b a5       	ldd	r25, Y+43	; 0x2b
    3606:	01 97       	sbiw	r24, 0x01	; 1
    3608:	f1 f7       	brne	.-4      	; 0x3606 <LCD_VoidInit4bit+0x2a4>
    360a:	9b a7       	std	Y+43, r25	; 0x2b
    360c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    360e:	8c a5       	ldd	r24, Y+44	; 0x2c
    3610:	9d a5       	ldd	r25, Y+45	; 0x2d
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	9d a7       	std	Y+45, r25	; 0x2d
    3616:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3618:	8c a5       	ldd	r24, Y+44	; 0x2c
    361a:	9d a5       	ldd	r25, Y+45	; 0x2d
    361c:	00 97       	sbiw	r24, 0x00	; 0
    361e:	69 f7       	brne	.-38     	; 0x35fa <LCD_VoidInit4bit+0x298>
    3620:	24 c0       	rjmp	.+72     	; 0x366a <LCD_VoidInit4bit+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3622:	6e a5       	ldd	r22, Y+46	; 0x2e
    3624:	7f a5       	ldd	r23, Y+47	; 0x2f
    3626:	88 a9       	ldd	r24, Y+48	; 0x30
    3628:	99 a9       	ldd	r25, Y+49	; 0x31
    362a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	9d a7       	std	Y+45, r25	; 0x2d
    3634:	8c a7       	std	Y+44, r24	; 0x2c
    3636:	8c a5       	ldd	r24, Y+44	; 0x2c
    3638:	9d a5       	ldd	r25, Y+45	; 0x2d
    363a:	99 a7       	std	Y+41, r25	; 0x29
    363c:	88 a7       	std	Y+40, r24	; 0x28
    363e:	88 a5       	ldd	r24, Y+40	; 0x28
    3640:	99 a5       	ldd	r25, Y+41	; 0x29
    3642:	01 97       	sbiw	r24, 0x01	; 1
    3644:	f1 f7       	brne	.-4      	; 0x3642 <LCD_VoidInit4bit+0x2e0>
    3646:	99 a7       	std	Y+41, r25	; 0x29
    3648:	88 a7       	std	Y+40, r24	; 0x28
    364a:	0f c0       	rjmp	.+30     	; 0x366a <LCD_VoidInit4bit+0x308>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    364c:	6f a9       	ldd	r22, Y+55	; 0x37
    364e:	78 ad       	ldd	r23, Y+56	; 0x38
    3650:	89 ad       	ldd	r24, Y+57	; 0x39
    3652:	9a ad       	ldd	r25, Y+58	; 0x3a
    3654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3658:	dc 01       	movw	r26, r24
    365a:	cb 01       	movw	r24, r22
    365c:	8e ab       	std	Y+54, r24	; 0x36
    365e:	8e a9       	ldd	r24, Y+54	; 0x36
    3660:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3662:	8f a1       	ldd	r24, Y+39	; 0x27
    3664:	8a 95       	dec	r24
    3666:	f1 f7       	brne	.-4      	; 0x3664 <LCD_VoidInit4bit+0x302>
    3668:	8f a3       	std	Y+39, r24	; 0x27
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00000000);
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	0e 94 fd 10 	call	0x21fa	; 0x21fa <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b11110000);
    3670:	80 ef       	ldi	r24, 0xF0	; 240
    3672:	0e 94 fd 10 	call	0x21fa	; 0x21fa <LCD_CheckStatusSendCmnd>
    3676:	80 e0       	ldi	r24, 0x00	; 0
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	a0 e2       	ldi	r26, 0x20	; 32
    367c:	b2 e4       	ldi	r27, 0x42	; 66
    367e:	8b a3       	std	Y+35, r24	; 0x23
    3680:	9c a3       	std	Y+36, r25	; 0x24
    3682:	ad a3       	std	Y+37, r26	; 0x25
    3684:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3686:	6b a1       	ldd	r22, Y+35	; 0x23
    3688:	7c a1       	ldd	r23, Y+36	; 0x24
    368a:	8d a1       	ldd	r24, Y+37	; 0x25
    368c:	9e a1       	ldd	r25, Y+38	; 0x26
    368e:	2b ea       	ldi	r18, 0xAB	; 171
    3690:	3a ea       	ldi	r19, 0xAA	; 170
    3692:	4a e2       	ldi	r20, 0x2A	; 42
    3694:	50 e4       	ldi	r21, 0x40	; 64
    3696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    369a:	dc 01       	movw	r26, r24
    369c:	cb 01       	movw	r24, r22
    369e:	8f 8f       	std	Y+31, r24	; 0x1f
    36a0:	98 a3       	std	Y+32, r25	; 0x20
    36a2:	a9 a3       	std	Y+33, r26	; 0x21
    36a4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    36a6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    36a8:	78 a1       	ldd	r23, Y+32	; 0x20
    36aa:	89 a1       	ldd	r24, Y+33	; 0x21
    36ac:	9a a1       	ldd	r25, Y+34	; 0x22
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	40 e8       	ldi	r20, 0x80	; 128
    36b4:	5f e3       	ldi	r21, 0x3F	; 63
    36b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36ba:	88 23       	and	r24, r24
    36bc:	1c f4       	brge	.+6      	; 0x36c4 <LCD_VoidInit4bit+0x362>
		__ticks = 1;
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	8e 8f       	std	Y+30, r24	; 0x1e
    36c2:	91 c0       	rjmp	.+290    	; 0x37e6 <LCD_VoidInit4bit+0x484>
	else if (__tmp > 255)
    36c4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    36c6:	78 a1       	ldd	r23, Y+32	; 0x20
    36c8:	89 a1       	ldd	r24, Y+33	; 0x21
    36ca:	9a a1       	ldd	r25, Y+34	; 0x22
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	4f e7       	ldi	r20, 0x7F	; 127
    36d2:	53 e4       	ldi	r21, 0x43	; 67
    36d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36d8:	18 16       	cp	r1, r24
    36da:	0c f0       	brlt	.+2      	; 0x36de <LCD_VoidInit4bit+0x37c>
    36dc:	7b c0       	rjmp	.+246    	; 0x37d4 <LCD_VoidInit4bit+0x472>
	{
		_delay_ms(__us / 1000.0);
    36de:	6b a1       	ldd	r22, Y+35	; 0x23
    36e0:	7c a1       	ldd	r23, Y+36	; 0x24
    36e2:	8d a1       	ldd	r24, Y+37	; 0x25
    36e4:	9e a1       	ldd	r25, Y+38	; 0x26
    36e6:	20 e0       	ldi	r18, 0x00	; 0
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	4a e7       	ldi	r20, 0x7A	; 122
    36ec:	54 e4       	ldi	r21, 0x44	; 68
    36ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	8a 8f       	std	Y+26, r24	; 0x1a
    36f8:	9b 8f       	std	Y+27, r25	; 0x1b
    36fa:	ac 8f       	std	Y+28, r26	; 0x1c
    36fc:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fe:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3700:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3702:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3704:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	4a ef       	ldi	r20, 0xFA	; 250
    370c:	54 e4       	ldi	r21, 0x44	; 68
    370e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22
    3716:	8e 8b       	std	Y+22, r24	; 0x16
    3718:	9f 8b       	std	Y+23, r25	; 0x17
    371a:	a8 8f       	std	Y+24, r26	; 0x18
    371c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    371e:	6e 89       	ldd	r22, Y+22	; 0x16
    3720:	7f 89       	ldd	r23, Y+23	; 0x17
    3722:	88 8d       	ldd	r24, Y+24	; 0x18
    3724:	99 8d       	ldd	r25, Y+25	; 0x19
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	40 e8       	ldi	r20, 0x80	; 128
    372c:	5f e3       	ldi	r21, 0x3F	; 63
    372e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3732:	88 23       	and	r24, r24
    3734:	2c f4       	brge	.+10     	; 0x3740 <LCD_VoidInit4bit+0x3de>
		__ticks = 1;
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	9d 8b       	std	Y+21, r25	; 0x15
    373c:	8c 8b       	std	Y+20, r24	; 0x14
    373e:	3f c0       	rjmp	.+126    	; 0x37be <LCD_VoidInit4bit+0x45c>
	else if (__tmp > 65535)
    3740:	6e 89       	ldd	r22, Y+22	; 0x16
    3742:	7f 89       	ldd	r23, Y+23	; 0x17
    3744:	88 8d       	ldd	r24, Y+24	; 0x18
    3746:	99 8d       	ldd	r25, Y+25	; 0x19
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	3f ef       	ldi	r19, 0xFF	; 255
    374c:	4f e7       	ldi	r20, 0x7F	; 127
    374e:	57 e4       	ldi	r21, 0x47	; 71
    3750:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3754:	18 16       	cp	r1, r24
    3756:	4c f5       	brge	.+82     	; 0x37aa <LCD_VoidInit4bit+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3758:	6a 8d       	ldd	r22, Y+26	; 0x1a
    375a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    375c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    375e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	40 e2       	ldi	r20, 0x20	; 32
    3766:	51 e4       	ldi	r21, 0x41	; 65
    3768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376c:	dc 01       	movw	r26, r24
    376e:	cb 01       	movw	r24, r22
    3770:	bc 01       	movw	r22, r24
    3772:	cd 01       	movw	r24, r26
    3774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	9d 8b       	std	Y+21, r25	; 0x15
    377e:	8c 8b       	std	Y+20, r24	; 0x14
    3780:	0f c0       	rjmp	.+30     	; 0x37a0 <LCD_VoidInit4bit+0x43e>
    3782:	88 ec       	ldi	r24, 0xC8	; 200
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	9b 8b       	std	Y+19, r25	; 0x13
    3788:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    378a:	8a 89       	ldd	r24, Y+18	; 0x12
    378c:	9b 89       	ldd	r25, Y+19	; 0x13
    378e:	01 97       	sbiw	r24, 0x01	; 1
    3790:	f1 f7       	brne	.-4      	; 0x378e <LCD_VoidInit4bit+0x42c>
    3792:	9b 8b       	std	Y+19, r25	; 0x13
    3794:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3796:	8c 89       	ldd	r24, Y+20	; 0x14
    3798:	9d 89       	ldd	r25, Y+21	; 0x15
    379a:	01 97       	sbiw	r24, 0x01	; 1
    379c:	9d 8b       	std	Y+21, r25	; 0x15
    379e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37a0:	8c 89       	ldd	r24, Y+20	; 0x14
    37a2:	9d 89       	ldd	r25, Y+21	; 0x15
    37a4:	00 97       	sbiw	r24, 0x00	; 0
    37a6:	69 f7       	brne	.-38     	; 0x3782 <LCD_VoidInit4bit+0x420>
    37a8:	24 c0       	rjmp	.+72     	; 0x37f2 <LCD_VoidInit4bit+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37aa:	6e 89       	ldd	r22, Y+22	; 0x16
    37ac:	7f 89       	ldd	r23, Y+23	; 0x17
    37ae:	88 8d       	ldd	r24, Y+24	; 0x18
    37b0:	99 8d       	ldd	r25, Y+25	; 0x19
    37b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	9d 8b       	std	Y+21, r25	; 0x15
    37bc:	8c 8b       	std	Y+20, r24	; 0x14
    37be:	8c 89       	ldd	r24, Y+20	; 0x14
    37c0:	9d 89       	ldd	r25, Y+21	; 0x15
    37c2:	99 8b       	std	Y+17, r25	; 0x11
    37c4:	88 8b       	std	Y+16, r24	; 0x10
    37c6:	88 89       	ldd	r24, Y+16	; 0x10
    37c8:	99 89       	ldd	r25, Y+17	; 0x11
    37ca:	01 97       	sbiw	r24, 0x01	; 1
    37cc:	f1 f7       	brne	.-4      	; 0x37ca <LCD_VoidInit4bit+0x468>
    37ce:	99 8b       	std	Y+17, r25	; 0x11
    37d0:	88 8b       	std	Y+16, r24	; 0x10
    37d2:	0f c0       	rjmp	.+30     	; 0x37f2 <LCD_VoidInit4bit+0x490>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    37d4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    37d6:	78 a1       	ldd	r23, Y+32	; 0x20
    37d8:	89 a1       	ldd	r24, Y+33	; 0x21
    37da:	9a a1       	ldd	r25, Y+34	; 0x22
    37dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e0:	dc 01       	movw	r26, r24
    37e2:	cb 01       	movw	r24, r22
    37e4:	8e 8f       	std	Y+30, r24	; 0x1e
    37e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    37e8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    37ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    37ec:	8a 95       	dec	r24
    37ee:	f1 f7       	brne	.-4      	; 0x37ec <LCD_VoidInit4bit+0x48a>
    37f0:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_us(40);
        LCD_CheckStatusSendCmnd(0b00000000);
    37f2:	80 e0       	ldi	r24, 0x00	; 0
    37f4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b00010000);
    37f8:	80 e1       	ldi	r24, 0x10	; 16
    37fa:	0e 94 fd 10 	call	0x21fa	; 0x21fa <LCD_CheckStatusSendCmnd>
    37fe:	80 e0       	ldi	r24, 0x00	; 0
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	a0 e0       	ldi	r26, 0x00	; 0
    3804:	b0 e4       	ldi	r27, 0x40	; 64
    3806:	8b 87       	std	Y+11, r24	; 0x0b
    3808:	9c 87       	std	Y+12, r25	; 0x0c
    380a:	ad 87       	std	Y+13, r26	; 0x0d
    380c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    380e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3810:	7c 85       	ldd	r23, Y+12	; 0x0c
    3812:	8d 85       	ldd	r24, Y+13	; 0x0d
    3814:	9e 85       	ldd	r25, Y+14	; 0x0e
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	4a ef       	ldi	r20, 0xFA	; 250
    381c:	54 e4       	ldi	r21, 0x44	; 68
    381e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	8f 83       	std	Y+7, r24	; 0x07
    3828:	98 87       	std	Y+8, r25	; 0x08
    382a:	a9 87       	std	Y+9, r26	; 0x09
    382c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    382e:	6f 81       	ldd	r22, Y+7	; 0x07
    3830:	78 85       	ldd	r23, Y+8	; 0x08
    3832:	89 85       	ldd	r24, Y+9	; 0x09
    3834:	9a 85       	ldd	r25, Y+10	; 0x0a
    3836:	20 e0       	ldi	r18, 0x00	; 0
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	40 e8       	ldi	r20, 0x80	; 128
    383c:	5f e3       	ldi	r21, 0x3F	; 63
    383e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3842:	88 23       	and	r24, r24
    3844:	2c f4       	brge	.+10     	; 0x3850 <LCD_VoidInit4bit+0x4ee>
		__ticks = 1;
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	9e 83       	std	Y+6, r25	; 0x06
    384c:	8d 83       	std	Y+5, r24	; 0x05
    384e:	3f c0       	rjmp	.+126    	; 0x38ce <LCD_VoidInit4bit+0x56c>
	else if (__tmp > 65535)
    3850:	6f 81       	ldd	r22, Y+7	; 0x07
    3852:	78 85       	ldd	r23, Y+8	; 0x08
    3854:	89 85       	ldd	r24, Y+9	; 0x09
    3856:	9a 85       	ldd	r25, Y+10	; 0x0a
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	3f ef       	ldi	r19, 0xFF	; 255
    385c:	4f e7       	ldi	r20, 0x7F	; 127
    385e:	57 e4       	ldi	r21, 0x47	; 71
    3860:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3864:	18 16       	cp	r1, r24
    3866:	4c f5       	brge	.+82     	; 0x38ba <LCD_VoidInit4bit+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3868:	6b 85       	ldd	r22, Y+11	; 0x0b
    386a:	7c 85       	ldd	r23, Y+12	; 0x0c
    386c:	8d 85       	ldd	r24, Y+13	; 0x0d
    386e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	40 e2       	ldi	r20, 0x20	; 32
    3876:	51 e4       	ldi	r21, 0x41	; 65
    3878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	bc 01       	movw	r22, r24
    3882:	cd 01       	movw	r24, r26
    3884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3888:	dc 01       	movw	r26, r24
    388a:	cb 01       	movw	r24, r22
    388c:	9e 83       	std	Y+6, r25	; 0x06
    388e:	8d 83       	std	Y+5, r24	; 0x05
    3890:	0f c0       	rjmp	.+30     	; 0x38b0 <LCD_VoidInit4bit+0x54e>
    3892:	88 ec       	ldi	r24, 0xC8	; 200
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	9c 83       	std	Y+4, r25	; 0x04
    3898:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    389a:	8b 81       	ldd	r24, Y+3	; 0x03
    389c:	9c 81       	ldd	r25, Y+4	; 0x04
    389e:	01 97       	sbiw	r24, 0x01	; 1
    38a0:	f1 f7       	brne	.-4      	; 0x389e <LCD_VoidInit4bit+0x53c>
    38a2:	9c 83       	std	Y+4, r25	; 0x04
    38a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a6:	8d 81       	ldd	r24, Y+5	; 0x05
    38a8:	9e 81       	ldd	r25, Y+6	; 0x06
    38aa:	01 97       	sbiw	r24, 0x01	; 1
    38ac:	9e 83       	std	Y+6, r25	; 0x06
    38ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b0:	8d 81       	ldd	r24, Y+5	; 0x05
    38b2:	9e 81       	ldd	r25, Y+6	; 0x06
    38b4:	00 97       	sbiw	r24, 0x00	; 0
    38b6:	69 f7       	brne	.-38     	; 0x3892 <LCD_VoidInit4bit+0x530>
    38b8:	14 c0       	rjmp	.+40     	; 0x38e2 <LCD_VoidInit4bit+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ba:	6f 81       	ldd	r22, Y+7	; 0x07
    38bc:	78 85       	ldd	r23, Y+8	; 0x08
    38be:	89 85       	ldd	r24, Y+9	; 0x09
    38c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	9e 83       	std	Y+6, r25	; 0x06
    38cc:	8d 83       	std	Y+5, r24	; 0x05
    38ce:	8d 81       	ldd	r24, Y+5	; 0x05
    38d0:	9e 81       	ldd	r25, Y+6	; 0x06
    38d2:	9a 83       	std	Y+2, r25	; 0x02
    38d4:	89 83       	std	Y+1, r24	; 0x01
    38d6:	89 81       	ldd	r24, Y+1	; 0x01
    38d8:	9a 81       	ldd	r25, Y+2	; 0x02
    38da:	01 97       	sbiw	r24, 0x01	; 1
    38dc:	f1 f7       	brne	.-4      	; 0x38da <LCD_VoidInit4bit+0x578>
    38de:	9a 83       	std	Y+2, r25	; 0x02
    38e0:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
        LCD_CheckStatusSendCmnd(0b00000000);
    38e2:	80 e0       	ldi	r24, 0x00	; 0
    38e4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <LCD_CheckStatusSendCmnd>
        LCD_CheckStatusSendCmnd(0b01100000);
    38e8:	80 e6       	ldi	r24, 0x60	; 96
    38ea:	0e 94 fd 10 	call	0x21fa	; 0x21fa <LCD_CheckStatusSendCmnd>
}
    38ee:	c4 5b       	subi	r28, 0xB4	; 180
    38f0:	df 4f       	sbci	r29, 0xFF	; 255
    38f2:	0f b6       	in	r0, 0x3f	; 63
    38f4:	f8 94       	cli
    38f6:	de bf       	out	0x3e, r29	; 62
    38f8:	0f be       	out	0x3f, r0	; 63
    38fa:	cd bf       	out	0x3d, r28	; 61
    38fc:	cf 91       	pop	r28
    38fe:	df 91       	pop	r29
    3900:	1f 91       	pop	r17
    3902:	0f 91       	pop	r16
    3904:	08 95       	ret

00003906 <LCD_CheckStatusSendChar4bit>:

CheckStatus LCD_CheckStatusSendChar4bit(_uint8 Copy__Uint8Char)
{
    3906:	0f 93       	push	r16
    3908:	1f 93       	push	r17
    390a:	df 93       	push	r29
    390c:	cf 93       	push	r28
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    3912:	c2 56       	subi	r28, 0x62	; 98
    3914:	d0 40       	sbci	r29, 0x00	; 0
    3916:	0f b6       	in	r0, 0x3f	; 63
    3918:	f8 94       	cli
    391a:	de bf       	out	0x3e, r29	; 62
    391c:	0f be       	out	0x3f, r0	; 63
    391e:	cd bf       	out	0x3d, r28	; 61
    3920:	fe 01       	movw	r30, r28
    3922:	ee 59       	subi	r30, 0x9E	; 158
    3924:	ff 4f       	sbci	r31, 0xFF	; 255
    3926:	80 83       	st	Z, r24
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    3928:	fe 01       	movw	r30, r28
    392a:	ef 59       	subi	r30, 0x9F	; 159
    392c:	ff 4f       	sbci	r31, 0xFF	; 255
    392e:	10 82       	st	Z, r1
	         3-Send CHAR byte  to the Data Pins of LCD
	         4-PULSE of Enable E = 1 ,E = 0
	        */
        if (Copy__Uint8Char <= 255)
        {
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_HIGH);
    3930:	81 e0       	ldi	r24, 0x01	; 1
    3932:	60 e0       	ldi	r22, 0x00	; 0
    3934:	41 e0       	ldi	r20, 0x01	; 1
    3936:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	61 e0       	ldi	r22, 0x01	; 1
    393e:	40 e0       	ldi	r20, 0x00	; 0
    3940:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, Copy__Uint8Char & LCD__UINT8_DATA_PINS);
    3944:	fe 01       	movw	r30, r28
    3946:	ee 59       	subi	r30, 0x9E	; 158
    3948:	ff 4f       	sbci	r31, 0xFF	; 255
    394a:	80 81       	ld	r24, Z
    394c:	98 2f       	mov	r25, r24
    394e:	90 7f       	andi	r25, 0xF0	; 240
    3950:	82 e0       	ldi	r24, 0x02	; 2
    3952:	69 2f       	mov	r22, r25
    3954:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    3958:	81 e0       	ldi	r24, 0x01	; 1
    395a:	62 e0       	ldi	r22, 0x02	; 2
    395c:	41 e0       	ldi	r20, 0x01	; 1
    395e:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>
    3962:	fe 01       	movw	r30, r28
    3964:	e3 5a       	subi	r30, 0xA3	; 163
    3966:	ff 4f       	sbci	r31, 0xFF	; 255
    3968:	80 e0       	ldi	r24, 0x00	; 0
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	a0 e8       	ldi	r26, 0x80	; 128
    396e:	bf e3       	ldi	r27, 0x3F	; 63
    3970:	80 83       	st	Z, r24
    3972:	91 83       	std	Z+1, r25	; 0x01
    3974:	a2 83       	std	Z+2, r26	; 0x02
    3976:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3978:	8e 01       	movw	r16, r28
    397a:	07 5a       	subi	r16, 0xA7	; 167
    397c:	1f 4f       	sbci	r17, 0xFF	; 255
    397e:	fe 01       	movw	r30, r28
    3980:	e3 5a       	subi	r30, 0xA3	; 163
    3982:	ff 4f       	sbci	r31, 0xFF	; 255
    3984:	60 81       	ld	r22, Z
    3986:	71 81       	ldd	r23, Z+1	; 0x01
    3988:	82 81       	ldd	r24, Z+2	; 0x02
    398a:	93 81       	ldd	r25, Z+3	; 0x03
    398c:	2b ea       	ldi	r18, 0xAB	; 171
    398e:	3a ea       	ldi	r19, 0xAA	; 170
    3990:	4a e2       	ldi	r20, 0x2A	; 42
    3992:	50 e4       	ldi	r21, 0x40	; 64
    3994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3998:	dc 01       	movw	r26, r24
    399a:	cb 01       	movw	r24, r22
    399c:	f8 01       	movw	r30, r16
    399e:	80 83       	st	Z, r24
    39a0:	91 83       	std	Z+1, r25	; 0x01
    39a2:	a2 83       	std	Z+2, r26	; 0x02
    39a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39a6:	fe 01       	movw	r30, r28
    39a8:	e7 5a       	subi	r30, 0xA7	; 167
    39aa:	ff 4f       	sbci	r31, 0xFF	; 255
    39ac:	60 81       	ld	r22, Z
    39ae:	71 81       	ldd	r23, Z+1	; 0x01
    39b0:	82 81       	ldd	r24, Z+2	; 0x02
    39b2:	93 81       	ldd	r25, Z+3	; 0x03
    39b4:	20 e0       	ldi	r18, 0x00	; 0
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	40 e8       	ldi	r20, 0x80	; 128
    39ba:	5f e3       	ldi	r21, 0x3F	; 63
    39bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39c0:	88 23       	and	r24, r24
    39c2:	34 f4       	brge	.+12     	; 0x39d0 <LCD_CheckStatusSendChar4bit+0xca>
		__ticks = 1;
    39c4:	fe 01       	movw	r30, r28
    39c6:	e8 5a       	subi	r30, 0xA8	; 168
    39c8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ca:	81 e0       	ldi	r24, 0x01	; 1
    39cc:	80 83       	st	Z, r24
    39ce:	e0 c0       	rjmp	.+448    	; 0x3b90 <LCD_CheckStatusSendChar4bit+0x28a>
	else if (__tmp > 255)
    39d0:	fe 01       	movw	r30, r28
    39d2:	e7 5a       	subi	r30, 0xA7	; 167
    39d4:	ff 4f       	sbci	r31, 0xFF	; 255
    39d6:	60 81       	ld	r22, Z
    39d8:	71 81       	ldd	r23, Z+1	; 0x01
    39da:	82 81       	ldd	r24, Z+2	; 0x02
    39dc:	93 81       	ldd	r25, Z+3	; 0x03
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	30 e0       	ldi	r19, 0x00	; 0
    39e2:	4f e7       	ldi	r20, 0x7F	; 127
    39e4:	53 e4       	ldi	r21, 0x43	; 67
    39e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39ea:	18 16       	cp	r1, r24
    39ec:	0c f0       	brlt	.+2      	; 0x39f0 <LCD_CheckStatusSendChar4bit+0xea>
    39ee:	c0 c0       	rjmp	.+384    	; 0x3b70 <LCD_CheckStatusSendChar4bit+0x26a>
	{
		_delay_ms(__us / 1000.0);
    39f0:	fe 01       	movw	r30, r28
    39f2:	e3 5a       	subi	r30, 0xA3	; 163
    39f4:	ff 4f       	sbci	r31, 0xFF	; 255
    39f6:	60 81       	ld	r22, Z
    39f8:	71 81       	ldd	r23, Z+1	; 0x01
    39fa:	82 81       	ldd	r24, Z+2	; 0x02
    39fc:	93 81       	ldd	r25, Z+3	; 0x03
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	4a e7       	ldi	r20, 0x7A	; 122
    3a04:	54 e4       	ldi	r21, 0x44	; 68
    3a06:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a0a:	dc 01       	movw	r26, r24
    3a0c:	cb 01       	movw	r24, r22
    3a0e:	fe 01       	movw	r30, r28
    3a10:	ec 5a       	subi	r30, 0xAC	; 172
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	80 83       	st	Z, r24
    3a16:	91 83       	std	Z+1, r25	; 0x01
    3a18:	a2 83       	std	Z+2, r26	; 0x02
    3a1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a1c:	8e 01       	movw	r16, r28
    3a1e:	00 5b       	subi	r16, 0xB0	; 176
    3a20:	1f 4f       	sbci	r17, 0xFF	; 255
    3a22:	fe 01       	movw	r30, r28
    3a24:	ec 5a       	subi	r30, 0xAC	; 172
    3a26:	ff 4f       	sbci	r31, 0xFF	; 255
    3a28:	60 81       	ld	r22, Z
    3a2a:	71 81       	ldd	r23, Z+1	; 0x01
    3a2c:	82 81       	ldd	r24, Z+2	; 0x02
    3a2e:	93 81       	ldd	r25, Z+3	; 0x03
    3a30:	20 e0       	ldi	r18, 0x00	; 0
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	4a ef       	ldi	r20, 0xFA	; 250
    3a36:	54 e4       	ldi	r21, 0x44	; 68
    3a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3c:	dc 01       	movw	r26, r24
    3a3e:	cb 01       	movw	r24, r22
    3a40:	f8 01       	movw	r30, r16
    3a42:	80 83       	st	Z, r24
    3a44:	91 83       	std	Z+1, r25	; 0x01
    3a46:	a2 83       	std	Z+2, r26	; 0x02
    3a48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a4a:	fe 01       	movw	r30, r28
    3a4c:	e0 5b       	subi	r30, 0xB0	; 176
    3a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a50:	60 81       	ld	r22, Z
    3a52:	71 81       	ldd	r23, Z+1	; 0x01
    3a54:	82 81       	ldd	r24, Z+2	; 0x02
    3a56:	93 81       	ldd	r25, Z+3	; 0x03
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	40 e8       	ldi	r20, 0x80	; 128
    3a5e:	5f e3       	ldi	r21, 0x3F	; 63
    3a60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a64:	88 23       	and	r24, r24
    3a66:	44 f4       	brge	.+16     	; 0x3a78 <LCD_CheckStatusSendChar4bit+0x172>
		__ticks = 1;
    3a68:	fe 01       	movw	r30, r28
    3a6a:	e2 5b       	subi	r30, 0xB2	; 178
    3a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	91 83       	std	Z+1, r25	; 0x01
    3a74:	80 83       	st	Z, r24
    3a76:	64 c0       	rjmp	.+200    	; 0x3b40 <LCD_CheckStatusSendChar4bit+0x23a>
	else if (__tmp > 65535)
    3a78:	fe 01       	movw	r30, r28
    3a7a:	e0 5b       	subi	r30, 0xB0	; 176
    3a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7e:	60 81       	ld	r22, Z
    3a80:	71 81       	ldd	r23, Z+1	; 0x01
    3a82:	82 81       	ldd	r24, Z+2	; 0x02
    3a84:	93 81       	ldd	r25, Z+3	; 0x03
    3a86:	20 e0       	ldi	r18, 0x00	; 0
    3a88:	3f ef       	ldi	r19, 0xFF	; 255
    3a8a:	4f e7       	ldi	r20, 0x7F	; 127
    3a8c:	57 e4       	ldi	r21, 0x47	; 71
    3a8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a92:	18 16       	cp	r1, r24
    3a94:	0c f0       	brlt	.+2      	; 0x3a98 <LCD_CheckStatusSendChar4bit+0x192>
    3a96:	43 c0       	rjmp	.+134    	; 0x3b1e <LCD_CheckStatusSendChar4bit+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a98:	fe 01       	movw	r30, r28
    3a9a:	ec 5a       	subi	r30, 0xAC	; 172
    3a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9e:	60 81       	ld	r22, Z
    3aa0:	71 81       	ldd	r23, Z+1	; 0x01
    3aa2:	82 81       	ldd	r24, Z+2	; 0x02
    3aa4:	93 81       	ldd	r25, Z+3	; 0x03
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	40 e2       	ldi	r20, 0x20	; 32
    3aac:	51 e4       	ldi	r21, 0x41	; 65
    3aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	8e 01       	movw	r16, r28
    3ab8:	02 5b       	subi	r16, 0xB2	; 178
    3aba:	1f 4f       	sbci	r17, 0xFF	; 255
    3abc:	bc 01       	movw	r22, r24
    3abe:	cd 01       	movw	r24, r26
    3ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	f8 01       	movw	r30, r16
    3aca:	91 83       	std	Z+1, r25	; 0x01
    3acc:	80 83       	st	Z, r24
    3ace:	1f c0       	rjmp	.+62     	; 0x3b0e <LCD_CheckStatusSendChar4bit+0x208>
    3ad0:	fe 01       	movw	r30, r28
    3ad2:	e4 5b       	subi	r30, 0xB4	; 180
    3ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad6:	88 ec       	ldi	r24, 0xC8	; 200
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	91 83       	std	Z+1, r25	; 0x01
    3adc:	80 83       	st	Z, r24
    3ade:	fe 01       	movw	r30, r28
    3ae0:	e4 5b       	subi	r30, 0xB4	; 180
    3ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae4:	80 81       	ld	r24, Z
    3ae6:	91 81       	ldd	r25, Z+1	; 0x01
    3ae8:	01 97       	sbiw	r24, 0x01	; 1
    3aea:	f1 f7       	brne	.-4      	; 0x3ae8 <LCD_CheckStatusSendChar4bit+0x1e2>
    3aec:	fe 01       	movw	r30, r28
    3aee:	e4 5b       	subi	r30, 0xB4	; 180
    3af0:	ff 4f       	sbci	r31, 0xFF	; 255
    3af2:	91 83       	std	Z+1, r25	; 0x01
    3af4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3af6:	de 01       	movw	r26, r28
    3af8:	a2 5b       	subi	r26, 0xB2	; 178
    3afa:	bf 4f       	sbci	r27, 0xFF	; 255
    3afc:	fe 01       	movw	r30, r28
    3afe:	e2 5b       	subi	r30, 0xB2	; 178
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	80 81       	ld	r24, Z
    3b04:	91 81       	ldd	r25, Z+1	; 0x01
    3b06:	01 97       	sbiw	r24, 0x01	; 1
    3b08:	11 96       	adiw	r26, 0x01	; 1
    3b0a:	9c 93       	st	X, r25
    3b0c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b0e:	fe 01       	movw	r30, r28
    3b10:	e2 5b       	subi	r30, 0xB2	; 178
    3b12:	ff 4f       	sbci	r31, 0xFF	; 255
    3b14:	80 81       	ld	r24, Z
    3b16:	91 81       	ldd	r25, Z+1	; 0x01
    3b18:	00 97       	sbiw	r24, 0x00	; 0
    3b1a:	d1 f6       	brne	.-76     	; 0x3ad0 <LCD_CheckStatusSendChar4bit+0x1ca>
    3b1c:	4b c0       	rjmp	.+150    	; 0x3bb4 <LCD_CheckStatusSendChar4bit+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b1e:	8e 01       	movw	r16, r28
    3b20:	02 5b       	subi	r16, 0xB2	; 178
    3b22:	1f 4f       	sbci	r17, 0xFF	; 255
    3b24:	fe 01       	movw	r30, r28
    3b26:	e0 5b       	subi	r30, 0xB0	; 176
    3b28:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2a:	60 81       	ld	r22, Z
    3b2c:	71 81       	ldd	r23, Z+1	; 0x01
    3b2e:	82 81       	ldd	r24, Z+2	; 0x02
    3b30:	93 81       	ldd	r25, Z+3	; 0x03
    3b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b36:	dc 01       	movw	r26, r24
    3b38:	cb 01       	movw	r24, r22
    3b3a:	f8 01       	movw	r30, r16
    3b3c:	91 83       	std	Z+1, r25	; 0x01
    3b3e:	80 83       	st	Z, r24
    3b40:	de 01       	movw	r26, r28
    3b42:	a6 5b       	subi	r26, 0xB6	; 182
    3b44:	bf 4f       	sbci	r27, 0xFF	; 255
    3b46:	fe 01       	movw	r30, r28
    3b48:	e2 5b       	subi	r30, 0xB2	; 178
    3b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4c:	80 81       	ld	r24, Z
    3b4e:	91 81       	ldd	r25, Z+1	; 0x01
    3b50:	11 96       	adiw	r26, 0x01	; 1
    3b52:	9c 93       	st	X, r25
    3b54:	8e 93       	st	-X, r24
    3b56:	fe 01       	movw	r30, r28
    3b58:	e6 5b       	subi	r30, 0xB6	; 182
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	80 81       	ld	r24, Z
    3b5e:	91 81       	ldd	r25, Z+1	; 0x01
    3b60:	01 97       	sbiw	r24, 0x01	; 1
    3b62:	f1 f7       	brne	.-4      	; 0x3b60 <LCD_CheckStatusSendChar4bit+0x25a>
    3b64:	fe 01       	movw	r30, r28
    3b66:	e6 5b       	subi	r30, 0xB6	; 182
    3b68:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6a:	91 83       	std	Z+1, r25	; 0x01
    3b6c:	80 83       	st	Z, r24
    3b6e:	22 c0       	rjmp	.+68     	; 0x3bb4 <LCD_CheckStatusSendChar4bit+0x2ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b70:	8e 01       	movw	r16, r28
    3b72:	08 5a       	subi	r16, 0xA8	; 168
    3b74:	1f 4f       	sbci	r17, 0xFF	; 255
    3b76:	fe 01       	movw	r30, r28
    3b78:	e7 5a       	subi	r30, 0xA7	; 167
    3b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7c:	60 81       	ld	r22, Z
    3b7e:	71 81       	ldd	r23, Z+1	; 0x01
    3b80:	82 81       	ldd	r24, Z+2	; 0x02
    3b82:	93 81       	ldd	r25, Z+3	; 0x03
    3b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b88:	dc 01       	movw	r26, r24
    3b8a:	cb 01       	movw	r24, r22
    3b8c:	f8 01       	movw	r30, r16
    3b8e:	80 83       	st	Z, r24
    3b90:	de 01       	movw	r26, r28
    3b92:	a7 5b       	subi	r26, 0xB7	; 183
    3b94:	bf 4f       	sbci	r27, 0xFF	; 255
    3b96:	fe 01       	movw	r30, r28
    3b98:	e8 5a       	subi	r30, 0xA8	; 168
    3b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9c:	80 81       	ld	r24, Z
    3b9e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3ba0:	fe 01       	movw	r30, r28
    3ba2:	e7 5b       	subi	r30, 0xB7	; 183
    3ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba6:	80 81       	ld	r24, Z
    3ba8:	8a 95       	dec	r24
    3baa:	f1 f7       	brne	.-4      	; 0x3ba8 <LCD_CheckStatusSendChar4bit+0x2a2>
    3bac:	fe 01       	movw	r30, r28
    3bae:	e7 5b       	subi	r30, 0xB7	; 183
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	80 83       	st	Z, r24
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	62 e0       	ldi	r22, 0x02	; 2
    3bb8:	40 e0       	ldi	r20, 0x00	; 0
    3bba:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	eb 5b       	subi	r30, 0xBB	; 187
    3bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc4:	80 e0       	ldi	r24, 0x00	; 0
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	a0 e8       	ldi	r26, 0x80	; 128
    3bca:	bf e3       	ldi	r27, 0x3F	; 63
    3bcc:	80 83       	st	Z, r24
    3bce:	91 83       	std	Z+1, r25	; 0x01
    3bd0:	a2 83       	std	Z+2, r26	; 0x02
    3bd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3bd4:	8e 01       	movw	r16, r28
    3bd6:	0f 5b       	subi	r16, 0xBF	; 191
    3bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bda:	fe 01       	movw	r30, r28
    3bdc:	eb 5b       	subi	r30, 0xBB	; 187
    3bde:	ff 4f       	sbci	r31, 0xFF	; 255
    3be0:	60 81       	ld	r22, Z
    3be2:	71 81       	ldd	r23, Z+1	; 0x01
    3be4:	82 81       	ldd	r24, Z+2	; 0x02
    3be6:	93 81       	ldd	r25, Z+3	; 0x03
    3be8:	2b ea       	ldi	r18, 0xAB	; 171
    3bea:	3a ea       	ldi	r19, 0xAA	; 170
    3bec:	4a e2       	ldi	r20, 0x2A	; 42
    3bee:	50 e4       	ldi	r21, 0x40	; 64
    3bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf4:	dc 01       	movw	r26, r24
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	f8 01       	movw	r30, r16
    3bfa:	80 83       	st	Z, r24
    3bfc:	91 83       	std	Z+1, r25	; 0x01
    3bfe:	a2 83       	std	Z+2, r26	; 0x02
    3c00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c02:	fe 01       	movw	r30, r28
    3c04:	ef 5b       	subi	r30, 0xBF	; 191
    3c06:	ff 4f       	sbci	r31, 0xFF	; 255
    3c08:	60 81       	ld	r22, Z
    3c0a:	71 81       	ldd	r23, Z+1	; 0x01
    3c0c:	82 81       	ldd	r24, Z+2	; 0x02
    3c0e:	93 81       	ldd	r25, Z+3	; 0x03
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	40 e8       	ldi	r20, 0x80	; 128
    3c16:	5f e3       	ldi	r21, 0x3F	; 63
    3c18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c1c:	88 23       	and	r24, r24
    3c1e:	34 f4       	brge	.+12     	; 0x3c2c <LCD_CheckStatusSendChar4bit+0x326>
		__ticks = 1;
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	fe 01       	movw	r30, r28
    3c24:	e0 5c       	subi	r30, 0xC0	; 192
    3c26:	ff 4f       	sbci	r31, 0xFF	; 255
    3c28:	80 83       	st	Z, r24
    3c2a:	9d c0       	rjmp	.+314    	; 0x3d66 <LCD_CheckStatusSendChar4bit+0x460>
	else if (__tmp > 255)
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	ef 5b       	subi	r30, 0xBF	; 191
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	60 81       	ld	r22, Z
    3c34:	71 81       	ldd	r23, Z+1	; 0x01
    3c36:	82 81       	ldd	r24, Z+2	; 0x02
    3c38:	93 81       	ldd	r25, Z+3	; 0x03
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	4f e7       	ldi	r20, 0x7F	; 127
    3c40:	53 e4       	ldi	r21, 0x43	; 67
    3c42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c46:	18 16       	cp	r1, r24
    3c48:	0c f0       	brlt	.+2      	; 0x3c4c <LCD_CheckStatusSendChar4bit+0x346>
    3c4a:	7e c0       	rjmp	.+252    	; 0x3d48 <LCD_CheckStatusSendChar4bit+0x442>
	{
		_delay_ms(__us / 1000.0);
    3c4c:	fe 01       	movw	r30, r28
    3c4e:	eb 5b       	subi	r30, 0xBB	; 187
    3c50:	ff 4f       	sbci	r31, 0xFF	; 255
    3c52:	60 81       	ld	r22, Z
    3c54:	71 81       	ldd	r23, Z+1	; 0x01
    3c56:	82 81       	ldd	r24, Z+2	; 0x02
    3c58:	93 81       	ldd	r25, Z+3	; 0x03
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	4a e7       	ldi	r20, 0x7A	; 122
    3c60:	54 e4       	ldi	r21, 0x44	; 68
    3c62:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3c66:	dc 01       	movw	r26, r24
    3c68:	cb 01       	movw	r24, r22
    3c6a:	8c af       	std	Y+60, r24	; 0x3c
    3c6c:	9d af       	std	Y+61, r25	; 0x3d
    3c6e:	ae af       	std	Y+62, r26	; 0x3e
    3c70:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c72:	6c ad       	ldd	r22, Y+60	; 0x3c
    3c74:	7d ad       	ldd	r23, Y+61	; 0x3d
    3c76:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c78:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c7a:	20 e0       	ldi	r18, 0x00	; 0
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	4a ef       	ldi	r20, 0xFA	; 250
    3c80:	54 e4       	ldi	r21, 0x44	; 68
    3c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c86:	dc 01       	movw	r26, r24
    3c88:	cb 01       	movw	r24, r22
    3c8a:	88 af       	std	Y+56, r24	; 0x38
    3c8c:	99 af       	std	Y+57, r25	; 0x39
    3c8e:	aa af       	std	Y+58, r26	; 0x3a
    3c90:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3c92:	68 ad       	ldd	r22, Y+56	; 0x38
    3c94:	79 ad       	ldd	r23, Y+57	; 0x39
    3c96:	8a ad       	ldd	r24, Y+58	; 0x3a
    3c98:	9b ad       	ldd	r25, Y+59	; 0x3b
    3c9a:	20 e0       	ldi	r18, 0x00	; 0
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    3c9e:	40 e8       	ldi	r20, 0x80	; 128
    3ca0:	5f e3       	ldi	r21, 0x3F	; 63
    3ca2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ca6:	88 23       	and	r24, r24
    3ca8:	2c f4       	brge	.+10     	; 0x3cb4 <LCD_CheckStatusSendChar4bit+0x3ae>
		__ticks = 1;
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	9f ab       	std	Y+55, r25	; 0x37
    3cb0:	8e ab       	std	Y+54, r24	; 0x36
    3cb2:	3f c0       	rjmp	.+126    	; 0x3d32 <LCD_CheckStatusSendChar4bit+0x42c>
	else if (__tmp > 65535)
    3cb4:	68 ad       	ldd	r22, Y+56	; 0x38
    3cb6:	79 ad       	ldd	r23, Y+57	; 0x39
    3cb8:	8a ad       	ldd	r24, Y+58	; 0x3a
    3cba:	9b ad       	ldd	r25, Y+59	; 0x3b
    3cbc:	20 e0       	ldi	r18, 0x00	; 0
    3cbe:	3f ef       	ldi	r19, 0xFF	; 255
    3cc0:	4f e7       	ldi	r20, 0x7F	; 127
    3cc2:	57 e4       	ldi	r21, 0x47	; 71
    3cc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cc8:	18 16       	cp	r1, r24
    3cca:	4c f5       	brge	.+82     	; 0x3d1e <LCD_CheckStatusSendChar4bit+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ccc:	6c ad       	ldd	r22, Y+60	; 0x3c
    3cce:	7d ad       	ldd	r23, Y+61	; 0x3d
    3cd0:	8e ad       	ldd	r24, Y+62	; 0x3e
    3cd2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	40 e2       	ldi	r20, 0x20	; 32
    3cda:	51 e4       	ldi	r21, 0x41	; 65
    3cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce0:	dc 01       	movw	r26, r24
    3ce2:	cb 01       	movw	r24, r22
    3ce4:	bc 01       	movw	r22, r24
    3ce6:	cd 01       	movw	r24, r26
    3ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cec:	dc 01       	movw	r26, r24
    3cee:	cb 01       	movw	r24, r22
    3cf0:	9f ab       	std	Y+55, r25	; 0x37
    3cf2:	8e ab       	std	Y+54, r24	; 0x36
    3cf4:	0f c0       	rjmp	.+30     	; 0x3d14 <LCD_CheckStatusSendChar4bit+0x40e>
    3cf6:	88 ec       	ldi	r24, 0xC8	; 200
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	9d ab       	std	Y+53, r25	; 0x35
    3cfc:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3cfe:	8c a9       	ldd	r24, Y+52	; 0x34
    3d00:	9d a9       	ldd	r25, Y+53	; 0x35
    3d02:	01 97       	sbiw	r24, 0x01	; 1
    3d04:	f1 f7       	brne	.-4      	; 0x3d02 <LCD_CheckStatusSendChar4bit+0x3fc>
    3d06:	9d ab       	std	Y+53, r25	; 0x35
    3d08:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d0a:	8e a9       	ldd	r24, Y+54	; 0x36
    3d0c:	9f a9       	ldd	r25, Y+55	; 0x37
    3d0e:	01 97       	sbiw	r24, 0x01	; 1
    3d10:	9f ab       	std	Y+55, r25	; 0x37
    3d12:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d14:	8e a9       	ldd	r24, Y+54	; 0x36
    3d16:	9f a9       	ldd	r25, Y+55	; 0x37
    3d18:	00 97       	sbiw	r24, 0x00	; 0
    3d1a:	69 f7       	brne	.-38     	; 0x3cf6 <LCD_CheckStatusSendChar4bit+0x3f0>
    3d1c:	2d c0       	rjmp	.+90     	; 0x3d78 <LCD_CheckStatusSendChar4bit+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d1e:	68 ad       	ldd	r22, Y+56	; 0x38
    3d20:	79 ad       	ldd	r23, Y+57	; 0x39
    3d22:	8a ad       	ldd	r24, Y+58	; 0x3a
    3d24:	9b ad       	ldd	r25, Y+59	; 0x3b
    3d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d2a:	dc 01       	movw	r26, r24
    3d2c:	cb 01       	movw	r24, r22
    3d2e:	9f ab       	std	Y+55, r25	; 0x37
    3d30:	8e ab       	std	Y+54, r24	; 0x36
    3d32:	8e a9       	ldd	r24, Y+54	; 0x36
    3d34:	9f a9       	ldd	r25, Y+55	; 0x37
    3d36:	9b ab       	std	Y+51, r25	; 0x33
    3d38:	8a ab       	std	Y+50, r24	; 0x32
    3d3a:	8a a9       	ldd	r24, Y+50	; 0x32
    3d3c:	9b a9       	ldd	r25, Y+51	; 0x33
    3d3e:	01 97       	sbiw	r24, 0x01	; 1
    3d40:	f1 f7       	brne	.-4      	; 0x3d3e <LCD_CheckStatusSendChar4bit+0x438>
    3d42:	9b ab       	std	Y+51, r25	; 0x33
    3d44:	8a ab       	std	Y+50, r24	; 0x32
    3d46:	18 c0       	rjmp	.+48     	; 0x3d78 <LCD_CheckStatusSendChar4bit+0x472>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3d48:	fe 01       	movw	r30, r28
    3d4a:	ef 5b       	subi	r30, 0xBF	; 191
    3d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4e:	60 81       	ld	r22, Z
    3d50:	71 81       	ldd	r23, Z+1	; 0x01
    3d52:	82 81       	ldd	r24, Z+2	; 0x02
    3d54:	93 81       	ldd	r25, Z+3	; 0x03
    3d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	fe 01       	movw	r30, r28
    3d60:	e0 5c       	subi	r30, 0xC0	; 192
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	80 83       	st	Z, r24
    3d66:	fe 01       	movw	r30, r28
    3d68:	e0 5c       	subi	r30, 0xC0	; 192
    3d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6c:	80 81       	ld	r24, Z
    3d6e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3d70:	89 a9       	ldd	r24, Y+49	; 0x31
    3d72:	8a 95       	dec	r24
    3d74:	f1 f7       	brne	.-4      	; 0x3d72 <LCD_CheckStatusSendChar4bit+0x46c>
    3d76:	89 ab       	std	Y+49, r24	; 0x31
                _delay_us(1);

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_HIGH);
    3d78:	81 e0       	ldi	r24, 0x01	; 1
    3d7a:	60 e0       	ldi	r22, 0x00	; 0
    3d7c:	41 e0       	ldi	r20, 0x01	; 1
    3d7e:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	61 e0       	ldi	r22, 0x01	; 1
    3d86:	40 e0       	ldi	r20, 0x00	; 0
    3d88:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, (Copy__Uint8Char << 4) & LCD__UINT8_DATA_PINS);
    3d8c:	fe 01       	movw	r30, r28
    3d8e:	ee 59       	subi	r30, 0x9E	; 158
    3d90:	ff 4f       	sbci	r31, 0xFF	; 255
    3d92:	80 81       	ld	r24, Z
    3d94:	88 2f       	mov	r24, r24
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	82 95       	swap	r24
    3d9a:	92 95       	swap	r25
    3d9c:	90 7f       	andi	r25, 0xF0	; 240
    3d9e:	98 27       	eor	r25, r24
    3da0:	80 7f       	andi	r24, 0xF0	; 240
    3da2:	98 27       	eor	r25, r24
    3da4:	98 2f       	mov	r25, r24
    3da6:	82 e0       	ldi	r24, 0x02	; 2
    3da8:	69 2f       	mov	r22, r25
    3daa:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	62 e0       	ldi	r22, 0x02	; 2
    3db2:	41 e0       	ldi	r20, 0x01	; 1
    3db4:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>
    3db8:	80 e0       	ldi	r24, 0x00	; 0
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	a0 e8       	ldi	r26, 0x80	; 128
    3dbe:	bf e3       	ldi	r27, 0x3F	; 63
    3dc0:	8d a7       	std	Y+45, r24	; 0x2d
    3dc2:	9e a7       	std	Y+46, r25	; 0x2e
    3dc4:	af a7       	std	Y+47, r26	; 0x2f
    3dc6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3dc8:	6d a5       	ldd	r22, Y+45	; 0x2d
    3dca:	7e a5       	ldd	r23, Y+46	; 0x2e
    3dcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dce:	98 a9       	ldd	r25, Y+48	; 0x30
    3dd0:	2b ea       	ldi	r18, 0xAB	; 171
    3dd2:	3a ea       	ldi	r19, 0xAA	; 170
    3dd4:	4a e2       	ldi	r20, 0x2A	; 42
    3dd6:	50 e4       	ldi	r21, 0x40	; 64
    3dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ddc:	dc 01       	movw	r26, r24
    3dde:	cb 01       	movw	r24, r22
    3de0:	89 a7       	std	Y+41, r24	; 0x29
    3de2:	9a a7       	std	Y+42, r25	; 0x2a
    3de4:	ab a7       	std	Y+43, r26	; 0x2b
    3de6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3de8:	69 a5       	ldd	r22, Y+41	; 0x29
    3dea:	7a a5       	ldd	r23, Y+42	; 0x2a
    3dec:	8b a5       	ldd	r24, Y+43	; 0x2b
    3dee:	9c a5       	ldd	r25, Y+44	; 0x2c
    3df0:	20 e0       	ldi	r18, 0x00	; 0
    3df2:	30 e0       	ldi	r19, 0x00	; 0
    3df4:	40 e8       	ldi	r20, 0x80	; 128
    3df6:	5f e3       	ldi	r21, 0x3F	; 63
    3df8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dfc:	88 23       	and	r24, r24
    3dfe:	1c f4       	brge	.+6      	; 0x3e06 <LCD_CheckStatusSendChar4bit+0x500>
		__ticks = 1;
    3e00:	81 e0       	ldi	r24, 0x01	; 1
    3e02:	88 a7       	std	Y+40, r24	; 0x28
    3e04:	91 c0       	rjmp	.+290    	; 0x3f28 <LCD_CheckStatusSendChar4bit+0x622>
	else if (__tmp > 255)
    3e06:	69 a5       	ldd	r22, Y+41	; 0x29
    3e08:	7a a5       	ldd	r23, Y+42	; 0x2a
    3e0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e0e:	20 e0       	ldi	r18, 0x00	; 0
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	4f e7       	ldi	r20, 0x7F	; 127
    3e14:	53 e4       	ldi	r21, 0x43	; 67
    3e16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e1a:	18 16       	cp	r1, r24
    3e1c:	0c f0       	brlt	.+2      	; 0x3e20 <LCD_CheckStatusSendChar4bit+0x51a>
    3e1e:	7b c0       	rjmp	.+246    	; 0x3f16 <LCD_CheckStatusSendChar4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    3e20:	6d a5       	ldd	r22, Y+45	; 0x2d
    3e22:	7e a5       	ldd	r23, Y+46	; 0x2e
    3e24:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e26:	98 a9       	ldd	r25, Y+48	; 0x30
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	4a e7       	ldi	r20, 0x7A	; 122
    3e2e:	54 e4       	ldi	r21, 0x44	; 68
    3e30:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e34:	dc 01       	movw	r26, r24
    3e36:	cb 01       	movw	r24, r22
    3e38:	8c a3       	std	Y+36, r24	; 0x24
    3e3a:	9d a3       	std	Y+37, r25	; 0x25
    3e3c:	ae a3       	std	Y+38, r26	; 0x26
    3e3e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e40:	6c a1       	ldd	r22, Y+36	; 0x24
    3e42:	7d a1       	ldd	r23, Y+37	; 0x25
    3e44:	8e a1       	ldd	r24, Y+38	; 0x26
    3e46:	9f a1       	ldd	r25, Y+39	; 0x27
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	4a ef       	ldi	r20, 0xFA	; 250
    3e4e:	54 e4       	ldi	r21, 0x44	; 68
    3e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e54:	dc 01       	movw	r26, r24
    3e56:	cb 01       	movw	r24, r22
    3e58:	88 a3       	std	Y+32, r24	; 0x20
    3e5a:	99 a3       	std	Y+33, r25	; 0x21
    3e5c:	aa a3       	std	Y+34, r26	; 0x22
    3e5e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3e60:	68 a1       	ldd	r22, Y+32	; 0x20
    3e62:	79 a1       	ldd	r23, Y+33	; 0x21
    3e64:	8a a1       	ldd	r24, Y+34	; 0x22
    3e66:	9b a1       	ldd	r25, Y+35	; 0x23
    3e68:	20 e0       	ldi	r18, 0x00	; 0
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	40 e8       	ldi	r20, 0x80	; 128
    3e6e:	5f e3       	ldi	r21, 0x3F	; 63
    3e70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e74:	88 23       	and	r24, r24
    3e76:	2c f4       	brge	.+10     	; 0x3e82 <LCD_CheckStatusSendChar4bit+0x57c>
		__ticks = 1;
    3e78:	81 e0       	ldi	r24, 0x01	; 1
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	9f 8f       	std	Y+31, r25	; 0x1f
    3e7e:	8e 8f       	std	Y+30, r24	; 0x1e
    3e80:	3f c0       	rjmp	.+126    	; 0x3f00 <LCD_CheckStatusSendChar4bit+0x5fa>
	else if (__tmp > 65535)
    3e82:	68 a1       	ldd	r22, Y+32	; 0x20
    3e84:	79 a1       	ldd	r23, Y+33	; 0x21
    3e86:	8a a1       	ldd	r24, Y+34	; 0x22
    3e88:	9b a1       	ldd	r25, Y+35	; 0x23
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	3f ef       	ldi	r19, 0xFF	; 255
    3e8e:	4f e7       	ldi	r20, 0x7F	; 127
    3e90:	57 e4       	ldi	r21, 0x47	; 71
    3e92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e96:	18 16       	cp	r1, r24
    3e98:	4c f5       	brge	.+82     	; 0x3eec <LCD_CheckStatusSendChar4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e9a:	6c a1       	ldd	r22, Y+36	; 0x24
    3e9c:	7d a1       	ldd	r23, Y+37	; 0x25
    3e9e:	8e a1       	ldd	r24, Y+38	; 0x26
    3ea0:	9f a1       	ldd	r25, Y+39	; 0x27
    3ea2:	20 e0       	ldi	r18, 0x00	; 0
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	40 e2       	ldi	r20, 0x20	; 32
    3ea8:	51 e4       	ldi	r21, 0x41	; 65
    3eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eae:	dc 01       	movw	r26, r24
    3eb0:	cb 01       	movw	r24, r22
    3eb2:	bc 01       	movw	r22, r24
    3eb4:	cd 01       	movw	r24, r26
    3eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eba:	dc 01       	movw	r26, r24
    3ebc:	cb 01       	movw	r24, r22
    3ebe:	9f 8f       	std	Y+31, r25	; 0x1f
    3ec0:	8e 8f       	std	Y+30, r24	; 0x1e
    3ec2:	0f c0       	rjmp	.+30     	; 0x3ee2 <LCD_CheckStatusSendChar4bit+0x5dc>
    3ec4:	88 ec       	ldi	r24, 0xC8	; 200
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	9d 8f       	std	Y+29, r25	; 0x1d
    3eca:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3ecc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3ece:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3ed0:	01 97       	sbiw	r24, 0x01	; 1
    3ed2:	f1 f7       	brne	.-4      	; 0x3ed0 <LCD_CheckStatusSendChar4bit+0x5ca>
    3ed4:	9d 8f       	std	Y+29, r25	; 0x1d
    3ed6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ed8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3eda:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3edc:	01 97       	sbiw	r24, 0x01	; 1
    3ede:	9f 8f       	std	Y+31, r25	; 0x1f
    3ee0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ee2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ee4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3ee6:	00 97       	sbiw	r24, 0x00	; 0
    3ee8:	69 f7       	brne	.-38     	; 0x3ec4 <LCD_CheckStatusSendChar4bit+0x5be>
    3eea:	24 c0       	rjmp	.+72     	; 0x3f34 <LCD_CheckStatusSendChar4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eec:	68 a1       	ldd	r22, Y+32	; 0x20
    3eee:	79 a1       	ldd	r23, Y+33	; 0x21
    3ef0:	8a a1       	ldd	r24, Y+34	; 0x22
    3ef2:	9b a1       	ldd	r25, Y+35	; 0x23
    3ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ef8:	dc 01       	movw	r26, r24
    3efa:	cb 01       	movw	r24, r22
    3efc:	9f 8f       	std	Y+31, r25	; 0x1f
    3efe:	8e 8f       	std	Y+30, r24	; 0x1e
    3f00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f02:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3f04:	9b 8f       	std	Y+27, r25	; 0x1b
    3f06:	8a 8f       	std	Y+26, r24	; 0x1a
    3f08:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3f0a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3f0c:	01 97       	sbiw	r24, 0x01	; 1
    3f0e:	f1 f7       	brne	.-4      	; 0x3f0c <LCD_CheckStatusSendChar4bit+0x606>
    3f10:	9b 8f       	std	Y+27, r25	; 0x1b
    3f12:	8a 8f       	std	Y+26, r24	; 0x1a
    3f14:	0f c0       	rjmp	.+30     	; 0x3f34 <LCD_CheckStatusSendChar4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3f16:	69 a5       	ldd	r22, Y+41	; 0x29
    3f18:	7a a5       	ldd	r23, Y+42	; 0x2a
    3f1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f22:	dc 01       	movw	r26, r24
    3f24:	cb 01       	movw	r24, r22
    3f26:	88 a7       	std	Y+40, r24	; 0x28
    3f28:	88 a5       	ldd	r24, Y+40	; 0x28
    3f2a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3f2c:	89 8d       	ldd	r24, Y+25	; 0x19
    3f2e:	8a 95       	dec	r24
    3f30:	f1 f7       	brne	.-4      	; 0x3f2e <LCD_CheckStatusSendChar4bit+0x628>
    3f32:	89 8f       	std	Y+25, r24	; 0x19
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	62 e0       	ldi	r22, 0x02	; 2
    3f38:	40 e0       	ldi	r20, 0x00	; 0
    3f3a:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>
    3f3e:	80 e0       	ldi	r24, 0x00	; 0
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	a0 e8       	ldi	r26, 0x80	; 128
    3f44:	bf e3       	ldi	r27, 0x3F	; 63
    3f46:	8d 8b       	std	Y+21, r24	; 0x15
    3f48:	9e 8b       	std	Y+22, r25	; 0x16
    3f4a:	af 8b       	std	Y+23, r26	; 0x17
    3f4c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3f4e:	6d 89       	ldd	r22, Y+21	; 0x15
    3f50:	7e 89       	ldd	r23, Y+22	; 0x16
    3f52:	8f 89       	ldd	r24, Y+23	; 0x17
    3f54:	98 8d       	ldd	r25, Y+24	; 0x18
    3f56:	2b ea       	ldi	r18, 0xAB	; 171
    3f58:	3a ea       	ldi	r19, 0xAA	; 170
    3f5a:	4a e2       	ldi	r20, 0x2A	; 42
    3f5c:	50 e4       	ldi	r21, 0x40	; 64
    3f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f62:	dc 01       	movw	r26, r24
    3f64:	cb 01       	movw	r24, r22
    3f66:	89 8b       	std	Y+17, r24	; 0x11
    3f68:	9a 8b       	std	Y+18, r25	; 0x12
    3f6a:	ab 8b       	std	Y+19, r26	; 0x13
    3f6c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3f6e:	69 89       	ldd	r22, Y+17	; 0x11
    3f70:	7a 89       	ldd	r23, Y+18	; 0x12
    3f72:	8b 89       	ldd	r24, Y+19	; 0x13
    3f74:	9c 89       	ldd	r25, Y+20	; 0x14
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	40 e8       	ldi	r20, 0x80	; 128
    3f7c:	5f e3       	ldi	r21, 0x3F	; 63
    3f7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f82:	88 23       	and	r24, r24
    3f84:	1c f4       	brge	.+6      	; 0x3f8c <LCD_CheckStatusSendChar4bit+0x686>
		__ticks = 1;
    3f86:	81 e0       	ldi	r24, 0x01	; 1
    3f88:	88 8b       	std	Y+16, r24	; 0x10
    3f8a:	91 c0       	rjmp	.+290    	; 0x40ae <LCD_CheckStatusSendChar4bit+0x7a8>
	else if (__tmp > 255)
    3f8c:	69 89       	ldd	r22, Y+17	; 0x11
    3f8e:	7a 89       	ldd	r23, Y+18	; 0x12
    3f90:	8b 89       	ldd	r24, Y+19	; 0x13
    3f92:	9c 89       	ldd	r25, Y+20	; 0x14
    3f94:	20 e0       	ldi	r18, 0x00	; 0
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	4f e7       	ldi	r20, 0x7F	; 127
    3f9a:	53 e4       	ldi	r21, 0x43	; 67
    3f9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fa0:	18 16       	cp	r1, r24
    3fa2:	0c f0       	brlt	.+2      	; 0x3fa6 <LCD_CheckStatusSendChar4bit+0x6a0>
    3fa4:	7b c0       	rjmp	.+246    	; 0x409c <LCD_CheckStatusSendChar4bit+0x796>
	{
		_delay_ms(__us / 1000.0);
    3fa6:	6d 89       	ldd	r22, Y+21	; 0x15
    3fa8:	7e 89       	ldd	r23, Y+22	; 0x16
    3faa:	8f 89       	ldd	r24, Y+23	; 0x17
    3fac:	98 8d       	ldd	r25, Y+24	; 0x18
    3fae:	20 e0       	ldi	r18, 0x00	; 0
    3fb0:	30 e0       	ldi	r19, 0x00	; 0
    3fb2:	4a e7       	ldi	r20, 0x7A	; 122
    3fb4:	54 e4       	ldi	r21, 0x44	; 68
    3fb6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3fba:	dc 01       	movw	r26, r24
    3fbc:	cb 01       	movw	r24, r22
    3fbe:	8c 87       	std	Y+12, r24	; 0x0c
    3fc0:	9d 87       	std	Y+13, r25	; 0x0d
    3fc2:	ae 87       	std	Y+14, r26	; 0x0e
    3fc4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fc6:	6c 85       	ldd	r22, Y+12	; 0x0c
    3fc8:	7d 85       	ldd	r23, Y+13	; 0x0d
    3fca:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fcc:	9f 85       	ldd	r25, Y+15	; 0x0f
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	4a ef       	ldi	r20, 0xFA	; 250
    3fd4:	54 e4       	ldi	r21, 0x44	; 68
    3fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fda:	dc 01       	movw	r26, r24
    3fdc:	cb 01       	movw	r24, r22
    3fde:	88 87       	std	Y+8, r24	; 0x08
    3fe0:	99 87       	std	Y+9, r25	; 0x09
    3fe2:	aa 87       	std	Y+10, r26	; 0x0a
    3fe4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3fe6:	68 85       	ldd	r22, Y+8	; 0x08
    3fe8:	79 85       	ldd	r23, Y+9	; 0x09
    3fea:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fec:	9b 85       	ldd	r25, Y+11	; 0x0b
    3fee:	20 e0       	ldi	r18, 0x00	; 0
    3ff0:	30 e0       	ldi	r19, 0x00	; 0
    3ff2:	40 e8       	ldi	r20, 0x80	; 128
    3ff4:	5f e3       	ldi	r21, 0x3F	; 63
    3ff6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ffa:	88 23       	and	r24, r24
    3ffc:	2c f4       	brge	.+10     	; 0x4008 <LCD_CheckStatusSendChar4bit+0x702>
		__ticks = 1;
    3ffe:	81 e0       	ldi	r24, 0x01	; 1
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	9f 83       	std	Y+7, r25	; 0x07
    4004:	8e 83       	std	Y+6, r24	; 0x06
    4006:	3f c0       	rjmp	.+126    	; 0x4086 <LCD_CheckStatusSendChar4bit+0x780>
	else if (__tmp > 65535)
    4008:	68 85       	ldd	r22, Y+8	; 0x08
    400a:	79 85       	ldd	r23, Y+9	; 0x09
    400c:	8a 85       	ldd	r24, Y+10	; 0x0a
    400e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4010:	20 e0       	ldi	r18, 0x00	; 0
    4012:	3f ef       	ldi	r19, 0xFF	; 255
    4014:	4f e7       	ldi	r20, 0x7F	; 127
    4016:	57 e4       	ldi	r21, 0x47	; 71
    4018:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    401c:	18 16       	cp	r1, r24
    401e:	4c f5       	brge	.+82     	; 0x4072 <LCD_CheckStatusSendChar4bit+0x76c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4020:	6c 85       	ldd	r22, Y+12	; 0x0c
    4022:	7d 85       	ldd	r23, Y+13	; 0x0d
    4024:	8e 85       	ldd	r24, Y+14	; 0x0e
    4026:	9f 85       	ldd	r25, Y+15	; 0x0f
    4028:	20 e0       	ldi	r18, 0x00	; 0
    402a:	30 e0       	ldi	r19, 0x00	; 0
    402c:	40 e2       	ldi	r20, 0x20	; 32
    402e:	51 e4       	ldi	r21, 0x41	; 65
    4030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4034:	dc 01       	movw	r26, r24
    4036:	cb 01       	movw	r24, r22
    4038:	bc 01       	movw	r22, r24
    403a:	cd 01       	movw	r24, r26
    403c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4040:	dc 01       	movw	r26, r24
    4042:	cb 01       	movw	r24, r22
    4044:	9f 83       	std	Y+7, r25	; 0x07
    4046:	8e 83       	std	Y+6, r24	; 0x06
    4048:	0f c0       	rjmp	.+30     	; 0x4068 <LCD_CheckStatusSendChar4bit+0x762>
    404a:	88 ec       	ldi	r24, 0xC8	; 200
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	9d 83       	std	Y+5, r25	; 0x05
    4050:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4052:	8c 81       	ldd	r24, Y+4	; 0x04
    4054:	9d 81       	ldd	r25, Y+5	; 0x05
    4056:	01 97       	sbiw	r24, 0x01	; 1
    4058:	f1 f7       	brne	.-4      	; 0x4056 <LCD_CheckStatusSendChar4bit+0x750>
    405a:	9d 83       	std	Y+5, r25	; 0x05
    405c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    405e:	8e 81       	ldd	r24, Y+6	; 0x06
    4060:	9f 81       	ldd	r25, Y+7	; 0x07
    4062:	01 97       	sbiw	r24, 0x01	; 1
    4064:	9f 83       	std	Y+7, r25	; 0x07
    4066:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4068:	8e 81       	ldd	r24, Y+6	; 0x06
    406a:	9f 81       	ldd	r25, Y+7	; 0x07
    406c:	00 97       	sbiw	r24, 0x00	; 0
    406e:	69 f7       	brne	.-38     	; 0x404a <LCD_CheckStatusSendChar4bit+0x744>
    4070:	24 c0       	rjmp	.+72     	; 0x40ba <LCD_CheckStatusSendChar4bit+0x7b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4072:	68 85       	ldd	r22, Y+8	; 0x08
    4074:	79 85       	ldd	r23, Y+9	; 0x09
    4076:	8a 85       	ldd	r24, Y+10	; 0x0a
    4078:	9b 85       	ldd	r25, Y+11	; 0x0b
    407a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    407e:	dc 01       	movw	r26, r24
    4080:	cb 01       	movw	r24, r22
    4082:	9f 83       	std	Y+7, r25	; 0x07
    4084:	8e 83       	std	Y+6, r24	; 0x06
    4086:	8e 81       	ldd	r24, Y+6	; 0x06
    4088:	9f 81       	ldd	r25, Y+7	; 0x07
    408a:	9b 83       	std	Y+3, r25	; 0x03
    408c:	8a 83       	std	Y+2, r24	; 0x02
    408e:	8a 81       	ldd	r24, Y+2	; 0x02
    4090:	9b 81       	ldd	r25, Y+3	; 0x03
    4092:	01 97       	sbiw	r24, 0x01	; 1
    4094:	f1 f7       	brne	.-4      	; 0x4092 <LCD_CheckStatusSendChar4bit+0x78c>
    4096:	9b 83       	std	Y+3, r25	; 0x03
    4098:	8a 83       	std	Y+2, r24	; 0x02
    409a:	0f c0       	rjmp	.+30     	; 0x40ba <LCD_CheckStatusSendChar4bit+0x7b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    409c:	69 89       	ldd	r22, Y+17	; 0x11
    409e:	7a 89       	ldd	r23, Y+18	; 0x12
    40a0:	8b 89       	ldd	r24, Y+19	; 0x13
    40a2:	9c 89       	ldd	r25, Y+20	; 0x14
    40a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a8:	dc 01       	movw	r26, r24
    40aa:	cb 01       	movw	r24, r22
    40ac:	88 8b       	std	Y+16, r24	; 0x10
    40ae:	88 89       	ldd	r24, Y+16	; 0x10
    40b0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    40b2:	89 81       	ldd	r24, Y+1	; 0x01
    40b4:	8a 95       	dec	r24
    40b6:	f1 f7       	brne	.-4      	; 0x40b4 <LCD_CheckStatusSendChar4bit+0x7ae>
    40b8:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    40ba:	fe 01       	movw	r30, r28
    40bc:	ef 59       	subi	r30, 0x9F	; 159
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	80 81       	ld	r24, Z
}
    40c2:	ce 59       	subi	r28, 0x9E	; 158
    40c4:	df 4f       	sbci	r29, 0xFF	; 255
    40c6:	0f b6       	in	r0, 0x3f	; 63
    40c8:	f8 94       	cli
    40ca:	de bf       	out	0x3e, r29	; 62
    40cc:	0f be       	out	0x3f, r0	; 63
    40ce:	cd bf       	out	0x3d, r28	; 61
    40d0:	cf 91       	pop	r28
    40d2:	df 91       	pop	r29
    40d4:	1f 91       	pop	r17
    40d6:	0f 91       	pop	r16
    40d8:	08 95       	ret

000040da <LCD_CheckStatusSendCmnd4bit>:
CheckStatus LCD_CheckStatusSendCmnd4bit(_uint8 Copy__Uint8Cmnd)
{
    40da:	0f 93       	push	r16
    40dc:	1f 93       	push	r17
    40de:	df 93       	push	r29
    40e0:	cf 93       	push	r28
    40e2:	cd b7       	in	r28, 0x3d	; 61
    40e4:	de b7       	in	r29, 0x3e	; 62
    40e6:	c2 56       	subi	r28, 0x62	; 98
    40e8:	d0 40       	sbci	r29, 0x00	; 0
    40ea:	0f b6       	in	r0, 0x3f	; 63
    40ec:	f8 94       	cli
    40ee:	de bf       	out	0x3e, r29	; 62
    40f0:	0f be       	out	0x3f, r0	; 63
    40f2:	cd bf       	out	0x3d, r28	; 61
    40f4:	fe 01       	movw	r30, r28
    40f6:	ee 59       	subi	r30, 0x9E	; 158
    40f8:	ff 4f       	sbci	r31, 0xFF	; 255
    40fa:	80 83       	st	Z, r24
        CheckStatus Local_CheckStausReturnValue = CHECK_SUCCESS;
    40fc:	fe 01       	movw	r30, r28
    40fe:	ef 59       	subi	r30, 0x9F	; 159
    4100:	ff 4f       	sbci	r31, 0xFF	; 255
    4102:	10 82       	st	Z, r1
         3-Send CMND byte  to the Data Pins of LCD
         4-PULSE of Enable E = 1 ,E = 0
        */
        if (Copy__Uint8Cmnd <= 255)
        {
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_LOW);
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	60 e0       	ldi	r22, 0x00	; 0
    4108:	40 e0       	ldi	r20, 0x00	; 0
    410a:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    410e:	81 e0       	ldi	r24, 0x01	; 1
    4110:	61 e0       	ldi	r22, 0x01	; 1
    4112:	40 e0       	ldi	r20, 0x00	; 0
    4114:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT,( Copy__Uint8Cmnd & LCD__UINT8_DATA_PINS));
    4118:	fe 01       	movw	r30, r28
    411a:	ee 59       	subi	r30, 0x9E	; 158
    411c:	ff 4f       	sbci	r31, 0xFF	; 255
    411e:	80 81       	ld	r24, Z
    4120:	98 2f       	mov	r25, r24
    4122:	90 7f       	andi	r25, 0xF0	; 240
    4124:	82 e0       	ldi	r24, 0x02	; 2
    4126:	69 2f       	mov	r22, r25
    4128:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    412c:	81 e0       	ldi	r24, 0x01	; 1
    412e:	62 e0       	ldi	r22, 0x02	; 2
    4130:	41 e0       	ldi	r20, 0x01	; 1
    4132:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>
    4136:	fe 01       	movw	r30, r28
    4138:	e3 5a       	subi	r30, 0xA3	; 163
    413a:	ff 4f       	sbci	r31, 0xFF	; 255
    413c:	80 e0       	ldi	r24, 0x00	; 0
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	a0 e8       	ldi	r26, 0x80	; 128
    4142:	bf e3       	ldi	r27, 0x3F	; 63
    4144:	80 83       	st	Z, r24
    4146:	91 83       	std	Z+1, r25	; 0x01
    4148:	a2 83       	std	Z+2, r26	; 0x02
    414a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    414c:	8e 01       	movw	r16, r28
    414e:	07 5a       	subi	r16, 0xA7	; 167
    4150:	1f 4f       	sbci	r17, 0xFF	; 255
    4152:	fe 01       	movw	r30, r28
    4154:	e3 5a       	subi	r30, 0xA3	; 163
    4156:	ff 4f       	sbci	r31, 0xFF	; 255
    4158:	60 81       	ld	r22, Z
    415a:	71 81       	ldd	r23, Z+1	; 0x01
    415c:	82 81       	ldd	r24, Z+2	; 0x02
    415e:	93 81       	ldd	r25, Z+3	; 0x03
    4160:	2b ea       	ldi	r18, 0xAB	; 171
    4162:	3a ea       	ldi	r19, 0xAA	; 170
    4164:	4a e2       	ldi	r20, 0x2A	; 42
    4166:	50 e4       	ldi	r21, 0x40	; 64
    4168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    416c:	dc 01       	movw	r26, r24
    416e:	cb 01       	movw	r24, r22
    4170:	f8 01       	movw	r30, r16
    4172:	80 83       	st	Z, r24
    4174:	91 83       	std	Z+1, r25	; 0x01
    4176:	a2 83       	std	Z+2, r26	; 0x02
    4178:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    417a:	fe 01       	movw	r30, r28
    417c:	e7 5a       	subi	r30, 0xA7	; 167
    417e:	ff 4f       	sbci	r31, 0xFF	; 255
    4180:	60 81       	ld	r22, Z
    4182:	71 81       	ldd	r23, Z+1	; 0x01
    4184:	82 81       	ldd	r24, Z+2	; 0x02
    4186:	93 81       	ldd	r25, Z+3	; 0x03
    4188:	20 e0       	ldi	r18, 0x00	; 0
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	40 e8       	ldi	r20, 0x80	; 128
    418e:	5f e3       	ldi	r21, 0x3F	; 63
    4190:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4194:	88 23       	and	r24, r24
    4196:	34 f4       	brge	.+12     	; 0x41a4 <LCD_CheckStatusSendCmnd4bit+0xca>
		__ticks = 1;
    4198:	fe 01       	movw	r30, r28
    419a:	e8 5a       	subi	r30, 0xA8	; 168
    419c:	ff 4f       	sbci	r31, 0xFF	; 255
    419e:	81 e0       	ldi	r24, 0x01	; 1
    41a0:	80 83       	st	Z, r24
    41a2:	e0 c0       	rjmp	.+448    	; 0x4364 <LCD_CheckStatusSendCmnd4bit+0x28a>
	else if (__tmp > 255)
    41a4:	fe 01       	movw	r30, r28
    41a6:	e7 5a       	subi	r30, 0xA7	; 167
    41a8:	ff 4f       	sbci	r31, 0xFF	; 255
    41aa:	60 81       	ld	r22, Z
    41ac:	71 81       	ldd	r23, Z+1	; 0x01
    41ae:	82 81       	ldd	r24, Z+2	; 0x02
    41b0:	93 81       	ldd	r25, Z+3	; 0x03
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	4f e7       	ldi	r20, 0x7F	; 127
    41b8:	53 e4       	ldi	r21, 0x43	; 67
    41ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41be:	18 16       	cp	r1, r24
    41c0:	0c f0       	brlt	.+2      	; 0x41c4 <LCD_CheckStatusSendCmnd4bit+0xea>
    41c2:	c0 c0       	rjmp	.+384    	; 0x4344 <LCD_CheckStatusSendCmnd4bit+0x26a>
	{
		_delay_ms(__us / 1000.0);
    41c4:	fe 01       	movw	r30, r28
    41c6:	e3 5a       	subi	r30, 0xA3	; 163
    41c8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ca:	60 81       	ld	r22, Z
    41cc:	71 81       	ldd	r23, Z+1	; 0x01
    41ce:	82 81       	ldd	r24, Z+2	; 0x02
    41d0:	93 81       	ldd	r25, Z+3	; 0x03
    41d2:	20 e0       	ldi	r18, 0x00	; 0
    41d4:	30 e0       	ldi	r19, 0x00	; 0
    41d6:	4a e7       	ldi	r20, 0x7A	; 122
    41d8:	54 e4       	ldi	r21, 0x44	; 68
    41da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    41de:	dc 01       	movw	r26, r24
    41e0:	cb 01       	movw	r24, r22
    41e2:	fe 01       	movw	r30, r28
    41e4:	ec 5a       	subi	r30, 0xAC	; 172
    41e6:	ff 4f       	sbci	r31, 0xFF	; 255
    41e8:	80 83       	st	Z, r24
    41ea:	91 83       	std	Z+1, r25	; 0x01
    41ec:	a2 83       	std	Z+2, r26	; 0x02
    41ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41f0:	8e 01       	movw	r16, r28
    41f2:	00 5b       	subi	r16, 0xB0	; 176
    41f4:	1f 4f       	sbci	r17, 0xFF	; 255
    41f6:	fe 01       	movw	r30, r28
    41f8:	ec 5a       	subi	r30, 0xAC	; 172
    41fa:	ff 4f       	sbci	r31, 0xFF	; 255
    41fc:	60 81       	ld	r22, Z
    41fe:	71 81       	ldd	r23, Z+1	; 0x01
    4200:	82 81       	ldd	r24, Z+2	; 0x02
    4202:	93 81       	ldd	r25, Z+3	; 0x03
    4204:	20 e0       	ldi	r18, 0x00	; 0
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	4a ef       	ldi	r20, 0xFA	; 250
    420a:	54 e4       	ldi	r21, 0x44	; 68
    420c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4210:	dc 01       	movw	r26, r24
    4212:	cb 01       	movw	r24, r22
    4214:	f8 01       	movw	r30, r16
    4216:	80 83       	st	Z, r24
    4218:	91 83       	std	Z+1, r25	; 0x01
    421a:	a2 83       	std	Z+2, r26	; 0x02
    421c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    421e:	fe 01       	movw	r30, r28
    4220:	e0 5b       	subi	r30, 0xB0	; 176
    4222:	ff 4f       	sbci	r31, 0xFF	; 255
    4224:	60 81       	ld	r22, Z
    4226:	71 81       	ldd	r23, Z+1	; 0x01
    4228:	82 81       	ldd	r24, Z+2	; 0x02
    422a:	93 81       	ldd	r25, Z+3	; 0x03
    422c:	20 e0       	ldi	r18, 0x00	; 0
    422e:	30 e0       	ldi	r19, 0x00	; 0
    4230:	40 e8       	ldi	r20, 0x80	; 128
    4232:	5f e3       	ldi	r21, 0x3F	; 63
    4234:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4238:	88 23       	and	r24, r24
    423a:	44 f4       	brge	.+16     	; 0x424c <LCD_CheckStatusSendCmnd4bit+0x172>
		__ticks = 1;
    423c:	fe 01       	movw	r30, r28
    423e:	e2 5b       	subi	r30, 0xB2	; 178
    4240:	ff 4f       	sbci	r31, 0xFF	; 255
    4242:	81 e0       	ldi	r24, 0x01	; 1
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	91 83       	std	Z+1, r25	; 0x01
    4248:	80 83       	st	Z, r24
    424a:	64 c0       	rjmp	.+200    	; 0x4314 <LCD_CheckStatusSendCmnd4bit+0x23a>
	else if (__tmp > 65535)
    424c:	fe 01       	movw	r30, r28
    424e:	e0 5b       	subi	r30, 0xB0	; 176
    4250:	ff 4f       	sbci	r31, 0xFF	; 255
    4252:	60 81       	ld	r22, Z
    4254:	71 81       	ldd	r23, Z+1	; 0x01
    4256:	82 81       	ldd	r24, Z+2	; 0x02
    4258:	93 81       	ldd	r25, Z+3	; 0x03
    425a:	20 e0       	ldi	r18, 0x00	; 0
    425c:	3f ef       	ldi	r19, 0xFF	; 255
    425e:	4f e7       	ldi	r20, 0x7F	; 127
    4260:	57 e4       	ldi	r21, 0x47	; 71
    4262:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4266:	18 16       	cp	r1, r24
    4268:	0c f0       	brlt	.+2      	; 0x426c <LCD_CheckStatusSendCmnd4bit+0x192>
    426a:	43 c0       	rjmp	.+134    	; 0x42f2 <LCD_CheckStatusSendCmnd4bit+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    426c:	fe 01       	movw	r30, r28
    426e:	ec 5a       	subi	r30, 0xAC	; 172
    4270:	ff 4f       	sbci	r31, 0xFF	; 255
    4272:	60 81       	ld	r22, Z
    4274:	71 81       	ldd	r23, Z+1	; 0x01
    4276:	82 81       	ldd	r24, Z+2	; 0x02
    4278:	93 81       	ldd	r25, Z+3	; 0x03
    427a:	20 e0       	ldi	r18, 0x00	; 0
    427c:	30 e0       	ldi	r19, 0x00	; 0
    427e:	40 e2       	ldi	r20, 0x20	; 32
    4280:	51 e4       	ldi	r21, 0x41	; 65
    4282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4286:	dc 01       	movw	r26, r24
    4288:	cb 01       	movw	r24, r22
    428a:	8e 01       	movw	r16, r28
    428c:	02 5b       	subi	r16, 0xB2	; 178
    428e:	1f 4f       	sbci	r17, 0xFF	; 255
    4290:	bc 01       	movw	r22, r24
    4292:	cd 01       	movw	r24, r26
    4294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4298:	dc 01       	movw	r26, r24
    429a:	cb 01       	movw	r24, r22
    429c:	f8 01       	movw	r30, r16
    429e:	91 83       	std	Z+1, r25	; 0x01
    42a0:	80 83       	st	Z, r24
    42a2:	1f c0       	rjmp	.+62     	; 0x42e2 <LCD_CheckStatusSendCmnd4bit+0x208>
    42a4:	fe 01       	movw	r30, r28
    42a6:	e4 5b       	subi	r30, 0xB4	; 180
    42a8:	ff 4f       	sbci	r31, 0xFF	; 255
    42aa:	88 ec       	ldi	r24, 0xC8	; 200
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	91 83       	std	Z+1, r25	; 0x01
    42b0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    42b2:	fe 01       	movw	r30, r28
    42b4:	e4 5b       	subi	r30, 0xB4	; 180
    42b6:	ff 4f       	sbci	r31, 0xFF	; 255
    42b8:	80 81       	ld	r24, Z
    42ba:	91 81       	ldd	r25, Z+1	; 0x01
    42bc:	01 97       	sbiw	r24, 0x01	; 1
    42be:	f1 f7       	brne	.-4      	; 0x42bc <LCD_CheckStatusSendCmnd4bit+0x1e2>
    42c0:	fe 01       	movw	r30, r28
    42c2:	e4 5b       	subi	r30, 0xB4	; 180
    42c4:	ff 4f       	sbci	r31, 0xFF	; 255
    42c6:	91 83       	std	Z+1, r25	; 0x01
    42c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42ca:	de 01       	movw	r26, r28
    42cc:	a2 5b       	subi	r26, 0xB2	; 178
    42ce:	bf 4f       	sbci	r27, 0xFF	; 255
    42d0:	fe 01       	movw	r30, r28
    42d2:	e2 5b       	subi	r30, 0xB2	; 178
    42d4:	ff 4f       	sbci	r31, 0xFF	; 255
    42d6:	80 81       	ld	r24, Z
    42d8:	91 81       	ldd	r25, Z+1	; 0x01
    42da:	01 97       	sbiw	r24, 0x01	; 1
    42dc:	11 96       	adiw	r26, 0x01	; 1
    42de:	9c 93       	st	X, r25
    42e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42e2:	fe 01       	movw	r30, r28
    42e4:	e2 5b       	subi	r30, 0xB2	; 178
    42e6:	ff 4f       	sbci	r31, 0xFF	; 255
    42e8:	80 81       	ld	r24, Z
    42ea:	91 81       	ldd	r25, Z+1	; 0x01
    42ec:	00 97       	sbiw	r24, 0x00	; 0
    42ee:	d1 f6       	brne	.-76     	; 0x42a4 <LCD_CheckStatusSendCmnd4bit+0x1ca>
    42f0:	4b c0       	rjmp	.+150    	; 0x4388 <LCD_CheckStatusSendCmnd4bit+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42f2:	8e 01       	movw	r16, r28
    42f4:	02 5b       	subi	r16, 0xB2	; 178
    42f6:	1f 4f       	sbci	r17, 0xFF	; 255
    42f8:	fe 01       	movw	r30, r28
    42fa:	e0 5b       	subi	r30, 0xB0	; 176
    42fc:	ff 4f       	sbci	r31, 0xFF	; 255
    42fe:	60 81       	ld	r22, Z
    4300:	71 81       	ldd	r23, Z+1	; 0x01
    4302:	82 81       	ldd	r24, Z+2	; 0x02
    4304:	93 81       	ldd	r25, Z+3	; 0x03
    4306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    430a:	dc 01       	movw	r26, r24
    430c:	cb 01       	movw	r24, r22
    430e:	f8 01       	movw	r30, r16
    4310:	91 83       	std	Z+1, r25	; 0x01
    4312:	80 83       	st	Z, r24
    4314:	de 01       	movw	r26, r28
    4316:	a6 5b       	subi	r26, 0xB6	; 182
    4318:	bf 4f       	sbci	r27, 0xFF	; 255
    431a:	fe 01       	movw	r30, r28
    431c:	e2 5b       	subi	r30, 0xB2	; 178
    431e:	ff 4f       	sbci	r31, 0xFF	; 255
    4320:	80 81       	ld	r24, Z
    4322:	91 81       	ldd	r25, Z+1	; 0x01
    4324:	11 96       	adiw	r26, 0x01	; 1
    4326:	9c 93       	st	X, r25
    4328:	8e 93       	st	-X, r24
    432a:	fe 01       	movw	r30, r28
    432c:	e6 5b       	subi	r30, 0xB6	; 182
    432e:	ff 4f       	sbci	r31, 0xFF	; 255
    4330:	80 81       	ld	r24, Z
    4332:	91 81       	ldd	r25, Z+1	; 0x01
    4334:	01 97       	sbiw	r24, 0x01	; 1
    4336:	f1 f7       	brne	.-4      	; 0x4334 <LCD_CheckStatusSendCmnd4bit+0x25a>
    4338:	fe 01       	movw	r30, r28
    433a:	e6 5b       	subi	r30, 0xB6	; 182
    433c:	ff 4f       	sbci	r31, 0xFF	; 255
    433e:	91 83       	std	Z+1, r25	; 0x01
    4340:	80 83       	st	Z, r24
    4342:	22 c0       	rjmp	.+68     	; 0x4388 <LCD_CheckStatusSendCmnd4bit+0x2ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4344:	8e 01       	movw	r16, r28
    4346:	08 5a       	subi	r16, 0xA8	; 168
    4348:	1f 4f       	sbci	r17, 0xFF	; 255
    434a:	fe 01       	movw	r30, r28
    434c:	e7 5a       	subi	r30, 0xA7	; 167
    434e:	ff 4f       	sbci	r31, 0xFF	; 255
    4350:	60 81       	ld	r22, Z
    4352:	71 81       	ldd	r23, Z+1	; 0x01
    4354:	82 81       	ldd	r24, Z+2	; 0x02
    4356:	93 81       	ldd	r25, Z+3	; 0x03
    4358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    435c:	dc 01       	movw	r26, r24
    435e:	cb 01       	movw	r24, r22
    4360:	f8 01       	movw	r30, r16
    4362:	80 83       	st	Z, r24
    4364:	de 01       	movw	r26, r28
    4366:	a7 5b       	subi	r26, 0xB7	; 183
    4368:	bf 4f       	sbci	r27, 0xFF	; 255
    436a:	fe 01       	movw	r30, r28
    436c:	e8 5a       	subi	r30, 0xA8	; 168
    436e:	ff 4f       	sbci	r31, 0xFF	; 255
    4370:	80 81       	ld	r24, Z
    4372:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4374:	fe 01       	movw	r30, r28
    4376:	e7 5b       	subi	r30, 0xB7	; 183
    4378:	ff 4f       	sbci	r31, 0xFF	; 255
    437a:	80 81       	ld	r24, Z
    437c:	8a 95       	dec	r24
    437e:	f1 f7       	brne	.-4      	; 0x437c <LCD_CheckStatusSendCmnd4bit+0x2a2>
    4380:	fe 01       	movw	r30, r28
    4382:	e7 5b       	subi	r30, 0xB7	; 183
    4384:	ff 4f       	sbci	r31, 0xFF	; 255
    4386:	80 83       	st	Z, r24
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    4388:	81 e0       	ldi	r24, 0x01	; 1
    438a:	62 e0       	ldi	r22, 0x02	; 2
    438c:	40 e0       	ldi	r20, 0x00	; 0
    438e:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>
    4392:	fe 01       	movw	r30, r28
    4394:	eb 5b       	subi	r30, 0xBB	; 187
    4396:	ff 4f       	sbci	r31, 0xFF	; 255
    4398:	80 e0       	ldi	r24, 0x00	; 0
    439a:	90 e0       	ldi	r25, 0x00	; 0
    439c:	a0 e8       	ldi	r26, 0x80	; 128
    439e:	bf e3       	ldi	r27, 0x3F	; 63
    43a0:	80 83       	st	Z, r24
    43a2:	91 83       	std	Z+1, r25	; 0x01
    43a4:	a2 83       	std	Z+2, r26	; 0x02
    43a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    43a8:	8e 01       	movw	r16, r28
    43aa:	0f 5b       	subi	r16, 0xBF	; 191
    43ac:	1f 4f       	sbci	r17, 0xFF	; 255
    43ae:	fe 01       	movw	r30, r28
    43b0:	eb 5b       	subi	r30, 0xBB	; 187
    43b2:	ff 4f       	sbci	r31, 0xFF	; 255
    43b4:	60 81       	ld	r22, Z
    43b6:	71 81       	ldd	r23, Z+1	; 0x01
    43b8:	82 81       	ldd	r24, Z+2	; 0x02
    43ba:	93 81       	ldd	r25, Z+3	; 0x03
    43bc:	2b ea       	ldi	r18, 0xAB	; 171
    43be:	3a ea       	ldi	r19, 0xAA	; 170
    43c0:	4a e2       	ldi	r20, 0x2A	; 42
    43c2:	50 e4       	ldi	r21, 0x40	; 64
    43c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43c8:	dc 01       	movw	r26, r24
    43ca:	cb 01       	movw	r24, r22
    43cc:	f8 01       	movw	r30, r16
    43ce:	80 83       	st	Z, r24
    43d0:	91 83       	std	Z+1, r25	; 0x01
    43d2:	a2 83       	std	Z+2, r26	; 0x02
    43d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43d6:	fe 01       	movw	r30, r28
    43d8:	ef 5b       	subi	r30, 0xBF	; 191
    43da:	ff 4f       	sbci	r31, 0xFF	; 255
    43dc:	60 81       	ld	r22, Z
    43de:	71 81       	ldd	r23, Z+1	; 0x01
    43e0:	82 81       	ldd	r24, Z+2	; 0x02
    43e2:	93 81       	ldd	r25, Z+3	; 0x03
    43e4:	20 e0       	ldi	r18, 0x00	; 0
    43e6:	30 e0       	ldi	r19, 0x00	; 0
    43e8:	40 e8       	ldi	r20, 0x80	; 128
    43ea:	5f e3       	ldi	r21, 0x3F	; 63
    43ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43f0:	88 23       	and	r24, r24
    43f2:	34 f4       	brge	.+12     	; 0x4400 <LCD_CheckStatusSendCmnd4bit+0x326>
		__ticks = 1;
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	fe 01       	movw	r30, r28
    43f8:	e0 5c       	subi	r30, 0xC0	; 192
    43fa:	ff 4f       	sbci	r31, 0xFF	; 255
    43fc:	80 83       	st	Z, r24
    43fe:	9d c0       	rjmp	.+314    	; 0x453a <LCD_CheckStatusSendCmnd4bit+0x460>
	else if (__tmp > 255)
    4400:	fe 01       	movw	r30, r28
    4402:	ef 5b       	subi	r30, 0xBF	; 191
    4404:	ff 4f       	sbci	r31, 0xFF	; 255
    4406:	60 81       	ld	r22, Z
    4408:	71 81       	ldd	r23, Z+1	; 0x01
    440a:	82 81       	ldd	r24, Z+2	; 0x02
    440c:	93 81       	ldd	r25, Z+3	; 0x03
    440e:	20 e0       	ldi	r18, 0x00	; 0
    4410:	30 e0       	ldi	r19, 0x00	; 0
    4412:	4f e7       	ldi	r20, 0x7F	; 127
    4414:	53 e4       	ldi	r21, 0x43	; 67
    4416:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    441a:	18 16       	cp	r1, r24
    441c:	0c f0       	brlt	.+2      	; 0x4420 <LCD_CheckStatusSendCmnd4bit+0x346>
    441e:	7e c0       	rjmp	.+252    	; 0x451c <LCD_CheckStatusSendCmnd4bit+0x442>
	{
		_delay_ms(__us / 1000.0);
    4420:	fe 01       	movw	r30, r28
    4422:	eb 5b       	subi	r30, 0xBB	; 187
    4424:	ff 4f       	sbci	r31, 0xFF	; 255
    4426:	60 81       	ld	r22, Z
    4428:	71 81       	ldd	r23, Z+1	; 0x01
    442a:	82 81       	ldd	r24, Z+2	; 0x02
    442c:	93 81       	ldd	r25, Z+3	; 0x03
    442e:	20 e0       	ldi	r18, 0x00	; 0
    4430:	30 e0       	ldi	r19, 0x00	; 0
    4432:	4a e7       	ldi	r20, 0x7A	; 122
    4434:	54 e4       	ldi	r21, 0x44	; 68
    4436:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    443a:	dc 01       	movw	r26, r24
    443c:	cb 01       	movw	r24, r22
    443e:	8c af       	std	Y+60, r24	; 0x3c
    4440:	9d af       	std	Y+61, r25	; 0x3d
    4442:	ae af       	std	Y+62, r26	; 0x3e
    4444:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4446:	6c ad       	ldd	r22, Y+60	; 0x3c
    4448:	7d ad       	ldd	r23, Y+61	; 0x3d
    444a:	8e ad       	ldd	r24, Y+62	; 0x3e
    444c:	9f ad       	ldd	r25, Y+63	; 0x3f
    444e:	20 e0       	ldi	r18, 0x00	; 0
    4450:	30 e0       	ldi	r19, 0x00	; 0
    4452:	4a ef       	ldi	r20, 0xFA	; 250
    4454:	54 e4       	ldi	r21, 0x44	; 68
    4456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    445a:	dc 01       	movw	r26, r24
    445c:	cb 01       	movw	r24, r22
    445e:	88 af       	std	Y+56, r24	; 0x38
    4460:	99 af       	std	Y+57, r25	; 0x39
    4462:	aa af       	std	Y+58, r26	; 0x3a
    4464:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    4466:	68 ad       	ldd	r22, Y+56	; 0x38
    4468:	79 ad       	ldd	r23, Y+57	; 0x39
    446a:	8a ad       	ldd	r24, Y+58	; 0x3a
    446c:	9b ad       	ldd	r25, Y+59	; 0x3b
    446e:	20 e0       	ldi	r18, 0x00	; 0
    4470:	30 e0       	ldi	r19, 0x00	; 0
    4472:	40 e8       	ldi	r20, 0x80	; 128
    4474:	5f e3       	ldi	r21, 0x3F	; 63
    4476:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    447a:	88 23       	and	r24, r24
    447c:	2c f4       	brge	.+10     	; 0x4488 <LCD_CheckStatusSendCmnd4bit+0x3ae>
		__ticks = 1;
    447e:	81 e0       	ldi	r24, 0x01	; 1
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	9f ab       	std	Y+55, r25	; 0x37
    4484:	8e ab       	std	Y+54, r24	; 0x36
    4486:	3f c0       	rjmp	.+126    	; 0x4506 <LCD_CheckStatusSendCmnd4bit+0x42c>
	else if (__tmp > 65535)
    4488:	68 ad       	ldd	r22, Y+56	; 0x38
    448a:	79 ad       	ldd	r23, Y+57	; 0x39
    448c:	8a ad       	ldd	r24, Y+58	; 0x3a
    448e:	9b ad       	ldd	r25, Y+59	; 0x3b
    4490:	20 e0       	ldi	r18, 0x00	; 0
    4492:	3f ef       	ldi	r19, 0xFF	; 255
    4494:	4f e7       	ldi	r20, 0x7F	; 127
    4496:	57 e4       	ldi	r21, 0x47	; 71
    4498:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    449c:	18 16       	cp	r1, r24
    449e:	4c f5       	brge	.+82     	; 0x44f2 <LCD_CheckStatusSendCmnd4bit+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44a0:	6c ad       	ldd	r22, Y+60	; 0x3c
    44a2:	7d ad       	ldd	r23, Y+61	; 0x3d
    44a4:	8e ad       	ldd	r24, Y+62	; 0x3e
    44a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    44a8:	20 e0       	ldi	r18, 0x00	; 0
    44aa:	30 e0       	ldi	r19, 0x00	; 0
    44ac:	40 e2       	ldi	r20, 0x20	; 32
    44ae:	51 e4       	ldi	r21, 0x41	; 65
    44b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b4:	dc 01       	movw	r26, r24
    44b6:	cb 01       	movw	r24, r22
    44b8:	bc 01       	movw	r22, r24
    44ba:	cd 01       	movw	r24, r26
    44bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44c0:	dc 01       	movw	r26, r24
    44c2:	cb 01       	movw	r24, r22
    44c4:	9f ab       	std	Y+55, r25	; 0x37
    44c6:	8e ab       	std	Y+54, r24	; 0x36
    44c8:	0f c0       	rjmp	.+30     	; 0x44e8 <LCD_CheckStatusSendCmnd4bit+0x40e>
    44ca:	88 ec       	ldi	r24, 0xC8	; 200
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	9d ab       	std	Y+53, r25	; 0x35
    44d0:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    44d2:	8c a9       	ldd	r24, Y+52	; 0x34
    44d4:	9d a9       	ldd	r25, Y+53	; 0x35
    44d6:	01 97       	sbiw	r24, 0x01	; 1
    44d8:	f1 f7       	brne	.-4      	; 0x44d6 <LCD_CheckStatusSendCmnd4bit+0x3fc>
    44da:	9d ab       	std	Y+53, r25	; 0x35
    44dc:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44de:	8e a9       	ldd	r24, Y+54	; 0x36
    44e0:	9f a9       	ldd	r25, Y+55	; 0x37
    44e2:	01 97       	sbiw	r24, 0x01	; 1
    44e4:	9f ab       	std	Y+55, r25	; 0x37
    44e6:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44e8:	8e a9       	ldd	r24, Y+54	; 0x36
    44ea:	9f a9       	ldd	r25, Y+55	; 0x37
    44ec:	00 97       	sbiw	r24, 0x00	; 0
    44ee:	69 f7       	brne	.-38     	; 0x44ca <LCD_CheckStatusSendCmnd4bit+0x3f0>
    44f0:	2d c0       	rjmp	.+90     	; 0x454c <LCD_CheckStatusSendCmnd4bit+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44f2:	68 ad       	ldd	r22, Y+56	; 0x38
    44f4:	79 ad       	ldd	r23, Y+57	; 0x39
    44f6:	8a ad       	ldd	r24, Y+58	; 0x3a
    44f8:	9b ad       	ldd	r25, Y+59	; 0x3b
    44fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44fe:	dc 01       	movw	r26, r24
    4500:	cb 01       	movw	r24, r22
    4502:	9f ab       	std	Y+55, r25	; 0x37
    4504:	8e ab       	std	Y+54, r24	; 0x36
    4506:	8e a9       	ldd	r24, Y+54	; 0x36
    4508:	9f a9       	ldd	r25, Y+55	; 0x37
    450a:	9b ab       	std	Y+51, r25	; 0x33
    450c:	8a ab       	std	Y+50, r24	; 0x32
    450e:	8a a9       	ldd	r24, Y+50	; 0x32
    4510:	9b a9       	ldd	r25, Y+51	; 0x33
    4512:	01 97       	sbiw	r24, 0x01	; 1
    4514:	f1 f7       	brne	.-4      	; 0x4512 <LCD_CheckStatusSendCmnd4bit+0x438>
    4516:	9b ab       	std	Y+51, r25	; 0x33
    4518:	8a ab       	std	Y+50, r24	; 0x32
    451a:	18 c0       	rjmp	.+48     	; 0x454c <LCD_CheckStatusSendCmnd4bit+0x472>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    451c:	fe 01       	movw	r30, r28
    451e:	ef 5b       	subi	r30, 0xBF	; 191
    4520:	ff 4f       	sbci	r31, 0xFF	; 255
    4522:	60 81       	ld	r22, Z
    4524:	71 81       	ldd	r23, Z+1	; 0x01
    4526:	82 81       	ldd	r24, Z+2	; 0x02
    4528:	93 81       	ldd	r25, Z+3	; 0x03
    452a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    452e:	dc 01       	movw	r26, r24
    4530:	cb 01       	movw	r24, r22
    4532:	fe 01       	movw	r30, r28
    4534:	e0 5c       	subi	r30, 0xC0	; 192
    4536:	ff 4f       	sbci	r31, 0xFF	; 255
    4538:	80 83       	st	Z, r24
    453a:	fe 01       	movw	r30, r28
    453c:	e0 5c       	subi	r30, 0xC0	; 192
    453e:	ff 4f       	sbci	r31, 0xFF	; 255
    4540:	80 81       	ld	r24, Z
    4542:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4544:	89 a9       	ldd	r24, Y+49	; 0x31
    4546:	8a 95       	dec	r24
    4548:	f1 f7       	brne	.-4      	; 0x4546 <LCD_CheckStatusSendCmnd4bit+0x46c>
    454a:	89 ab       	std	Y+49, r24	; 0x31
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RS_PIN, DIO__UINT8_LOW);
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	60 e0       	ldi	r22, 0x00	; 0
    4550:	40 e0       	ldi	r20, 0x00	; 0
    4552:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_RW_PIN, DIO__UINT8_LOW);
    4556:	81 e0       	ldi	r24, 0x01	; 1
    4558:	61 e0       	ldi	r22, 0x01	; 1
    455a:	40 e0       	ldi	r20, 0x00	; 0
    455c:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>

                DIO__CheckStatusSetPortValue(LCD__UINT8_DATA_PORT, ((Copy__Uint8Cmnd << 4) & LCD__UINT8_DATA_PINS));
    4560:	fe 01       	movw	r30, r28
    4562:	ee 59       	subi	r30, 0x9E	; 158
    4564:	ff 4f       	sbci	r31, 0xFF	; 255
    4566:	80 81       	ld	r24, Z
    4568:	88 2f       	mov	r24, r24
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	82 95       	swap	r24
    456e:	92 95       	swap	r25
    4570:	90 7f       	andi	r25, 0xF0	; 240
    4572:	98 27       	eor	r25, r24
    4574:	80 7f       	andi	r24, 0xF0	; 240
    4576:	98 27       	eor	r25, r24
    4578:	98 2f       	mov	r25, r24
    457a:	82 e0       	ldi	r24, 0x02	; 2
    457c:	69 2f       	mov	r22, r25
    457e:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO__CheckStatusSetPortValue>

                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_HIGH);
    4582:	81 e0       	ldi	r24, 0x01	; 1
    4584:	62 e0       	ldi	r22, 0x02	; 2
    4586:	41 e0       	ldi	r20, 0x01	; 1
    4588:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>
    458c:	80 e0       	ldi	r24, 0x00	; 0
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	a0 e8       	ldi	r26, 0x80	; 128
    4592:	bf e3       	ldi	r27, 0x3F	; 63
    4594:	8d a7       	std	Y+45, r24	; 0x2d
    4596:	9e a7       	std	Y+46, r25	; 0x2e
    4598:	af a7       	std	Y+47, r26	; 0x2f
    459a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    459c:	6d a5       	ldd	r22, Y+45	; 0x2d
    459e:	7e a5       	ldd	r23, Y+46	; 0x2e
    45a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    45a2:	98 a9       	ldd	r25, Y+48	; 0x30
    45a4:	2b ea       	ldi	r18, 0xAB	; 171
    45a6:	3a ea       	ldi	r19, 0xAA	; 170
    45a8:	4a e2       	ldi	r20, 0x2A	; 42
    45aa:	50 e4       	ldi	r21, 0x40	; 64
    45ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45b0:	dc 01       	movw	r26, r24
    45b2:	cb 01       	movw	r24, r22
    45b4:	89 a7       	std	Y+41, r24	; 0x29
    45b6:	9a a7       	std	Y+42, r25	; 0x2a
    45b8:	ab a7       	std	Y+43, r26	; 0x2b
    45ba:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    45bc:	69 a5       	ldd	r22, Y+41	; 0x29
    45be:	7a a5       	ldd	r23, Y+42	; 0x2a
    45c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    45c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    45c4:	20 e0       	ldi	r18, 0x00	; 0
    45c6:	30 e0       	ldi	r19, 0x00	; 0
    45c8:	40 e8       	ldi	r20, 0x80	; 128
    45ca:	5f e3       	ldi	r21, 0x3F	; 63
    45cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45d0:	88 23       	and	r24, r24
    45d2:	1c f4       	brge	.+6      	; 0x45da <LCD_CheckStatusSendCmnd4bit+0x500>
		__ticks = 1;
    45d4:	81 e0       	ldi	r24, 0x01	; 1
    45d6:	88 a7       	std	Y+40, r24	; 0x28
    45d8:	91 c0       	rjmp	.+290    	; 0x46fc <LCD_CheckStatusSendCmnd4bit+0x622>
	else if (__tmp > 255)
    45da:	69 a5       	ldd	r22, Y+41	; 0x29
    45dc:	7a a5       	ldd	r23, Y+42	; 0x2a
    45de:	8b a5       	ldd	r24, Y+43	; 0x2b
    45e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    45e2:	20 e0       	ldi	r18, 0x00	; 0
    45e4:	30 e0       	ldi	r19, 0x00	; 0
    45e6:	4f e7       	ldi	r20, 0x7F	; 127
    45e8:	53 e4       	ldi	r21, 0x43	; 67
    45ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45ee:	18 16       	cp	r1, r24
    45f0:	0c f0       	brlt	.+2      	; 0x45f4 <LCD_CheckStatusSendCmnd4bit+0x51a>
    45f2:	7b c0       	rjmp	.+246    	; 0x46ea <LCD_CheckStatusSendCmnd4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    45f4:	6d a5       	ldd	r22, Y+45	; 0x2d
    45f6:	7e a5       	ldd	r23, Y+46	; 0x2e
    45f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    45fa:	98 a9       	ldd	r25, Y+48	; 0x30
    45fc:	20 e0       	ldi	r18, 0x00	; 0
    45fe:	30 e0       	ldi	r19, 0x00	; 0
    4600:	4a e7       	ldi	r20, 0x7A	; 122
    4602:	54 e4       	ldi	r21, 0x44	; 68
    4604:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4608:	dc 01       	movw	r26, r24
    460a:	cb 01       	movw	r24, r22
    460c:	8c a3       	std	Y+36, r24	; 0x24
    460e:	9d a3       	std	Y+37, r25	; 0x25
    4610:	ae a3       	std	Y+38, r26	; 0x26
    4612:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4614:	6c a1       	ldd	r22, Y+36	; 0x24
    4616:	7d a1       	ldd	r23, Y+37	; 0x25
    4618:	8e a1       	ldd	r24, Y+38	; 0x26
    461a:	9f a1       	ldd	r25, Y+39	; 0x27
    461c:	20 e0       	ldi	r18, 0x00	; 0
    461e:	30 e0       	ldi	r19, 0x00	; 0
    4620:	4a ef       	ldi	r20, 0xFA	; 250
    4622:	54 e4       	ldi	r21, 0x44	; 68
    4624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4628:	dc 01       	movw	r26, r24
    462a:	cb 01       	movw	r24, r22
    462c:	88 a3       	std	Y+32, r24	; 0x20
    462e:	99 a3       	std	Y+33, r25	; 0x21
    4630:	aa a3       	std	Y+34, r26	; 0x22
    4632:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4634:	68 a1       	ldd	r22, Y+32	; 0x20
    4636:	79 a1       	ldd	r23, Y+33	; 0x21
    4638:	8a a1       	ldd	r24, Y+34	; 0x22
    463a:	9b a1       	ldd	r25, Y+35	; 0x23
    463c:	20 e0       	ldi	r18, 0x00	; 0
    463e:	30 e0       	ldi	r19, 0x00	; 0
    4640:	40 e8       	ldi	r20, 0x80	; 128
    4642:	5f e3       	ldi	r21, 0x3F	; 63
    4644:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4648:	88 23       	and	r24, r24
    464a:	2c f4       	brge	.+10     	; 0x4656 <LCD_CheckStatusSendCmnd4bit+0x57c>
		__ticks = 1;
    464c:	81 e0       	ldi	r24, 0x01	; 1
    464e:	90 e0       	ldi	r25, 0x00	; 0
    4650:	9f 8f       	std	Y+31, r25	; 0x1f
    4652:	8e 8f       	std	Y+30, r24	; 0x1e
    4654:	3f c0       	rjmp	.+126    	; 0x46d4 <LCD_CheckStatusSendCmnd4bit+0x5fa>
	else if (__tmp > 65535)
    4656:	68 a1       	ldd	r22, Y+32	; 0x20
    4658:	79 a1       	ldd	r23, Y+33	; 0x21
    465a:	8a a1       	ldd	r24, Y+34	; 0x22
    465c:	9b a1       	ldd	r25, Y+35	; 0x23
    465e:	20 e0       	ldi	r18, 0x00	; 0
    4660:	3f ef       	ldi	r19, 0xFF	; 255
    4662:	4f e7       	ldi	r20, 0x7F	; 127
    4664:	57 e4       	ldi	r21, 0x47	; 71
    4666:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    466a:	18 16       	cp	r1, r24
    466c:	4c f5       	brge	.+82     	; 0x46c0 <LCD_CheckStatusSendCmnd4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    466e:	6c a1       	ldd	r22, Y+36	; 0x24
    4670:	7d a1       	ldd	r23, Y+37	; 0x25
    4672:	8e a1       	ldd	r24, Y+38	; 0x26
    4674:	9f a1       	ldd	r25, Y+39	; 0x27
    4676:	20 e0       	ldi	r18, 0x00	; 0
    4678:	30 e0       	ldi	r19, 0x00	; 0
    467a:	40 e2       	ldi	r20, 0x20	; 32
    467c:	51 e4       	ldi	r21, 0x41	; 65
    467e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4682:	dc 01       	movw	r26, r24
    4684:	cb 01       	movw	r24, r22
    4686:	bc 01       	movw	r22, r24
    4688:	cd 01       	movw	r24, r26
    468a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    468e:	dc 01       	movw	r26, r24
    4690:	cb 01       	movw	r24, r22
    4692:	9f 8f       	std	Y+31, r25	; 0x1f
    4694:	8e 8f       	std	Y+30, r24	; 0x1e
    4696:	0f c0       	rjmp	.+30     	; 0x46b6 <LCD_CheckStatusSendCmnd4bit+0x5dc>
    4698:	88 ec       	ldi	r24, 0xC8	; 200
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	9d 8f       	std	Y+29, r25	; 0x1d
    469e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    46a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    46a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    46a4:	01 97       	sbiw	r24, 0x01	; 1
    46a6:	f1 f7       	brne	.-4      	; 0x46a4 <LCD_CheckStatusSendCmnd4bit+0x5ca>
    46a8:	9d 8f       	std	Y+29, r25	; 0x1d
    46aa:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    46ae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    46b0:	01 97       	sbiw	r24, 0x01	; 1
    46b2:	9f 8f       	std	Y+31, r25	; 0x1f
    46b4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    46b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    46ba:	00 97       	sbiw	r24, 0x00	; 0
    46bc:	69 f7       	brne	.-38     	; 0x4698 <LCD_CheckStatusSendCmnd4bit+0x5be>
    46be:	24 c0       	rjmp	.+72     	; 0x4708 <LCD_CheckStatusSendCmnd4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46c0:	68 a1       	ldd	r22, Y+32	; 0x20
    46c2:	79 a1       	ldd	r23, Y+33	; 0x21
    46c4:	8a a1       	ldd	r24, Y+34	; 0x22
    46c6:	9b a1       	ldd	r25, Y+35	; 0x23
    46c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46cc:	dc 01       	movw	r26, r24
    46ce:	cb 01       	movw	r24, r22
    46d0:	9f 8f       	std	Y+31, r25	; 0x1f
    46d2:	8e 8f       	std	Y+30, r24	; 0x1e
    46d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    46d6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    46d8:	9b 8f       	std	Y+27, r25	; 0x1b
    46da:	8a 8f       	std	Y+26, r24	; 0x1a
    46dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    46de:	9b 8d       	ldd	r25, Y+27	; 0x1b
    46e0:	01 97       	sbiw	r24, 0x01	; 1
    46e2:	f1 f7       	brne	.-4      	; 0x46e0 <LCD_CheckStatusSendCmnd4bit+0x606>
    46e4:	9b 8f       	std	Y+27, r25	; 0x1b
    46e6:	8a 8f       	std	Y+26, r24	; 0x1a
    46e8:	0f c0       	rjmp	.+30     	; 0x4708 <LCD_CheckStatusSendCmnd4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    46ea:	69 a5       	ldd	r22, Y+41	; 0x29
    46ec:	7a a5       	ldd	r23, Y+42	; 0x2a
    46ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    46f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    46f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46f6:	dc 01       	movw	r26, r24
    46f8:	cb 01       	movw	r24, r22
    46fa:	88 a7       	std	Y+40, r24	; 0x28
    46fc:	88 a5       	ldd	r24, Y+40	; 0x28
    46fe:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4700:	89 8d       	ldd	r24, Y+25	; 0x19
    4702:	8a 95       	dec	r24
    4704:	f1 f7       	brne	.-4      	; 0x4702 <LCD_CheckStatusSendCmnd4bit+0x628>
    4706:	89 8f       	std	Y+25, r24	; 0x19
                _delay_us(1);
                DIO__CheckStatusSetPinValue(LCD__UINT8_CONTROL_PORT, LCD__UINT8_E_PIN, DIO__UINT8_LOW);
    4708:	81 e0       	ldi	r24, 0x01	; 1
    470a:	62 e0       	ldi	r22, 0x02	; 2
    470c:	40 e0       	ldi	r20, 0x00	; 0
    470e:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO__CheckStatusSetPinValue>
    4712:	80 e0       	ldi	r24, 0x00	; 0
    4714:	90 e0       	ldi	r25, 0x00	; 0
    4716:	a0 e8       	ldi	r26, 0x80	; 128
    4718:	bf e3       	ldi	r27, 0x3F	; 63
    471a:	8d 8b       	std	Y+21, r24	; 0x15
    471c:	9e 8b       	std	Y+22, r25	; 0x16
    471e:	af 8b       	std	Y+23, r26	; 0x17
    4720:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4722:	6d 89       	ldd	r22, Y+21	; 0x15
    4724:	7e 89       	ldd	r23, Y+22	; 0x16
    4726:	8f 89       	ldd	r24, Y+23	; 0x17
    4728:	98 8d       	ldd	r25, Y+24	; 0x18
    472a:	2b ea       	ldi	r18, 0xAB	; 171
    472c:	3a ea       	ldi	r19, 0xAA	; 170
    472e:	4a e2       	ldi	r20, 0x2A	; 42
    4730:	50 e4       	ldi	r21, 0x40	; 64
    4732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4736:	dc 01       	movw	r26, r24
    4738:	cb 01       	movw	r24, r22
    473a:	89 8b       	std	Y+17, r24	; 0x11
    473c:	9a 8b       	std	Y+18, r25	; 0x12
    473e:	ab 8b       	std	Y+19, r26	; 0x13
    4740:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4742:	69 89       	ldd	r22, Y+17	; 0x11
    4744:	7a 89       	ldd	r23, Y+18	; 0x12
    4746:	8b 89       	ldd	r24, Y+19	; 0x13
    4748:	9c 89       	ldd	r25, Y+20	; 0x14
    474a:	20 e0       	ldi	r18, 0x00	; 0
    474c:	30 e0       	ldi	r19, 0x00	; 0
    474e:	40 e8       	ldi	r20, 0x80	; 128
    4750:	5f e3       	ldi	r21, 0x3F	; 63
    4752:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4756:	88 23       	and	r24, r24
    4758:	1c f4       	brge	.+6      	; 0x4760 <LCD_CheckStatusSendCmnd4bit+0x686>
		__ticks = 1;
    475a:	81 e0       	ldi	r24, 0x01	; 1
    475c:	88 8b       	std	Y+16, r24	; 0x10
    475e:	91 c0       	rjmp	.+290    	; 0x4882 <LCD_CheckStatusSendCmnd4bit+0x7a8>
	else if (__tmp > 255)
    4760:	69 89       	ldd	r22, Y+17	; 0x11
    4762:	7a 89       	ldd	r23, Y+18	; 0x12
    4764:	8b 89       	ldd	r24, Y+19	; 0x13
    4766:	9c 89       	ldd	r25, Y+20	; 0x14
    4768:	20 e0       	ldi	r18, 0x00	; 0
    476a:	30 e0       	ldi	r19, 0x00	; 0
    476c:	4f e7       	ldi	r20, 0x7F	; 127
    476e:	53 e4       	ldi	r21, 0x43	; 67
    4770:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4774:	18 16       	cp	r1, r24
    4776:	0c f0       	brlt	.+2      	; 0x477a <LCD_CheckStatusSendCmnd4bit+0x6a0>
    4778:	7b c0       	rjmp	.+246    	; 0x4870 <LCD_CheckStatusSendCmnd4bit+0x796>
	{
		_delay_ms(__us / 1000.0);
    477a:	6d 89       	ldd	r22, Y+21	; 0x15
    477c:	7e 89       	ldd	r23, Y+22	; 0x16
    477e:	8f 89       	ldd	r24, Y+23	; 0x17
    4780:	98 8d       	ldd	r25, Y+24	; 0x18
    4782:	20 e0       	ldi	r18, 0x00	; 0
    4784:	30 e0       	ldi	r19, 0x00	; 0
    4786:	4a e7       	ldi	r20, 0x7A	; 122
    4788:	54 e4       	ldi	r21, 0x44	; 68
    478a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    478e:	dc 01       	movw	r26, r24
    4790:	cb 01       	movw	r24, r22
    4792:	8c 87       	std	Y+12, r24	; 0x0c
    4794:	9d 87       	std	Y+13, r25	; 0x0d
    4796:	ae 87       	std	Y+14, r26	; 0x0e
    4798:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    479a:	6c 85       	ldd	r22, Y+12	; 0x0c
    479c:	7d 85       	ldd	r23, Y+13	; 0x0d
    479e:	8e 85       	ldd	r24, Y+14	; 0x0e
    47a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    47a2:	20 e0       	ldi	r18, 0x00	; 0
    47a4:	30 e0       	ldi	r19, 0x00	; 0
    47a6:	4a ef       	ldi	r20, 0xFA	; 250
    47a8:	54 e4       	ldi	r21, 0x44	; 68
    47aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ae:	dc 01       	movw	r26, r24
    47b0:	cb 01       	movw	r24, r22
    47b2:	88 87       	std	Y+8, r24	; 0x08
    47b4:	99 87       	std	Y+9, r25	; 0x09
    47b6:	aa 87       	std	Y+10, r26	; 0x0a
    47b8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    47ba:	68 85       	ldd	r22, Y+8	; 0x08
    47bc:	79 85       	ldd	r23, Y+9	; 0x09
    47be:	8a 85       	ldd	r24, Y+10	; 0x0a
    47c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    47c2:	20 e0       	ldi	r18, 0x00	; 0
    47c4:	30 e0       	ldi	r19, 0x00	; 0
    47c6:	40 e8       	ldi	r20, 0x80	; 128
    47c8:	5f e3       	ldi	r21, 0x3F	; 63
    47ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47ce:	88 23       	and	r24, r24
    47d0:	2c f4       	brge	.+10     	; 0x47dc <LCD_CheckStatusSendCmnd4bit+0x702>
		__ticks = 1;
    47d2:	81 e0       	ldi	r24, 0x01	; 1
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	9f 83       	std	Y+7, r25	; 0x07
    47d8:	8e 83       	std	Y+6, r24	; 0x06
    47da:	3f c0       	rjmp	.+126    	; 0x485a <LCD_CheckStatusSendCmnd4bit+0x780>
	else if (__tmp > 65535)
    47dc:	68 85       	ldd	r22, Y+8	; 0x08
    47de:	79 85       	ldd	r23, Y+9	; 0x09
    47e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    47e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    47e4:	20 e0       	ldi	r18, 0x00	; 0
    47e6:	3f ef       	ldi	r19, 0xFF	; 255
    47e8:	4f e7       	ldi	r20, 0x7F	; 127
    47ea:	57 e4       	ldi	r21, 0x47	; 71
    47ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47f0:	18 16       	cp	r1, r24
    47f2:	4c f5       	brge	.+82     	; 0x4846 <LCD_CheckStatusSendCmnd4bit+0x76c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    47f6:	7d 85       	ldd	r23, Y+13	; 0x0d
    47f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    47fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    47fc:	20 e0       	ldi	r18, 0x00	; 0
    47fe:	30 e0       	ldi	r19, 0x00	; 0
    4800:	40 e2       	ldi	r20, 0x20	; 32
    4802:	51 e4       	ldi	r21, 0x41	; 65
    4804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4808:	dc 01       	movw	r26, r24
    480a:	cb 01       	movw	r24, r22
    480c:	bc 01       	movw	r22, r24
    480e:	cd 01       	movw	r24, r26
    4810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4814:	dc 01       	movw	r26, r24
    4816:	cb 01       	movw	r24, r22
    4818:	9f 83       	std	Y+7, r25	; 0x07
    481a:	8e 83       	std	Y+6, r24	; 0x06
    481c:	0f c0       	rjmp	.+30     	; 0x483c <LCD_CheckStatusSendCmnd4bit+0x762>
    481e:	88 ec       	ldi	r24, 0xC8	; 200
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	9d 83       	std	Y+5, r25	; 0x05
    4824:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4826:	8c 81       	ldd	r24, Y+4	; 0x04
    4828:	9d 81       	ldd	r25, Y+5	; 0x05
    482a:	01 97       	sbiw	r24, 0x01	; 1
    482c:	f1 f7       	brne	.-4      	; 0x482a <LCD_CheckStatusSendCmnd4bit+0x750>
    482e:	9d 83       	std	Y+5, r25	; 0x05
    4830:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4832:	8e 81       	ldd	r24, Y+6	; 0x06
    4834:	9f 81       	ldd	r25, Y+7	; 0x07
    4836:	01 97       	sbiw	r24, 0x01	; 1
    4838:	9f 83       	std	Y+7, r25	; 0x07
    483a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    483c:	8e 81       	ldd	r24, Y+6	; 0x06
    483e:	9f 81       	ldd	r25, Y+7	; 0x07
    4840:	00 97       	sbiw	r24, 0x00	; 0
    4842:	69 f7       	brne	.-38     	; 0x481e <LCD_CheckStatusSendCmnd4bit+0x744>
    4844:	24 c0       	rjmp	.+72     	; 0x488e <LCD_CheckStatusSendCmnd4bit+0x7b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4846:	68 85       	ldd	r22, Y+8	; 0x08
    4848:	79 85       	ldd	r23, Y+9	; 0x09
    484a:	8a 85       	ldd	r24, Y+10	; 0x0a
    484c:	9b 85       	ldd	r25, Y+11	; 0x0b
    484e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4852:	dc 01       	movw	r26, r24
    4854:	cb 01       	movw	r24, r22
    4856:	9f 83       	std	Y+7, r25	; 0x07
    4858:	8e 83       	std	Y+6, r24	; 0x06
    485a:	8e 81       	ldd	r24, Y+6	; 0x06
    485c:	9f 81       	ldd	r25, Y+7	; 0x07
    485e:	9b 83       	std	Y+3, r25	; 0x03
    4860:	8a 83       	std	Y+2, r24	; 0x02
    4862:	8a 81       	ldd	r24, Y+2	; 0x02
    4864:	9b 81       	ldd	r25, Y+3	; 0x03
    4866:	01 97       	sbiw	r24, 0x01	; 1
    4868:	f1 f7       	brne	.-4      	; 0x4866 <LCD_CheckStatusSendCmnd4bit+0x78c>
    486a:	9b 83       	std	Y+3, r25	; 0x03
    486c:	8a 83       	std	Y+2, r24	; 0x02
    486e:	0f c0       	rjmp	.+30     	; 0x488e <LCD_CheckStatusSendCmnd4bit+0x7b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4870:	69 89       	ldd	r22, Y+17	; 0x11
    4872:	7a 89       	ldd	r23, Y+18	; 0x12
    4874:	8b 89       	ldd	r24, Y+19	; 0x13
    4876:	9c 89       	ldd	r25, Y+20	; 0x14
    4878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    487c:	dc 01       	movw	r26, r24
    487e:	cb 01       	movw	r24, r22
    4880:	88 8b       	std	Y+16, r24	; 0x10
    4882:	88 89       	ldd	r24, Y+16	; 0x10
    4884:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4886:	89 81       	ldd	r24, Y+1	; 0x01
    4888:	8a 95       	dec	r24
    488a:	f1 f7       	brne	.-4      	; 0x4888 <LCD_CheckStatusSendCmnd4bit+0x7ae>
    488c:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
                Local_CheckStausReturnValue = CHECK_FAIL;
        }
        return Local_CheckStausReturnValue;
    488e:	fe 01       	movw	r30, r28
    4890:	ef 59       	subi	r30, 0x9F	; 159
    4892:	ff 4f       	sbci	r31, 0xFF	; 255
    4894:	80 81       	ld	r24, Z
}
    4896:	ce 59       	subi	r28, 0x9E	; 158
    4898:	df 4f       	sbci	r29, 0xFF	; 255
    489a:	0f b6       	in	r0, 0x3f	; 63
    489c:	f8 94       	cli
    489e:	de bf       	out	0x3e, r29	; 62
    48a0:	0f be       	out	0x3f, r0	; 63
    48a2:	cd bf       	out	0x3d, r28	; 61
    48a4:	cf 91       	pop	r28
    48a6:	df 91       	pop	r29
    48a8:	1f 91       	pop	r17
    48aa:	0f 91       	pop	r16
    48ac:	08 95       	ret

000048ae <SWICU_VoidEnable>:
#include "SWICU_interface.h"
#include "SWICU_private.h"
#include "SWICU_config.h"

Void SWICU_VoidEnable(Void)
{
    48ae:	df 93       	push	r29
    48b0:	cf 93       	push	r28
    48b2:	cd b7       	in	r28, 0x3d	; 61
    48b4:	de b7       	in	r29, 0x3e	; 62



}
    48b6:	cf 91       	pop	r28
    48b8:	df 91       	pop	r29
    48ba:	08 95       	ret

000048bc <App_voidICUInterrupt>:
CheckStatus SWICU_CheckStatusGetOnPeriod(_uint32 *Copy_Uint32GetOnPeriod);
CheckStatus SWICU_CheckStatusGetOffPeriod(_uint32 *Copy_Uint32GetOffPeriod);


static Void App_voidICUInterrupt(Void)
{
    48bc:	df 93       	push	r29
    48be:	cf 93       	push	r28
    48c0:	00 d0       	rcall	.+0      	; 0x48c2 <App_voidICUInterrupt+0x6>
    48c2:	cd b7       	in	r28, 0x3d	; 61
    48c4:	de b7       	in	r29, 0x3e	; 62





}
    48c6:	0f 90       	pop	r0
    48c8:	0f 90       	pop	r0
    48ca:	cf 91       	pop	r28
    48cc:	df 91       	pop	r29
    48ce:	08 95       	ret

000048d0 <TMR_CheckSatusInit>:

static _float32 Local__Float32NumberOfOVF = 0.0;
static _uint8 Local__Uint8_PrloadNum = 0;

CheckStatus TMR_CheckSatusInit(_uint16 Copy__Uint16ActionTime)
{
    48d0:	df 93       	push	r29
    48d2:	cf 93       	push	r28
    48d4:	cd b7       	in	r28, 0x3d	; 61
    48d6:	de b7       	in	r29, 0x3e	; 62
    48d8:	2f 97       	sbiw	r28, 0x0f	; 15
    48da:	0f b6       	in	r0, 0x3f	; 63
    48dc:	f8 94       	cli
    48de:	de bf       	out	0x3e, r29	; 62
    48e0:	0f be       	out	0x3f, r0	; 63
    48e2:	cd bf       	out	0x3d, r28	; 61
    48e4:	9f 87       	std	Y+15, r25	; 0x0f
    48e6:	8e 87       	std	Y+14, r24	; 0x0e
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    48e8:	1d 86       	std	Y+13, r1	; 0x0d
        _uint32 Local__Uint32FreqTime = 0x00;
    48ea:	19 86       	std	Y+9, r1	; 0x09
    48ec:	1a 86       	std	Y+10, r1	; 0x0a
    48ee:	1b 86       	std	Y+11, r1	; 0x0b
    48f0:	1c 86       	std	Y+12, r1	; 0x0c
        _uint32 Local_Uint32TimeOVF = 0x00;
    48f2:	1d 82       	std	Y+5, r1	; 0x05
    48f4:	1e 82       	std	Y+6, r1	; 0x06
    48f6:	1f 82       	std	Y+7, r1	; 0x07
    48f8:	18 86       	std	Y+8, r1	; 0x08

        _float32 Local__Float32Fraction = 0.0;
    48fa:	80 e0       	ldi	r24, 0x00	; 0
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	a0 e0       	ldi	r26, 0x00	; 0
    4900:	b0 e0       	ldi	r27, 0x00	; 0
    4902:	89 83       	std	Y+1, r24	; 0x01
    4904:	9a 83       	std	Y+2, r25	; 0x02
    4906:	ab 83       	std	Y+3, r26	; 0x03
    4908:	bc 83       	std	Y+4, r27	; 0x04
                        }
                        TMR__UINT8_OCRO_REG = 99;
                        SET_BIT(TMR__UINT8_TIMSK_REG, TMR_TIMSK_OCIE0);
                        break;
                case TMR_IN_FAST_PWM_MODE:
                        SET_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_WGM00);
    490a:	a3 e5       	ldi	r26, 0x53	; 83
    490c:	b0 e0       	ldi	r27, 0x00	; 0
    490e:	e3 e5       	ldi	r30, 0x53	; 83
    4910:	f0 e0       	ldi	r31, 0x00	; 0
    4912:	80 81       	ld	r24, Z
    4914:	80 64       	ori	r24, 0x40	; 64
    4916:	8c 93       	st	X, r24
                        SET_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_WGM01);
    4918:	a3 e5       	ldi	r26, 0x53	; 83
    491a:	b0 e0       	ldi	r27, 0x00	; 0
    491c:	e3 e5       	ldi	r30, 0x53	; 83
    491e:	f0 e0       	ldi	r31, 0x00	; 0
    4920:	80 81       	ld	r24, Z
    4922:	88 60       	ori	r24, 0x08	; 8
    4924:	8c 93       	st	X, r24
                        case TMR_CMOMODE_OC0_DISCONNECTED:
                                CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_COM01);
                                CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_COM00);
                                break;
                        case TMR_CMOMODE_OC0_SET_FAST_PWM:
                                SET_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_COM01);
    4926:	a3 e5       	ldi	r26, 0x53	; 83
    4928:	b0 e0       	ldi	r27, 0x00	; 0
    492a:	e3 e5       	ldi	r30, 0x53	; 83
    492c:	f0 e0       	ldi	r31, 0x00	; 0
    492e:	80 81       	ld	r24, Z
    4930:	80 62       	ori	r24, 0x20	; 32
    4932:	8c 93       	st	X, r24
                                CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_COM00);
    4934:	a3 e5       	ldi	r26, 0x53	; 83
    4936:	b0 e0       	ldi	r27, 0x00	; 0
    4938:	e3 e5       	ldi	r30, 0x53	; 83
    493a:	f0 e0       	ldi	r31, 0x00	; 0
    493c:	80 81       	ld	r24, Z
    493e:	8f 7e       	andi	r24, 0xEF	; 239
    4940:	8c 93       	st	X, r24
                        CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_CS02);
                        CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_CS01);
                        SET_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_CS00);
                        break;
                case TMR_CLK_SOURCE_PRESCALER8:
                        CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_CS02);
    4942:	a3 e5       	ldi	r26, 0x53	; 83
    4944:	b0 e0       	ldi	r27, 0x00	; 0
    4946:	e3 e5       	ldi	r30, 0x53	; 83
    4948:	f0 e0       	ldi	r31, 0x00	; 0
    494a:	80 81       	ld	r24, Z
    494c:	8b 7f       	andi	r24, 0xFB	; 251
    494e:	8c 93       	st	X, r24
                        SET_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_CS01);
    4950:	a3 e5       	ldi	r26, 0x53	; 83
    4952:	b0 e0       	ldi	r27, 0x00	; 0
    4954:	e3 e5       	ldi	r30, 0x53	; 83
    4956:	f0 e0       	ldi	r31, 0x00	; 0
    4958:	80 81       	ld	r24, Z
    495a:	82 60       	ori	r24, 0x02	; 2
    495c:	8c 93       	st	X, r24
                        CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_CS00);
    495e:	a3 e5       	ldi	r26, 0x53	; 83
    4960:	b0 e0       	ldi	r27, 0x00	; 0
    4962:	e3 e5       	ldi	r30, 0x53	; 83
    4964:	f0 e0       	ldi	r31, 0x00	; 0
    4966:	80 81       	ld	r24, Z
    4968:	8e 7f       	andi	r24, 0xFE	; 254
    496a:	8c 93       	st	X, r24
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
        }
        return Local_CheckStatusReturnStatus;
    496c:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    496e:	2f 96       	adiw	r28, 0x0f	; 15
    4970:	0f b6       	in	r0, 0x3f	; 63
    4972:	f8 94       	cli
    4974:	de bf       	out	0x3e, r29	; 62
    4976:	0f be       	out	0x3f, r0	; 63
    4978:	cd bf       	out	0x3d, r28	; 61
    497a:	cf 91       	pop	r28
    497c:	df 91       	pop	r29
    497e:	08 95       	ret

00004980 <__vector_11>:
Void __vector_11(Void) __attribute__((signal));
Void __vector_11(Void)
{
    4980:	1f 92       	push	r1
    4982:	0f 92       	push	r0
    4984:	0f b6       	in	r0, 0x3f	; 63
    4986:	0f 92       	push	r0
    4988:	11 24       	eor	r1, r1
    498a:	2f 93       	push	r18
    498c:	3f 93       	push	r19
    498e:	4f 93       	push	r20
    4990:	5f 93       	push	r21
    4992:	6f 93       	push	r22
    4994:	7f 93       	push	r23
    4996:	8f 93       	push	r24
    4998:	9f 93       	push	r25
    499a:	af 93       	push	r26
    499c:	bf 93       	push	r27
    499e:	ef 93       	push	r30
    49a0:	ff 93       	push	r31
    49a2:	df 93       	push	r29
    49a4:	cf 93       	push	r28
    49a6:	cd b7       	in	r28, 0x3d	; 61
    49a8:	de b7       	in	r29, 0x3e	; 62
        static _uint16 Local__Uint16Counter = 0;

        Local__Uint16Counter++;
    49aa:	80 91 da 01 	lds	r24, 0x01DA
    49ae:	90 91 db 01 	lds	r25, 0x01DB
    49b2:	01 96       	adiw	r24, 0x01	; 1
    49b4:	90 93 db 01 	sts	0x01DB, r25
    49b8:	80 93 da 01 	sts	0x01DA, r24
        if (Local__Uint16Counter == ((_uint16)Local__Float32NumberOfOVF + 1))
    49bc:	80 91 d5 01 	lds	r24, 0x01D5
    49c0:	90 91 d6 01 	lds	r25, 0x01D6
    49c4:	a0 91 d7 01 	lds	r26, 0x01D7
    49c8:	b0 91 d8 01 	lds	r27, 0x01D8
    49cc:	bc 01       	movw	r22, r24
    49ce:	cd 01       	movw	r24, r26
    49d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d4:	dc 01       	movw	r26, r24
    49d6:	cb 01       	movw	r24, r22
    49d8:	9c 01       	movw	r18, r24
    49da:	2f 5f       	subi	r18, 0xFF	; 255
    49dc:	3f 4f       	sbci	r19, 0xFF	; 255
    49de:	80 91 da 01 	lds	r24, 0x01DA
    49e2:	90 91 db 01 	lds	r25, 0x01DB
    49e6:	28 17       	cp	r18, r24
    49e8:	39 07       	cpc	r19, r25
    49ea:	a1 f4       	brne	.+40     	; 0x4a14 <__vector_11+0x94>
        {
                TMR__UINT8_TCNT0_REG = Local__Uint8_PrloadNum;
    49ec:	e2 e5       	ldi	r30, 0x52	; 82
    49ee:	f0 e0       	ldi	r31, 0x00	; 0
    49f0:	80 91 d9 01 	lds	r24, 0x01D9
    49f4:	80 83       	st	Z, r24
                Local__Uint16Counter = 0;
    49f6:	10 92 db 01 	sts	0x01DB, r1
    49fa:	10 92 da 01 	sts	0x01DA, r1
                if (TMR_PTF_VoidTIMEROVF != NULL)
    49fe:	80 91 de 01 	lds	r24, 0x01DE
    4a02:	90 91 df 01 	lds	r25, 0x01DF
    4a06:	00 97       	sbiw	r24, 0x00	; 0
    4a08:	29 f0       	breq	.+10     	; 0x4a14 <__vector_11+0x94>
                {
                        TMR_PTF_VoidTIMEROVF();
    4a0a:	e0 91 de 01 	lds	r30, 0x01DE
    4a0e:	f0 91 df 01 	lds	r31, 0x01DF
    4a12:	09 95       	icall
        }
        else
        {
                /* DO NOTHING */
        }
}
    4a14:	cf 91       	pop	r28
    4a16:	df 91       	pop	r29
    4a18:	ff 91       	pop	r31
    4a1a:	ef 91       	pop	r30
    4a1c:	bf 91       	pop	r27
    4a1e:	af 91       	pop	r26
    4a20:	9f 91       	pop	r25
    4a22:	8f 91       	pop	r24
    4a24:	7f 91       	pop	r23
    4a26:	6f 91       	pop	r22
    4a28:	5f 91       	pop	r21
    4a2a:	4f 91       	pop	r20
    4a2c:	3f 91       	pop	r19
    4a2e:	2f 91       	pop	r18
    4a30:	0f 90       	pop	r0
    4a32:	0f be       	out	0x3f, r0	; 63
    4a34:	0f 90       	pop	r0
    4a36:	1f 90       	pop	r1
    4a38:	18 95       	reti

00004a3a <__vector_10>:
Void __vector_10(Void) __attribute__((signal));
Void __vector_10(Void)
{
    4a3a:	1f 92       	push	r1
    4a3c:	0f 92       	push	r0
    4a3e:	0f b6       	in	r0, 0x3f	; 63
    4a40:	0f 92       	push	r0
    4a42:	11 24       	eor	r1, r1
    4a44:	2f 93       	push	r18
    4a46:	3f 93       	push	r19
    4a48:	4f 93       	push	r20
    4a4a:	5f 93       	push	r21
    4a4c:	6f 93       	push	r22
    4a4e:	7f 93       	push	r23
    4a50:	8f 93       	push	r24
    4a52:	9f 93       	push	r25
    4a54:	af 93       	push	r26
    4a56:	bf 93       	push	r27
    4a58:	ef 93       	push	r30
    4a5a:	ff 93       	push	r31
    4a5c:	df 93       	push	r29
    4a5e:	cf 93       	push	r28
    4a60:	cd b7       	in	r28, 0x3d	; 61
    4a62:	de b7       	in	r29, 0x3e	; 62
        static _uint16 Local__Uint16Counter = 0;

        Local__Uint16Counter++;
    4a64:	80 91 dc 01 	lds	r24, 0x01DC
    4a68:	90 91 dd 01 	lds	r25, 0x01DD
    4a6c:	01 96       	adiw	r24, 0x01	; 1
    4a6e:	90 93 dd 01 	sts	0x01DD, r25
    4a72:	80 93 dc 01 	sts	0x01DC, r24
        if (Local__Uint16Counter == 10000)
    4a76:	80 91 dc 01 	lds	r24, 0x01DC
    4a7a:	90 91 dd 01 	lds	r25, 0x01DD
    4a7e:	27 e2       	ldi	r18, 0x27	; 39
    4a80:	80 31       	cpi	r24, 0x10	; 16
    4a82:	92 07       	cpc	r25, r18
    4a84:	79 f4       	brne	.+30     	; 0x4aa4 <__vector_10+0x6a>
        {
                Local__Uint16Counter = 0;
    4a86:	10 92 dd 01 	sts	0x01DD, r1
    4a8a:	10 92 dc 01 	sts	0x01DC, r1
                if (TMR_PTF_VoidTIMERCTC != NULL)
    4a8e:	80 91 e0 01 	lds	r24, 0x01E0
    4a92:	90 91 e1 01 	lds	r25, 0x01E1
    4a96:	00 97       	sbiw	r24, 0x00	; 0
    4a98:	29 f0       	breq	.+10     	; 0x4aa4 <__vector_10+0x6a>
                {
                        TMR_PTF_VoidTIMERCTC();
    4a9a:	e0 91 e0 01 	lds	r30, 0x01E0
    4a9e:	f0 91 e1 01 	lds	r31, 0x01E1
    4aa2:	09 95       	icall
        }
        else
        {
                /* DO NOTHING */
        }
}
    4aa4:	cf 91       	pop	r28
    4aa6:	df 91       	pop	r29
    4aa8:	ff 91       	pop	r31
    4aaa:	ef 91       	pop	r30
    4aac:	bf 91       	pop	r27
    4aae:	af 91       	pop	r26
    4ab0:	9f 91       	pop	r25
    4ab2:	8f 91       	pop	r24
    4ab4:	7f 91       	pop	r23
    4ab6:	6f 91       	pop	r22
    4ab8:	5f 91       	pop	r21
    4aba:	4f 91       	pop	r20
    4abc:	3f 91       	pop	r19
    4abe:	2f 91       	pop	r18
    4ac0:	0f 90       	pop	r0
    4ac2:	0f be       	out	0x3f, r0	; 63
    4ac4:	0f 90       	pop	r0
    4ac6:	1f 90       	pop	r1
    4ac8:	18 95       	reti

00004aca <TMR_CheckStatusTimer0OVFSetCallBack>:
CheckStatus TMR_CheckStatusTimer0OVFSetCallBack(Void (*Copy_PTF)(Void))
{
    4aca:	df 93       	push	r29
    4acc:	cf 93       	push	r28
    4ace:	00 d0       	rcall	.+0      	; 0x4ad0 <TMR_CheckStatusTimer0OVFSetCallBack+0x6>
    4ad0:	0f 92       	push	r0
    4ad2:	cd b7       	in	r28, 0x3d	; 61
    4ad4:	de b7       	in	r29, 0x3e	; 62
    4ad6:	9b 83       	std	Y+3, r25	; 0x03
    4ad8:	8a 83       	std	Y+2, r24	; 0x02
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    4ada:	19 82       	std	Y+1, r1	; 0x01
        if (Copy_PTF != NULL)
    4adc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ade:	9b 81       	ldd	r25, Y+3	; 0x03
    4ae0:	00 97       	sbiw	r24, 0x00	; 0
    4ae2:	39 f0       	breq	.+14     	; 0x4af2 <TMR_CheckStatusTimer0OVFSetCallBack+0x28>
        {
                TMR_PTF_VoidTIMEROVF = Copy_PTF;
    4ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ae6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ae8:	90 93 df 01 	sts	0x01DF, r25
    4aec:	80 93 de 01 	sts	0x01DE, r24
    4af0:	02 c0       	rjmp	.+4      	; 0x4af6 <TMR_CheckStatusTimer0OVFSetCallBack+0x2c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    4af2:	81 e0       	ldi	r24, 0x01	; 1
    4af4:	89 83       	std	Y+1, r24	; 0x01
        }
        return Local_CheckStatusReturnStatus;
    4af6:	89 81       	ldd	r24, Y+1	; 0x01
}
    4af8:	0f 90       	pop	r0
    4afa:	0f 90       	pop	r0
    4afc:	0f 90       	pop	r0
    4afe:	cf 91       	pop	r28
    4b00:	df 91       	pop	r29
    4b02:	08 95       	ret

00004b04 <TMR_CheckStatusTimer0CTCSetCallBack>:
CheckStatus TMR_CheckStatusTimer0CTCSetCallBack(Void (*Copy_PTF)(Void))
{
    4b04:	df 93       	push	r29
    4b06:	cf 93       	push	r28
    4b08:	00 d0       	rcall	.+0      	; 0x4b0a <TMR_CheckStatusTimer0CTCSetCallBack+0x6>
    4b0a:	0f 92       	push	r0
    4b0c:	cd b7       	in	r28, 0x3d	; 61
    4b0e:	de b7       	in	r29, 0x3e	; 62
    4b10:	9b 83       	std	Y+3, r25	; 0x03
    4b12:	8a 83       	std	Y+2, r24	; 0x02
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    4b14:	19 82       	std	Y+1, r1	; 0x01
        if (Copy_PTF != NULL)
    4b16:	8a 81       	ldd	r24, Y+2	; 0x02
    4b18:	9b 81       	ldd	r25, Y+3	; 0x03
    4b1a:	00 97       	sbiw	r24, 0x00	; 0
    4b1c:	39 f0       	breq	.+14     	; 0x4b2c <TMR_CheckStatusTimer0CTCSetCallBack+0x28>
        {
                TMR_PTF_VoidTIMERCTC = Copy_PTF;
    4b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b20:	9b 81       	ldd	r25, Y+3	; 0x03
    4b22:	90 93 e1 01 	sts	0x01E1, r25
    4b26:	80 93 e0 01 	sts	0x01E0, r24
    4b2a:	02 c0       	rjmp	.+4      	; 0x4b30 <TMR_CheckStatusTimer0CTCSetCallBack+0x2c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    4b2c:	81 e0       	ldi	r24, 0x01	; 1
    4b2e:	89 83       	std	Y+1, r24	; 0x01
        }
        return Local_CheckStatusReturnStatus;
    4b30:	89 81       	ldd	r24, Y+1	; 0x01
}
    4b32:	0f 90       	pop	r0
    4b34:	0f 90       	pop	r0
    4b36:	0f 90       	pop	r0
    4b38:	cf 91       	pop	r28
    4b3a:	df 91       	pop	r29
    4b3c:	08 95       	ret

00004b3e <TMR_CHANGE_OCRC0>:

Void TMR_CHANGE_OCRC0(_uint8 Copy__Uint8OCR0Value)
{
    4b3e:	df 93       	push	r29
    4b40:	cf 93       	push	r28
    4b42:	0f 92       	push	r0
    4b44:	cd b7       	in	r28, 0x3d	; 61
    4b46:	de b7       	in	r29, 0x3e	; 62
    4b48:	89 83       	std	Y+1, r24	; 0x01
TMR__UINT8_OCRO_REG = Copy__Uint8OCR0Value;
    4b4a:	ec e5       	ldi	r30, 0x5C	; 92
    4b4c:	f0 e0       	ldi	r31, 0x00	; 0
    4b4e:	89 81       	ldd	r24, Y+1	; 0x01
    4b50:	80 83       	st	Z, r24
}
    4b52:	0f 90       	pop	r0
    4b54:	cf 91       	pop	r28
    4b56:	df 91       	pop	r29
    4b58:	08 95       	ret

00004b5a <TMR_VoidTimer1INIT>:
Void TMR_VoidTimer1INIT(Void)
{
    4b5a:	df 93       	push	r29
    4b5c:	cf 93       	push	r28
    4b5e:	cd b7       	in	r28, 0x3d	; 61
    4b60:	de b7       	in	r29, 0x3e	; 62
///*  select  prescaler */
//CLEAR_BIT(TMR__UINT8_TCCR1B_REG,2);
//SET_BIT(TMR__UINT8_TCCR1B_REG,1);
//CLEAR_BIT(TMR__UINT8_TCCR1B_REG,0);
/* Select timer1 in normal mode  */
	CLEAR_BIT(TMR__UINT8_TCCR1A_REG,1);
    4b62:	af e4       	ldi	r26, 0x4F	; 79
    4b64:	b0 e0       	ldi	r27, 0x00	; 0
    4b66:	ef e4       	ldi	r30, 0x4F	; 79
    4b68:	f0 e0       	ldi	r31, 0x00	; 0
    4b6a:	80 81       	ld	r24, Z
    4b6c:	8d 7f       	andi	r24, 0xFD	; 253
    4b6e:	8c 93       	st	X, r24
	CLEAR_BIT(TMR__UINT8_TCCR1A_REG,0);
    4b70:	af e4       	ldi	r26, 0x4F	; 79
    4b72:	b0 e0       	ldi	r27, 0x00	; 0
    4b74:	ef e4       	ldi	r30, 0x4F	; 79
    4b76:	f0 e0       	ldi	r31, 0x00	; 0
    4b78:	80 81       	ld	r24, Z
    4b7a:	8e 7f       	andi	r24, 0xFE	; 254
    4b7c:	8c 93       	st	X, r24
	CLEAR_BIT(TMR__UINT8_TCCR1B_REG,4);
    4b7e:	ae e4       	ldi	r26, 0x4E	; 78
    4b80:	b0 e0       	ldi	r27, 0x00	; 0
    4b82:	ee e4       	ldi	r30, 0x4E	; 78
    4b84:	f0 e0       	ldi	r31, 0x00	; 0
    4b86:	80 81       	ld	r24, Z
    4b88:	8f 7e       	andi	r24, 0xEF	; 239
    4b8a:	8c 93       	st	X, r24
	CLEAR_BIT(TMR__UINT8_TCCR1B_REG,3);
    4b8c:	ae e4       	ldi	r26, 0x4E	; 78
    4b8e:	b0 e0       	ldi	r27, 0x00	; 0
    4b90:	ee e4       	ldi	r30, 0x4E	; 78
    4b92:	f0 e0       	ldi	r31, 0x00	; 0
    4b94:	80 81       	ld	r24, Z
    4b96:	87 7f       	andi	r24, 0xF7	; 247
    4b98:	8c 93       	st	X, r24
/* start timer value */
	CLEAR_BIT(TMR__UINT8_TCCR1B_REG,2);
    4b9a:	ae e4       	ldi	r26, 0x4E	; 78
    4b9c:	b0 e0       	ldi	r27, 0x00	; 0
    4b9e:	ee e4       	ldi	r30, 0x4E	; 78
    4ba0:	f0 e0       	ldi	r31, 0x00	; 0
    4ba2:	80 81       	ld	r24, Z
    4ba4:	8b 7f       	andi	r24, 0xFB	; 251
    4ba6:	8c 93       	st	X, r24
	SET_BIT(TMR__UINT8_TCCR1B_REG,1);
    4ba8:	ae e4       	ldi	r26, 0x4E	; 78
    4baa:	b0 e0       	ldi	r27, 0x00	; 0
    4bac:	ee e4       	ldi	r30, 0x4E	; 78
    4bae:	f0 e0       	ldi	r31, 0x00	; 0
    4bb0:	80 81       	ld	r24, Z
    4bb2:	82 60       	ori	r24, 0x02	; 2
    4bb4:	8c 93       	st	X, r24
	CLEAR_BIT(TMR__UINT8_TCCR1B_REG,0);
    4bb6:	ae e4       	ldi	r26, 0x4E	; 78
    4bb8:	b0 e0       	ldi	r27, 0x00	; 0
    4bba:	ee e4       	ldi	r30, 0x4E	; 78
    4bbc:	f0 e0       	ldi	r31, 0x00	; 0
    4bbe:	80 81       	ld	r24, Z
    4bc0:	8e 7f       	andi	r24, 0xFE	; 254
    4bc2:	8c 93       	st	X, r24
}
    4bc4:	cf 91       	pop	r28
    4bc6:	df 91       	pop	r29
    4bc8:	08 95       	ret

00004bca <TMR_VOidTimer1SEtCompareMatchValue>:



Void TMR_VOidTimer1SEtCompareMatchValue(_uint16 copy_value)
{
    4bca:	df 93       	push	r29
    4bcc:	cf 93       	push	r28
    4bce:	00 d0       	rcall	.+0      	; 0x4bd0 <TMR_VOidTimer1SEtCompareMatchValue+0x6>
    4bd0:	cd b7       	in	r28, 0x3d	; 61
    4bd2:	de b7       	in	r29, 0x3e	; 62
    4bd4:	9a 83       	std	Y+2, r25	; 0x02
    4bd6:	89 83       	std	Y+1, r24	; 0x01
	TMR__UINT16_OCR1AL_REG =copy_value;
    4bd8:	ea e4       	ldi	r30, 0x4A	; 74
    4bda:	f0 e0       	ldi	r31, 0x00	; 0
    4bdc:	89 81       	ldd	r24, Y+1	; 0x01
    4bde:	9a 81       	ldd	r25, Y+2	; 0x02
    4be0:	91 83       	std	Z+1, r25	; 0x01
    4be2:	80 83       	st	Z, r24
}
    4be4:	0f 90       	pop	r0
    4be6:	0f 90       	pop	r0
    4be8:	cf 91       	pop	r28
    4bea:	df 91       	pop	r29
    4bec:	08 95       	ret

00004bee <TMR_CheckStatusGetCounterTimer1Value>:
CheckStatus TMR_CheckStatusGetCounterTimer1Value(_uint16 * Copy_Uint16CounterValue)
{
    4bee:	df 93       	push	r29
    4bf0:	cf 93       	push	r28
    4bf2:	00 d0       	rcall	.+0      	; 0x4bf4 <TMR_CheckStatusGetCounterTimer1Value+0x6>
    4bf4:	0f 92       	push	r0
    4bf6:	cd b7       	in	r28, 0x3d	; 61
    4bf8:	de b7       	in	r29, 0x3e	; 62
    4bfa:	9b 83       	std	Y+3, r25	; 0x03
    4bfc:	8a 83       	std	Y+2, r24	; 0x02
   CheckStatus Local_CheckStatusReturnStatus =CHECK_SUCCESS;
    4bfe:	19 82       	std	Y+1, r1	; 0x01
if(Copy_Uint16CounterValue != NULL)
    4c00:	8a 81       	ldd	r24, Y+2	; 0x02
    4c02:	9b 81       	ldd	r25, Y+3	; 0x03
    4c04:	00 97       	sbiw	r24, 0x00	; 0
    4c06:	39 f0       	breq	.+14     	; 0x4c16 <TMR_CheckStatusGetCounterTimer1Value+0x28>
{
   Copy_Uint16CounterValue = TMR__UINT16_TCCNT1L_REG;
    4c08:	ec e4       	ldi	r30, 0x4C	; 76
    4c0a:	f0 e0       	ldi	r31, 0x00	; 0
    4c0c:	80 81       	ld	r24, Z
    4c0e:	91 81       	ldd	r25, Z+1	; 0x01
    4c10:	9b 83       	std	Y+3, r25	; 0x03
    4c12:	8a 83       	std	Y+2, r24	; 0x02
    4c14:	02 c0       	rjmp	.+4      	; 0x4c1a <TMR_CheckStatusGetCounterTimer1Value+0x2c>
}
else
{
		Local_CheckStatusReturnStatus = CHECK_FAIL;
    4c16:	81 e0       	ldi	r24, 0x01	; 1
    4c18:	89 83       	std	Y+1, r24	; 0x01
}
return Local_CheckStatusReturnStatus;
    4c1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    4c1c:	0f 90       	pop	r0
    4c1e:	0f 90       	pop	r0
    4c20:	0f 90       	pop	r0
    4c22:	cf 91       	pop	r28
    4c24:	df 91       	pop	r29
    4c26:	08 95       	ret

00004c28 <WDT_VoidWhatchDogEnable>:
/* MACRO FUN */
#define    WDT_SET_TWICEBIT(REG,BIT0,BIT1)     REG =  (1<<BIT0) | (1<<BIT1)
/* WATCH DOG*/ 

Void WDT_VoidWhatchDogEnable(Void)
{ 
    4c28:	df 93       	push	r29
    4c2a:	cf 93       	push	r28
    4c2c:	cd b7       	in	r28, 0x3d	; 61
    4c2e:	de b7       	in	r29, 0x3e	; 62
     SET_BIT(WDT_UINT8_WDTCR_REG,WDT_WDTCR_WDE);
    4c30:	a1 e4       	ldi	r26, 0x41	; 65
    4c32:	b0 e0       	ldi	r27, 0x00	; 0
    4c34:	e1 e4       	ldi	r30, 0x41	; 65
    4c36:	f0 e0       	ldi	r31, 0x00	; 0
    4c38:	80 81       	ld	r24, Z
    4c3a:	88 60       	ori	r24, 0x08	; 8
    4c3c:	8c 93       	st	X, r24
#if(WDT_UINT8_WDT_PRESCALER_TIMER == WDT_OSC_16K_CYCLE)
CLEAR_BIT(WDT_UINT8_WDTCR_REG,WDT_WDTCR_WDP0);
    4c3e:	a1 e4       	ldi	r26, 0x41	; 65
    4c40:	b0 e0       	ldi	r27, 0x00	; 0
    4c42:	e1 e4       	ldi	r30, 0x41	; 65
    4c44:	f0 e0       	ldi	r31, 0x00	; 0
    4c46:	80 81       	ld	r24, Z
    4c48:	8e 7f       	andi	r24, 0xFE	; 254
    4c4a:	8c 93       	st	X, r24
CLEAR_BIT(WDT_UINT8_WDTCR_REG,WDT_WDTCR_WDP1);
    4c4c:	a1 e4       	ldi	r26, 0x41	; 65
    4c4e:	b0 e0       	ldi	r27, 0x00	; 0
    4c50:	e1 e4       	ldi	r30, 0x41	; 65
    4c52:	f0 e0       	ldi	r31, 0x00	; 0
    4c54:	80 81       	ld	r24, Z
    4c56:	8d 7f       	andi	r24, 0xFD	; 253
    4c58:	8c 93       	st	X, r24
CLEAR_BIT(WDT_UINT8_WDTCR_REG,WDT_WDTCR_WDP2);
    4c5a:	a1 e4       	ldi	r26, 0x41	; 65
    4c5c:	b0 e0       	ldi	r27, 0x00	; 0
    4c5e:	e1 e4       	ldi	r30, 0x41	; 65
    4c60:	f0 e0       	ldi	r31, 0x00	; 0
    4c62:	80 81       	ld	r24, Z
    4c64:	8b 7f       	andi	r24, 0xFB	; 251
    4c66:	8c 93       	st	X, r24
SET_BIT(WDT_UINT8_WDTCR_REG,WDT_WDTCR_WDP0);
SET_BIT(WDT_UINT8_WDTCR_REG,WDT_WDTCR_WDP1);
SET_BIT(WDT_UINT8_WDTCR_REG,WDT_WDTCR_WDP2);
#endif 
     
}
    4c68:	cf 91       	pop	r28
    4c6a:	df 91       	pop	r29
    4c6c:	08 95       	ret

00004c6e <WDT_VoidWhatchDogDisable>:
Void WDT_VoidWhatchDogDisable(Void)
{
    4c6e:	df 93       	push	r29
    4c70:	cf 93       	push	r28
    4c72:	cd b7       	in	r28, 0x3d	; 61
    4c74:	de b7       	in	r29, 0x3e	; 62
   WDT_SET_TWICEBIT(WDT_UINT8_WDTCR_REG,WDT_WDTCR_WDTOE,WDT_WDTCR_WDE);    
    4c76:	e1 e4       	ldi	r30, 0x41	; 65
    4c78:	f0 e0       	ldi	r31, 0x00	; 0
    4c7a:	88 e1       	ldi	r24, 0x18	; 24
    4c7c:	80 83       	st	Z, r24
   WDT_UINT8_WDTCR_REG = 0x00;     
    4c7e:	e1 e4       	ldi	r30, 0x41	; 65
    4c80:	f0 e0       	ldi	r31, 0x00	; 0
    4c82:	10 82       	st	Z, r1
    4c84:	cf 91       	pop	r28
    4c86:	df 91       	pop	r29
    4c88:	08 95       	ret

00004c8a <main>:
#include"LCD_interface.h"

Void App_voidICUInterrupt(Void);
_uint16 APP_uint16OnPeriod,APP_uint16OffPeriod;
int main ()
{
    4c8a:	df 93       	push	r29
    4c8c:	cf 93       	push	r28
    4c8e:	00 d0       	rcall	.+0      	; 0x4c90 <main+0x6>
    4c90:	00 d0       	rcall	.+0      	; 0x4c92 <main+0x8>
    4c92:	0f 92       	push	r0
    4c94:	cd b7       	in	r28, 0x3d	; 61
    4c96:	de b7       	in	r29, 0x3e	; 62
_uint32 Local_uint32TotalPeriod;
_uint8  Local_uint8DutyCycle;
 /*Dio init */
DIO_VoidInit();
    4c98:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_VoidInit>
 /* Activate global interrupt*/
GIE_VoidEnable();
    4c9c:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <GIE_VoidEnable>
/*set call back function*/
EXTI_CheckStatusSetCallBackFunc(&App_voidICUInterrupt,INT0);
    4ca0:	8c eb       	ldi	r24, 0xBC	; 188
    4ca2:	96 e2       	ldi	r25, 0x26	; 38
    4ca4:	60 e0       	ldi	r22, 0x00	; 0
    4ca6:	0e 94 8f 0c 	call	0x191e	; 0x191e <EXTI_CheckStatusSetCallBackFunc>
/* Activate external interrupt */
EXIT_CheckStatusExtIntEnable(INT0,EXIT_UINT8_RIASING_EDGE);
    4caa:	80 e0       	ldi	r24, 0x00	; 0
    4cac:	62 e0       	ldi	r22, 0x02	; 2
    4cae:	0e 94 b7 0c 	call	0x196e	; 0x196e <EXIT_CheckStatusExtIntEnable>
/* turn timer one*/
TMR_VoidTimer1INIT();
    4cb2:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <TMR_VoidTimer1INIT>
/*set Duty Cycle of PWM*/
TMR_VOidTimer1SEtCompareMatchValue(127);
    4cb6:	8f e7       	ldi	r24, 0x7F	; 127
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	0e 94 e5 25 	call	0x4bca	; 0x4bca <TMR_VOidTimer1SEtCompareMatchValue>
/* start timer 0*/
TMR_CheckSatusInit(0);
    4cbe:	80 e0       	ldi	r24, 0x00	; 0
    4cc0:	90 e0       	ldi	r25, 0x00	; 0
    4cc2:	0e 94 68 24 	call	0x48d0	; 0x48d0 <TMR_CheckSatusInit>

/* LCD init */
LCD_VoidInit4bit();
    4cc6:	0e 94 b1 19 	call	0x3362	; 0x3362 <LCD_VoidInit4bit>

while(TRUE)
{
	Local_uint32TotalPeriod = APP_uint16OnPeriod + APP_uint16OffPeriod;
    4cca:	20 91 e7 01 	lds	r18, 0x01E7
    4cce:	30 91 e8 01 	lds	r19, 0x01E8
    4cd2:	80 91 e5 01 	lds	r24, 0x01E5
    4cd6:	90 91 e6 01 	lds	r25, 0x01E6
    4cda:	82 0f       	add	r24, r18
    4cdc:	93 1f       	adc	r25, r19
    4cde:	cc 01       	movw	r24, r24
    4ce0:	a0 e0       	ldi	r26, 0x00	; 0
    4ce2:	b0 e0       	ldi	r27, 0x00	; 0
    4ce4:	8a 83       	std	Y+2, r24	; 0x02
    4ce6:	9b 83       	std	Y+3, r25	; 0x03
    4ce8:	ac 83       	std	Y+4, r26	; 0x04
    4cea:	bd 83       	std	Y+5, r27	; 0x05
	Local_uint8DutyCycle =  (_uint8)((APP_uint16OnPeriod*100UL)/(Local_uint32TotalPeriod));
    4cec:	80 91 e7 01 	lds	r24, 0x01E7
    4cf0:	90 91 e8 01 	lds	r25, 0x01E8
    4cf4:	cc 01       	movw	r24, r24
    4cf6:	a0 e0       	ldi	r26, 0x00	; 0
    4cf8:	b0 e0       	ldi	r27, 0x00	; 0
    4cfa:	24 e6       	ldi	r18, 0x64	; 100
    4cfc:	30 e0       	ldi	r19, 0x00	; 0
    4cfe:	40 e0       	ldi	r20, 0x00	; 0
    4d00:	50 e0       	ldi	r21, 0x00	; 0
    4d02:	bc 01       	movw	r22, r24
    4d04:	cd 01       	movw	r24, r26
    4d06:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__mulsi3>
    4d0a:	dc 01       	movw	r26, r24
    4d0c:	cb 01       	movw	r24, r22
    4d0e:	2a 81       	ldd	r18, Y+2	; 0x02
    4d10:	3b 81       	ldd	r19, Y+3	; 0x03
    4d12:	4c 81       	ldd	r20, Y+4	; 0x04
    4d14:	5d 81       	ldd	r21, Y+5	; 0x05
    4d16:	bc 01       	movw	r22, r24
    4d18:	cd 01       	movw	r24, r26
    4d1a:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <__udivmodsi4>
    4d1e:	da 01       	movw	r26, r20
    4d20:	c9 01       	movw	r24, r18
    4d22:	89 83       	std	Y+1, r24	; 0x01
	LCD_CheckStatusGoToXY(LCD__UINT8_LINE1,LCD__UINT8_LOCATION_NUMBER0);
    4d24:	80 e0       	ldi	r24, 0x00	; 0
    4d26:	60 e0       	ldi	r22, 0x00	; 0
    4d28:	0e 94 8b 14 	call	0x2916	; 0x2916 <LCD_CheckStatusGoToXY>
	LCD_CheckStatusWriteString("Duty= ");
    4d2c:	80 e6       	ldi	r24, 0x60	; 96
    4d2e:	90 e0       	ldi	r25, 0x00	; 0
    4d30:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_CheckStatusWriteString>
	LCD_CheckStatusSendNumber(Local_uint8DutyCycle);
    4d34:	89 81       	ldd	r24, Y+1	; 0x01
    4d36:	88 2f       	mov	r24, r24
    4d38:	90 e0       	ldi	r25, 0x00	; 0
    4d3a:	a0 e0       	ldi	r26, 0x00	; 0
    4d3c:	b0 e0       	ldi	r27, 0x00	; 0
    4d3e:	bc 01       	movw	r22, r24
    4d40:	cd 01       	movw	r24, r26
    4d42:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <LCD_CheckStatusSendNumber>
	LCD_CheckStatusWriteString("%");
    4d46:	87 e6       	ldi	r24, 0x67	; 103
    4d48:	90 e0       	ldi	r25, 0x00	; 0
    4d4a:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_CheckStatusWriteString>
	LCD_CheckStatusGoToXY(LCD__UINT8_LINE2,LCD__UINT8_LOCATION_NUMBER0);
    4d4e:	81 e0       	ldi	r24, 0x01	; 1
    4d50:	60 e0       	ldi	r22, 0x00	; 0
    4d52:	0e 94 8b 14 	call	0x2916	; 0x2916 <LCD_CheckStatusGoToXY>
	LCD_CheckStatusWriteString("TP= ");
    4d56:	89 e6       	ldi	r24, 0x69	; 105
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_CheckStatusWriteString>
	LCD_CheckStatusSendNumber(Local_uint32TotalPeriod);
    4d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d60:	9b 81       	ldd	r25, Y+3	; 0x03
    4d62:	ac 81       	ldd	r26, Y+4	; 0x04
    4d64:	bd 81       	ldd	r27, Y+5	; 0x05
    4d66:	bc 01       	movw	r22, r24
    4d68:	cd 01       	movw	r24, r26
    4d6a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <LCD_CheckStatusSendNumber>
	LCD_CheckStatusWriteString("uSec");
    4d6e:	8e e6       	ldi	r24, 0x6E	; 110
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_CheckStatusWriteString>
    4d76:	a9 cf       	rjmp	.-174    	; 0x4cca <main+0x40>

00004d78 <App_voidICUInterrupt>:
}

return 0 ;
}
Void App_voidICUInterrupt(Void)
{
    4d78:	df 93       	push	r29
    4d7a:	cf 93       	push	r28
    4d7c:	00 d0       	rcall	.+0      	; 0x4d7e <App_voidICUInterrupt+0x6>
    4d7e:	cd b7       	in	r28, 0x3d	; 61
    4d80:	de b7       	in	r29, 0x3e	; 62
    _uint16 Local_Uint16TimerValue;
    static _uint8 Local_Uint8Flag = 0 ;
    static _uint16 Local_Uint16TempTimerValue = 0 ;
    /*Read Timer*/
    TMR_CheckStatusGetCounterTimer1Value(&Local_Uint16TimerValue);
    4d82:	ce 01       	movw	r24, r28
    4d84:	01 96       	adiw	r24, 0x01	; 1
    4d86:	0e 94 f7 25 	call	0x4bee	; 0x4bee <TMR_CheckStatusGetCounterTimer1Value>

    if(Local_Uint8Flag == 0)/* Raising edge*/
    4d8a:	80 91 e4 01 	lds	r24, 0x01E4
    4d8e:	88 23       	and	r24, r24
    4d90:	b1 f4       	brne	.+44     	; 0x4dbe <App_voidICUInterrupt+0x46>
    {
    	APP_uint16OffPeriod = Local_Uint16TimerValue - Local_Uint16TempTimerValue;
    4d92:	29 81       	ldd	r18, Y+1	; 0x01
    4d94:	3a 81       	ldd	r19, Y+2	; 0x02
    4d96:	80 91 e2 01 	lds	r24, 0x01E2
    4d9a:	90 91 e3 01 	lds	r25, 0x01E3
    4d9e:	a9 01       	movw	r20, r18
    4da0:	48 1b       	sub	r20, r24
    4da2:	59 0b       	sbc	r21, r25
    4da4:	ca 01       	movw	r24, r20
    4da6:	90 93 e6 01 	sts	0x01E6, r25
    4daa:	80 93 e5 01 	sts	0x01E5, r24
    	/* Change mode sense  Control into Falling edge*/
    	EXIT_CheckStatusExtIntEnable(INT0,EXIT_UINT8_FALLING_EDGE);
    4dae:	80 e0       	ldi	r24, 0x00	; 0
    4db0:	61 e0       	ldi	r22, 0x01	; 1
    4db2:	0e 94 b7 0c 	call	0x196e	; 0x196e <EXIT_CheckStatusExtIntEnable>
    	/* change flag into falling edge */
    	Local_Uint8Flag = 1;
    4db6:	81 e0       	ldi	r24, 0x01	; 1
    4db8:	80 93 e4 01 	sts	0x01E4, r24
    4dbc:	12 c0       	rjmp	.+36     	; 0x4de2 <App_voidICUInterrupt+0x6a>
    }
    else /* falling edge*/
    {
    	APP_uint16OnPeriod = Local_Uint16TimerValue - Local_Uint16TempTimerValue;
    4dbe:	89 81       	ldd	r24, Y+1	; 0x01
    4dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    4dc2:	20 91 e2 01 	lds	r18, 0x01E2
    4dc6:	30 91 e3 01 	lds	r19, 0x01E3
    4dca:	82 1b       	sub	r24, r18
    4dcc:	93 0b       	sbc	r25, r19
    4dce:	90 93 e8 01 	sts	0x01E8, r25
    4dd2:	80 93 e7 01 	sts	0x01E7, r24
    	/* Change mode sense  Control into Falling edge*/
    	EXIT_CheckStatusExtIntEnable(INT0,EXIT_UINT8_RIASING_EDGE);
    4dd6:	80 e0       	ldi	r24, 0x00	; 0
    4dd8:	62 e0       	ldi	r22, 0x02	; 2
    4dda:	0e 94 b7 0c 	call	0x196e	; 0x196e <EXIT_CheckStatusExtIntEnable>
    	/* change flag into raising edge */
      	Local_Uint8Flag = 0;
    4dde:	10 92 e4 01 	sts	0x01E4, r1
    }
    Local_Uint16TempTimerValue = Local_Uint16TimerValue;
    4de2:	89 81       	ldd	r24, Y+1	; 0x01
    4de4:	9a 81       	ldd	r25, Y+2	; 0x02
    4de6:	90 93 e3 01 	sts	0x01E3, r25
    4dea:	80 93 e2 01 	sts	0x01E2, r24

}
    4dee:	0f 90       	pop	r0
    4df0:	0f 90       	pop	r0
    4df2:	cf 91       	pop	r28
    4df4:	df 91       	pop	r29
    4df6:	08 95       	ret

00004df8 <__mulsi3>:
    4df8:	62 9f       	mul	r22, r18
    4dfa:	d0 01       	movw	r26, r0
    4dfc:	73 9f       	mul	r23, r19
    4dfe:	f0 01       	movw	r30, r0
    4e00:	82 9f       	mul	r24, r18
    4e02:	e0 0d       	add	r30, r0
    4e04:	f1 1d       	adc	r31, r1
    4e06:	64 9f       	mul	r22, r20
    4e08:	e0 0d       	add	r30, r0
    4e0a:	f1 1d       	adc	r31, r1
    4e0c:	92 9f       	mul	r25, r18
    4e0e:	f0 0d       	add	r31, r0
    4e10:	83 9f       	mul	r24, r19
    4e12:	f0 0d       	add	r31, r0
    4e14:	74 9f       	mul	r23, r20
    4e16:	f0 0d       	add	r31, r0
    4e18:	65 9f       	mul	r22, r21
    4e1a:	f0 0d       	add	r31, r0
    4e1c:	99 27       	eor	r25, r25
    4e1e:	72 9f       	mul	r23, r18
    4e20:	b0 0d       	add	r27, r0
    4e22:	e1 1d       	adc	r30, r1
    4e24:	f9 1f       	adc	r31, r25
    4e26:	63 9f       	mul	r22, r19
    4e28:	b0 0d       	add	r27, r0
    4e2a:	e1 1d       	adc	r30, r1
    4e2c:	f9 1f       	adc	r31, r25
    4e2e:	bd 01       	movw	r22, r26
    4e30:	cf 01       	movw	r24, r30
    4e32:	11 24       	eor	r1, r1
    4e34:	08 95       	ret

00004e36 <__udivmodsi4>:
    4e36:	a1 e2       	ldi	r26, 0x21	; 33
    4e38:	1a 2e       	mov	r1, r26
    4e3a:	aa 1b       	sub	r26, r26
    4e3c:	bb 1b       	sub	r27, r27
    4e3e:	fd 01       	movw	r30, r26
    4e40:	0d c0       	rjmp	.+26     	; 0x4e5c <__udivmodsi4_ep>

00004e42 <__udivmodsi4_loop>:
    4e42:	aa 1f       	adc	r26, r26
    4e44:	bb 1f       	adc	r27, r27
    4e46:	ee 1f       	adc	r30, r30
    4e48:	ff 1f       	adc	r31, r31
    4e4a:	a2 17       	cp	r26, r18
    4e4c:	b3 07       	cpc	r27, r19
    4e4e:	e4 07       	cpc	r30, r20
    4e50:	f5 07       	cpc	r31, r21
    4e52:	20 f0       	brcs	.+8      	; 0x4e5c <__udivmodsi4_ep>
    4e54:	a2 1b       	sub	r26, r18
    4e56:	b3 0b       	sbc	r27, r19
    4e58:	e4 0b       	sbc	r30, r20
    4e5a:	f5 0b       	sbc	r31, r21

00004e5c <__udivmodsi4_ep>:
    4e5c:	66 1f       	adc	r22, r22
    4e5e:	77 1f       	adc	r23, r23
    4e60:	88 1f       	adc	r24, r24
    4e62:	99 1f       	adc	r25, r25
    4e64:	1a 94       	dec	r1
    4e66:	69 f7       	brne	.-38     	; 0x4e42 <__udivmodsi4_loop>
    4e68:	60 95       	com	r22
    4e6a:	70 95       	com	r23
    4e6c:	80 95       	com	r24
    4e6e:	90 95       	com	r25
    4e70:	9b 01       	movw	r18, r22
    4e72:	ac 01       	movw	r20, r24
    4e74:	bd 01       	movw	r22, r26
    4e76:	cf 01       	movw	r24, r30
    4e78:	08 95       	ret

00004e7a <__prologue_saves__>:
    4e7a:	2f 92       	push	r2
    4e7c:	3f 92       	push	r3
    4e7e:	4f 92       	push	r4
    4e80:	5f 92       	push	r5
    4e82:	6f 92       	push	r6
    4e84:	7f 92       	push	r7
    4e86:	8f 92       	push	r8
    4e88:	9f 92       	push	r9
    4e8a:	af 92       	push	r10
    4e8c:	bf 92       	push	r11
    4e8e:	cf 92       	push	r12
    4e90:	df 92       	push	r13
    4e92:	ef 92       	push	r14
    4e94:	ff 92       	push	r15
    4e96:	0f 93       	push	r16
    4e98:	1f 93       	push	r17
    4e9a:	cf 93       	push	r28
    4e9c:	df 93       	push	r29
    4e9e:	cd b7       	in	r28, 0x3d	; 61
    4ea0:	de b7       	in	r29, 0x3e	; 62
    4ea2:	ca 1b       	sub	r28, r26
    4ea4:	db 0b       	sbc	r29, r27
    4ea6:	0f b6       	in	r0, 0x3f	; 63
    4ea8:	f8 94       	cli
    4eaa:	de bf       	out	0x3e, r29	; 62
    4eac:	0f be       	out	0x3f, r0	; 63
    4eae:	cd bf       	out	0x3d, r28	; 61
    4eb0:	09 94       	ijmp

00004eb2 <__epilogue_restores__>:
    4eb2:	2a 88       	ldd	r2, Y+18	; 0x12
    4eb4:	39 88       	ldd	r3, Y+17	; 0x11
    4eb6:	48 88       	ldd	r4, Y+16	; 0x10
    4eb8:	5f 84       	ldd	r5, Y+15	; 0x0f
    4eba:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ebc:	7d 84       	ldd	r7, Y+13	; 0x0d
    4ebe:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ec0:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ec2:	aa 84       	ldd	r10, Y+10	; 0x0a
    4ec4:	b9 84       	ldd	r11, Y+9	; 0x09
    4ec6:	c8 84       	ldd	r12, Y+8	; 0x08
    4ec8:	df 80       	ldd	r13, Y+7	; 0x07
    4eca:	ee 80       	ldd	r14, Y+6	; 0x06
    4ecc:	fd 80       	ldd	r15, Y+5	; 0x05
    4ece:	0c 81       	ldd	r16, Y+4	; 0x04
    4ed0:	1b 81       	ldd	r17, Y+3	; 0x03
    4ed2:	aa 81       	ldd	r26, Y+2	; 0x02
    4ed4:	b9 81       	ldd	r27, Y+1	; 0x01
    4ed6:	ce 0f       	add	r28, r30
    4ed8:	d1 1d       	adc	r29, r1
    4eda:	0f b6       	in	r0, 0x3f	; 63
    4edc:	f8 94       	cli
    4ede:	de bf       	out	0x3e, r29	; 62
    4ee0:	0f be       	out	0x3f, r0	; 63
    4ee2:	cd bf       	out	0x3d, r28	; 61
    4ee4:	ed 01       	movw	r28, r26
    4ee6:	08 95       	ret

00004ee8 <_exit>:
    4ee8:	f8 94       	cli

00004eea <__stop_program>:
    4eea:	ff cf       	rjmp	.-2      	; 0x4eea <__stop_program>
