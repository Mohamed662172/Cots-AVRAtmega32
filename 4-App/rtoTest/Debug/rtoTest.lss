
rtoTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00001e9c  00001f30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800168  00800168  00002038  2**0
                  ALLOC
  3 .stab         000014f4  00000000  00000000  00002038  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009f6  00000000  00000000  0000352c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00003f22  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00004082  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  00004238  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  00006145  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  00007217  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008248  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  000083c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  000086ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008fa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__vector_10>
      2c:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 38       	cpi	r26, 0x8A	; 138
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec e9       	ldi	r30, 0x9C	; 156
      78:	fe e1       	ldi	r31, 0x1E	; 30
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <main>
      8a:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 41 0f 	jmp	0x1e82	; 0x1e82 <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <DIO_VoidInit>:

/* HAL */

/* Defination Of Function  */
Void DIO_VoidInit(Void)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62

        /* intial direction */

        DDRA__UINT8_REG = CONC(DIO__UINT8_PA7_INITIAL_DIRECTION, DIO__UINT8_PA6_INITIAL_DIRECTION, DIO__UINT8_PA5_INITIAL_DIRECTION, DIO__UINT8_PA4_INITIAL_DIRECTION, DIO__UINT8_PA3_INITIAL_DIRECTION, DIO__UINT8_PA2_INITIAL_DIRECTION, DIO__UINT8_PA1_INITIAL_DIRECTION, DIO__UINT8_PA0_INITIAL_DIRECTION);
     d76:	ea e3       	ldi	r30, 0x3A	; 58
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	8f e0       	ldi	r24, 0x0F	; 15
     d7c:	80 83       	st	Z, r24
        DDRB__UINT8_REG = CONC(DIO__UINT8_PB7_INITIAL_DIRECTION, DIO__UINT8_PB6_INITIAL_DIRECTION, DIO__UINT8_PB5_INITIAL_DIRECTION, DIO__UINT8_PB4_INITIAL_DIRECTION, DIO__UINT8_PB3_INITIAL_DIRECTION, DIO__UINT8_PB2_INITIAL_DIRECTION, DIO__UINT8_PB1_INITIAL_DIRECTION, DIO__UINT8_PB0_INITIAL_DIRECTION);
     d7e:	e7 e3       	ldi	r30, 0x37	; 55
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	10 82       	st	Z, r1
        DDRC__UINT8_REG = CONC(DIO__UINT8_PC7_INITIAL_DIRECTION, DIO__UINT8_PC6_INITIAL_DIRECTION, DIO__UINT8_PC5_INITIAL_DIRECTION, DIO__UINT8_PC4_INITIAL_DIRECTION, DIO__UINT8_PC3_INITIAL_DIRECTION, DIO__UINT8_PC2_INITIAL_DIRECTION, DIO__UINT8_PC1_INITIAL_DIRECTION, DIO__UINT8_PC0_INITIAL_DIRECTION);
     d84:	e4 e3       	ldi	r30, 0x34	; 52
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	10 82       	st	Z, r1
        DDRD__UINT8_REG = CONC(DIO__UINT8_PD7_INITIAL_DIRECTION, DIO__UINT8_PD6_INITIAL_DIRECTION, DIO__UINT8_PD5_INITIAL_DIRECTION, DIO__UINT8_PD4_INITIAL_DIRECTION, DIO__UINT8_PD3_INITIAL_DIRECTION, DIO__UINT8_PD2_INITIAL_DIRECTION, DIO__UINT8_PD1_INITIAL_DIRECTION, DIO__UINT8_PD0_INITIAL_DIRECTION);
     d8a:	e1 e3       	ldi	r30, 0x31	; 49
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	10 82       	st	Z, r1

        /* initial Value */

        PORTA__UINT8_REG = CONC(DIO__UINT8_PA7_INITIAL_VALUE, DIO__UINT8_PA6_INITIAL_VALUE, DIO__UINT8_PA5_INITIAL_VALUE, DIO__UINT8_PA4_INITIAL_VALUE, DIO__UINT8_PA3_INITIAL_VALUE, DIO__UINT8_PA2_INITIAL_VALUE, DIO__UINT8_PA1_INITIAL_VALUE, DIO__UINT8_PA0_INITIAL_VALUE);
     d90:	eb e3       	ldi	r30, 0x3B	; 59
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	10 82       	st	Z, r1
        PORTB__UINT8_REG = CONC(DIO__UINT8_PB7_INITIAL_VALUE, DIO__UINT8_PB6_INITIAL_VALUE, DIO__UINT8_PB5_INITIAL_VALUE, DIO__UINT8_PB4_INITIAL_VALUE, DIO__UINT8_PB3_INITIAL_VALUE, DIO__UINT8_PB2_INITIAL_VALUE, DIO__UINT8_PB1_INITIAL_VALUE, DIO__UINT8_PB0_INITIAL_VALUE);
     d96:	e8 e3       	ldi	r30, 0x38	; 56
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	10 82       	st	Z, r1
        PORTC__UINT8_REG = CONC(DIO__UINT8_PC7_INITIAL_VALUE, DIO__UINT8_PC6_INITIAL_VALUE, DIO__UINT8_PC5_INITIAL_VALUE, DIO__UINT8_PC4_INITIAL_VALUE, DIO__UINT8_PC3_INITIAL_VALUE, DIO__UINT8_PC2_INITIAL_VALUE, DIO__UINT8_PC1_INITIAL_VALUE, DIO__UINT8_PC0_INITIAL_VALUE);
     d9c:	e5 e3       	ldi	r30, 0x35	; 53
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	10 82       	st	Z, r1
        PORTD__UINT8_REG = CONC(DIO__UINT8_PD7_INITIAL_VALUE, DIO__UINT8_PD6_INITIAL_VALUE, DIO__UINT8_PD5_INITIAL_VALUE, DIO__UINT8_PD4_INITIAL_VALUE, DIO__UINT8_PD3_INITIAL_VALUE, DIO__UINT8_PD2_INITIAL_VALUE, DIO__UINT8_PD1_INITIAL_VALUE, DIO__UINT8_PD0_INITIAL_VALUE);
     da2:	e2 e3       	ldi	r30, 0x32	; 50
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	10 82       	st	Z, r1
}
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <DIO__CheckStatusSetPinDirection>:

CheckStatus DIO__CheckStatusSetPinDirection(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 Copy__uint8PinDirection)
{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	2f 97       	sbiw	r28, 0x0f	; 15
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	8a 83       	std	Y+2, r24	; 0x02
     dc4:	6b 83       	std	Y+3, r22	; 0x03
     dc6:	4c 83       	std	Y+4, r20	; 0x04
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
     dc8:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pin  Direction
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && ((Copy__uint8PinDirection == DIO__UINT8_OUTPUT) || (Copy__uint8PinDirection == DIO__UINT8_INPUT)))
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	84 30       	cpi	r24, 0x04	; 4
     dce:	08 f0       	brcs	.+2      	; 0xdd2 <DIO__CheckStatusSetPinDirection+0x24>
     dd0:	0e c1       	rjmp	.+540    	; 0xfee <DIO__CheckStatusSetPinDirection+0x240>
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	88 30       	cpi	r24, 0x08	; 8
     dd6:	08 f0       	brcs	.+2      	; 0xdda <DIO__CheckStatusSetPinDirection+0x2c>
     dd8:	0a c1       	rjmp	.+532    	; 0xfee <DIO__CheckStatusSetPinDirection+0x240>
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	21 f0       	breq	.+8      	; 0xde8 <DIO__CheckStatusSetPinDirection+0x3a>
     de0:	8c 81       	ldd	r24, Y+4	; 0x04
     de2:	88 23       	and	r24, r24
     de4:	09 f0       	breq	.+2      	; 0xde8 <DIO__CheckStatusSetPinDirection+0x3a>
     de6:	03 c1       	rjmp	.+518    	; 0xfee <DIO__CheckStatusSetPinDirection+0x240>
        {
                switch (Copy__uint8PortId)
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	3f 87       	std	Y+15, r19	; 0x0f
     df0:	2e 87       	std	Y+14, r18	; 0x0e
     df2:	8e 85       	ldd	r24, Y+14	; 0x0e
     df4:	9f 85       	ldd	r25, Y+15	; 0x0f
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	91 05       	cpc	r25, r1
     dfa:	09 f4       	brne	.+2      	; 0xdfe <DIO__CheckStatusSetPinDirection+0x50>
     dfc:	4f c0       	rjmp	.+158    	; 0xe9c <DIO__CheckStatusSetPinDirection+0xee>
     dfe:	2e 85       	ldd	r18, Y+14	; 0x0e
     e00:	3f 85       	ldd	r19, Y+15	; 0x0f
     e02:	22 30       	cpi	r18, 0x02	; 2
     e04:	31 05       	cpc	r19, r1
     e06:	2c f4       	brge	.+10     	; 0xe12 <DIO__CheckStatusSetPinDirection+0x64>
     e08:	8e 85       	ldd	r24, Y+14	; 0x0e
     e0a:	9f 85       	ldd	r25, Y+15	; 0x0f
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	71 f0       	breq	.+28     	; 0xe2c <DIO__CheckStatusSetPinDirection+0x7e>
     e10:	eb c0       	rjmp	.+470    	; 0xfe8 <DIO__CheckStatusSetPinDirection+0x23a>
     e12:	2e 85       	ldd	r18, Y+14	; 0x0e
     e14:	3f 85       	ldd	r19, Y+15	; 0x0f
     e16:	22 30       	cpi	r18, 0x02	; 2
     e18:	31 05       	cpc	r19, r1
     e1a:	09 f4       	brne	.+2      	; 0xe1e <DIO__CheckStatusSetPinDirection+0x70>
     e1c:	77 c0       	rjmp	.+238    	; 0xf0c <DIO__CheckStatusSetPinDirection+0x15e>
     e1e:	8e 85       	ldd	r24, Y+14	; 0x0e
     e20:	9f 85       	ldd	r25, Y+15	; 0x0f
     e22:	83 30       	cpi	r24, 0x03	; 3
     e24:	91 05       	cpc	r25, r1
     e26:	09 f4       	brne	.+2      	; 0xe2a <DIO__CheckStatusSetPinDirection+0x7c>
     e28:	a9 c0       	rjmp	.+338    	; 0xf7c <DIO__CheckStatusSetPinDirection+0x1ce>
     e2a:	de c0       	rjmp	.+444    	; 0xfe8 <DIO__CheckStatusSetPinDirection+0x23a>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PinDirection)
     e2c:	8c 81       	ldd	r24, Y+4	; 0x04
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	3d 87       	std	Y+13, r19	; 0x0d
     e34:	2c 87       	std	Y+12, r18	; 0x0c
     e36:	8c 85       	ldd	r24, Y+12	; 0x0c
     e38:	9d 85       	ldd	r25, Y+13	; 0x0d
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	d1 f0       	breq	.+52     	; 0xe72 <DIO__CheckStatusSetPinDirection+0xc4>
     e3e:	2c 85       	ldd	r18, Y+12	; 0x0c
     e40:	3d 85       	ldd	r19, Y+13	; 0x0d
     e42:	21 30       	cpi	r18, 0x01	; 1
     e44:	31 05       	cpc	r19, r1
     e46:	09 f0       	breq	.+2      	; 0xe4a <DIO__CheckStatusSetPinDirection+0x9c>
     e48:	cf c0       	rjmp	.+414    	; 0xfe8 <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRA__UINT8_REG, Copy__uint8PinId);
     e4a:	aa e3       	ldi	r26, 0x3A	; 58
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	ea e3       	ldi	r30, 0x3A	; 58
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO__CheckStatusSetPinDirection+0xba>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO__CheckStatusSetPinDirection+0xb6>
     e6c:	84 2b       	or	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	bb c0       	rjmp	.+374    	; 0xfe8 <DIO__CheckStatusSetPinDirection+0x23a>
                                break;

                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRA__UINT8_REG, Copy__uint8PinId);
     e72:	aa e3       	ldi	r26, 0x3A	; 58
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	ea e3       	ldi	r30, 0x3A	; 58
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 2e       	mov	r0, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <DIO__CheckStatusSetPinDirection+0xe2>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <DIO__CheckStatusSetPinDirection+0xde>
     e94:	80 95       	com	r24
     e96:	84 23       	and	r24, r20
     e98:	8c 93       	st	X, r24
     e9a:	a6 c0       	rjmp	.+332    	; 0xfe8 <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PinDirection)
     e9c:	8c 81       	ldd	r24, Y+4	; 0x04
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	3b 87       	std	Y+11, r19	; 0x0b
     ea4:	2a 87       	std	Y+10, r18	; 0x0a
     ea6:	8a 85       	ldd	r24, Y+10	; 0x0a
     ea8:	9b 85       	ldd	r25, Y+11	; 0x0b
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	d1 f0       	breq	.+52     	; 0xee2 <DIO__CheckStatusSetPinDirection+0x134>
     eae:	2a 85       	ldd	r18, Y+10	; 0x0a
     eb0:	3b 85       	ldd	r19, Y+11	; 0x0b
     eb2:	21 30       	cpi	r18, 0x01	; 1
     eb4:	31 05       	cpc	r19, r1
     eb6:	09 f0       	breq	.+2      	; 0xeba <DIO__CheckStatusSetPinDirection+0x10c>
     eb8:	97 c0       	rjmp	.+302    	; 0xfe8 <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRB__UINT8_REG, Copy__uint8PinId);
     eba:	a7 e3       	ldi	r26, 0x37	; 55
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e7 e3       	ldi	r30, 0x37	; 55
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DIO__CheckStatusSetPinDirection+0x12a>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <DIO__CheckStatusSetPinDirection+0x126>
     edc:	84 2b       	or	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	83 c0       	rjmp	.+262    	; 0xfe8 <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRB__UINT8_REG, Copy__uint8PinId);
     ee2:	a7 e3       	ldi	r26, 0x37	; 55
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e7 e3       	ldi	r30, 0x37	; 55
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO__CheckStatusSetPinDirection+0x152>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO__CheckStatusSetPinDirection+0x14e>
     f04:	80 95       	com	r24
     f06:	84 23       	and	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	6e c0       	rjmp	.+220    	; 0xfe8 <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PinDirection)
     f0c:	8c 81       	ldd	r24, Y+4	; 0x04
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	39 87       	std	Y+9, r19	; 0x09
     f14:	28 87       	std	Y+8, r18	; 0x08
     f16:	88 85       	ldd	r24, Y+8	; 0x08
     f18:	99 85       	ldd	r25, Y+9	; 0x09
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	d1 f0       	breq	.+52     	; 0xf52 <DIO__CheckStatusSetPinDirection+0x1a4>
     f1e:	28 85       	ldd	r18, Y+8	; 0x08
     f20:	39 85       	ldd	r19, Y+9	; 0x09
     f22:	21 30       	cpi	r18, 0x01	; 1
     f24:	31 05       	cpc	r19, r1
     f26:	09 f0       	breq	.+2      	; 0xf2a <DIO__CheckStatusSetPinDirection+0x17c>
     f28:	5f c0       	rjmp	.+190    	; 0xfe8 <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRC__UINT8_REG, Copy__uint8PinId);
     f2a:	a4 e3       	ldi	r26, 0x34	; 52
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e4 e3       	ldi	r30, 0x34	; 52
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO__CheckStatusSetPinDirection+0x19a>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO__CheckStatusSetPinDirection+0x196>
     f4c:	84 2b       	or	r24, r20
     f4e:	8c 93       	st	X, r24
     f50:	4b c0       	rjmp	.+150    	; 0xfe8 <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRC__UINT8_REG, Copy__uint8PinId);
     f52:	a4 e3       	ldi	r26, 0x34	; 52
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e4 e3       	ldi	r30, 0x34	; 52
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <DIO__CheckStatusSetPinDirection+0x1c2>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <DIO__CheckStatusSetPinDirection+0x1be>
     f74:	80 95       	com	r24
     f76:	84 23       	and	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	36 c0       	rjmp	.+108    	; 0xfe8 <DIO__CheckStatusSetPinDirection+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PinDirection)
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	3f 83       	std	Y+7, r19	; 0x07
     f84:	2e 83       	std	Y+6, r18	; 0x06
     f86:	8e 81       	ldd	r24, Y+6	; 0x06
     f88:	9f 81       	ldd	r25, Y+7	; 0x07
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	c9 f0       	breq	.+50     	; 0xfc0 <DIO__CheckStatusSetPinDirection+0x212>
     f8e:	2e 81       	ldd	r18, Y+6	; 0x06
     f90:	3f 81       	ldd	r19, Y+7	; 0x07
     f92:	21 30       	cpi	r18, 0x01	; 1
     f94:	31 05       	cpc	r19, r1
     f96:	41 f5       	brne	.+80     	; 0xfe8 <DIO__CheckStatusSetPinDirection+0x23a>
                        {
                        case DIO__UINT8_OUTPUT:
                                SET_BIT(DDRD__UINT8_REG, Copy__uint8PinId);
     f98:	a1 e3       	ldi	r26, 0x31	; 49
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e1 e3       	ldi	r30, 0x31	; 49
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO__CheckStatusSetPinDirection+0x208>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO__CheckStatusSetPinDirection+0x204>
     fba:	84 2b       	or	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	14 c0       	rjmp	.+40     	; 0xfe8 <DIO__CheckStatusSetPinDirection+0x23a>
                                break;
                        case DIO__UINT8_INPUT:
                                CLEAR_BIT(DDRD__UINT8_REG, Copy__uint8PinId);
     fc0:	a1 e3       	ldi	r26, 0x31	; 49
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e1 e3       	ldi	r30, 0x31	; 49
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO__CheckStatusSetPinDirection+0x230>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO__CheckStatusSetPinDirection+0x22c>
     fe2:	80 95       	com	r24
     fe4:	84 23       	and	r24, r20
     fe6:	8c 93       	st	X, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
     fe8:	39 81       	ldd	r19, Y+1	; 0x01
     fea:	3d 83       	std	Y+5, r19	; 0x05
     fec:	04 c0       	rjmp	.+8      	; 0xff6 <DIO__CheckStatusSetPinDirection+0x248>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	8d 83       	std	Y+5, r24	; 0x05
     ff6:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
     ff8:	2f 96       	adiw	r28, 0x0f	; 15
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <DIO__CheckStatusSetPinValue>:

CheckStatus DIO__CheckStatusSetPinValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 Copy__uint8PinValue)
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	2f 97       	sbiw	r28, 0x0f	; 15
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	8a 83       	std	Y+2, r24	; 0x02
    1020:	6b 83       	std	Y+3, r22	; 0x03
    1022:	4c 83       	std	Y+4, r20	; 0x04
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    1024:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pin  Value 
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && ((Copy__uint8PinValue == DIO__UINT8_HIGH) || (Copy__uint8PinValue == DIO__UINT8_LOW)))
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	84 30       	cpi	r24, 0x04	; 4
    102a:	08 f0       	brcs	.+2      	; 0x102e <DIO__CheckStatusSetPinValue+0x24>
    102c:	0e c1       	rjmp	.+540    	; 0x124a <DIO__CheckStatusSetPinValue+0x240>
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	88 30       	cpi	r24, 0x08	; 8
    1032:	08 f0       	brcs	.+2      	; 0x1036 <DIO__CheckStatusSetPinValue+0x2c>
    1034:	0a c1       	rjmp	.+532    	; 0x124a <DIO__CheckStatusSetPinValue+0x240>
    1036:	8c 81       	ldd	r24, Y+4	; 0x04
    1038:	81 30       	cpi	r24, 0x01	; 1
    103a:	21 f0       	breq	.+8      	; 0x1044 <DIO__CheckStatusSetPinValue+0x3a>
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	88 23       	and	r24, r24
    1040:	09 f0       	breq	.+2      	; 0x1044 <DIO__CheckStatusSetPinValue+0x3a>
    1042:	03 c1       	rjmp	.+518    	; 0x124a <DIO__CheckStatusSetPinValue+0x240>
        {
                switch (Copy__uint8PortId)
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	3f 87       	std	Y+15, r19	; 0x0f
    104c:	2e 87       	std	Y+14, r18	; 0x0e
    104e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1050:	9f 85       	ldd	r25, Y+15	; 0x0f
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	91 05       	cpc	r25, r1
    1056:	09 f4       	brne	.+2      	; 0x105a <DIO__CheckStatusSetPinValue+0x50>
    1058:	4f c0       	rjmp	.+158    	; 0x10f8 <DIO__CheckStatusSetPinValue+0xee>
    105a:	2e 85       	ldd	r18, Y+14	; 0x0e
    105c:	3f 85       	ldd	r19, Y+15	; 0x0f
    105e:	22 30       	cpi	r18, 0x02	; 2
    1060:	31 05       	cpc	r19, r1
    1062:	2c f4       	brge	.+10     	; 0x106e <DIO__CheckStatusSetPinValue+0x64>
    1064:	8e 85       	ldd	r24, Y+14	; 0x0e
    1066:	9f 85       	ldd	r25, Y+15	; 0x0f
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	71 f0       	breq	.+28     	; 0x1088 <DIO__CheckStatusSetPinValue+0x7e>
    106c:	eb c0       	rjmp	.+470    	; 0x1244 <DIO__CheckStatusSetPinValue+0x23a>
    106e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1070:	3f 85       	ldd	r19, Y+15	; 0x0f
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	09 f4       	brne	.+2      	; 0x107a <DIO__CheckStatusSetPinValue+0x70>
    1078:	77 c0       	rjmp	.+238    	; 0x1168 <DIO__CheckStatusSetPinValue+0x15e>
    107a:	8e 85       	ldd	r24, Y+14	; 0x0e
    107c:	9f 85       	ldd	r25, Y+15	; 0x0f
    107e:	83 30       	cpi	r24, 0x03	; 3
    1080:	91 05       	cpc	r25, r1
    1082:	09 f4       	brne	.+2      	; 0x1086 <DIO__CheckStatusSetPinValue+0x7c>
    1084:	a9 c0       	rjmp	.+338    	; 0x11d8 <DIO__CheckStatusSetPinValue+0x1ce>
    1086:	de c0       	rjmp	.+444    	; 0x1244 <DIO__CheckStatusSetPinValue+0x23a>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PinValue)
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	3d 87       	std	Y+13, r19	; 0x0d
    1090:	2c 87       	std	Y+12, r18	; 0x0c
    1092:	8c 85       	ldd	r24, Y+12	; 0x0c
    1094:	9d 85       	ldd	r25, Y+13	; 0x0d
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	d1 f0       	breq	.+52     	; 0x10ce <DIO__CheckStatusSetPinValue+0xc4>
    109a:	2c 85       	ldd	r18, Y+12	; 0x0c
    109c:	3d 85       	ldd	r19, Y+13	; 0x0d
    109e:	21 30       	cpi	r18, 0x01	; 1
    10a0:	31 05       	cpc	r19, r1
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <DIO__CheckStatusSetPinValue+0x9c>
    10a4:	cf c0       	rjmp	.+414    	; 0x1244 <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTA__UINT8_REG, Copy__uint8PinId);
    10a6:	ab e3       	ldi	r26, 0x3B	; 59
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	eb e3       	ldi	r30, 0x3B	; 59
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO__CheckStatusSetPinValue+0xba>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DIO__CheckStatusSetPinValue+0xb6>
    10c8:	84 2b       	or	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	bb c0       	rjmp	.+374    	; 0x1244 <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTA__UINT8_REG, Copy__uint8PinId);
    10ce:	ab e3       	ldi	r26, 0x3B	; 59
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	eb e3       	ldi	r30, 0x3B	; 59
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO__CheckStatusSetPinValue+0xe2>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO__CheckStatusSetPinValue+0xde>
    10f0:	80 95       	com	r24
    10f2:	84 23       	and	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	a6 c0       	rjmp	.+332    	; 0x1244 <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PinValue)
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	3b 87       	std	Y+11, r19	; 0x0b
    1100:	2a 87       	std	Y+10, r18	; 0x0a
    1102:	8a 85       	ldd	r24, Y+10	; 0x0a
    1104:	9b 85       	ldd	r25, Y+11	; 0x0b
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	d1 f0       	breq	.+52     	; 0x113e <DIO__CheckStatusSetPinValue+0x134>
    110a:	2a 85       	ldd	r18, Y+10	; 0x0a
    110c:	3b 85       	ldd	r19, Y+11	; 0x0b
    110e:	21 30       	cpi	r18, 0x01	; 1
    1110:	31 05       	cpc	r19, r1
    1112:	09 f0       	breq	.+2      	; 0x1116 <DIO__CheckStatusSetPinValue+0x10c>
    1114:	97 c0       	rjmp	.+302    	; 0x1244 <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTB__UINT8_REG, Copy__uint8PinId);
    1116:	a8 e3       	ldi	r26, 0x38	; 56
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e8 e3       	ldi	r30, 0x38	; 56
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <DIO__CheckStatusSetPinValue+0x12a>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <DIO__CheckStatusSetPinValue+0x126>
    1138:	84 2b       	or	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	83 c0       	rjmp	.+262    	; 0x1244 <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTB__UINT8_REG, Copy__uint8PinId);
    113e:	a8 e3       	ldi	r26, 0x38	; 56
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e8 e3       	ldi	r30, 0x38	; 56
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <DIO__CheckStatusSetPinValue+0x152>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <DIO__CheckStatusSetPinValue+0x14e>
    1160:	80 95       	com	r24
    1162:	84 23       	and	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	6e c0       	rjmp	.+220    	; 0x1244 <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PinValue)
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	39 87       	std	Y+9, r19	; 0x09
    1170:	28 87       	std	Y+8, r18	; 0x08
    1172:	88 85       	ldd	r24, Y+8	; 0x08
    1174:	99 85       	ldd	r25, Y+9	; 0x09
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	d1 f0       	breq	.+52     	; 0x11ae <DIO__CheckStatusSetPinValue+0x1a4>
    117a:	28 85       	ldd	r18, Y+8	; 0x08
    117c:	39 85       	ldd	r19, Y+9	; 0x09
    117e:	21 30       	cpi	r18, 0x01	; 1
    1180:	31 05       	cpc	r19, r1
    1182:	09 f0       	breq	.+2      	; 0x1186 <DIO__CheckStatusSetPinValue+0x17c>
    1184:	5f c0       	rjmp	.+190    	; 0x1244 <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTC__UINT8_REG, Copy__uint8PinId);
    1186:	a5 e3       	ldi	r26, 0x35	; 53
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e5 e3       	ldi	r30, 0x35	; 53
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO__CheckStatusSetPinValue+0x19a>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO__CheckStatusSetPinValue+0x196>
    11a8:	84 2b       	or	r24, r20
    11aa:	8c 93       	st	X, r24
    11ac:	4b c0       	rjmp	.+150    	; 0x1244 <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTC__UINT8_REG, Copy__uint8PinId);
    11ae:	a5 e3       	ldi	r26, 0x35	; 53
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e5 e3       	ldi	r30, 0x35	; 53
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <DIO__CheckStatusSetPinValue+0x1c2>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <DIO__CheckStatusSetPinValue+0x1be>
    11d0:	80 95       	com	r24
    11d2:	84 23       	and	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	36 c0       	rjmp	.+108    	; 0x1244 <DIO__CheckStatusSetPinValue+0x23a>

                                break;
                        }
                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PinValue)
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	3f 83       	std	Y+7, r19	; 0x07
    11e0:	2e 83       	std	Y+6, r18	; 0x06
    11e2:	8e 81       	ldd	r24, Y+6	; 0x06
    11e4:	9f 81       	ldd	r25, Y+7	; 0x07
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	c9 f0       	breq	.+50     	; 0x121c <DIO__CheckStatusSetPinValue+0x212>
    11ea:	2e 81       	ldd	r18, Y+6	; 0x06
    11ec:	3f 81       	ldd	r19, Y+7	; 0x07
    11ee:	21 30       	cpi	r18, 0x01	; 1
    11f0:	31 05       	cpc	r19, r1
    11f2:	41 f5       	brne	.+80     	; 0x1244 <DIO__CheckStatusSetPinValue+0x23a>
                        {
                        case DIO__UINT8_HIGH:
                                SET_BIT(PORTD__UINT8_REG, Copy__uint8PinId);
    11f4:	a2 e3       	ldi	r26, 0x32	; 50
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e2 e3       	ldi	r30, 0x32	; 50
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 2e       	mov	r0, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <DIO__CheckStatusSetPinValue+0x208>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <DIO__CheckStatusSetPinValue+0x204>
    1216:	84 2b       	or	r24, r20
    1218:	8c 93       	st	X, r24
    121a:	14 c0       	rjmp	.+40     	; 0x1244 <DIO__CheckStatusSetPinValue+0x23a>
                                break;
                        case DIO__UINT8_LOW:
                                CLEAR_BIT(PORTD__UINT8_REG, Copy__uint8PinId);
    121c:	a2 e3       	ldi	r26, 0x32	; 50
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e2 e3       	ldi	r30, 0x32	; 50
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	48 2f       	mov	r20, r24
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 2e       	mov	r0, r18
    1234:	02 c0       	rjmp	.+4      	; 0x123a <DIO__CheckStatusSetPinValue+0x230>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	0a 94       	dec	r0
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <DIO__CheckStatusSetPinValue+0x22c>
    123e:	80 95       	com	r24
    1240:	84 23       	and	r24, r20
    1242:	8c 93       	st	X, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1244:	39 81       	ldd	r19, Y+1	; 0x01
    1246:	3d 83       	std	Y+5, r19	; 0x05
    1248:	04 c0       	rjmp	.+8      	; 0x1252 <DIO__CheckStatusSetPinValue+0x248>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	8d 83       	std	Y+5, r24	; 0x05
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    1254:	2f 96       	adiw	r28, 0x0f	; 15
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <DIO__CheckStatusGetPinValue>:

CheckStatus DIO__CheckStatusGetPinValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PinId, _uint8 *Copy_p_uint8ReturnPinValue)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	28 97       	sbiw	r28, 0x08	; 8
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	8a 83       	std	Y+2, r24	; 0x02
    127c:	6b 83       	std	Y+3, r22	; 0x03
    127e:	5d 83       	std	Y+5, r21	; 0x05
    1280:	4c 83       	std	Y+4, r20	; 0x04

        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    1282:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
              2-Valid Pin  Id
              3-Valid Pointer != NULL
        */
        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && (Copy__uint8PinId <= DIO__UINT8_PIN7) && (Copy_p_uint8ReturnPinValue != NULL))
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	84 30       	cpi	r24, 0x04	; 4
    1288:	08 f0       	brcs	.+2      	; 0x128c <DIO__CheckStatusGetPinValue+0x26>
    128a:	ec c0       	rjmp	.+472    	; 0x1464 <DIO__CheckStatusGetPinValue+0x1fe>
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	88 30       	cpi	r24, 0x08	; 8
    1290:	08 f0       	brcs	.+2      	; 0x1294 <DIO__CheckStatusGetPinValue+0x2e>
    1292:	e8 c0       	rjmp	.+464    	; 0x1464 <DIO__CheckStatusGetPinValue+0x1fe>
    1294:	8c 81       	ldd	r24, Y+4	; 0x04
    1296:	9d 81       	ldd	r25, Y+5	; 0x05
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	09 f4       	brne	.+2      	; 0x129e <DIO__CheckStatusGetPinValue+0x38>
    129c:	e3 c0       	rjmp	.+454    	; 0x1464 <DIO__CheckStatusGetPinValue+0x1fe>
        {
                switch (Copy__uint8PortId)
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	38 87       	std	Y+8, r19	; 0x08
    12a6:	2f 83       	std	Y+7, r18	; 0x07
    12a8:	4f 81       	ldd	r20, Y+7	; 0x07
    12aa:	58 85       	ldd	r21, Y+8	; 0x08
    12ac:	41 30       	cpi	r20, 0x01	; 1
    12ae:	51 05       	cpc	r21, r1
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <DIO__CheckStatusGetPinValue+0x4e>
    12b2:	48 c0       	rjmp	.+144    	; 0x1344 <DIO__CheckStatusGetPinValue+0xde>
    12b4:	8f 81       	ldd	r24, Y+7	; 0x07
    12b6:	98 85       	ldd	r25, Y+8	; 0x08
    12b8:	82 30       	cpi	r24, 0x02	; 2
    12ba:	91 05       	cpc	r25, r1
    12bc:	34 f4       	brge	.+12     	; 0x12ca <DIO__CheckStatusGetPinValue+0x64>
    12be:	2f 81       	ldd	r18, Y+7	; 0x07
    12c0:	38 85       	ldd	r19, Y+8	; 0x08
    12c2:	21 15       	cp	r18, r1
    12c4:	31 05       	cpc	r19, r1
    12c6:	71 f0       	breq	.+28     	; 0x12e4 <DIO__CheckStatusGetPinValue+0x7e>
    12c8:	ca c0       	rjmp	.+404    	; 0x145e <DIO__CheckStatusGetPinValue+0x1f8>
    12ca:	4f 81       	ldd	r20, Y+7	; 0x07
    12cc:	58 85       	ldd	r21, Y+8	; 0x08
    12ce:	42 30       	cpi	r20, 0x02	; 2
    12d0:	51 05       	cpc	r21, r1
    12d2:	09 f4       	brne	.+2      	; 0x12d6 <DIO__CheckStatusGetPinValue+0x70>
    12d4:	67 c0       	rjmp	.+206    	; 0x13a4 <DIO__CheckStatusGetPinValue+0x13e>
    12d6:	8f 81       	ldd	r24, Y+7	; 0x07
    12d8:	98 85       	ldd	r25, Y+8	; 0x08
    12da:	83 30       	cpi	r24, 0x03	; 3
    12dc:	91 05       	cpc	r25, r1
    12de:	09 f4       	brne	.+2      	; 0x12e2 <DIO__CheckStatusGetPinValue+0x7c>
    12e0:	90 c0       	rjmp	.+288    	; 0x1402 <DIO__CheckStatusGetPinValue+0x19c>
    12e2:	bd c0       	rjmp	.+378    	; 0x145e <DIO__CheckStatusGetPinValue+0x1f8>
                {
                case DIO__UINT8_PORTA:
                        if (GET_BIT(PINA__UINT8_REG, Copy__uint8PinId) == 0)
    12e4:	e9 e3       	ldi	r30, 0x39	; 57
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	88 2f       	mov	r24, r24
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	a9 01       	movw	r20, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <DIO__CheckStatusGetPinValue+0x96>
    12f8:	55 95       	asr	r21
    12fa:	47 95       	ror	r20
    12fc:	8a 95       	dec	r24
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <DIO__CheckStatusGetPinValue+0x92>
    1300:	ca 01       	movw	r24, r20
    1302:	81 70       	andi	r24, 0x01	; 1
    1304:	90 70       	andi	r25, 0x00	; 0
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	21 f4       	brne	.+8      	; 0x1312 <DIO__CheckStatusGetPinValue+0xac>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    130a:	ec 81       	ldd	r30, Y+4	; 0x04
    130c:	fd 81       	ldd	r31, Y+5	; 0x05
    130e:	10 82       	st	Z, r1
    1310:	a6 c0       	rjmp	.+332    	; 0x145e <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINA__UINT8_REG, Copy__uint8PinId) != 0)
    1312:	e9 e3       	ldi	r30, 0x39	; 57
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	88 2f       	mov	r24, r24
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	a9 01       	movw	r20, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO__CheckStatusGetPinValue+0xc4>
    1326:	55 95       	asr	r21
    1328:	47 95       	ror	r20
    132a:	8a 95       	dec	r24
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <DIO__CheckStatusGetPinValue+0xc0>
    132e:	ca 01       	movw	r24, r20
    1330:	81 70       	andi	r24, 0x01	; 1
    1332:	90 70       	andi	r25, 0x00	; 0
    1334:	88 23       	and	r24, r24
    1336:	09 f4       	brne	.+2      	; 0x133a <DIO__CheckStatusGetPinValue+0xd4>
    1338:	92 c0       	rjmp	.+292    	; 0x145e <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    133a:	ec 81       	ldd	r30, Y+4	; 0x04
    133c:	fd 81       	ldd	r31, Y+5	; 0x05
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	80 83       	st	Z, r24
    1342:	8d c0       	rjmp	.+282    	; 0x145e <DIO__CheckStatusGetPinValue+0x1f8>
                                /* DO NOTHING */
                        }

                        break;
                case DIO__UINT8_PORTB:
                        if (GET_BIT(PINB__UINT8_REG, Copy__uint8PinId) == 0)
    1344:	e6 e3       	ldi	r30, 0x36	; 54
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	88 2f       	mov	r24, r24
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	a9 01       	movw	r20, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <DIO__CheckStatusGetPinValue+0xf6>
    1358:	55 95       	asr	r21
    135a:	47 95       	ror	r20
    135c:	8a 95       	dec	r24
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <DIO__CheckStatusGetPinValue+0xf2>
    1360:	ca 01       	movw	r24, r20
    1362:	81 70       	andi	r24, 0x01	; 1
    1364:	90 70       	andi	r25, 0x00	; 0
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	21 f4       	brne	.+8      	; 0x1372 <DIO__CheckStatusGetPinValue+0x10c>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    136a:	ec 81       	ldd	r30, Y+4	; 0x04
    136c:	fd 81       	ldd	r31, Y+5	; 0x05
    136e:	10 82       	st	Z, r1
    1370:	76 c0       	rjmp	.+236    	; 0x145e <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINB__UINT8_REG, Copy__uint8PinId) != 0)
    1372:	e6 e3       	ldi	r30, 0x36	; 54
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	88 2f       	mov	r24, r24
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	a9 01       	movw	r20, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <DIO__CheckStatusGetPinValue+0x124>
    1386:	55 95       	asr	r21
    1388:	47 95       	ror	r20
    138a:	8a 95       	dec	r24
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <DIO__CheckStatusGetPinValue+0x120>
    138e:	ca 01       	movw	r24, r20
    1390:	81 70       	andi	r24, 0x01	; 1
    1392:	90 70       	andi	r25, 0x00	; 0
    1394:	88 23       	and	r24, r24
    1396:	09 f4       	brne	.+2      	; 0x139a <DIO__CheckStatusGetPinValue+0x134>
    1398:	62 c0       	rjmp	.+196    	; 0x145e <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    139a:	ec 81       	ldd	r30, Y+4	; 0x04
    139c:	fd 81       	ldd	r31, Y+5	; 0x05
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	80 83       	st	Z, r24
    13a2:	5d c0       	rjmp	.+186    	; 0x145e <DIO__CheckStatusGetPinValue+0x1f8>

                        break;

                case DIO__UINT8_PORTC:

                        if (GET_BIT(PINC__UINT8_REG, Copy__uint8PinId) == 0)
    13a4:	e3 e3       	ldi	r30, 0x33	; 51
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a9 01       	movw	r20, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <DIO__CheckStatusGetPinValue+0x156>
    13b8:	55 95       	asr	r21
    13ba:	47 95       	ror	r20
    13bc:	8a 95       	dec	r24
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <DIO__CheckStatusGetPinValue+0x152>
    13c0:	ca 01       	movw	r24, r20
    13c2:	81 70       	andi	r24, 0x01	; 1
    13c4:	90 70       	andi	r25, 0x00	; 0
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	21 f4       	brne	.+8      	; 0x13d2 <DIO__CheckStatusGetPinValue+0x16c>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    13ca:	ec 81       	ldd	r30, Y+4	; 0x04
    13cc:	fd 81       	ldd	r31, Y+5	; 0x05
    13ce:	10 82       	st	Z, r1
    13d0:	46 c0       	rjmp	.+140    	; 0x145e <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PINC__UINT8_REG, Copy__uint8PinId) != 0)
    13d2:	e3 e3       	ldi	r30, 0x33	; 51
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	a9 01       	movw	r20, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO__CheckStatusGetPinValue+0x184>
    13e6:	55 95       	asr	r21
    13e8:	47 95       	ror	r20
    13ea:	8a 95       	dec	r24
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO__CheckStatusGetPinValue+0x180>
    13ee:	ca 01       	movw	r24, r20
    13f0:	81 70       	andi	r24, 0x01	; 1
    13f2:	90 70       	andi	r25, 0x00	; 0
    13f4:	88 23       	and	r24, r24
    13f6:	99 f1       	breq	.+102    	; 0x145e <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    13f8:	ec 81       	ldd	r30, Y+4	; 0x04
    13fa:	fd 81       	ldd	r31, Y+5	; 0x05
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	80 83       	st	Z, r24
    1400:	2e c0       	rjmp	.+92     	; 0x145e <DIO__CheckStatusGetPinValue+0x1f8>
                                /* DO NOTHING */
                        }

                        break;
                case DIO__UINT8_PORTD:
                        if (GET_BIT(PIND__UINT8_REG, Copy__uint8PinId) == 0)
    1402:	e0 e3       	ldi	r30, 0x30	; 48
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	a9 01       	movw	r20, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO__CheckStatusGetPinValue+0x1b4>
    1416:	55 95       	asr	r21
    1418:	47 95       	ror	r20
    141a:	8a 95       	dec	r24
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DIO__CheckStatusGetPinValue+0x1b0>
    141e:	ca 01       	movw	r24, r20
    1420:	81 70       	andi	r24, 0x01	; 1
    1422:	90 70       	andi	r25, 0x00	; 0
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	21 f4       	brne	.+8      	; 0x1430 <DIO__CheckStatusGetPinValue+0x1ca>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_LOW;
    1428:	ec 81       	ldd	r30, Y+4	; 0x04
    142a:	fd 81       	ldd	r31, Y+5	; 0x05
    142c:	10 82       	st	Z, r1
    142e:	17 c0       	rjmp	.+46     	; 0x145e <DIO__CheckStatusGetPinValue+0x1f8>
                        }
                        else if (GET_BIT(PIND__UINT8_REG, Copy__uint8PinId) != 0)
    1430:	e0 e3       	ldi	r30, 0x30	; 48
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	a9 01       	movw	r20, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <DIO__CheckStatusGetPinValue+0x1e2>
    1444:	55 95       	asr	r21
    1446:	47 95       	ror	r20
    1448:	8a 95       	dec	r24
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <DIO__CheckStatusGetPinValue+0x1de>
    144c:	ca 01       	movw	r24, r20
    144e:	81 70       	andi	r24, 0x01	; 1
    1450:	90 70       	andi	r25, 0x00	; 0
    1452:	88 23       	and	r24, r24
    1454:	21 f0       	breq	.+8      	; 0x145e <DIO__CheckStatusGetPinValue+0x1f8>
                        {
                                *Copy_p_uint8ReturnPinValue = DIO__UINT8_HIGH;
    1456:	ec 81       	ldd	r30, Y+4	; 0x04
    1458:	fd 81       	ldd	r31, Y+5	; 0x05
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    145e:	59 81       	ldd	r21, Y+1	; 0x01
    1460:	5e 83       	std	Y+6, r21	; 0x06
    1462:	04 c0       	rjmp	.+8      	; 0x146c <DIO__CheckStatusGetPinValue+0x206>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	8e 83       	std	Y+6, r24	; 0x06
    146c:	8e 81       	ldd	r24, Y+6	; 0x06
        }
}
    146e:	28 96       	adiw	r28, 0x08	; 8
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd bf       	out	0x3d, r28	; 61
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <DIO__CheckStatusSetPortDirection>:

CheckStatus DIO__CheckStatusSetPortDirection(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PortDirection)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	2e 97       	sbiw	r28, 0x0e	; 14
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	8a 83       	std	Y+2, r24	; 0x02
    1496:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    1498:	19 82       	std	Y+1, r1	; 0x01
        /* 
        Check 1-Valid Port Id
              2-Valid PORT diraction 
        */

        if ((Copy__uint8PortId <= DIO__UINT8_PORTD) && ((Copy__uint8PortDirection == DIO__UINT8_OUTPUT) || (Copy__uint8PortDirection == DIO__UINT8_INPUT)))
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	84 30       	cpi	r24, 0x04	; 4
    149e:	08 f0       	brcs	.+2      	; 0x14a2 <DIO__CheckStatusSetPortDirection+0x22>
    14a0:	89 c0       	rjmp	.+274    	; 0x15b4 <DIO__CheckStatusSetPortDirection+0x134>
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	81 30       	cpi	r24, 0x01	; 1
    14a6:	21 f0       	breq	.+8      	; 0x14b0 <DIO__CheckStatusSetPortDirection+0x30>
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	88 23       	and	r24, r24
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <DIO__CheckStatusSetPortDirection+0x30>
    14ae:	82 c0       	rjmp	.+260    	; 0x15b4 <DIO__CheckStatusSetPortDirection+0x134>
        {
                switch (Copy__uint8PortId)
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	3e 87       	std	Y+14, r19	; 0x0e
    14b8:	2d 87       	std	Y+13, r18	; 0x0d
    14ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    14bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	91 05       	cpc	r25, r1
    14c2:	71 f1       	breq	.+92     	; 0x1520 <DIO__CheckStatusSetPortDirection+0xa0>
    14c4:	2d 85       	ldd	r18, Y+13	; 0x0d
    14c6:	3e 85       	ldd	r19, Y+14	; 0x0e
    14c8:	22 30       	cpi	r18, 0x02	; 2
    14ca:	31 05       	cpc	r19, r1
    14cc:	2c f4       	brge	.+10     	; 0x14d8 <DIO__CheckStatusSetPortDirection+0x58>
    14ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	69 f0       	breq	.+26     	; 0x14f0 <DIO__CheckStatusSetPortDirection+0x70>
    14d6:	6b c0       	rjmp	.+214    	; 0x15ae <DIO__CheckStatusSetPortDirection+0x12e>
    14d8:	2d 85       	ldd	r18, Y+13	; 0x0d
    14da:	3e 85       	ldd	r19, Y+14	; 0x0e
    14dc:	22 30       	cpi	r18, 0x02	; 2
    14de:	31 05       	cpc	r19, r1
    14e0:	b9 f1       	breq	.+110    	; 0x1550 <DIO__CheckStatusSetPortDirection+0xd0>
    14e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e6:	83 30       	cpi	r24, 0x03	; 3
    14e8:	91 05       	cpc	r25, r1
    14ea:	09 f4       	brne	.+2      	; 0x14ee <DIO__CheckStatusSetPortDirection+0x6e>
    14ec:	49 c0       	rjmp	.+146    	; 0x1580 <DIO__CheckStatusSetPortDirection+0x100>
    14ee:	5f c0       	rjmp	.+190    	; 0x15ae <DIO__CheckStatusSetPortDirection+0x12e>
                {
                case DIO__UINT8_PORTA:
                        switch (Copy__uint8PortDirection)
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	3c 87       	std	Y+12, r19	; 0x0c
    14f8:	2b 87       	std	Y+11, r18	; 0x0b
    14fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    14fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	31 f0       	breq	.+12     	; 0x150e <DIO__CheckStatusSetPortDirection+0x8e>
    1502:	2b 85       	ldd	r18, Y+11	; 0x0b
    1504:	3c 85       	ldd	r19, Y+12	; 0x0c
    1506:	21 30       	cpi	r18, 0x01	; 1
    1508:	31 05       	cpc	r19, r1
    150a:	29 f0       	breq	.+10     	; 0x1516 <DIO__CheckStatusSetPortDirection+0x96>
    150c:	50 c0       	rjmp	.+160    	; 0x15ae <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTA__UINT8_REG = 0x00;
    150e:	eb e3       	ldi	r30, 0x3B	; 59
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	10 82       	st	Z, r1
    1514:	4c c0       	rjmp	.+152    	; 0x15ae <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTA__UINT8_REG = 0xFF;
    1516:	eb e3       	ldi	r30, 0x3B	; 59
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	8f ef       	ldi	r24, 0xFF	; 255
    151c:	80 83       	st	Z, r24
    151e:	47 c0       	rjmp	.+142    	; 0x15ae <DIO__CheckStatusSetPortDirection+0x12e>
                                /* DO  NOTHING */
                                break;
                        }
                        break;
                case DIO__UINT8_PORTB:
                        switch (Copy__uint8PortDirection)
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	3a 87       	std	Y+10, r19	; 0x0a
    1528:	29 87       	std	Y+9, r18	; 0x09
    152a:	89 85       	ldd	r24, Y+9	; 0x09
    152c:	9a 85       	ldd	r25, Y+10	; 0x0a
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	31 f0       	breq	.+12     	; 0x153e <DIO__CheckStatusSetPortDirection+0xbe>
    1532:	29 85       	ldd	r18, Y+9	; 0x09
    1534:	3a 85       	ldd	r19, Y+10	; 0x0a
    1536:	21 30       	cpi	r18, 0x01	; 1
    1538:	31 05       	cpc	r19, r1
    153a:	29 f0       	breq	.+10     	; 0x1546 <DIO__CheckStatusSetPortDirection+0xc6>
    153c:	38 c0       	rjmp	.+112    	; 0x15ae <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTB__UINT8_REG = 0x00;
    153e:	e8 e3       	ldi	r30, 0x38	; 56
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	10 82       	st	Z, r1
    1544:	34 c0       	rjmp	.+104    	; 0x15ae <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTB__UINT8_REG = 0xFF;
    1546:	e8 e3       	ldi	r30, 0x38	; 56
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	8f ef       	ldi	r24, 0xFF	; 255
    154c:	80 83       	st	Z, r24
    154e:	2f c0       	rjmp	.+94     	; 0x15ae <DIO__CheckStatusSetPortDirection+0x12e>
                        }

                        break;

                case DIO__UINT8_PORTC:
                        switch (Copy__uint8PortDirection)
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	38 87       	std	Y+8, r19	; 0x08
    1558:	2f 83       	std	Y+7, r18	; 0x07
    155a:	8f 81       	ldd	r24, Y+7	; 0x07
    155c:	98 85       	ldd	r25, Y+8	; 0x08
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	31 f0       	breq	.+12     	; 0x156e <DIO__CheckStatusSetPortDirection+0xee>
    1562:	2f 81       	ldd	r18, Y+7	; 0x07
    1564:	38 85       	ldd	r19, Y+8	; 0x08
    1566:	21 30       	cpi	r18, 0x01	; 1
    1568:	31 05       	cpc	r19, r1
    156a:	29 f0       	breq	.+10     	; 0x1576 <DIO__CheckStatusSetPortDirection+0xf6>
    156c:	20 c0       	rjmp	.+64     	; 0x15ae <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTC__UINT8_REG = 0x00;
    156e:	e5 e3       	ldi	r30, 0x35	; 53
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	10 82       	st	Z, r1
    1574:	1c c0       	rjmp	.+56     	; 0x15ae <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTC__UINT8_REG = 0xFF;
    1576:	e5 e3       	ldi	r30, 0x35	; 53
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	8f ef       	ldi	r24, 0xFF	; 255
    157c:	80 83       	st	Z, r24
    157e:	17 c0       	rjmp	.+46     	; 0x15ae <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        }

                        break;
                case DIO__UINT8_PORTD:
                        switch (Copy__uint8PortDirection)
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	3e 83       	std	Y+6, r19	; 0x06
    1588:	2d 83       	std	Y+5, r18	; 0x05
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	31 f0       	breq	.+12     	; 0x159e <DIO__CheckStatusSetPortDirection+0x11e>
    1592:	2d 81       	ldd	r18, Y+5	; 0x05
    1594:	3e 81       	ldd	r19, Y+6	; 0x06
    1596:	21 30       	cpi	r18, 0x01	; 1
    1598:	31 05       	cpc	r19, r1
    159a:	29 f0       	breq	.+10     	; 0x15a6 <DIO__CheckStatusSetPortDirection+0x126>
    159c:	08 c0       	rjmp	.+16     	; 0x15ae <DIO__CheckStatusSetPortDirection+0x12e>
                        {
                        case DIO__UINT8_INPUT:
                                PORTD__UINT8_REG = 0x00;
    159e:	e2 e3       	ldi	r30, 0x32	; 50
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	10 82       	st	Z, r1
    15a4:	04 c0       	rjmp	.+8      	; 0x15ae <DIO__CheckStatusSetPortDirection+0x12e>
                                break;
                        case DIO__UINT8_OUTPUT:
                                PORTD__UINT8_REG = 0xFF;
    15a6:	e2 e3       	ldi	r30, 0x32	; 50
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	8f ef       	ldi	r24, 0xFF	; 255
    15ac:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    15ae:	39 81       	ldd	r19, Y+1	; 0x01
    15b0:	3c 83       	std	Y+4, r19	; 0x04
    15b2:	04 c0       	rjmp	.+8      	; 0x15bc <DIO__CheckStatusSetPortDirection+0x13c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	8c 83       	std	Y+4, r24	; 0x04
    15bc:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    15be:	2e 96       	adiw	r28, 0x0e	; 14
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <DIO__CheckStatusSetPortValue>:

CheckStatus DIO__CheckStatusSetPortValue(_uint8 Copy__uint8PortId, _uint8 Copy__uint8PortValue)
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <DIO__CheckStatusSetPortValue+0x6>
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <DIO__CheckStatusSetPortValue+0x8>
    15d8:	00 d0       	rcall	.+0      	; 0x15da <DIO__CheckStatusSetPortValue+0xa>
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	8a 83       	std	Y+2, r24	; 0x02
    15e0:	6b 83       	std	Y+3, r22	; 0x03

        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    15e2:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid PORT Id
               
        */
        if (Copy__uint8PortId <= DIO__UINT8_PORTD)
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	84 30       	cpi	r24, 0x04	; 4
    15e8:	a8 f5       	brcc	.+106    	; 0x1654 <DIO__CheckStatusSetPortValue+0x84>
        {
                switch (Copy__uint8PortId)
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	3e 83       	std	Y+6, r19	; 0x06
    15f2:	2d 83       	std	Y+5, r18	; 0x05
    15f4:	8d 81       	ldd	r24, Y+5	; 0x05
    15f6:	9e 81       	ldd	r25, Y+6	; 0x06
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	91 05       	cpc	r25, r1
    15fc:	d1 f0       	breq	.+52     	; 0x1632 <DIO__CheckStatusSetPortValue+0x62>
    15fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1600:	3e 81       	ldd	r19, Y+6	; 0x06
    1602:	22 30       	cpi	r18, 0x02	; 2
    1604:	31 05       	cpc	r19, r1
    1606:	2c f4       	brge	.+10     	; 0x1612 <DIO__CheckStatusSetPortValue+0x42>
    1608:	8d 81       	ldd	r24, Y+5	; 0x05
    160a:	9e 81       	ldd	r25, Y+6	; 0x06
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	61 f0       	breq	.+24     	; 0x1628 <DIO__CheckStatusSetPortValue+0x58>
    1610:	1e c0       	rjmp	.+60     	; 0x164e <DIO__CheckStatusSetPortValue+0x7e>
    1612:	2d 81       	ldd	r18, Y+5	; 0x05
    1614:	3e 81       	ldd	r19, Y+6	; 0x06
    1616:	22 30       	cpi	r18, 0x02	; 2
    1618:	31 05       	cpc	r19, r1
    161a:	81 f0       	breq	.+32     	; 0x163c <DIO__CheckStatusSetPortValue+0x6c>
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	83 30       	cpi	r24, 0x03	; 3
    1622:	91 05       	cpc	r25, r1
    1624:	81 f0       	breq	.+32     	; 0x1646 <DIO__CheckStatusSetPortValue+0x76>
    1626:	13 c0       	rjmp	.+38     	; 0x164e <DIO__CheckStatusSetPortValue+0x7e>
                {
                case DIO__UINT8_PORTA:
                        PORTA__UINT8_REG = Copy__uint8PortValue;
    1628:	eb e3       	ldi	r30, 0x3B	; 59
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	80 83       	st	Z, r24
    1630:	0e c0       	rjmp	.+28     	; 0x164e <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTB:
                        PORTB__UINT8_REG = Copy__uint8PortValue;
    1632:	e8 e3       	ldi	r30, 0x38	; 56
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	80 83       	st	Z, r24
    163a:	09 c0       	rjmp	.+18     	; 0x164e <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTC:
                        PORTC__UINT8_REG = Copy__uint8PortValue;
    163c:	e5 e3       	ldi	r30, 0x35	; 53
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	80 83       	st	Z, r24
    1644:	04 c0       	rjmp	.+8      	; 0x164e <DIO__CheckStatusSetPortValue+0x7e>
                        break;
                case DIO__UINT8_PORTD:
                        PORTD__UINT8_REG = Copy__uint8PortValue;
    1646:	e2 e3       	ldi	r30, 0x32	; 50
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    164e:	99 81       	ldd	r25, Y+1	; 0x01
    1650:	9c 83       	std	Y+4, r25	; 0x04
    1652:	04 c0       	rjmp	.+8      	; 0x165c <DIO__CheckStatusSetPortValue+0x8c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    1658:	29 81       	ldd	r18, Y+1	; 0x01
    165a:	2c 83       	std	Y+4, r18	; 0x04
    165c:	8c 81       	ldd	r24, Y+4	; 0x04
        }
}
    165e:	26 96       	adiw	r28, 0x06	; 6
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <DIO__CheckStatusGetPortValue>:

CheckStatus DIO__CheckStatusGetPortValue(_uint8 Copy__uint8PortId, _uint8 *Copy_p_uint8ReturnPortValue)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	27 97       	sbiw	r28, 0x07	; 7
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	8a 83       	std	Y+2, r24	; 0x02
    1686:	7c 83       	std	Y+4, r23	; 0x04
    1688:	6b 83       	std	Y+3, r22	; 0x03
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    168a:	19 82       	std	Y+1, r1	; 0x01
        /*
        Check 1-Valid Pointer != NULL
               
        */
        if (Copy_p_uint8ReturnPortValue != NULL)
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	9c 81       	ldd	r25, Y+4	; 0x04
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	e9 f1       	breq	.+122    	; 0x170e <DIO__CheckStatusGetPortValue+0x9e>
        {
                switch (Copy__uint8PortId)
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	3f 83       	std	Y+7, r19	; 0x07
    169c:	2e 83       	std	Y+6, r18	; 0x06
    169e:	8e 81       	ldd	r24, Y+6	; 0x06
    16a0:	9f 81       	ldd	r25, Y+7	; 0x07
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	91 05       	cpc	r25, r1
    16a6:	e1 f0       	breq	.+56     	; 0x16e0 <DIO__CheckStatusGetPortValue+0x70>
    16a8:	2e 81       	ldd	r18, Y+6	; 0x06
    16aa:	3f 81       	ldd	r19, Y+7	; 0x07
    16ac:	22 30       	cpi	r18, 0x02	; 2
    16ae:	31 05       	cpc	r19, r1
    16b0:	2c f4       	brge	.+10     	; 0x16bc <DIO__CheckStatusGetPortValue+0x4c>
    16b2:	8e 81       	ldd	r24, Y+6	; 0x06
    16b4:	9f 81       	ldd	r25, Y+7	; 0x07
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	61 f0       	breq	.+24     	; 0x16d2 <DIO__CheckStatusGetPortValue+0x62>
    16ba:	26 c0       	rjmp	.+76     	; 0x1708 <DIO__CheckStatusGetPortValue+0x98>
    16bc:	2e 81       	ldd	r18, Y+6	; 0x06
    16be:	3f 81       	ldd	r19, Y+7	; 0x07
    16c0:	22 30       	cpi	r18, 0x02	; 2
    16c2:	31 05       	cpc	r19, r1
    16c4:	a1 f0       	breq	.+40     	; 0x16ee <DIO__CheckStatusGetPortValue+0x7e>
    16c6:	8e 81       	ldd	r24, Y+6	; 0x06
    16c8:	9f 81       	ldd	r25, Y+7	; 0x07
    16ca:	83 30       	cpi	r24, 0x03	; 3
    16cc:	91 05       	cpc	r25, r1
    16ce:	b1 f0       	breq	.+44     	; 0x16fc <DIO__CheckStatusGetPortValue+0x8c>
    16d0:	1b c0       	rjmp	.+54     	; 0x1708 <DIO__CheckStatusGetPortValue+0x98>
                {
                case DIO__UINT8_PORTA:
                        *Copy_p_uint8ReturnPortValue = PINA__UINT8_REG;
    16d2:	e9 e3       	ldi	r30, 0x39	; 57
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	eb 81       	ldd	r30, Y+3	; 0x03
    16da:	fc 81       	ldd	r31, Y+4	; 0x04
    16dc:	80 83       	st	Z, r24
    16de:	14 c0       	rjmp	.+40     	; 0x1708 <DIO__CheckStatusGetPortValue+0x98>
                        break;
                case DIO__UINT8_PORTB:
                        *Copy_p_uint8ReturnPortValue = PINB__UINT8_REG;
    16e0:	e6 e3       	ldi	r30, 0x36	; 54
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	eb 81       	ldd	r30, Y+3	; 0x03
    16e8:	fc 81       	ldd	r31, Y+4	; 0x04
    16ea:	80 83       	st	Z, r24
    16ec:	0d c0       	rjmp	.+26     	; 0x1708 <DIO__CheckStatusGetPortValue+0x98>

                        break;
                case DIO__UINT8_PORTC:
                        *Copy_p_uint8ReturnPortValue = PINC__UINT8_REG;
    16ee:	e3 e3       	ldi	r30, 0x33	; 51
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	eb 81       	ldd	r30, Y+3	; 0x03
    16f6:	fc 81       	ldd	r31, Y+4	; 0x04
    16f8:	80 83       	st	Z, r24
    16fa:	06 c0       	rjmp	.+12     	; 0x1708 <DIO__CheckStatusGetPortValue+0x98>
                        break;
                case DIO__UINT8_PORTD:
                        *Copy_p_uint8ReturnPortValue = PIND__UINT8_REG;
    16fc:	e0 e3       	ldi	r30, 0x30	; 48
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	eb 81       	ldd	r30, Y+3	; 0x03
    1704:	fc 81       	ldd	r31, Y+4	; 0x04
    1706:	80 83       	st	Z, r24
                        break;
                default:
                        /* DO NOTHING */
                        break;
                }
                return Local_CheckStatusReturnStatus;
    1708:	99 81       	ldd	r25, Y+1	; 0x01
    170a:	9d 83       	std	Y+5, r25	; 0x05
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <DIO__CheckStatusGetPortValue+0xa6>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	89 83       	std	Y+1, r24	; 0x01
                return Local_CheckStatusReturnStatus;
    1712:	29 81       	ldd	r18, Y+1	; 0x01
    1714:	2d 83       	std	Y+5, r18	; 0x05
    1716:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    1718:	27 96       	adiw	r28, 0x07	; 7
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <GIE_VoidEnable>:
#include"GIE_private.h"
#include"GIE_config.h"


Void  GIE_VoidEnable(Void) 
{
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
         SET_BIT(GIE_UINT8_STATUS_REG,GIE_GLOBAL_INT_STATE);
    1732:	af e5       	ldi	r26, 0x5F	; 95
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	ef e5       	ldi	r30, 0x5F	; 95
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	80 68       	ori	r24, 0x80	; 128
    173e:	8c 93       	st	X, r24
}
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <GIE_VoidDisable>:

Void  GIE_VoidDisable(Void)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
        CLEAR_BIT(GIE_UINT8_STATUS_REG,GIE_GLOBAL_INT_STATE);
    174e:	af e5       	ldi	r26, 0x5F	; 95
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	ef e5       	ldi	r30, 0x5F	; 95
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	8f 77       	andi	r24, 0x7F	; 127
    175a:	8c 93       	st	X, r24
}
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <RTO_CheckStatusCreateTask>:


static TCB RTO_ASTRTASKS[RTO_UINT8_MAX_NUMBER_OF_TASKS];

CheckStatus RTO_CheckStatusCreateTask(_uint8 Copy__Uint8Priority, _uint16 Copy__Uint16Priodicity,_uint16 Copy__Uint16FristDelay,void (*PTF)(Void))
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	28 97       	sbiw	r28, 0x08	; 8
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	8a 83       	std	Y+2, r24	; 0x02
    1778:	7c 83       	std	Y+4, r23	; 0x04
    177a:	6b 83       	std	Y+3, r22	; 0x03
    177c:	5e 83       	std	Y+6, r21	; 0x06
    177e:	4d 83       	std	Y+5, r20	; 0x05
    1780:	38 87       	std	Y+8, r19	; 0x08
    1782:	2f 83       	std	Y+7, r18	; 0x07
                CheckStatus Local_ErrorState = CHECK_FAIL;
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	89 83       	std	Y+1, r24	; 0x01
        if( (PTF != NULL) && Copy__Uint8Priority < RTO_UINT8_MAX_NUMBER_OF_TASKS)
    1788:	8f 81       	ldd	r24, Y+7	; 0x07
    178a:	98 85       	ldd	r25, Y+8	; 0x08
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	c1 f1       	breq	.+112    	; 0x1800 <RTO_CheckStatusCreateTask+0x9e>
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	83 30       	cpi	r24, 0x03	; 3
    1794:	a8 f5       	brcc	.+106    	; 0x1800 <RTO_CheckStatusCreateTask+0x9e>
        {
                RTO_ASTRTASKS[Copy__Uint8Priority].Priodicity = Copy__Uint16Priodicity;
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	c9 01       	movw	r24, r18
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	82 0f       	add	r24, r18
    17a4:	93 1f       	adc	r25, r19
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	fc 01       	movw	r30, r24
    17ac:	e8 59       	subi	r30, 0x98	; 152
    17ae:	fe 4f       	sbci	r31, 0xFE	; 254
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	91 83       	std	Z+1, r25	; 0x01
    17b6:	80 83       	st	Z, r24
                RTO_ASTRTASKS[Copy__Uint8Priority].FristDelay = Copy__Uint16FristDelay;
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	c9 01       	movw	r24, r18
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	82 0f       	add	r24, r18
    17c6:	93 1f       	adc	r25, r19
    17c8:	01 96       	adiw	r24, 0x01	; 1
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	fc 01       	movw	r30, r24
    17d0:	e8 59       	subi	r30, 0x98	; 152
    17d2:	fe 4f       	sbci	r31, 0xFE	; 254
    17d4:	8d 81       	ldd	r24, Y+5	; 0x05
    17d6:	9e 81       	ldd	r25, Y+6	; 0x06
    17d8:	91 83       	std	Z+1, r25	; 0x01
    17da:	80 83       	st	Z, r24
                RTO_ASTRTASKS[Copy__Uint8Priority].PTF = PTF;
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	c9 01       	movw	r24, r18
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	82 0f       	add	r24, r18
    17ea:	93 1f       	adc	r25, r19
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	fc 01       	movw	r30, r24
    17f2:	e4 59       	subi	r30, 0x94	; 148
    17f4:	fe 4f       	sbci	r31, 0xFE	; 254
    17f6:	8f 81       	ldd	r24, Y+7	; 0x07
    17f8:	98 85       	ldd	r25, Y+8	; 0x08
    17fa:	91 83       	std	Z+1, r25	; 0x01
    17fc:	80 83       	st	Z, r24

                Local_ErrorState=CHECK_SUCCESS;
    17fe:	19 82       	std	Y+1, r1	; 0x01
        }
        return Local_ErrorState;
    1800:	89 81       	ldd	r24, Y+1	; 0x01
}
    1802:	28 96       	adiw	r28, 0x08	; 8
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <RTO_VoidSchedular>:



static Void RTO_VoidSchedular(Void)
{
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	0f 92       	push	r0
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
        _uint8  Local_Uint8Counter=0x00;
    181e:	19 82       	std	Y+1, r1	; 0x01
        for(Local_Uint8Counter=0;Local_Uint8Counter<RTO_UINT8_MAX_NUMBER_OF_TASKS;++Local_Uint8Counter)
    1820:	19 82       	std	Y+1, r1	; 0x01
    1822:	69 c0       	rjmp	.+210    	; 0x18f6 <RTO_VoidSchedular+0xe2>
        {
                if( RTO_ASTRTASKS[Local_Uint8Counter].FristDelay == 0 )
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	c9 01       	movw	r24, r18
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	82 0f       	add	r24, r18
    1832:	93 1f       	adc	r25, r19
    1834:	01 96       	adiw	r24, 0x01	; 1
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	fc 01       	movw	r30, r24
    183c:	e8 59       	subi	r30, 0x98	; 152
    183e:	fe 4f       	sbci	r31, 0xFE	; 254
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	a1 f5       	brne	.+104    	; 0x18b0 <RTO_VoidSchedular+0x9c>
                {
                        // call functiion
                        RTO_ASTRTASKS[Local_Uint8Counter].PTF();
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	c9 01       	movw	r24, r18
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	82 0f       	add	r24, r18
    1856:	93 1f       	adc	r25, r19
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	fc 01       	movw	r30, r24
    185e:	e4 59       	subi	r30, 0x94	; 148
    1860:	fe 4f       	sbci	r31, 0xFE	; 254
    1862:	01 90       	ld	r0, Z+
    1864:	f0 81       	ld	r31, Z
    1866:	e0 2d       	mov	r30, r0
    1868:	09 95       	icall
                        /*update frist delay with the periodicity*/
                        RTO_ASTRTASKS[Local_Uint8Counter].FristDelay=RTO_ASTRTASKS[Local_Uint8Counter].Priodicity-1;
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	48 2f       	mov	r20, r24
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	c9 01       	movw	r24, r18
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	82 0f       	add	r24, r18
    187e:	93 1f       	adc	r25, r19
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	fc 01       	movw	r30, r24
    1886:	e8 59       	subi	r30, 0x98	; 152
    1888:	fe 4f       	sbci	r31, 0xFE	; 254
    188a:	80 81       	ld	r24, Z
    188c:	91 81       	ldd	r25, Z+1	; 0x01
    188e:	9c 01       	movw	r18, r24
    1890:	21 50       	subi	r18, 0x01	; 1
    1892:	30 40       	sbci	r19, 0x00	; 0
    1894:	ca 01       	movw	r24, r20
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	84 0f       	add	r24, r20
    189c:	95 1f       	adc	r25, r21
    189e:	01 96       	adiw	r24, 0x01	; 1
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	fc 01       	movw	r30, r24
    18a6:	e8 59       	subi	r30, 0x98	; 152
    18a8:	fe 4f       	sbci	r31, 0xFE	; 254
    18aa:	31 83       	std	Z+1, r19	; 0x01
    18ac:	20 83       	st	Z, r18
    18ae:	20 c0       	rjmp	.+64     	; 0x18f0 <RTO_VoidSchedular+0xdc>
                }
                else
                {
                        RTO_ASTRTASKS[Local_Uint8Counter].FristDelay--;
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	c9 01       	movw	r24, r18
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	82 0f       	add	r24, r18
    18be:	93 1f       	adc	r25, r19
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	fc 01       	movw	r30, r24
    18c8:	e8 59       	subi	r30, 0x98	; 152
    18ca:	fe 4f       	sbci	r31, 0xFE	; 254
    18cc:	80 81       	ld	r24, Z
    18ce:	91 81       	ldd	r25, Z+1	; 0x01
    18d0:	ac 01       	movw	r20, r24
    18d2:	41 50       	subi	r20, 0x01	; 1
    18d4:	50 40       	sbci	r21, 0x00	; 0
    18d6:	c9 01       	movw	r24, r18
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	82 0f       	add	r24, r18
    18de:	93 1f       	adc	r25, r19
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	fc 01       	movw	r30, r24
    18e8:	e8 59       	subi	r30, 0x98	; 152
    18ea:	fe 4f       	sbci	r31, 0xFE	; 254
    18ec:	51 83       	std	Z+1, r21	; 0x01
    18ee:	40 83       	st	Z, r20


static Void RTO_VoidSchedular(Void)
{
        _uint8  Local_Uint8Counter=0x00;
        for(Local_Uint8Counter=0;Local_Uint8Counter<RTO_UINT8_MAX_NUMBER_OF_TASKS;++Local_Uint8Counter)
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	8f 5f       	subi	r24, 0xFF	; 255
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	83 30       	cpi	r24, 0x03	; 3
    18fa:	08 f4       	brcc	.+2      	; 0x18fe <RTO_VoidSchedular+0xea>
    18fc:	93 cf       	rjmp	.-218    	; 0x1824 <RTO_VoidSchedular+0x10>
                {
                        RTO_ASTRTASKS[Local_Uint8Counter].FristDelay--;
                }
        }

}
    18fe:	0f 90       	pop	r0
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <RTO_VoidInit>:

Void RTO_VoidInit(Void)
{
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
	/*enable global interrupt */
    GIE_VoidEnable();
    190e:	0e 94 95 0b 	call	0x172a	; 0x172a <GIE_VoidEnable>

    /* TMR Set call back for over flow */
  TMR_CheckStatusTimer0OVFSetCallBack(&RTO_VoidSchedular);
    1912:	8a e0       	ldi	r24, 0x0A	; 10
    1914:	9c e0       	ldi	r25, 0x0C	; 12
    1916:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <TMR_CheckStatusTimer0OVFSetCallBack>

}
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <RTO_VoidStartTmr>:

Void RTO_VoidStartTmr(_uint16 Copy_Uint16TmrInMsec)
{
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	00 d0       	rcall	.+0      	; 0x1926 <RTO_VoidStartTmr+0x6>
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	9a 83       	std	Y+2, r25	; 0x02
    192c:	89 83       	std	Y+1, r24	; 0x01

    /* Init Enable */
    TMR_CheckSatusInit(Copy_Uint16TmrInMsec);
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	9a 81       	ldd	r25, Y+2	; 0x02
    1932:	0e 94 a0 0c 	call	0x1940	; 0x1940 <TMR_CheckSatusInit>
}
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <TMR_CheckSatusInit>:

static _float32 Local__Float32NumberOfOVF = 0.0;
static _uint8 Local__Uint8_PrloadNum = 0;

CheckStatus TMR_CheckSatusInit(_uint16 Copy__Uint16ActionTime)
{
    1940:	ef 92       	push	r14
    1942:	ff 92       	push	r15
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	2f 97       	sbiw	r28, 0x0f	; 15
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	9f 87       	std	Y+15, r25	; 0x0f
    195e:	8e 87       	std	Y+14, r24	; 0x0e
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    1960:	1d 86       	std	Y+13, r1	; 0x0d
        _uint32 Local__Uint32FreqTime = 0x00;
    1962:	19 86       	std	Y+9, r1	; 0x09
    1964:	1a 86       	std	Y+10, r1	; 0x0a
    1966:	1b 86       	std	Y+11, r1	; 0x0b
    1968:	1c 86       	std	Y+12, r1	; 0x0c
        _uint32 Local_Uint32TimeOVF = 0x00;
    196a:	1d 82       	std	Y+5, r1	; 0x05
    196c:	1e 82       	std	Y+6, r1	; 0x06
    196e:	1f 82       	std	Y+7, r1	; 0x07
    1970:	18 86       	std	Y+8, r1	; 0x08

        _float32 Local__Float32Fraction = 0.0;
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	a0 e0       	ldi	r26, 0x00	; 0
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	9a 83       	std	Y+2, r25	; 0x02
    197e:	ab 83       	std	Y+3, r26	; 0x03
    1980:	bc 83       	std	Y+4, r27	; 0x04
        {
                /* Select mode of timer */
                switch (TMR__UINT8_MODE_TIMER)
                {
                case TMR_IN_NORMAL_MODE:
                        CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_WGM00);
    1982:	a3 e5       	ldi	r26, 0x53	; 83
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e3 e5       	ldi	r30, 0x53	; 83
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	8f 7b       	andi	r24, 0xBF	; 191
    198e:	8c 93       	st	X, r24
                        CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_WGM01);
    1990:	a3 e5       	ldi	r26, 0x53	; 83
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e3 e5       	ldi	r30, 0x53	; 83
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	87 7f       	andi	r24, 0xF7	; 247
    199c:	8c 93       	st	X, r24
                        case TMR_CMOMODE_OC0_TOGGLE:
                                CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_COM01);
                                SET_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_COM00);
                                break;
                        case TMR_CMOMODE_OC0_SET:
                                SET_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_COM01);
    199e:	a3 e5       	ldi	r26, 0x53	; 83
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e3 e5       	ldi	r30, 0x53	; 83
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	80 62       	ori	r24, 0x20	; 32
    19aa:	8c 93       	st	X, r24
                                CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_COM00);
    19ac:	a3 e5       	ldi	r26, 0x53	; 83
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e3 e5       	ldi	r30, 0x53	; 83
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	8f 7e       	andi	r24, 0xEF	; 239
    19b8:	8c 93       	st	X, r24
                                break;
                        default:
                                break;
                        }
                        /* SET PRELODE VALUE */
                        Local__Uint32FreqTime = (_uint32)(TMR__UINT32_F_CPU / 8);
    19ba:	80 e4       	ldi	r24, 0x40	; 64
    19bc:	92 e4       	ldi	r25, 0x42	; 66
    19be:	af e0       	ldi	r26, 0x0F	; 15
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	89 87       	std	Y+9, r24	; 0x09
    19c4:	9a 87       	std	Y+10, r25	; 0x0a
    19c6:	ab 87       	std	Y+11, r26	; 0x0b
    19c8:	bc 87       	std	Y+12, r27	; 0x0c
                        Local_Uint32TimeOVF = (_uint32)((1000000UL / (_uint32)Local__Uint32FreqTime) * 256);
    19ca:	80 e4       	ldi	r24, 0x40	; 64
    19cc:	92 e4       	ldi	r25, 0x42	; 66
    19ce:	af e0       	ldi	r26, 0x0F	; 15
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	29 85       	ldd	r18, Y+9	; 0x09
    19d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    19d6:	4b 85       	ldd	r20, Y+11	; 0x0b
    19d8:	5c 85       	ldd	r21, Y+12	; 0x0c
    19da:	bc 01       	movw	r22, r24
    19dc:	cd 01       	movw	r24, r26
    19de:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__udivmodsi4>
    19e2:	da 01       	movw	r26, r20
    19e4:	c9 01       	movw	r24, r18
    19e6:	ba 2f       	mov	r27, r26
    19e8:	a9 2f       	mov	r26, r25
    19ea:	98 2f       	mov	r25, r24
    19ec:	88 27       	eor	r24, r24
    19ee:	8d 83       	std	Y+5, r24	; 0x05
    19f0:	9e 83       	std	Y+6, r25	; 0x06
    19f2:	af 83       	std	Y+7, r26	; 0x07
    19f4:	b8 87       	std	Y+8, r27	; 0x08
                        Local__Float32NumberOfOVF = (_float32)(((_float32)Copy__Uint16ActionTime * 1000000.00) / (_float32)Local_Uint32TimeOVF);
    19f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    19f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    19fa:	cc 01       	movw	r24, r24
    19fc:	a0 e0       	ldi	r26, 0x00	; 0
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	cd 01       	movw	r24, r26
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	34 e2       	ldi	r19, 0x24	; 36
    1a14:	44 e7       	ldi	r20, 0x74	; 116
    1a16:	59 e4       	ldi	r21, 0x49	; 73
    1a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	7c 01       	movw	r14, r24
    1a22:	8d 01       	movw	r16, r26
    1a24:	6d 81       	ldd	r22, Y+5	; 0x05
    1a26:	7e 81       	ldd	r23, Y+6	; 0x06
    1a28:	8f 81       	ldd	r24, Y+7	; 0x07
    1a2a:	98 85       	ldd	r25, Y+8	; 0x08
    1a2c:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1a30:	9b 01       	movw	r18, r22
    1a32:	ac 01       	movw	r20, r24
    1a34:	c8 01       	movw	r24, r16
    1a36:	b7 01       	movw	r22, r14
    1a38:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	80 93 7a 01 	sts	0x017A, r24
    1a44:	90 93 7b 01 	sts	0x017B, r25
    1a48:	a0 93 7c 01 	sts	0x017C, r26
    1a4c:	b0 93 7d 01 	sts	0x017D, r27
                        Local__Float32Fraction = (_float32)(Local__Float32NumberOfOVF - (_uint32)Local__Float32NumberOfOVF);
    1a50:	e0 90 7a 01 	lds	r14, 0x017A
    1a54:	f0 90 7b 01 	lds	r15, 0x017B
    1a58:	00 91 7c 01 	lds	r16, 0x017C
    1a5c:	10 91 7d 01 	lds	r17, 0x017D
    1a60:	80 91 7a 01 	lds	r24, 0x017A
    1a64:	90 91 7b 01 	lds	r25, 0x017B
    1a68:	a0 91 7c 01 	lds	r26, 0x017C
    1a6c:	b0 91 7d 01 	lds	r27, 0x017D
    1a70:	bc 01       	movw	r22, r24
    1a72:	cd 01       	movw	r24, r26
    1a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	cd 01       	movw	r24, r26
    1a80:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1a84:	9b 01       	movw	r18, r22
    1a86:	ac 01       	movw	r20, r24
    1a88:	c8 01       	movw	r24, r16
    1a8a:	b7 01       	movw	r22, r14
    1a8c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	9a 83       	std	Y+2, r25	; 0x02
    1a98:	ab 83       	std	Y+3, r26	; 0x03
    1a9a:	bc 83       	std	Y+4, r27	; 0x04
                        Local__Uint8_PrloadNum = (_uint8)(256 - 256.0 * Local__Float32Fraction);
    1a9c:	69 81       	ldd	r22, Y+1	; 0x01
    1a9e:	7a 81       	ldd	r23, Y+2	; 0x02
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e8       	ldi	r20, 0x80	; 128
    1aaa:	53 ec       	ldi	r21, 0xC3	; 195
    1aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	bc 01       	movw	r22, r24
    1ab6:	cd 01       	movw	r24, r26
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e8       	ldi	r20, 0x80	; 128
    1abe:	53 e4       	ldi	r21, 0x43	; 67
    1ac0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	bc 01       	movw	r22, r24
    1aca:	cd 01       	movw	r24, r26
    1acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	80 93 7e 01 	sts	0x017E, r24
                        TMR__UINT8_TCNT0_REG = Local__Uint8_PrloadNum;
    1ad8:	e2 e5       	ldi	r30, 0x52	; 82
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 91 7e 01 	lds	r24, 0x017E
    1ae0:	80 83       	st	Z, r24
                        /* ENABLE INTERRUPT OVERFLOW */
                        SET_BIT(TMR__UINT8_TIMSK_REG, TMR_TIMSK_TOIF0);
    1ae2:	a9 e5       	ldi	r26, 0x59	; 89
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e9 e5       	ldi	r30, 0x59	; 89
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	81 60       	ori	r24, 0x01	; 1
    1aee:	8c 93       	st	X, r24
                        CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_CS02);
                        CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_CS01);
                        SET_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_CS00);
                        break;
                case TMR_CLK_SOURCE_PRESCALER8:
                        CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_CS02);
    1af0:	a3 e5       	ldi	r26, 0x53	; 83
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e3 e5       	ldi	r30, 0x53	; 83
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	8b 7f       	andi	r24, 0xFB	; 251
    1afc:	8c 93       	st	X, r24
                        SET_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_CS01);
    1afe:	a3 e5       	ldi	r26, 0x53	; 83
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e3 e5       	ldi	r30, 0x53	; 83
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	82 60       	ori	r24, 0x02	; 2
    1b0a:	8c 93       	st	X, r24
                        CLEAR_BIT(TMR__UINT8_TCCR0_REG, TMR_TCCR0_CS00);
    1b0c:	a3 e5       	ldi	r26, 0x53	; 83
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e3 e5       	ldi	r30, 0x53	; 83
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	8e 7f       	andi	r24, 0xFE	; 254
    1b18:	8c 93       	st	X, r24
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
        }
        return Local_CheckStatusReturnStatus;
    1b1a:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    1b1c:	2f 96       	adiw	r28, 0x0f	; 15
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	1f 91       	pop	r17
    1b2e:	0f 91       	pop	r16
    1b30:	ff 90       	pop	r15
    1b32:	ef 90       	pop	r14
    1b34:	08 95       	ret

00001b36 <__vector_11>:
Void __vector_11(Void) __attribute__((signal));
Void __vector_11(Void)
{
    1b36:	1f 92       	push	r1
    1b38:	0f 92       	push	r0
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	0f 92       	push	r0
    1b3e:	11 24       	eor	r1, r1
    1b40:	2f 93       	push	r18
    1b42:	3f 93       	push	r19
    1b44:	4f 93       	push	r20
    1b46:	5f 93       	push	r21
    1b48:	6f 93       	push	r22
    1b4a:	7f 93       	push	r23
    1b4c:	8f 93       	push	r24
    1b4e:	9f 93       	push	r25
    1b50:	af 93       	push	r26
    1b52:	bf 93       	push	r27
    1b54:	ef 93       	push	r30
    1b56:	ff 93       	push	r31
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
        static _uint16 Local__Uint16Counter = 0;

        Local__Uint16Counter++;
    1b60:	80 91 7f 01 	lds	r24, 0x017F
    1b64:	90 91 80 01 	lds	r25, 0x0180
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	90 93 80 01 	sts	0x0180, r25
    1b6e:	80 93 7f 01 	sts	0x017F, r24
        if (Local__Uint16Counter == ((_uint16)Local__Float32NumberOfOVF + 1))
    1b72:	80 91 7a 01 	lds	r24, 0x017A
    1b76:	90 91 7b 01 	lds	r25, 0x017B
    1b7a:	a0 91 7c 01 	lds	r26, 0x017C
    1b7e:	b0 91 7d 01 	lds	r27, 0x017D
    1b82:	bc 01       	movw	r22, r24
    1b84:	cd 01       	movw	r24, r26
    1b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	9c 01       	movw	r18, r24
    1b90:	2f 5f       	subi	r18, 0xFF	; 255
    1b92:	3f 4f       	sbci	r19, 0xFF	; 255
    1b94:	80 91 7f 01 	lds	r24, 0x017F
    1b98:	90 91 80 01 	lds	r25, 0x0180
    1b9c:	28 17       	cp	r18, r24
    1b9e:	39 07       	cpc	r19, r25
    1ba0:	a1 f4       	brne	.+40     	; 0x1bca <__vector_11+0x94>
        {
                TMR__UINT8_TCNT0_REG = Local__Uint8_PrloadNum;
    1ba2:	e2 e5       	ldi	r30, 0x52	; 82
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 91 7e 01 	lds	r24, 0x017E
    1baa:	80 83       	st	Z, r24
                Local__Uint16Counter = 0;
    1bac:	10 92 80 01 	sts	0x0180, r1
    1bb0:	10 92 7f 01 	sts	0x017F, r1
                if (TMR_PTF_VoidTIMEROVF != NULL)
    1bb4:	80 91 83 01 	lds	r24, 0x0183
    1bb8:	90 91 84 01 	lds	r25, 0x0184
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	29 f0       	breq	.+10     	; 0x1bca <__vector_11+0x94>
                {
                        TMR_PTF_VoidTIMEROVF();
    1bc0:	e0 91 83 01 	lds	r30, 0x0183
    1bc4:	f0 91 84 01 	lds	r31, 0x0184
    1bc8:	09 95       	icall
        }
        else
        {
                /* DO NOTHING */
        }
}
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	ff 91       	pop	r31
    1bd0:	ef 91       	pop	r30
    1bd2:	bf 91       	pop	r27
    1bd4:	af 91       	pop	r26
    1bd6:	9f 91       	pop	r25
    1bd8:	8f 91       	pop	r24
    1bda:	7f 91       	pop	r23
    1bdc:	6f 91       	pop	r22
    1bde:	5f 91       	pop	r21
    1be0:	4f 91       	pop	r20
    1be2:	3f 91       	pop	r19
    1be4:	2f 91       	pop	r18
    1be6:	0f 90       	pop	r0
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	0f 90       	pop	r0
    1bec:	1f 90       	pop	r1
    1bee:	18 95       	reti

00001bf0 <__vector_10>:
Void __vector_10(Void) __attribute__((signal));
Void __vector_10(Void)
{
    1bf0:	1f 92       	push	r1
    1bf2:	0f 92       	push	r0
    1bf4:	0f b6       	in	r0, 0x3f	; 63
    1bf6:	0f 92       	push	r0
    1bf8:	11 24       	eor	r1, r1
    1bfa:	2f 93       	push	r18
    1bfc:	3f 93       	push	r19
    1bfe:	4f 93       	push	r20
    1c00:	5f 93       	push	r21
    1c02:	6f 93       	push	r22
    1c04:	7f 93       	push	r23
    1c06:	8f 93       	push	r24
    1c08:	9f 93       	push	r25
    1c0a:	af 93       	push	r26
    1c0c:	bf 93       	push	r27
    1c0e:	ef 93       	push	r30
    1c10:	ff 93       	push	r31
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
        static _uint16 Local__Uint16Counter = 0;

        Local__Uint16Counter++;
    1c1a:	80 91 81 01 	lds	r24, 0x0181
    1c1e:	90 91 82 01 	lds	r25, 0x0182
    1c22:	01 96       	adiw	r24, 0x01	; 1
    1c24:	90 93 82 01 	sts	0x0182, r25
    1c28:	80 93 81 01 	sts	0x0181, r24
        if (Local__Uint16Counter == 10000)
    1c2c:	80 91 81 01 	lds	r24, 0x0181
    1c30:	90 91 82 01 	lds	r25, 0x0182
    1c34:	27 e2       	ldi	r18, 0x27	; 39
    1c36:	80 31       	cpi	r24, 0x10	; 16
    1c38:	92 07       	cpc	r25, r18
    1c3a:	79 f4       	brne	.+30     	; 0x1c5a <__vector_10+0x6a>
        {
                Local__Uint16Counter = 0;
    1c3c:	10 92 82 01 	sts	0x0182, r1
    1c40:	10 92 81 01 	sts	0x0181, r1
                if (TMR_PTF_VoidTIMERCTC != NULL)
    1c44:	80 91 85 01 	lds	r24, 0x0185
    1c48:	90 91 86 01 	lds	r25, 0x0186
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	29 f0       	breq	.+10     	; 0x1c5a <__vector_10+0x6a>
                {
                        TMR_PTF_VoidTIMERCTC();
    1c50:	e0 91 85 01 	lds	r30, 0x0185
    1c54:	f0 91 86 01 	lds	r31, 0x0186
    1c58:	09 95       	icall
        }
        else
        {
                /* DO NOTHING */
        }
}
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	ff 91       	pop	r31
    1c60:	ef 91       	pop	r30
    1c62:	bf 91       	pop	r27
    1c64:	af 91       	pop	r26
    1c66:	9f 91       	pop	r25
    1c68:	8f 91       	pop	r24
    1c6a:	7f 91       	pop	r23
    1c6c:	6f 91       	pop	r22
    1c6e:	5f 91       	pop	r21
    1c70:	4f 91       	pop	r20
    1c72:	3f 91       	pop	r19
    1c74:	2f 91       	pop	r18
    1c76:	0f 90       	pop	r0
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	0f 90       	pop	r0
    1c7c:	1f 90       	pop	r1
    1c7e:	18 95       	reti

00001c80 <TMR_CheckStatusTimer0OVFSetCallBack>:
CheckStatus TMR_CheckStatusTimer0OVFSetCallBack(Void (*Copy_PTF)(Void))
{
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <TMR_CheckStatusTimer0OVFSetCallBack+0x6>
    1c86:	0f 92       	push	r0
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	9b 83       	std	Y+3, r25	; 0x03
    1c8e:	8a 83       	std	Y+2, r24	; 0x02
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    1c90:	19 82       	std	Y+1, r1	; 0x01
        if (Copy_PTF != NULL)
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	9b 81       	ldd	r25, Y+3	; 0x03
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	39 f0       	breq	.+14     	; 0x1ca8 <TMR_CheckStatusTimer0OVFSetCallBack+0x28>
        {
                TMR_PTF_VoidTIMEROVF = Copy_PTF;
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9e:	90 93 84 01 	sts	0x0184, r25
    1ca2:	80 93 83 01 	sts	0x0183, r24
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <TMR_CheckStatusTimer0OVFSetCallBack+0x2c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	89 83       	std	Y+1, r24	; 0x01
        }
        return Local_CheckStatusReturnStatus;
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <TMR_CheckStatusTimer0CTCSetCallBack>:
CheckStatus TMR_CheckStatusTimer0CTCSetCallBack(Void (*Copy_PTF)(Void))
{
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <TMR_CheckStatusTimer0CTCSetCallBack+0x6>
    1cc0:	0f 92       	push	r0
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	9b 83       	std	Y+3, r25	; 0x03
    1cc8:	8a 83       	std	Y+2, r24	; 0x02
        CheckStatus Local_CheckStatusReturnStatus = CHECK_SUCCESS;
    1cca:	19 82       	std	Y+1, r1	; 0x01
        if (Copy_PTF != NULL)
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	39 f0       	breq	.+14     	; 0x1ce2 <TMR_CheckStatusTimer0CTCSetCallBack+0x28>
        {
                TMR_PTF_VoidTIMERCTC = Copy_PTF;
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd8:	90 93 86 01 	sts	0x0186, r25
    1cdc:	80 93 85 01 	sts	0x0185, r24
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <TMR_CheckStatusTimer0CTCSetCallBack+0x2c>
        }
        else
        {
                Local_CheckStatusReturnStatus = CHECK_FAIL;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	89 83       	std	Y+1, r24	; 0x01
        }
        return Local_CheckStatusReturnStatus;
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <main>:
Void  App_VoidTask3(Void);
Void  App_VoidTask2(Void);
Void  App_VoidTask1(Void);

int main (void)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62

DIO_VoidInit();
    1cfc:	0e 94 b7 06 	call	0xd6e	; 0xd6e <DIO_VoidInit>

RTO_CheckStatusCreateTask(1,10000,0,&App_VoidTask1);
    1d00:	22 ea       	ldi	r18, 0xA2	; 162
    1d02:	3e e0       	ldi	r19, 0x0E	; 14
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	60 e1       	ldi	r22, 0x10	; 16
    1d08:	77 e2       	ldi	r23, 0x27	; 39
    1d0a:	40 e0       	ldi	r20, 0x00	; 0
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <RTO_CheckStatusCreateTask>
RTO_CheckStatusCreateTask(2,2000,0,&App_VoidTask2);
    1d12:	2d eb       	ldi	r18, 0xBD	; 189
    1d14:	3e e0       	ldi	r19, 0x0E	; 14
    1d16:	82 e0       	ldi	r24, 0x02	; 2
    1d18:	60 ed       	ldi	r22, 0xD0	; 208
    1d1a:	77 e0       	ldi	r23, 0x07	; 7
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	0e 94 b1 0b 	call	0x1762	; 0x1762 <RTO_CheckStatusCreateTask>
RTO_CheckStatusCreateTask(0,50000,0,&App_VoidTask3);
    1d24:	28 ed       	ldi	r18, 0xD8	; 216
    1d26:	3e e0       	ldi	r19, 0x0E	; 14
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	60 e5       	ldi	r22, 0x50	; 80
    1d2c:	73 ec       	ldi	r23, 0xC3	; 195
    1d2e:	40 e0       	ldi	r20, 0x00	; 0
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	0e 94 b1 0b 	call	0x1762	; 0x1762 <RTO_CheckStatusCreateTask>

RTO_VoidInit();
    1d36:	0e 94 83 0c 	call	0x1906	; 0x1906 <RTO_VoidInit>

RTO_VoidStartTmr(1);
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e 94 90 0c 	call	0x1920	; 0x1920 <RTO_VoidStartTmr>
    1d42:	ff cf       	rjmp	.-2      	; 0x1d42 <main+0x4e>

00001d44 <App_VoidTask1>:
while(TRUE);
	return 0;
}

Void  App_VoidTask1(Void)
{
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
static _uint8 Flag = 0;

if(Flag == 0)
    1d4c:	80 91 87 01 	lds	r24, 0x0187
    1d50:	88 23       	and	r24, r24
    1d52:	49 f4       	brne	.+18     	; 0x1d66 <App_VoidTask1+0x22>
{
	DIO__CheckStatusSetPinValue(DIO__UINT8_PORTA,DIO__UINT8_PIN1,DIO__UINT8_HIGH);
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	61 e0       	ldi	r22, 0x01	; 1
    1d58:	41 e0       	ldi	r20, 0x01	; 1
    1d5a:	0e 94 05 08 	call	0x100a	; 0x100a <DIO__CheckStatusSetPinValue>
	Flag= 1;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	80 93 87 01 	sts	0x0187, r24
    1d64:	07 c0       	rjmp	.+14     	; 0x1d74 <App_VoidTask1+0x30>
}
else
{
	DIO__CheckStatusSetPinValue(DIO__UINT8_PORTA,DIO__UINT8_PIN1,DIO__UINT8_LOW);
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	61 e0       	ldi	r22, 0x01	; 1
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	0e 94 05 08 	call	0x100a	; 0x100a <DIO__CheckStatusSetPinValue>
	Flag= 0;
    1d70:	10 92 87 01 	sts	0x0187, r1

}

}
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <App_VoidTask2>:
Void  App_VoidTask2(Void)
{
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
static _uint8 Flag = 0;

if(Flag == 0)
    1d82:	80 91 88 01 	lds	r24, 0x0188
    1d86:	88 23       	and	r24, r24
    1d88:	49 f4       	brne	.+18     	; 0x1d9c <App_VoidTask2+0x22>
{
	DIO__CheckStatusSetPinValue(DIO__UINT8_PORTA,DIO__UINT8_PIN2,DIO__UINT8_HIGH);
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	62 e0       	ldi	r22, 0x02	; 2
    1d8e:	41 e0       	ldi	r20, 0x01	; 1
    1d90:	0e 94 05 08 	call	0x100a	; 0x100a <DIO__CheckStatusSetPinValue>
	Flag= 1;
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	80 93 88 01 	sts	0x0188, r24
    1d9a:	07 c0       	rjmp	.+14     	; 0x1daa <App_VoidTask2+0x30>
}
else
{
	DIO__CheckStatusSetPinValue(DIO__UINT8_PORTA,DIO__UINT8_PIN2,DIO__UINT8_LOW);
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	62 e0       	ldi	r22, 0x02	; 2
    1da0:	40 e0       	ldi	r20, 0x00	; 0
    1da2:	0e 94 05 08 	call	0x100a	; 0x100a <DIO__CheckStatusSetPinValue>
	Flag= 0;
    1da6:	10 92 88 01 	sts	0x0188, r1

}

}
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <App_VoidTask3>:
Void  App_VoidTask3(Void)
{
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
static _uint8 Flag = 0;

if(Flag == 0)
    1db8:	80 91 89 01 	lds	r24, 0x0189
    1dbc:	88 23       	and	r24, r24
    1dbe:	49 f4       	brne	.+18     	; 0x1dd2 <App_VoidTask3+0x22>
{
	DIO__CheckStatusSetPinValue(DIO__UINT8_PORTA,DIO__UINT8_PIN3,DIO__UINT8_HIGH);
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	63 e0       	ldi	r22, 0x03	; 3
    1dc4:	41 e0       	ldi	r20, 0x01	; 1
    1dc6:	0e 94 05 08 	call	0x100a	; 0x100a <DIO__CheckStatusSetPinValue>
	Flag= 1;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	80 93 89 01 	sts	0x0189, r24
    1dd0:	07 c0       	rjmp	.+14     	; 0x1de0 <App_VoidTask3+0x30>
}
else
{
	DIO__CheckStatusSetPinValue(DIO__UINT8_PORTA,DIO__UINT8_PIN3,DIO__UINT8_LOW);
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	63 e0       	ldi	r22, 0x03	; 3
    1dd6:	40 e0       	ldi	r20, 0x00	; 0
    1dd8:	0e 94 05 08 	call	0x100a	; 0x100a <DIO__CheckStatusSetPinValue>
	Flag= 0;
    1ddc:	10 92 89 01 	sts	0x0189, r1

}

}
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <__udivmodsi4>:
    1de6:	a1 e2       	ldi	r26, 0x21	; 33
    1de8:	1a 2e       	mov	r1, r26
    1dea:	aa 1b       	sub	r26, r26
    1dec:	bb 1b       	sub	r27, r27
    1dee:	fd 01       	movw	r30, r26
    1df0:	0d c0       	rjmp	.+26     	; 0x1e0c <__udivmodsi4_ep>

00001df2 <__udivmodsi4_loop>:
    1df2:	aa 1f       	adc	r26, r26
    1df4:	bb 1f       	adc	r27, r27
    1df6:	ee 1f       	adc	r30, r30
    1df8:	ff 1f       	adc	r31, r31
    1dfa:	a2 17       	cp	r26, r18
    1dfc:	b3 07       	cpc	r27, r19
    1dfe:	e4 07       	cpc	r30, r20
    1e00:	f5 07       	cpc	r31, r21
    1e02:	20 f0       	brcs	.+8      	; 0x1e0c <__udivmodsi4_ep>
    1e04:	a2 1b       	sub	r26, r18
    1e06:	b3 0b       	sbc	r27, r19
    1e08:	e4 0b       	sbc	r30, r20
    1e0a:	f5 0b       	sbc	r31, r21

00001e0c <__udivmodsi4_ep>:
    1e0c:	66 1f       	adc	r22, r22
    1e0e:	77 1f       	adc	r23, r23
    1e10:	88 1f       	adc	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	1a 94       	dec	r1
    1e16:	69 f7       	brne	.-38     	; 0x1df2 <__udivmodsi4_loop>
    1e18:	60 95       	com	r22
    1e1a:	70 95       	com	r23
    1e1c:	80 95       	com	r24
    1e1e:	90 95       	com	r25
    1e20:	9b 01       	movw	r18, r22
    1e22:	ac 01       	movw	r20, r24
    1e24:	bd 01       	movw	r22, r26
    1e26:	cf 01       	movw	r24, r30
    1e28:	08 95       	ret

00001e2a <__prologue_saves__>:
    1e2a:	2f 92       	push	r2
    1e2c:	3f 92       	push	r3
    1e2e:	4f 92       	push	r4
    1e30:	5f 92       	push	r5
    1e32:	6f 92       	push	r6
    1e34:	7f 92       	push	r7
    1e36:	8f 92       	push	r8
    1e38:	9f 92       	push	r9
    1e3a:	af 92       	push	r10
    1e3c:	bf 92       	push	r11
    1e3e:	cf 92       	push	r12
    1e40:	df 92       	push	r13
    1e42:	ef 92       	push	r14
    1e44:	ff 92       	push	r15
    1e46:	0f 93       	push	r16
    1e48:	1f 93       	push	r17
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	ca 1b       	sub	r28, r26
    1e54:	db 0b       	sbc	r29, r27
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	09 94       	ijmp

00001e62 <__epilogue_restores__>:
    1e62:	2a 88       	ldd	r2, Y+18	; 0x12
    1e64:	39 88       	ldd	r3, Y+17	; 0x11
    1e66:	48 88       	ldd	r4, Y+16	; 0x10
    1e68:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e6a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e6c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e6e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e70:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e72:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e74:	b9 84       	ldd	r11, Y+9	; 0x09
    1e76:	c8 84       	ldd	r12, Y+8	; 0x08
    1e78:	df 80       	ldd	r13, Y+7	; 0x07
    1e7a:	ee 80       	ldd	r14, Y+6	; 0x06
    1e7c:	fd 80       	ldd	r15, Y+5	; 0x05
    1e7e:	0c 81       	ldd	r16, Y+4	; 0x04
    1e80:	1b 81       	ldd	r17, Y+3	; 0x03
    1e82:	aa 81       	ldd	r26, Y+2	; 0x02
    1e84:	b9 81       	ldd	r27, Y+1	; 0x01
    1e86:	ce 0f       	add	r28, r30
    1e88:	d1 1d       	adc	r29, r1
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	de bf       	out	0x3e, r29	; 62
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	cd bf       	out	0x3d, r28	; 61
    1e94:	ed 01       	movw	r28, r26
    1e96:	08 95       	ret

00001e98 <_exit>:
    1e98:	f8 94       	cli

00001e9a <__stop_program>:
    1e9a:	ff cf       	rjmp	.-2      	; 0x1e9a <__stop_program>
